<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeJam</title>
  <subtitle>Hey, I‚Äôm Val, welcome to my blog!</subtitle>
  <link href="https://www.codejam.info/feed.xml" rel="self" />
  <link href="https://www.codejam.info/" />
  <id>https://www.codejam.info/</id>
  <updated>2022-04-09T18:03:46.460Z</updated>
  <author>
    <name>Val</name>
  </author>
  <entry>
    <title>How can rsync work on a host without shell access? ü§î</title>
    <link href="https://www.codejam.info/2022/04/rsync-without-shell-access.html" />
    <id>https://www.codejam.info/2022/04/rsync-without-shell-access.html</id>
    <updated>2022-04-09T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="tldr" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#tldr"><span>TLDR</span></a></h2>
<p>It does not. But sometimes, hosting providers use a trick so that you
don‚Äôt have shell access but rsync thinks it does‚Ä¶</p>
<h2 id="the-case-of-a-file-hosting-provider" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#the-case-of-a-file-hosting-provider"><span>The case of a file hosting provider</span></a></h2>
<p>I use a <a href="https://www.hetzner.com/storage/storage-box?country=us">Hetzner storage box</a>
for my backups. They have a super competitive offer that can get you 1
TB of storage for ‚Ç¨2.90 per month, or 5 TB for ‚Ç¨9.90!</p>
<p>On their <a href="https://www.hetzner.com/storage/storage-box?country=us">features page</a>
they list they support a number of protocols, including <strong>SFTP, SCP,
BorgBackup, and rsync over SSH</strong>.</p>
<p>All of those protocols happen over a SSH connection, yet Hetzner doesn‚Äôt
give us SSH access to the box:</p>
<pre><code class="hljs">$ ssh u123456@u123456.your-storagebox.de
PTY allocation request failed on channel 0

+-------------------------------------------------------------------------------+
| Your authentication works but we do not support interactive logins.           |
| For more information on how to access your Storage Box please check our Docs: |
| https://docs.hetzner.com/robot/storage-box/access/access-ssh-rsync-borg       |
+-------------------------------------------------------------------------------+

Connection to u123456.your-storagebox.de closed.
</code></pre>
<p>Let‚Äôs assume the following <code>~/.ssh/config</code> for further commands for
simplicity, so that we can just <code>ssh hetzner</code>:</p>
<pre><code class="hljs">Host hetzner
    HostName u123456.your-storagebox.de
    User u123456
</code></pre>
<p>While interactive SSH is not allowed, we can try running a command
directly:</p>
<pre><code class="hljs">$ ssh hetzner ls
file1
file2
file3
</code></pre>
<p>Interesting. What other commands do they allow?</p>
<pre><code class="hljs">$ ssh hetzner cp file3 file4
Command not found

$ ssh hetzner cat file1
Command not found

$ ssh hetzner du -sh .
Command not found

$ ssh hetzner pwd
Command not found

$ ssh hetzner whoami
Command not found

$ ssh hetzner rm file3
Command not found
</code></pre>
<p>Well, not much. So by what sorcery are SFTP, SCP, BorgBackup and rsync
able to work over this connection?</p>
<pre><code class="hljs">$ sftp hetzner
Connected to hetzner.
sftp&gt;

$ scp file4 hetzner:
file4

$ rsync -v file5 hetnzer:
file5

$ ssh hetzner ls file4 file5
file4
file5
</code></pre>
<p>To understand, let‚Äôs dig in the internals of SFTP, SCP, BorgBackup and
rsync.</p>
<h2 id="sftp" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#sftp"><span>SFTP</span></a></h2>
<p>SFTP is actually the odd one in the room. But we‚Äôll start with it
nevertheless.</p>
<p>Using <code>-v</code> to enable debug output gives one interesting line near the
end of the log:</p>
<pre><code class="hljs">$ sftp -v hetzner
...
debug1: Sending subsystem: sftp
...
</code></pre>
<p>It looks like we‚Äôre dealing with something called SSH subsystems. A good
way to find more about them is to search
<a href="https://serverfault.com/questions/354615/allow-sftp-but-disallow-ssh">how to enable SFTP but disallow SSH</a>.</p>
<p>Here, we meet our SSH server subsystem again, which is typically
configured on the server as:</p>
<pre><code class="hljs language-conf">Subsystem sftp internal-sftp
</code></pre>
<p>From the <a href="https://linux.die.net/man/1/ssh"><code>ssh(1)</code></a> man page, we can
see that <code>ssh -s</code> allows to pass a subsystem where we would normally
pass a command, e.g:</p>
<pre><code class="hljs">$ ssh hetzner -s sftp
</code></pre>
<p>This command hangs, meanings the remote server is waiting for SFTP
commands. Since it‚Äôs a binary protocol, we won‚Äôt be able to play with it
directly, but this is the connection over which a normal SFTP client
would be able to do its magic. Sweet!</p>
<h2 id="scp" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#scp"><span>SCP</span></a></h2>
<p>Let‚Äôs use the verbose/debug mode trick like we did previously with SFTP:</p>
<pre><code class="hljs">$ scp -v file4 hetzner:
...
debug1: Sending command: scp -v -t .
...
</code></pre>
<p>Here, the relevant part of the debug output is where <code>scp</code> sends the
remote command <code>scp -v -t .</code>.</p>
<p><code>-v</code> is for the verbose mode we specified, but if we look at the
<a href="https://linux.die.net/man/1/scp"><code>scp(1)</code></a> man page, there‚Äôs nothing
for <code>-t</code>.</p>
<p>We can look at
<a href="https://github.com/openssh/openssh-portable/blob/90452c8b69d065b7c7c285ff78b81418a75bcd76/scp.c#L575">the source code</a>
where they parse the command line arguments:</p>
<pre><code class="hljs language-c"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:    <span class="hljs-comment">/* &quot;from&quot; */</span>
    iamremote = <span class="hljs-number">1</span>;
    fflag = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:    <span class="hljs-comment">/* &quot;to&quot; */</span>
    iamremote = <span class="hljs-number">1</span>;
    tflag = <span class="hljs-number">1</span>;
</code></pre>
<p>So we learn that <code>-f</code> or <code>-t</code> are used internally to trigger the remote
mode. Because in our case we were sending a file to the remote host, we
entered <code>-t</code> mode, but if we were downloading a file form the host, we
would likely see <code>-f</code>. Let‚Äôs try:</p>
<pre><code class="hljs">$ scp -v hetzner:file4 .
...
debug1: Sending command: scp -v -f file4
...
</code></pre>
<p>So it‚Äôs through invoking <code>scp</code> on the remote host over SSH that our
local <code>scp</code> is able to transfer files. But how is that possible? We saw
earlier that basically every command but <code>ls</code> was returning ‚Äúcommand not
found‚Äù! And we can confirm <code>scp</code> is not present on the remote host:</p>
<pre><code class="hljs">$ ssh hetzner scp
Command not found
</code></pre>
<p>Or is it? Let‚Äôs try the full command that <code>scp</code> would normally run on
the remote host‚Ä¶</p>
<pre><code class="hljs">$ ssh hetzner scp -t .
$ ssh hetzner scp -f file4
</code></pre>
<p>Both those commands hang, meaning that Hetzner actually ran them, and we
now have a communication channel with the remote <code>scp</code> process!</p>
<p>So Hetzner disallowed us to run <code>scp</code> directly on the remote host, but
they whitelisted the specific arguments that <code>scp</code> would internally pass
to start the remote process. Smart.</p>
<h2 id="borgbackup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#borgbackup"><span>BorgBackup</span></a></h2>
<p>Now we know the pattern, it‚Äôs easy to confirm that they do the same
whitelisting for BorgBackup. We can see that <a href="https://borgbackup.readthedocs.io/en/stable/usage/serve.html"><code>borg serve</code></a>
is used to start the remote process.</p>
<pre><code class="hljs">$ ssh hetzner borg
Command not found

$ ssh hetzner borg --help
Command not found

$ ssh hetzner borg serve
</code></pre>
<p>The last command hangs, and again we exposed the way Borg internally
opens a communication channel with a Borg implementation on the remote
server!</p>
<h2 id="rsync" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#rsync"><span>rsync</span></a></h2>
<p>One more time, we leverage the verbose mode, this time with <code>-vv</code> to get
extra debug output, to see what rsync does internally:</p>
<pre><code class="hljs">$ rsync -vv file5 hetzner:
opening connection using: ssh hetzner rsync --server -vve.LsfxCIvu . .  (7 args)
delta-transmission enabled
file5
...
</code></pre>
<p>Sweet. Let‚Äôs try to run this manually:</p>
<pre><code class="hljs">$ ssh hetzner rsync
Command not found

$ ssh hetzner rsync --help
Command not found

$ ssh hetzner rsync --server -vve.LsfxCIvu . .
</code></pre>
<p>And again, Hetzner allowed the last command and we have an open
communication channel with the remote rsync process!</p>
<h3 id="digging-deeper-just-for-fun" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#digging-deeper-just-for-fun"><span>Digging deeper just for fun</span></a></h3>
<p>If you‚Äôre curious, there‚Äôs <a href="https://serverfault.com/questions/793669/what-is-the-rsync-option-logdtprze-ilsf-for/1096808">a Server Fault question</a>
about the meaning of the <code>-vve.LsfxCIvu</code> part.</p>
<p>The answers there were a pretty good start, but there was something
fishy and unexplained about the <code>.</code> in the middle, and I wasn‚Äôt quite
satisfied. So <a href="https://serverfault.com/a/1096808">I dug I bit more</a>.</p>
<p>In the case of <code>-vve.LsfxCIvu</code>, it‚Äôs actually equivalent to <code>-v -v -e '.LsfxCIvu'</code>,
because of the way <code>popt(3)</code>'s <code>POPT_ARG_STRING</code> parses command line
options (the library used by rsync to parse options), which is quite a
common behavior for Unix commands short options.</p>
<p>The trick is that <code>-e</code> is interpreted differently when we‚Äôre in
<code>--server</code> mode, in a way that‚Äôs not related to the <code>-e</code> client option
from the man page, that is normally the short version of <code>--rsh</code>,
allowing to specify the remote shell to use.</p>
<p>Setting <code>-e</code> or <code>--rsh</code> will have the options parser populate the
<code>shell_cmd</code> variable, but <a href="https://github.com/WayneD/rsync/blob/13c4019e94015b234697c75d9d3624862e962d3c/compat.c#L160">they hijack it in server mode</a>
to populate a <code>client_info</code> variable instead, which is used
<a href="https://github.com/WayneD/rsync/blob/13c4019e94015b234697c75d9d3624862e962d3c/compat.c#L134">differently</a>,
to define a number of internal protocol compatibility options.</p>
<p>We can look at <a href="https://github.com/WayneD/rsync/blob/f44e76b65c5819edb1a5b2fbbe732d5d214b35de/options.c#L2951">the code that creates the value for the <code>-e</code> option</a>
to get an idea of what those options do. In my case:</p>
<ul>
<li><code>L</code>: symlink time-setting support</li>
<li><code>s</code>: symlink iconv translation support</li>
<li><code>f</code>: <code>flist</code> I/O-error safety support</li>
<li><code>x</code>: <code>xattr</code> hardlink optimization not desired</li>
<li><code>C</code>: support checksum seed order fix</li>
<li><code>I</code>: support <code>inplace_partial</code> behavior</li>
<li><code>v</code>: use <code>varint</code> for <code>flist</code> &amp; compat flags; negotiate checksum</li>
<li><code>u</code>: include name of <code>uid 0</code> &amp; <code>gid 0</code> in the <code>id</code> map</li>
</ul>
<p>I didn‚Äôt really need to know that <code>-vve.LsfxCIvu</code> means
<code>-v -v -e '.LsfxCIvu'</code> and not <code>-v -v -e . -L -s -f -x -C -I -v -u</code>? No.
Does this makes my life any better? Not really. But there‚Äôs an invisible
force that pushes me to spend ridiculous amounts of time to make sense
of this kind of things.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#conclusion"><span>Conclusion</span></a></h2>
<p>SFTP, SCP, BorgBackup and rsync all work on a client/server model, where
the command is run both on the client <em>and</em> the server, and communicate
together over SSH. It means that the command needs to be installed on
the remote server as well, and allowed to be run over SSH.</p>
<p>rsync and BorgBackup can achieve great performance to synchronize files
on a storage server like Hetzner, because despite not having shell
access on that server, the specific commands used by those tools to
start a remote process are whitelisted.</p>
<p>For other tools like <a href="https://restic.net/">restic</a>, because Hetzner
doesn‚Äôt support their custom server protocol, they are constrained to
use the more generic (and limited) commands of SFTP, which doesn‚Äôt allow
optimal performance.</p>
<p>So if you were wondering how all those tools can run code on your
storage box despite you being denied shell access, now you know!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Make a bootable Windows USB from Linux in 2022</title>
    <link href="https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html" />
    <id>https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html</id>
    <updated>2022-04-09T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In the Linux world we‚Äôre used to <code>dd if=some-image.iso of=/dev/some-usb-key bs=4M</code>
and it Just Works‚Ñ¢.</p>
<p>It is because most Linux ISO <a href="https://askubuntu.com/a/1174287">are hybrid</a>
in a way where the same ISO can be used on a DVD, USB or SD card. It‚Äôs
not the case for the Windows ISO.</p>
<p>From Windows, <a href="https://rufus.ie/">Rufus</a> is the easiest solution, but if
I‚Äôm making a bootable Windows USB, maybe it‚Äôs because I don‚Äôt have a
Windows installation handy at the moment. üò¨</p>
<h2 id="the-traditional-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html#the-traditional-solution"><span>The traditional solution</span></a></h2>
<p>Before Windows shipped ISOs with files larger than 4 GB, making a
bootable Windows USB for EFI was as simple as format the key as FAT32,
and just copying over the contents of the ISO to it. Example:</p>
<pre><code class="hljs language-sh">fdisk /dev/sdX <span class="hljs-comment"># Make a single partition for the whole drive</span>
mkfs.fat -F32 /dev/sdX1 <span class="hljs-comment"># Format as FAT32</span>

mkdir usb windows <span class="hljs-comment"># Make some mount points</span>
mount /dev/sdX1 usb
mount windows.iso windows

cp -rv windows/* usb <span class="hljs-comment"># Copy contents</span>

umount windows
umount usb
</code></pre>
<p>If your motherboard‚Äôs EFI somehow supports exFAT out of the box, you can
replace <code>mkfs.fat</code> by <code>mkfs.exfat</code> in the above script and that should
work for you with files larger than 4 GB.</p>
<p>This didn‚Äôt work on any of the PCs I tried this on, but according to
<a href="https://www.tonymacx86.com/threads/guide-how-to-create-bootable-windows-usb-install-media-in-macos-and-linux.305580/">this post</a>,
some firmware have native UEFI boot support for exFAT, and
<a href="https://youtu.be/Nt58WrkgAzk">this video</a> is full of comments of people
booting the Windows installer from an exFAT drive using this method, so
it might work for you!</p>
<p>Otherwise, nowadays <a href="https://github.com/WoeUSB/WoeUSB">WoeUSB</a> seems
like a good solution to prepare Windows USB drives, but if you want to
keep it low-level, there‚Äôs an even easier solution!</p>
<h2 id="splitting-the-iso-in-two-partitions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html#splitting-the-iso-in-two-partitions"><span>Splitting the ISO in two partitions</span></a></h2>
<p>I found this quite unique solution in <a href="https://win10.guru/usb-install-media-with-larger-than-4gb-wim-file/">this blog post</a>.</p>
<p>It consists in making a 1 GB FAT32 partition on the USB, and using the
rest as NTFS, then copying everything from the ISO but the <code>sources</code>
directory to the FAT32 partition (only including <code>sources/boot.wim</code>),
and copying the whole ISO contents to the NTFS partition.</p>
<p>I‚Äôm not sure why this works, but it looks like Windows is able to handle
such a USB layout seamlessly, and it‚Äôs by far the easiest solution out
there, because it doesn‚Äôt require splitting the <code>install.wim</code> file, or
<a href="https://willhaley.com/blog/windows-installer-usb-linux/">installing and configuring</a>
<a href="https://help.ubuntu.com/community/Installation/iso2usb/diy/windows-installer-for-big-files">another bootloader</a>
to boot from a second partition (after all Windows installer‚Äôs
bootloader is already capable of doing that by itself!).</p>
<p>Here‚Äôs how to do it:</p>
<pre><code class="hljs language-sh">fdisk /dev/sdX <span class="hljs-comment"># Make a 1 GB partition and another partition with the rest</span>
mkfs.fat -F32 /dev/sdX1 <span class="hljs-comment"># Format as FAT32</span>
mkfs.ntfs --fast /dev/sdX2 <span class="hljs-comment"># Format as NTFS</span>

mkdir boot usb windows <span class="hljs-comment"># Make some mount points</span>
mount /dev/sdX1 boot
mount /dev/sdX2 usb
mount windows.iso windows

<span class="hljs-comment"># Copy everything but the `sources` directory</span>
find iso -mindepth 1 -maxdepth 1 -not -name sources -<span class="hljs-built_in">exec</span> cp -rv {} boot \;

<span class="hljs-comment"># Add `sources/boot.wim`</span>
mkdir boot/sources
cp iso/sources/boot.wim boot/sources

cp -rv iso/* usb <span class="hljs-comment"># Copy everything to the NTFS partition</span>

umount windows
umount usb
umount boot
</code></pre>
<p>I hope you found this trick useful! And I wish you a smooth Windows
installation. üéâ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>xfce4-terminal vs. foot</title>
    <link href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html" />
    <id>https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html</id>
    <updated>2022-04-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This is going to be a pretty personal piece, but I figured I‚Äôd share
either way. ü§∑</p>
<p>I‚Äôve been using <a href="https://docs.xfce.org/apps/terminal/start">xfce4-terminal</a>
as my terminal emulator on Linux for quite a while now, and I like it.
It‚Äôs lightweight, supports emojis and has transparency, and it just
works for me.</p>
<p>Recently I switched to Wayland, and saw that <a href="https://swaywm.org/">Sway</a>
(the Wayland alternative to <a href="https://i3wm.org/">i3</a>) was using
<a href="https://codeberg.org/dnkl/foot">foot</a> as their default terminal
emulator. I didn‚Äôt know about it, but it‚Äôs described as ‚Äúa fast,
lightweight and minimalistic Wayland terminal emulator‚Äù, which sounds
like music to my ears, so I decided to try it!</p>
<p>Here‚Äôs my feedback after using it for a couple of weeks, in particular
the issues I encountered and the fixes I found.</p>
<h2 id="incompatibility-with-vim-for-some-ctrl-key-combinations" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#incompatibility-with-vim-for-some-ctrl-key-combinations"><span>Incompatibility with Vim for some <kbd>Ctrl</kbd> key combinations</span></a></h2>
<p>The (deep) details are explained in <a href="https://github.com/vim/vim/issues/9014">this issue on Vim</a>,
<a href="https://codeberg.org/dnkl/foot/issues/849">this issue on foot</a>, and the
solution is documented <a href="https://codeberg.org/dnkl/foot/wiki#user-content-ctrl-key-breaks-input-in-vim">in foot‚Äôs wiki</a>.</p>
<p>Basically, doing some <kbd>Ctrl</kbd> key combinations can break other
<kbd>Ctrl</kbd> key mappings when using Vim inside foot.</p>
<p>This is due to the fact that <a href="https://github.com/vim/vim/issues/9014#issuecomment-965187794">foot uses CSI 27 escape sequences</a>
for some key combinations but keeps using ‚Äúlegacy‚Äù escape sequences for
others.</p>
<p><a href="https://invisible-island.net/xterm/manpage/xterm.html">xterm defines a feature <code>modifyOtherKeys</code></a>
defining 2 behaviors for dealing with escape sequences (level 1 and
level 2).</p>
<p>foot implements the level 1 but after seeing a CSI 27 escape sequence,
<a href="https://github.com/vim/vim/issues/9014#issuecomment-965388693">Vim assumes level 2</a>,
resulting in this incompatibility.</p>
<p>As mentioned <a href="https://codeberg.org/dnkl/foot/wiki#user-content-ctrl-key-breaks-input-in-vim">in foot‚Äôs wiki</a>,
I added the following to my <code>vimrc</code> to fix it:</p>
<pre><code class="hljs language-vim"><span class="hljs-comment">&quot;</span>
<span class="hljs-comment">&quot; Make Vim and foot collaborate.</span>
<span class="hljs-comment">&quot;</span>
<span class="hljs-comment">&quot; See &lt;https://codeberg.org/dnkl/foot/wiki#ctrl-key-breaks-input-in-vim&gt;</span>
<span class="hljs-comment">&quot; and &lt;https://github.com/vim/vim/issues/9014&gt;.</span>
<span class="hljs-comment">&quot;</span>
<span class="hljs-keyword">let</span> &amp;t_TI = <span class="hljs-string">&quot;\&lt;Esc&gt;[&gt;4;2m&quot;</span>
<span class="hljs-keyword">let</span> &amp;t_TE = <span class="hljs-string">&quot;\&lt;Esc&gt;[&gt;4m&quot;</span>
</code></pre>
<p>If you‚Äôre curious about <code>t_TI</code> and <code>t_TE</code>, you can read more about it
<a href="https://vi.stackexchange.com/a/27400">here</a>.</p>
<h2 id="bracketed-paste" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#bracketed-paste"><span>Bracketed paste</span></a></h2>
<p><a href="https://cirw.in/blog/bracketed-paste">Bracketed paste</a> allows terminal
emulator to communicate through escape sequences that content is being
pasted as opposed of being typed, allowing programs to handle the
content differently.</p>
<p>This is especially useful inside Vim to paste text without having to
care about turning on and off <code>paste</code> mode (for example to avoid messed
up indent when pasting code).</p>
<p>Vim doesn‚Äôt know that foot supports bracketed paste so it doesn‚Äôt work
by default. But as shown in <code>:help xterm-bracketed-paste</code>, we can hint
at it by adding this to our <code>vimrc</code>:</p>
<pre><code class="hljs language-vim"><span class="hljs-keyword">if</span> &amp;term =~ <span class="hljs-string">&quot;foot&quot;</span>
    <span class="hljs-keyword">let</span> &amp;t_BE = <span class="hljs-string">&quot;\e[?2004h&quot;</span>
    <span class="hljs-keyword">let</span> &amp;t_BD = <span class="hljs-string">&quot;\e[?2004l&quot;</span>
    exec <span class="hljs-string">&quot;set t_PS=\e[200~&quot;</span>
    exec <span class="hljs-string">&quot;set t_PE=\e[201~&quot;</span>
<span class="hljs-keyword">endif</span>
</code></pre>
<p>Not too bad!</p>
<p>This is for Vim specifically, but <a href="https://codeberg.org/dnkl/foot/issues/305">from looking at this issue</a>,
it looks like there might be other bracketed paste support issues with
other software that need to be addressed individually. Not a problem for
me for now‚Ä¶</p>
<h2 id="clicking-urls" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#clicking-urls"><span>Clicking URLs</span></a></h2>
<p>I took for granted to be able to <kbd>Ctrl</kbd> + click links in
terminal emulators. <a href="https://codeberg.org/dnkl/foot#user-content-urls">foot took a different approach</a>
to this with a keyboard-driven URL mode:</p>
<blockquote>
<p>Pressing <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd> enters ‚ÄúURL
mode‚Äù, where all currently visible URLs are underlined, and is
associated with a ‚Äújump-label‚Äù. The jump-label indicates the key
sequence (e.g. ‚ÄúAF‚Äù) to use to activate the URL.</p>
</blockquote>
<p>I love the ability to be <em>able</em> to navigate URLs using my keyboard only,
but I also like to have the <em>option</em> to click those links.</p>
<p>Sometimes the cost of pressing <kbd>Ctrl</kbd> + <kbd>Shift</kbd> +
<kbd>U</kbd>, identify the ‚Äújump-label‚Äù and typing it, feels higher than
the cost of switching to my trackpad and <kbd>Ctrl</kbd> + clicking the
URL I‚Äôm already looking at.</p>
<p>I probably would get used to it after a while if I <em>only</em> used foot, but
I also use iTerm2 on macOS where I <kbd>Command</kbd> + click the links,
and I like to keep shortcuts and habits somewhat consistent between all
the systems I use.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#conclusion"><span>Conclusion</span></a></h2>
<p>foot is indeed fast and lightweight, and it‚Äôs a great Wayland terminal
emulator.</p>
<p>Because it sets <code>TERM=foot</code> in the environment, many programs (like Vim)
don‚Äôt have built-in support for it (e.g. knowing how foot handles escape
sequences and bracketed paste), meaning that you might need to add extra
configuration to all the programs where you need this to add foot
support.</p>
<p>xfce4-terminal, for better or for worse, sets <code>TERM=xterm-256color</code>,
which means most programs know out of the box how to deal with it (as
long as it maintains proper xterm compatibility). In practice, that‚Äôs
probably why xfce4-terminal ‚Äújust works‚Äù for me.</p>
<p>Because of that, and the fact I personally see clicking links as a ‚Äúmust
have‚Äù and a keyboard mode to open links a ‚Äúnice to have‚Äù, and not the
other way around, I‚Äôm moving back to xfce4-terminal.</p>
<p>I like lightweight and minimalist programs, but I like convenience as
well. xfce4-terminal is the perfect balance for me, and it‚Äôs pretty
strongly on the lightweight side already!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Migrating .xmodmaprc to Wayland: remap arbitrary keys</title>
    <link href="https://www.codejam.info/2022/04/xmodmaprc-wayland.html" />
    <id>https://www.codejam.info/2022/04/xmodmaprc-wayland.html</id>
    <updated>2022-04-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently moved from X11 to Wayland, and one of my challenges that came with it was to find an alternative for my <code>.xmodmaprc</code>, that I used for
two purposes:</p>
<ol>
<li><a href="https://github.com/valeriangalliat/dotfiles/blob/1d2098a7da513dab195554997efaac22a0d77a02/x11/xmodmaprc">Invert the left <kbd>Alt</kbd> and <kbd>Ctrl</kbd> keys</a>.</li>
<li><a href="https://www.codejam.info/2019/06/software-fn-lock.html">Invert the behavior of the function keys</a>,
(to emulate <kbd>Fn Lock</kbd> which is not supported on my laptop).</li>
</ol>
<p>Since <code>xmodmap</code> is a X11 thing, I needed to find a Wayland alternative
to this.</p>
<p>It seems that the common answer is to directly modify the XKB database
in <code>/usr/share/X11/xkb</code>, but according to <a href="https://unix.stackexchange.com/a/698044/521108">this Stack Exchange post</a>
(referencing the <a href="https://xkbcommon.org/doc/current/md_doc_user_configuration.html">XKB docs</a>),
we learn that we can customize XKB symbols in
<code>~/.config/xkb/symbols/&lt;name&gt;</code> and XKB rules in
<code>~/.config/xkb/rules/evdev</code>. Great.</p>
<h2 id="inverting-alt-and-ctrl" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xmodmaprc-wayland.html#inverting-alt-and-ctrl"><span>Inverting <kbd>Alt</kbd> and <kbd>Ctrl</kbd></span></a></h2>
<p>This is something commonly done with <code>xmodmap</code>, and there‚Äôs very little
documentation of alternative solutions, but I found <a href="https://askubuntu.com/a/885047">this answer</a>
showing how to achieve that by modifying the XKB symbols in
<code>/usr/share/X11/xkb/symbols/ctrl</code>:</p>
<pre><code class="hljs language-conf">xkb_symbols &quot;swap_ralt_rctl&quot; {
    replace key &lt;RALT&gt; { [ Control_R, Control_R ] };
    replace key &lt;RCTL&gt; { [ Alt_R, Meta_R ] };
};
</code></pre>
<p>Because I just learnt I could modify stuff in <code>~/.config/xkb/symbols</code>
instead, I added this code to <code>~/.config/xkb/symbols/ctrl</code>.</p>
<p>Then in my Sway config (this will vary depending on your window manager
or desktop environment), I enabled the <code>ctrl:swap_ralt_rctl</code> option for
my keyboard:</p>
<pre><code class="hljs language-conf">input type:keyboard {
    xkb_options ctrl:swap_lalt_lctl
}
</code></pre>
<p>And this worked! <strong>But it shouldn‚Äôt have.</strong> I realized later (when
adding another option with a different name) that it is <strong>required</strong> to
also add a matching entry to the <code>xkb/rules/evdev</code> file. So why did it
work?</p>
<p>It turns out that there was already a native XKB option with that exact
name (in <code>/usr/share/X11/xkb/symbols/ctrl</code> and
<code>/usr/share/X11/xkb/rules/evdev</code>), and that‚Äôs why the name was
recognized. And unsurprisingly, that native option does exactly what I
want, so I could get rid of that <code>~/.config/xkb/symbols/ctrl</code> file
altogether and just use <code>ctrl:swap_lalt_lctl</code> in my Sway config. üòÜ</p>
<h2 id="emulating-fn-lock" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xmodmaprc-wayland.html#emulating-fn-lock"><span>Emulating <kbd>Fn Lock</kbd></span></a></h2>
<p>Now on to the hardest part. My <code>~/.xmodmaprc</code> used to look like this,
essentially, mapping <kbd>F5</kbd> to what <kbd>Fn</kbd> + <kbd>F5</kbd>
would do, and inversely, and so on for a number of function keys that I
use.</p>
<pre><code class="hljs language-xmodmap">keycode 71  = XF86MonBrightnessDown
keycode 232 = F5
keycode 72  = XF86MonBrightnessUp
keycode 233 = F6
keycode 73  = XF86ScreenSaver
keycode 160 = F7
keycode 76  = XF86AudioMute
keycode 121 = F10
keycode 95  = XF86AudioLowerVolume
keycode 122 = F11
keycode 96  = XF86AudioRaiseVolume
keycode 123 = F12
</code></pre>
<p>With a bit of trial and error, and looking at the
<code>/usr/share/X11/xkb/keycodes/evdev</code> file, I could figure what were the
corresponding XKB keys for the codes above:</p>
<pre><code class="hljs">&lt;FK01&gt; = 67;
&lt;FK02&gt; = 68;
&lt;FK03&gt; = 69;
&lt;FK04&gt; = 70;
&lt;FK05&gt; = 71;
&lt;FK06&gt; = 72;
&lt;FK07&gt; = 73;
&lt;FK08&gt; = 74;
&lt;FK09&gt; = 75;
&lt;FK10&gt; = 76;
&lt;FK11&gt; = 95;
&lt;FK12&gt; = 96;
...
&lt;MUTE&gt; = 121;
&lt;VOL-&gt; = 122;
&lt;VOL+&gt; = 123;
...
alias &lt;I121&gt; = &lt;MUTE&gt;;	// #define KEY_MUTE                113
alias &lt;I122&gt; = &lt;VOL-&gt;;	// #define KEY_VOLUMEDOWN          114
alias &lt;I123&gt; = &lt;VOL+&gt;;	// #define KEY_VOLUMEUP            115
...
&lt;I160&gt; = 160;		// #define KEY_COFFEE              152
&lt;I232&gt; = 232;		// #define KEY_BRIGHTNESSDOWN      224
&lt;I233&gt; = 233;		// #define KEY_BRIGHTNESSUP        225
</code></pre>
<p>Leading me to the write following <code>~/.config/xkb/symbols/ctrl</code>:</p>
<pre><code class="hljs language-conf">partial modifier_keys
xkb_symbols &quot;swap_fn_keys&quot; {
    replace key &lt;FK05&gt; { [ XF86MonBrightnessDown ] };
    replace key &lt;FK06&gt; { [ XF86MonBrightnessUp ] };
    replace key &lt;FK07&gt; { [ XF86ScreenSaver ] };
    replace key &lt;FK09&gt; { [ XF86TouchpadToggle ] };
    replace key &lt;FK10&gt; { [ XF86AudioMute ] };
    replace key &lt;FK11&gt; { [ XF86AudioLowerVolume ] };
    replace key &lt;FK12&gt; { [ XF86AudioRaiseVolume ] };
    replace key &lt;I232&gt; { [ F5 ] };
    replace key &lt;I233&gt; { [ F6 ] };
    replace key &lt;I160&gt; { [ F7 ] };
    replace key &lt;I199&gt; { [ F9 ] };
    replace key &lt;I121&gt; { [ F10 ] };
    replace key &lt;I122&gt; { [ F11 ] };
    replace key &lt;I123&gt; { [ F12 ] };
};
</code></pre>
<p>And this time because <code>swap_fn_keys</code> is a new entry, I did need to add
it to <code>~/.config/xkb/rules/evdev</code>. According to the
<a href="https://xkbcommon.org/doc/current/md_doc_user_configuration.html#autotoc_md17">XKB docs</a>,
this is done with the following pattern:</p>
<pre><code class="hljs language-conf">! option = symbols
  ctrl:swap_fn_keys = +ctrl(swap_fn_keys)

! include %S/evdev
</code></pre>
<p>And I can finally include it to my Sway keyboard options:</p>
<pre><code class="hljs language-conf">input type:keyboard {
    xkb_options ctrl:swap_lalt_lctl,ctrl:swap_fn_keys
}
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Google Apps Script: sorry, unable to open the file at this time</title>
    <link href="https://www.codejam.info/2022/04/google-apps-script-unable-to-open-the-file.html" />
    <id>https://www.codejam.info/2022/04/google-apps-script-unable-to-open-the-file.html</id>
    <updated>2022-04-01T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I was casually trying to open Google Apps Script on a spreadsheet of
mine:</p>
<figure class="center">
  <img alt="Google Apps Script opening from Google Sheets" src="https://www.codejam.info/img/2022/04/google-apps-script-open.png">
</figure>
<p>When I ran in the following error:</p>
<figure class="center">
  <img alt="Sorry, unable to open the file at this time, please check the address and try again" src="https://www.codejam.info/img/2022/04/google-apps-script-sorry.png">
</figure>
<p>Definitely not getting stuff done with Google Drive today. ü§¶‚Äç‚ôÄÔ∏è</p>
<p>A quick search for this error leads to <a href="https://support.google.com/docs/thread/99474963">this support thread</a>
where people report encountering the same problem and say it magically
goes away after a while without knowing why.</p>
<p>The thread was eventually locked without a reliable solution. Not good.</p>
<h2 id="the-reliable-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/google-apps-script-unable-to-open-the-file.html#the-reliable-solution"><span>The reliable solution</span></a></h2>
<p>Turns out the cause of the problem (in my case) was that I was logged in
multiple Google accounts in this browser. Google Apps Script was working
well for the default Google account, but trying to open it in any of my
other Google accounts would result in this error.</p>
<figure class="center">
  <img alt="Multiple Google accounts" src="https://www.codejam.info/img/2022/04/google-multiple-accounts.png">
  <figcaption>Not my actual emails obviously</figcaption>
</figure>
<p>I didn‚Äôt find a way to properly associate a new spreadsheet with a
Google Apps Script on a Google account that‚Äôs not the default one, so
the solution is to <strong>log in to that Google account in a private window
(or another browser) so that it‚Äôs the default account, and use Google
Apps Script from there</strong>.</p>
<p>After you associated a new Google Apps Scripts project to the
spreadsheet of your choice, you can come back to your main browser and
open <a href="https://script.google.com/">Google Apps Scripts</a> directly there.
Using the user switcher on the top right you can connect to the proper
account and manage your project from there. Note that the Google Apps
Scripts UI doesn‚Äôt handle multiple users very well and might return you
at any time to the default user.</p>
<p>I know, not a fantastic solution, but now you know!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Clearing cookies: the spec vs. the browser implementations</title>
    <link href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html" />
    <id>https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html</id>
    <updated>2022-03-25T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I was watching the awesome
<a href="https://www.youtube.com/playlist?list=PL1y1iaEtjSYiiSGVlL1cHsXN_kvJOOhu-">Stanford CS 253 course about web security</a>
by <a href="https://feross.org/">Feross</a>, that he graciously made available for
free on YouTube, and in <a href="https://youtu.be/0-q69vAYSwo?t=2132">lecture 4, at 35:32</a>,
one thing bugged me about <strong>clearing cookies</strong>.</p>
<blockquote>
<p>When you actually go to clear the cookies [‚Ä¶], you got to make sure
that all the other attributes are also exactly the same than when it
was set.</p>
<p>It‚Äôs a little bit jinky, because if you don‚Äôt do this, the browser
thinks that it‚Äôs actually a separate cookie with the same name.</p>
</blockquote>
<p>In code, using Node.js and Express, this looks like this:</p>
<pre><code class="hljs language-js">res.cookie(<span class="hljs-string">&#x27;sessionId&#x27;</span>, sessionId, {
  <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>,
  <span class="hljs-attr">maxAge</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> <span class="hljs-comment">// 30 days</span>
})

res.clearCookie(<span class="hljs-string">&#x27;sessionId&#x27;</span>, {
  <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>
})
</code></pre>
<p>Or on plain HTTP:</p>
<pre><code class="hljs language-http"><span class="hljs-attribute">Set-Cookie</span><span class="hljs-punctuation">: </span>sessionId=...; MaxAge=...; Path=/; HttpOnly; Secure; SameSite=Lax

<span class="hljs-attribute">Set-Cookie</span><span class="hljs-punctuation">: </span>sessionId=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure; SameSite=Lax
</code></pre>
<p>That was quite a gotcha moment for me because I‚Äôve been dealing with
cookies all my career as a web developer and I had no idea about that.
I‚Äôm also pretty sure I‚Äôve been using <code>HttpOnly</code>,  <code>Secure</code> and
<code>SameSite</code> when setting cookies in the past, and don‚Äôt remember having
issues when clearing them without those flags.</p>
<h2 id="the-express-documentation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#the-express-documentation"><span>The Express documentation</span></a></h2>
<p>The first step is to look at the <a href="https://expressjs.com/en/api.html#res.clearCookie"><code>res.clearCookie</code> documentation</a>.</p>
<p>Indeed, there‚Äôs a warning box with the following message:</p>
<blockquote>
<p>Web browsers and other compliant clients will only clear the cookie if
the given <code>options</code> is identical to those given to <code>res.cookie()</code>,
excluding <code>expires</code> and <code>maxAge</code>.</p>
</blockquote>
<p>There‚Äôs no source for what ‚Äúcompliant clients‚Äù means here though.</p>
<h2 id="the-spec" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#the-spec"><span>The spec</span></a></h2>
<p>By digging a bit, we find <a href="https://github.com/expressjs/express/issues/3874">this issue</a>
on the Express repo, from someone else that was apparently bugged by
this same warning a few years ago.</p>
<p>An Express maintainer jumps in with a link to the <a href="https://tools.ietf.org/search/rfc6265">HTTP cookies RFC</a>, in
particular the <a href="https://tools.ietf.org/search/rfc6265#section-5.3">storage model</a>
part:</p>
<blockquote>
<p>Ah, here is the specifics: <a href="https://tools.ietf.org/search/rfc6265#section-5.3">https://tools.ietf.org/search/rfc6265#section-5.3</a>.</p>
<p>I hope that helps! It‚Äôs the specification of exactly how clients are
supposed to set cookies, and outlines the algorithm of how to set the
cookie even when a given cookie already exists. It notes the following
have to match: <code>domain</code>, <code>path</code>, <code>httpOnly</code> if the <code>name</code> already
exists in the store (see step 11). The list of attributes in that spec
is not comprehensive, as additional attributes were added by other
specs, which I suspect define their own behaviors.</p>
</blockquote>
<p>And here‚Äôs the part 11 of the spec that was referred to here:</p>
<blockquote>
<ol start="11">
<li>
<p>If the cookie store contains a cookie with the same name,
domain, and path as the newly created cookie:</p>
<ol>
<li>
<p>Let old-cookie be the existing cookie with the same name,
domain, and path as the newly created cookie.  (Notice that
this algorithm maintains the invariant that there is at most
one such cookie.)</p>
</li>
<li>
<p>If the newly created cookie was received from a ‚Äúnon-HTTP‚Äù
API and the old-cookie‚Äôs http-only-flag is set, abort these
steps and ignore the newly created cookie entirely.</p>
</li>
<li>
<p>Update the creation-time of the newly created cookie to
match the creation-time of the old-cookie.</p>
</li>
<li>
<p>Remove the old-cookie from the cookie store.</p>
</li>
</ol>
</li>
</ol>
</blockquote>
<p>My understanding of the spec is that indeed <code>name</code>, <code>domain</code> and <code>path</code>
are all used to identify a specific cookie, so a cookie with the same
<code>name</code> but different <code>domain</code> or <code>path</code> won‚Äôt match. For <code>httpOnly</code> though,
it only mentions that if a non-HTTP API tries to expire an existing
<code>httpOnly</code> cookie (e.g. by doing <code>document.cookie = '...'</code>), this call
will be ignored, which makes sense.</p>
<p>But <code>httpOnly</code> is not used to match a cookie otherwise. A HTTP response
can expire a <code>httpOnly</code> cookie without setting <code>httpOnly</code> in the
<code>Set-Cookie</code> options, as long as the <code>name</code>, <code>domain</code> and <code>path</code> match.</p>
<p>As for additional attributes by newer specs like <code>secure</code> and
<code>sameSite</code>, no behavior seem to be documented but in practice they don‚Äôt
seem to matter, like <code>httpOnly</code>.</p>
<h2 id="real-life-example" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#real-life-example"><span>Real-life example</span></a></h2>
<p>Let‚Äôs build a server with an endpoint that sets a cookie with <code>secure</code>,
<code>httpOnly</code> and <code>sameSite</code>, and another endpoint that clears the cookie
without passing any option.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)
<span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>)

<span class="hljs-keyword">const</span> app = express()

app.use(cookieParser())

app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.json(req.cookies)
})

app.get(<span class="hljs-string">&#x27;/set&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.cookie(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, {
    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>,
    <span class="hljs-attr">maxAge</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>
  })

  res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)
})

app.get(<span class="hljs-string">&#x27;/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.clearCookie(<span class="hljs-string">&#x27;foo&#x27;</span>)
  res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)
})

app.listen(<span class="hljs-number">9999</span>)
</code></pre>
<p>Interestingly, it appears that both Chrome and Firefox allow cookies
with the <code>secure</code> attribute to be set on <code>http://localhost</code>, which is
convenient to test this feature. Note that on a ‚Äúreal‚Äù domain, you
would need to use HTTPS for <code>secure</code> cookies to be accepted.</p>
<p>If you browse to <code>http://localhost:9999</code> with Chrome or Firefox, you‚Äôll
see an empty JSON object (or whatever cookies already existed on
<code>localhost</code>).</p>
<p>By going to <code>/set</code>, a cookie will be set with
<code>foo=bar; MaxAge=...; Path=/; HttpOnly; Secure; SameSite=Lax</code>, and
redirect to <code>/</code>, showing that the cookie is set.</p>
<p>By going to <code>/clear</code>, the cookie will be cleared with <code>foo=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT</code>, then redirect to <code>/</code>. We can see
there that the cookie was effectively deleted, without needing to
specify other options.</p>
<p>If we repeat the test this time with a different domain or path, we can
see that they indeed need to match with the cookie that was previously
set in order to clear it.</p>
<h2 id="the-browsers-source-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#the-browsers-source-code"><span>The browsers source code</span></a></h2>
<p>We can confirm what we experienced by looking at the source code of
Chrome and Firefox.</p>
<p>Here‚Äôs the <a href="https://github.com/julienw/mozilla-central/blob/04464210145f8f7921447380d76efe0757243610/netwerk/cookie/nsCookieService.cpp#L5167">Firefox code that identifies a cookie from its
attributes</a>:</p>
<pre><code class="hljs language-cpp"><span class="hljs-keyword">if</span> (aHost.<span class="hljs-built_in">Equals</span>(cookie-&gt;<span class="hljs-built_in">Host</span>()) &amp;&amp;
    aPath.<span class="hljs-built_in">Equals</span>(cookie-&gt;<span class="hljs-built_in">Path</span>()) &amp;&amp;
    aName.<span class="hljs-built_in">Equals</span>(cookie-&gt;<span class="hljs-built_in">Name</span>())) {
  aIter = <span class="hljs-built_in">nsListIter</span>(entry, i);
  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
}
</code></pre>
<p>As we can see, it only uses the <code>host</code>, <code>path</code> and <code>name</code> to identify a
cookie.</p>
<p>On the Chrome side, <a href="https://source.chromium.org/chromium/chromium/src/+/main:net/cookies/canonical_cookie.h;drc=379f47d8daef415d929fe269e35e2bd432e1adb4;l=226">the code to test cookie equivalence</a>:</p>
<pre><code class="hljs language-cpp"><span class="hljs-comment">// Are the cookies considered equivalent in the eyes of RFC 2965.</span>
<span class="hljs-comment">// The RFC says that name must match (case-sensitive), domain must</span>
<span class="hljs-comment">// match (case insensitive), and path must match (case sensitive).</span>
<span class="hljs-comment">// For the case insensitive domain compare, we rely on the domain</span>
<span class="hljs-comment">// having been canonicalized (in</span>
<span class="hljs-comment">// GetCookieDomainWithString-&gt;CanonicalizeHost).</span>
<span class="hljs-comment">// If partitioned cookies are enabled, then we check the cookies have the same</span>
<span class="hljs-comment">// partition key in addition to the checks in RFC 2965.</span>
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEquivalent</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CanonicalCookie&amp; ecc)</span> <span class="hljs-keyword">const</span> </span>{
  <span class="hljs-comment">// It seems like it would make sense to take secure, httponly, and samesite</span>
  <span class="hljs-comment">// into account, but the RFC doesn&#x27;t specify this.</span>
  <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> Keep this logic in-sync with TrimDuplicateCookiesForKey().</span>
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">UniqueKey</span>() == ecc.<span class="hljs-built_in">UniqueKey</span>();
}

<span class="hljs-comment">// Returns a key such that two cookies with the same UniqueKey() are</span>
<span class="hljs-comment">// guaranteed to be equivalent in the sense of IsEquivalent().</span>
<span class="hljs-comment">// The `partition_key_` field will always be nullopt when partitioned cookies</span>
<span class="hljs-comment">// are not enabled.</span>
<span class="hljs-function">UniqueCookieKey <span class="hljs-title">UniqueKey</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>{
  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_tuple</span>(partition_key_, name_, domain_, path_);
}
</code></pre>
<p>Chrome also uses the <code>host</code> (<code>domain</code>), <code>path</code> and <code>name</code> to identify a
cookie.</p>
<p>Interestingly, they mention that ‚Äúit seems like it would make sense to
take <code>secure</code>, <code>httpOnly</code>, and <code>sameSite</code> into account, but the RFC
doesn‚Äôt specify this‚Äù.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#conclusion"><span>Conclusion</span></a></h2>
<p>Cookies are identified by their <code>name</code>, <code>domain</code> and <code>path</code>. On a single
site, you can have multiple cookies with the same <code>name</code> if their
<code>domain</code> or <code>path</code> differ.</p>
<p>This means that at the time of expiring a cookie, the <code>name</code>
(obviously) as well as <code>domain</code> and <code>path</code> must be the same as when the
cookie was originally set, otherwise it will be treated as a different
cookie and won‚Äôt result in the intended cookie being cleared.</p>
<p>Other attributes like <code>secure</code>, <code>httpOnly</code> and <code>sameSite</code> are not used
to distinguish cookies. They are only <em>attributes</em> of an existing cookie
(addressed by its <code>name</code>, <code>domain</code> and <code>path</code> as we just saw) and you
don‚Äôt need to specify them when clearing a cookie (although it doesn‚Äôt
hurt to include them, but they don‚Äôt have to match either). Both Chrome
and Firefox are currently consistent in that implementation.</p>
<p>That being said, it seems that the Chrome team believes that it would
make sense to also use <code>secure</code>, <code>httpOnly</code> and <code>sameSite</code> to address
cookies, even though they don‚Äôt currently implement it that way, since
the RFC doesn‚Äôt specify this. If this was to change in the future, and
because specifying those attributes when clearing a cookie doesn‚Äôt cause
issues with the current implementation, <strong>I would advise to specify all
the attributes when clearing the cookie</strong> just to be on the safe side.</p>
<p>In my example code earlier, I would recommend to rewrite it as:</p>
<pre><code class="hljs language-js">app.get(<span class="hljs-string">&#x27;/set&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.cookie(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, {
    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>,
    <span class="hljs-attr">maxAge</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>
  })

  res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)
})

app.get(<span class="hljs-string">&#x27;/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.clearCookie(<span class="hljs-string">&#x27;foo&#x27;</span>, {
    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>
  })

  res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)
})
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1507444723631407113">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Delete ghost volume from Time Machine snapshot</title>
    <link href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html" />
    <id>https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html</id>
    <updated>2022-03-08T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This is the blog post version of
<a href="https://apple.stackexchange.com/a/438077/452681">my answer to this Stack Exchange question</a>.</p>
<h2 id="why-i-needed-to-remove-a-volume-backup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html#why-i-needed-to-remove-a-volume-backup"><span>Why I needed to remove a volume backup</span></a></h2>
<p>Recently, the external hard drive where I kept some of my video footage
<a href="https://twitter.com/valeriangalliat/status/1491106467310489604">died</a>.</p>
<p>But as I‚Äôm a good citizen and I have a backup (and restore) strategy,
all the data was also mirrored on my Time Machine drive! Yay!</p>
<p>So I proceeded to restore it to another internal drive where I had
enough room.</p>
<p>This could be the end of the story. But Time Machine kept persisting the
backups of that old external drive in all further snapshots.</p>
<p>This is a nice feature, for example if your external drive is unplugged
for a few days, you don‚Äôt want Time Machine to remove it from your
backup history. But in my case, that drive was actually <em>dead</em> and now I
restored it, I didn‚Äôt need this redundant ‚Äúphantom‚Äù backup.</p>
<p>It turns out you can‚Äôt easily delete arbitrary directories in a Time
Machine backup, and the <code>tmutil delete</code> command <a href="https://apple.stackexchange.com/q/333767/452681">doesn‚Äôt let you</a>
delete granular parts of a backup. It‚Äôs either <a href="https://apple.stackexchange.com/a/357114/452681">a whole snapshot, machine directory or backup store</a>.</p>
<p>Luckily, by messing around with the <code>tmutil</code> command, and because I
<a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#finalizing">already played a bit with it</a>,
in the past I figured a way to hack it to remove a specific ghost volume
from a backup!</p>
<h2 id="the-theory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html#the-theory"><span>The theory</span></a></h2>
<p>Time Machine has in its state a directory <code>Video</code> (in my case) in the
backup snapshots, which it associates with <code>/Volumes/Video</code>, or more
specifically, the original disk UUID behind this mount point. Because
that disk is dead, this UUID is never to be seen again. But Time Machine
can‚Äôt know that. From its perspective, it‚Äôs just like this external
drive is unplugged, and it‚Äôs a good thing that it doesn‚Äôt remove it form
backups!</p>
<p>So, if we tell Time Machine that the <code>Video</code> backup directory is now
associated with <em>another</em> disk (that actually exists), it will
effectively put the new backup in it, instead of carrying over the
backup of the dead disk.</p>
<p>And even better, if we associate a disk that is <em>excluded</em> from Time
Machine backups, it will delete the <code>Video</code> directory altogether from
new snapshots!</p>
<h2 id="removing-the-ghost-backup-directory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html#removing-the-ghost-backup-directory"><span>Removing the ghost backup directory</span></a></h2>
<p>First, we need to identify a volume that‚Äôs already excluded from Time
Machine. Go in the Time Machine preferences, and in <kbd>Options‚Ä¶</kbd>, see if
you have an excluded volume. It could be an internal drive that you
explicitly excluded from backups, or an external drive that you never
explicitly included in backups.</p>
<p>If you don‚Äôt have any excluded disk (it needs to be a disk, not a
subdirectory), you can plug a random USB stick or SD card or something
similar.</p>
<p>Let‚Äôs pretend that your excluded disk is a USB stick, in <code>/Volumes/USB</code>,
and I‚Äôm trying to get rid of the <code>Video</code> directory inside my future backup
snapshots:</p>
<pre><code class="hljs language-sh">sudo tmutil associatedisk /Volumes/USB <span class="hljs-string">&quot;/Volumes/{TimeMachineDrive}/Backups.backupdb/{MachineDirectory}/Latest/Video&quot;</span>
</code></pre>
<p>Now Time Machine thinks that the <code>Video</code> directory is associated with
<code>/Volumes/USB</code>, which is excluded, and so, it will exclude it from
future backups!</p>
<p>The history of the dead <code>Video</code> drive will still be present in the older
snapshots, but Time Machine will be able to reclaim the space from it in
the future because that ‚Äúghost‚Äù volume is not being referenced anymore
in the newer backups.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1501544474081640456">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>3 months of poison ivy, a story üåø</title>
    <link href="https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html" />
    <id>https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html</id>
    <updated>2022-02-25T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Long story short, if you were walking through tall herbs in the woods,
removing weeds from your garden or anything like this, and a few days to
a week later <strong>you get a itchy rash</strong> somewhere on your body that was
exposed at the time, then it might be <em>poison ivy</em> (that is, if you live
in a part of the world where there‚Äôs poison ivy, e.g. North America).</p>
<p>If it‚Äôs bad enough that it doesn‚Äôt go away with the typical
over-the-counter treatments, <em>insist to get an appointment with a real
dermatologist (regardless if we‚Äôre in the middle of a global pandemic)
to get properly diagnosed and treated</em>. They might prescribe you a month
of oral steroids to properly get rid of it.</p>
<p>Or don‚Äôt do that and experience a taste of hell for 3 months like I did.</p>
<h2 id="things-i-learnt-about-poison-ivy" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html#things-i-learnt-about-poison-ivy"><span>Things I learnt about poison ivy</span></a></h2>
<ul>
<li>It‚Äôs an innocent-looking plant.</li>
<li>There‚Äôs not always a sign to warn you it‚Äôs around your path
(especially if you like to walk off tracks).</li>
<li>If you suspect you‚Äôve been in contact with it, or if you‚Äôve been in
contact with a bunch of random plants in the wild really, <strong>wash your
hands ASAP, in a lake, a river of whatever</strong>, that can help a lot and
could save you a nightmare.</li>
<li>That said poison ivy don‚Äôt usually grow below knee or waist level so
you shouldn‚Äôt be that worried about it unless you‚Äôre wearing shorts or
putting your hands close to the ground.</li>
<li>If you suspect a piece of clothing, gear or equipment has been in
contact with poison ivy, wash it thoroughly as the ‚Äúpoison‚Äù usually
stays on things it touched until washed with soap, and stays potent
for up to two years (meaning that if you touch that thing again you‚Äôll
get poison ivy again).</li>
<li>Depending on how bad was the contact with the plant, steroid creams
you can get at the pharmacy without prescription can be useless, and
even the stronger creams you can get with a prescription won‚Äôt
necessarily work, that‚Äôs why the dermatologist I ended up seeing after
3 months told me she usually prescribe 1 month of oral steroid
treatment for patients infected by poison ivy. You won‚Äôt have to bear
with the itchiness during that time plus it‚Äôs pretty much guaranteed
to fully get rid of it.</li>
<li><a href="https://www.doc2us.com/are-steroid-creams-harmful-the-unfounded-fear">Don‚Äôt be afraid of steroid creams</a>.
The side effects steroids are feared for are only for long use
(months), if a doctor tells you to put a cream for a few weeks to
treat a condition, it‚Äôs worth it.</li>
</ul>
<h2 id="the-story-with-timings" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html#the-story-with-timings"><span>The story with timings</span></a></h2>
<p>Back in May 2020, right after the first COVID confinement in Canada, I
go climb in a spot in the forest with my friend. I even recorded a vlog
that day!</p>
<figure class="video">
  <iframe src="https://www.youtube.com/embed/A7YC15AVGow" allowfullscreen></iframe>
</figure>
<p>Near the end of the day we decide to scale the hill we were close to to
get some views at the top, but since there wasn‚Äôt a path we just crossed
through the woods. You can see that at 36 minutes in the video. There
were some steep parts at times that definitely required me to touch the
ground with my hands. I suspect that‚Äôs where I got in contact with
poison ivy.</p>
<p>To make the matter worst, since we climbed all day and I hadn‚Äôt climbed
in a while, my fingers and hands had many cuts on them by the time we
did that hike. And because my hands were hurt, I didn‚Äôt like the idea of
putting them in water to wash them as we were near a river later on
(unlike my friend did, which probably saved him a lot of trouble), so I
only washed my hands hours later when I got home.</p>
<h3 id="june" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html#june"><span>June</span></a></h3>
<p>A week later, my hands start itching in a way that‚Äôs really unusual. I
wait a few days thinking it‚Äôll just go away but it gets worst. So I go
to the pharmacy where they tell me it‚Äôs likely poison ivy, explain me
what it is because I‚Äôve never heard of it at this point, and told me to
get an over-the-counter hydrocortisone cream to put every day for a week
or so.</p>
<p>For the whole month, I get on and off symptoms of itchiness, redness and
raised bumps over my hands. Sometimes it feels like it‚Äôs going away and
sometimes it‚Äôs getting worst. It made life quite challenging because
it‚Äôs basically something that I was constantly concerned about!</p>
<h3 id="july" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html#july"><span>July</span></a></h3>
<p>Early July, I have a call with an online doctor who tells me I need to
put a stronger steroid cream for at least 7 days, and prescribes me one.
No symptoms while I put the cream every morning, but sadly two days
after I stopped the treatment, I start to get symptoms again. They
get worst over time to the point where I decide to put the cream again
for 2 weeks this time. But again, as I stop the treatment, the symptoms
slowly creep back.</p>
<p>I call an online doctor again who tells me it might be some kind of
eczema, but I don‚Äôt need to see a dermatologist just yet (even though I
kept asking to see a real doctor to get treated properly, I mean it‚Äôs
been two months I‚Äôm dealing with this at that point). He tells me to put
moisturizing cream 4 times a day, and also prescribes me an even
stronger steroid cream, but I don‚Äôt use it right away because I didn‚Äôt
really like the idea to depend on steroids for my hands to feel normal.</p>
<p>Near the end of July the symptoms are still bad so I finally oblige to
put the steroids cream. Apparently for this kind short period usage,
<a href="https://www.doc2us.com/are-steroid-creams-harmful-the-unfounded-fear">it‚Äôs fine</a>.
Another 2 weeks of putting the cream every morning.</p>
<h3 id="august" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html#august"><span>August</span></a></h3>
<p>Guess what happens early August right after the 2 weeks treatment is
over? Yeap, itchiness comes back. And it gets pretty bad towards the
middle of the month. I don‚Äôt know if I‚Äôm experiencing poison ivy rebound
one more time or if it‚Äôs now steroid withdrawal symptom?</p>
<p>Another call with an online doctor who decides that I have <em>dyshidrotic
eczema</em> and finally agrees to send me to a proper dermatologist (thank
you). He also tells me to put a moisturizing cream specialized for
eczema (I used the <a href="https://www.cetaphil.ca/product/cetaphil-pro-restoraderm-eczema-soothing-moisturizer">Cetaphil PRO</a>)
and I can say it relieved the itching quite well in comparison to
cheaper moisturizers.</p>
<p>Finally he prescribes me an even stronger steroid cream
(mometasone) that I need to put every morning for 5 days, keeping it on
my hands for 20 minutes before rinsing it away. Not my favorite kind of
morning routine if you ask me.</p>
<p>On the 20th of August I finally get my dermatologist appointment, but by
this time the symptoms are not as bad as they were in the past. She
tells me it was definitely poison ivy and that the reason it lasted so
long for me was because the creams are not that good at treating it. She
normally prescribes 1 month of oral steroids for poison ivy treatment
which pretty much guarantees to get rid of it definitively (on top of
removing 100% of the annoying symptoms during that time). Good to know
if it ever happens to me again!</p>
<p>After that I kept using the moisturizing cream occasionally for a few
months as my skin was still dryer than usual, but itching was basically
gone and I could live a happy life again. Eventually I stopped the
moisturizer as my hands were fully back to normal.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/02/3-months-of-poison-ivy-a-story.html#conclusion"><span>Conclusion</span></a></h2>
<p>I already put the conclusion in the very beginning of this article
because I don‚Äôt really think anyone cares about the rest of the story.
That was just some old notes I had, and I didn‚Äôt want to just delete
them as I figured they might be useful.</p>
<p>Typically, I looked up online about this stuff every single day to
figure what was wrong with my hands, and it was hard to get an idea of
what treatment I needed and what to expect. Obviously this can vary a
lot but I think reading a concrete example like this one can help
getting an idea of what to expect, and especially not making the same
mistakes.</p>
<p>In this COVID world it can be hard to see a doctor in real life, but I
can‚Äôt stress how important it is to meet a real professional to address
seriously this kind of issue, especially if they persist after the basic
pharmacy treatments or other suggestions found on the internet.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>A second .gitignore that ignores itself ü§Ø</title>
    <link href="https://www.codejam.info/2022/01/a-second-gitignore-that-ignores-itself.html" />
    <id>https://www.codejam.info/2022/01/a-second-gitignore-that-ignores-itself.html</id>
    <updated>2022-01-26T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>When collaborating on a project, it‚Äôs quite frequent that I create extra
scratch files to fiddle locally. This is your ad hoc <code>test.js</code> and alike.</p>
<p>I usually don‚Äôt want to commit those files, and I don‚Äôt necessarily want
to add them to the project‚Äôs <code>.gitignore</code> either, because they‚Äôre only
a product of my local workflow and that shouldn‚Äôt leak in the shared
repository. What I wanted was like <strong>a second <code>.gitignore</code> file</strong>, but
that wouldn‚Äôt be committed to the repository, essentially <em>ignoring
itself</em> (and my scratch files).</p>
<p>For a long time I‚Äôve just let those files unstaged, carefully avoiding
them every time I make a commit (never using <code>git add .</code> and such). But
there is actually a better way.</p>
<h2 id="all-the-ways-to-ignore-files-in-git" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/01/a-second-gitignore-that-ignores-itself.html#all-the-ways-to-ignore-files-in-git"><span>All the ways to ignore files in Git</span></a></h2>
<p>As mentioned in the <a href="https://git-scm.com/docs/gitignore"><code>.gitignore</code> man page</a>,
there‚Äôs actually multiple layers for Git to ignore files in a repository:</p>
<ul>
<li>Patterns passed as command line arguments.</li>
<li>Patterns from the <code>.gitignore</code> file (most common way).</li>
<li>Patterns from <code>.git/info/exclude</code>.</li>
<li>Patterns from the file configured in <code>core.excludesFile</code>, and
defaulting to <code>~/.config/git/ignore</code>.</li>
</ul>
<h2 id="introducing-git-info-exclude" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/01/a-second-gitignore-that-ignores-itself.html#introducing-git-info-exclude"><span>Introducing <code>.git/info/exclude</code></span></a></h2>
<p>I didn‚Äôt know it existed, but it was there that whole time! Every Git
repo have an empty <code>.git/info/exclude</code> file, which works exactly like a
<code>.gitignore</code> file, except it‚Äôs not committed, and it‚Äôs only local to
the current copy of the repository.</p>
<p>That‚Äôs exactly what I wanted! I can add my scratch files to it and I
don‚Äôt have to worry about accidentally committing them anymore, and I
can finally <code>git add .</code> again!</p>
<h2 id="the-original-trick-with-core-excludesfiles" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/01/a-second-gitignore-that-ignores-itself.html#the-original-trick-with-core-excludesfiles"><span>The original trick with <code>core.excludesFiles</code></span></a></h2>
<p>The fun thing is that I only learnt about <code>.git/info/exclude</code> while
writing this article, I actually didn‚Äôt go that far in my prior
research. I first discovered the <code>core.excludesFile</code> option, which
allowed me to solved my problem, so I stopped at that. It‚Äôs only when I
started to write about it that I noticed there was an even better
option. This is yet another example of the power of writing, and the
reason why I like to share every little bit of knowledge like this.</p>
<p>Anyways, my original trick was to use the <code>core.excludesFile</code> option. As
we saw, we can configure it to an additional <code>.gitignore</code> file that can
live anywhere on the system. If set in the global Git config
(<code>git config --global core.excludesFile</code>, targeting <code>~/.gitconfig</code>),
it‚Äôll affect every repository, but if set in the local Git config (<code>git config core.excludesFile</code>, targeting <code>.git/config</code>) in a specific repo,
we can add a second <code>.gitignore</code> file only for that repo!</p>
<p>So what I did was:</p>
<pre><code class="hljs language-sh">git config core.excludesFile .valignore
</code></pre>
<p>And I added a new file, <code>.valignore</code>, with the following content:</p>
<pre><code class="hljs language-gitignore">/.valignore
/test.js
</code></pre>
<p>Effectively ignoring itself, as well as my scratch file!</p>
<p>The downside is there can only be a single <code>core.excludesFile</code>, meaning
this is potentially shadowing a global <code>core.excludesFile</code>. If you rely
on that, e.g. you use <code>~/.config/git/ignore</code>, you would have to
duplicate its content in the <code>.valignore</code> or whatever you called it.</p>
<p>But as I mentioned earlier, <code>.git/info/exclude</code> is an even better
solution for this problem, so you can actually have it all!</p>
<p>Happy hacking, and keep learning! üòú</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1486539328373374977">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Static DHCP server on Arch Linux in 2021, two ways</title>
    <link href="https://www.codejam.info/2021/11/static-dhcp-server-arch-linux.html" />
    <id>https://www.codejam.info/2021/11/static-dhcp-server-arch-linux.html</id>
    <updated>2021-11-26T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Turns out it‚Äôs 2021 and configuring a static server on at least some
Linux flavours isn‚Äôt as easy as editing <code>/etc/resolv.conf</code> anymore, at
least if you want it to persist across reboots.</p>
<p>Depending on your network stack, I‚Äôll suggest two ways, one might work
for you, both work in my case.</p>
<p>In <code>/etc/resolvconf.conf</code>, add the following:</p>
<pre><code class="hljs">name_servers=&quot;1.1.1.1 1.0.0.1&quot;
</code></pre>
<p>Or in <code>/etc/dhcpcd.conf</code>, add the following:</p>
<pre><code class="hljs">static domain_name_servers=1.1.1.1 1.0.0.1
</code></pre>
<p>Obviously replace <code>1.1.1.1</code> and <code>1.0.0.1</code> by the DNS servers of you
choosing.</p>
<p>But that being said, as far as I‚Äôm concerned, I went with the third
option which is to configure it at the router level! This way every
device that connects to it benefits from this configuration if they
don‚Äôt override it.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Emoji displayed as monochrome symbol? ü§î The Unicode variation selector</title>
    <link href="https://www.codejam.info/2021/11/emoji-variation-selector.html" />
    <id>https://www.codejam.info/2021/11/emoji-variation-selector.html</id>
    <updated>2021-11-19T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Are you wondering why some specific emoji are sometimes displayed as
black and white symbols instead of a colored glyph? And even more
confusing, you notice it happens on one device but looks perfect on
another? Look no further, you‚Äôll find all the answers in this article!</p>
<h2 id="tldr" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#tldr"><span>TLDR</span></a></h2>
<p>Some symbols can be displayed either as text (black and white glyph) or
as a color emoji. Using Unicode <a href="https://en.wikipedia.org/wiki/Variation_Selectors_(Unicode_block)">variation selectors</a>,
we can hint at whether to use one or the other, but when no variation
selector is specified, it‚Äôs up to the system to decide which one to
pick, introducing inconsistencies.</p>
<p>Most emoji pickers will include the emoji variation selector to symbols
that would otherwise be ambiguous, but others won‚Äôt and that‚Äôs probably
how you ended up here.</p>
<p>If you want to make sure your emoji are always displayed in their color
version, the default macOS emoji picker does just that, otherwise
copy/pasting from <a href="https://emojipedia.org/">Emojipedia</a> also works, as
they both don‚Äôt leave room for ambiguity.</p>
<h2 id="the-story" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#the-story"><span>The story</span></a></h2>
<p>I initially noticed that some emoji that I added from my Linux machine
using <a href="https://github.com/valeriangalliat/dmenumoji">dmenumoji</a> or <a href="https://github.com/fdw/rofimoji"><code>rofimoji</code></a>
were displayed as black and white symbols on macOS and Android.</p>
<p>For a while I just fixed them by inserting them again from another
device, or copy/pasting them from <a href="https://emojipedia.org/">Emojipedia</a>,
but I eventually got tired of this and decided to understand why this
was happening in the first place.</p>
<h2 id="what-i-learnt" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#what-i-learnt"><span>What I learnt</span></a></h2>
<p>Unicode defines two <a href="https://en.wikipedia.org/wiki/Variation_Selectors_(Unicode_block)">variation selector characters</a>,
<a href="https://codepoints.net/U+FE0E">U+FE0E</a> and <a href="https://codepoints.net/U+FE0F">U+FE0F</a>,
also respectively known as VS15 and VS16.</p>
<p>When VS15 is appended to a symbol, it forces it to be displayed as text
(black and white glyph). Contrarily, when VS16 is appended, it forces
the color version to be displayed (emoji).</p>
<p>Now here‚Äôs the fun part. What happens when a symbol has both a text and
a color variant, and no variant selector is specified?
<a href="https://en.wikipedia.org/wiki/Emoticons_(Unicode_block)#Variant_forms">According to Wikipedia</a>,
the emoji variant is selected:</p>
<blockquote>
<p>If there is no variation selector appended, the default is the
emoji-style.</p>
</blockquote>
<p>But <a href="https://www.codejam.info/2021/11/emoji-variation-selector.html#concrete-tests">in reality</a>, it appears that macOS and Android
will in fact default to the text symbol if there‚Äôs one available! So
should we just append the VS16 code point on every single emoji? From
<a href="https://emojipedia.org/variation-selector-16/">its Emojipedia page</a>:</p>
<blockquote>
<p>[VS16 is] an invisible code point which specifies that the preceding
character should be displayed with emoji presentation. Only required
if the preceding character defaults to text presentation.</p>
</blockquote>
<p>Alright. But we just saw that this is system-specific. Still, how do we
know which character <em>can</em> default to a text presentation? An
interesting hint is in the <a href="https://unicode.org/faq/vs.html">unicode.org FAQ</a>.</p>
<blockquote>
<p><strong>What variation sequences are valid?</strong></p>
<p>Only those listed in <a href="http://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt"><code>StandardizedVariants.txt</code></a>,
<a href="http://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt"><code>emoji-variation-sequences.txt</code></a>,
or the registered sequences listed in the <a href="http://www.unicode.org/ivd/">Ideographic Variation Database (IVD)</a>.</p>
</blockquote>
<p>Here, we specifically care about <a href="http://www.unicode.org/Public/emoji/5.0/emoji-variation-sequences.txt"><code>emoji-variation-sequences.txt</code></a>,
the other sources not being related to emoji. This file lists all the
symbols that have both a monochrome glyph and a color emoji available.</p>
<p>It‚Äôs only for those symbols that we need to append the VS16 code point
to make sure that they‚Äôre displayed consistently on every system. And it
looks like that‚Äôs precisely what the macOS and Android emoji pickers
seem to be doing!</p>
<h2 id="concrete-tests" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#concrete-tests"><span>Concrete tests</span></a></h2>
<p>Let‚Äôs look at a few concrete examples to highlight the inconsistencies.</p>
<table>
<thead>
<tr>
<th>Unicode code points</th>
<th>Command</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+1F60A</td>
<td><code>printf '\U0001f60A'</code></td>
<td>üòä</td>
</tr>
<tr>
<td>U+1F60A, U+FE0E</td>
<td><code>printf '\U0001f60A\ufe0e'</code></td>
<td>üòäÔ∏é</td>
</tr>
<tr>
<td>U+1F60A, U+FE0F</td>
<td><code>printf '\U0001f60A\ufe0f'</code></td>
<td>üòäÔ∏è</td>
</tr>
<tr>
<td>U+1F610</td>
<td><code>printf '\U0001f610'</code></td>
<td>üòê</td>
</tr>
<tr>
<td>U+1F610, U+FE0E</td>
<td><code>printf '\U0001f610\ufe0e'</code></td>
<td>üòêÔ∏é</td>
</tr>
<tr>
<td>U+1F610, U+FE0F</td>
<td><code>printf '\U0001f610'\ufe0f</code></td>
<td>üòêÔ∏è</td>
</tr>
<tr>
<td>U+2639</td>
<td><code>printf '\u2639'</code></td>
<td>‚òπ</td>
</tr>
<tr>
<td>U+2639, U+FE0E</td>
<td><code>printf '\u2639\ufe0e'</code></td>
<td>‚òπÔ∏é</td>
</tr>
<tr>
<td>U+2639, U+FE0F</td>
<td><code>printf '\u2639\ufe0f'</code></td>
<td>‚òπÔ∏è</td>
</tr>
<tr>
<td>U+270D</td>
<td><code>printf '\u270d'</code></td>
<td>‚úç</td>
</tr>
<tr>
<td>U+270D, U+FE0E</td>
<td><code>printf '\u270d\ufe0e'</code></td>
<td>‚úçÔ∏é</td>
</tr>
<tr>
<td>U+270D, U+FE0F</td>
<td><code>printf '\u270d\ufe0f'</code></td>
<td>‚úçÔ∏è</td>
</tr>
</tbody>
</table>
<p>Or put another way:</p>
<table>
<thead>
<tr>
<th>Default</th>
<th>Text</th>
<th>Emoji</th>
</tr>
</thead>
<tbody>
<tr>
<td>üòä</td>
<td>üòäÔ∏é</td>
<td>üòäÔ∏è</td>
</tr>
<tr>
<td>üòê</td>
<td>üòêÔ∏é</td>
<td>üòêÔ∏è</td>
</tr>
<tr>
<td>‚òπ</td>
<td>‚òπÔ∏é</td>
<td>‚òπÔ∏è</td>
</tr>
<tr>
<td>‚úç</td>
<td>‚úçÔ∏é</td>
<td>‚úçÔ∏è</td>
</tr>
</tbody>
</table>
<p>Your mileage may vary, but when I compare that table on my different
devices, while they all display the emoji variant properly, there‚Äôs a
few inconsistencies for the default (no variant) and explicit text
variant.</p>
<table>
<thead>
<tr>
<th>System</th>
<th>Emoji</th>
<th>Default</th>
<th>Text</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linux</td>
<td>üòäÔ∏è</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>Linux</td>
<td>üòêÔ∏è</td>
<td>Emoji</td>
<td>Text</td>
</tr>
<tr>
<td>Linux</td>
<td>‚òπÔ∏è</td>
<td>Emoji</td>
<td>Text</td>
</tr>
<tr>
<td>Linux</td>
<td>‚úçÔ∏è</td>
<td>Emoji</td>
<td>Text</td>
</tr>
<tr>
<td>macOS</td>
<td>üòäÔ∏è</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>macOS</td>
<td>üòêÔ∏è</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>macOS</td>
<td>‚òπÔ∏è</td>
<td>Text</td>
<td>Text</td>
</tr>
<tr>
<td>macOS</td>
<td>‚úçÔ∏è</td>
<td>Text</td>
<td>Text</td>
</tr>
<tr>
<td>Android</td>
<td>üòäÔ∏è</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>Android</td>
<td>üòêÔ∏è</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>Android</td>
<td>‚òπÔ∏è</td>
<td>Text</td>
<td>Text</td>
</tr>
<tr>
<td>Android</td>
<td>‚úçÔ∏è</td>
<td>Text</td>
<td>Text</td>
</tr>
</tbody>
</table>
<p>While the font on my Linux machine doesn‚Äôt have a text representation of
the blush emoji, it does for all the other ones. Regardless, when no
variant is specified, it always shows an emoji.</p>
<p>On the other hand, macOS and Android always default to the text variant,
but they appear to not have one available for the blush and neutral face
emoji.</p>
<div class="note">
<p><strong>Note:</strong> those results are the ones I observed, but you might see
something different on your side! I‚Äôve got a report from someone also
on a fresh macOS Monterey who gets different results from me, with the
frowning face showing as text even when explicitly requested as emoji,
and only for this site! And their default writing hand is an emoji even
though the text one is supported.</p>
<p>This might be due to differences in rendering betweem Chrome and
Firefox, so know that the browser can also affect this kind of things.</p>
<p><a href="https://twitter.com/valeriangalliat/status/1461856790602264579">Let me know</a>
if you observe something even different, I‚Äôm curious! üòÅ</p>
</div>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#conclusion"><span>Conclusion</span></a></h2>
<p>In today‚Äôs article, we looked more closely at the Unicode standard and
the emoji specification to understand how to deal with symbols that have
both a text and emoji style available. We learnt about the VS15 and VS16
code points to select a specific variant, instead of leaving it for the
system to decide. Finally, we found out what symbols need an explicit
variant to be specified in order to avoid being rendered inconsistently.</p>
<p>I hope you now have everything you need to understand why you might be
noticing those inconsistencies, and how to fix them. Cheers! ‚úåÔ∏è</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1461856790602264579">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Using Homebrew on a multi-user system (don‚Äôt)</title>
    <link href="https://www.codejam.info/2021/11/homebrew-multi-user.html" />
    <id>https://www.codejam.info/2021/11/homebrew-multi-user.html</id>
    <updated>2021-11-17T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I‚Äôve recently <a href="https://twitter.com/valeriangalliat/status/1460337357094326275">started working at a new company</a>,
where I‚Äôve got the freedom to use my own rig, which is especially nice
if I want to work while travelling without having to bring two laptops
with me.</p>
<p>But setting up a work environment on my personal computer actually
brings a number of concerns, mainly about:</p>
<ul>
<li>Environment variables.</li>
<li>Development tools and configurations.</li>
<li>Shell history.</li>
</ul>
<p>Whether it‚Äôs my personal Google Cloud context leaking in my work
environment, work SSH keys being available in my personal projects,
various unrelated developer tokens and credentials cohabiting in the
same environment, and work-specific commands popping in my personal
shell history and making me press the up arrow even more than I already
do, it quickly feels like poor hygiene to keep everything under the same
user.</p>
<p>And while some of those tools allow to authenticate with multiple
accounts and offer ways to configure them individually and switch
between contexts, I‚Äôve seen enough mistakes happen by juggling between
staging and production environments in the same session that adding my
personal credentials to the mix sounds like a recipe for disaster.</p>
<p>So after realizing that merging my personal projects with my
professional environment was a bad idea, I decided to create a dedicated
user for work, this way everything would be neatly contained. Meet the
multi-user system.</p>
<h2 id="sharing-a-homebrew-is-nice-but-brew-not-so-much" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#sharing-a-homebrew-is-nice-but-brew-not-so-much"><span>Sharing a homebrew is nice üç∫, but <code>brew</code> not so much</span></a></h2>
<p>The main issue I ran doing that was about running <a href="https://brew.sh/">Homebrew</a>,
the tool I install macOS packages with, and which I happen to use both
personally and for work.</p>
<p>Out of the box, if you install it from one user, it‚Äôll just fail to do
anything when run from another user because of permission issues.</p>
<h3 id="the-evil-shared-group-writable-permissions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#the-evil-shared-group-writable-permissions"><span>The evil: shared group writable permissions</span></a></h3>
<p>Turns out I‚Äôm
<a href="https://medium.com/@leifhanack/homebrew-multi-user-setup-e10cb5849d59">not</a>
<a href="https://stackoverflow.com/questions/41840479/how-to-use-homebrew-on-a-multi-user-macos-sierra-setup">the</a>
<a href="https://gist.github.com/jaibeee/9a4ea6aa9d428bc77925">only</a>
<a href="https://newbedev.com/how-to-use-homebrew-on-a-multi-user-macos-sierra-setup">one</a>
to try to do this, a simple search for this yields a fuckton of results!
And they all mostly share the same ‚Äútip‚Äù which is some variant of:</p>
<pre><code class="hljs language-sh">chgrp -R admin /usr/<span class="hljs-built_in">local</span>/*
chmod -R g+w /usr/<span class="hljs-built_in">local</span>/*
</code></pre>
<p>Some variants use <code>brew --prefix</code> instead of hardcoding <code>/usr/local</code>,
some use a custom group instead of <code>admin</code>. Either way, it‚Äôs all the
same, and it appears to work at first, until it doesn‚Äôt.</p>
<p>The problem is that Homebrew is <em>not</em> designed to be used by multiple
Unix users. A given Homebrew installation is only meant to be used by a
single non-root user.</p>
<p>By giving write access to a given group (in the above example, <code>admin</code>),
that is shared by all the users you want to call <code>brew</code> from, you get
the illusion that you allowed <code>brew</code> to be used by multiple users.</p>
<p>But the issue is that the default <a href="https://en.wikipedia.org/wiki/Umask"><code>umask</code></a>
that <code>brew</code> uses doesn‚Äôt add group write access, meaning that as you
use <code>brew</code>, more and more parts of the state will not be writable by the
other users in your group.</p>
<p>For example if after running the earlier hack, you run <code>brew install some-package</code> as user <code>foo</code>, then you won‚Äôt be able to <code>brew uninstall some-package</code> or <code>brew update some-package</code> as user <code>bar</code>, because the
permission for the newly created files won‚Äôt have group write access.</p>
<p>This means that if you instal packages from different users, <code>brew update</code> will very quickly fail to run on <em>any</em> of those users because
none have access to <em>everything</em> anymore. Sure, you can solve that by
running the <code>chmod</code> hack again, but that‚Äôs flaky and won‚Äôt event prevent
every edge cases.</p>
<p>You see setups as crazy as running the <code>chmod</code> command in <code>~/.zshrc</code> or
similar to prevent this, which will still fall apart if you don‚Äôt open a
new terminal session every time right before running <code>brew</code>, on top of
being a performance nightmare!</p>
<h3 id="the-bad-separate-homebrew-installations" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#the-bad-separate-homebrew-installations"><span>The bad: separate Homebrew installations</span></a></h3>
<p>Another approach that‚Äôs <a href="https://stackoverflow.com/a/55021458/4324668">not</a>
<a href="https://docs.brew.sh/Installation#alternative-installs">as</a>
<a href="https://code.roygreenfeld.com/cookbook/homebrew-multi-user-setup.html">widespread</a>
as the first one is to maintain a separate <code>brew</code> installation per user,
e.g. somewhere under the home directory as opposed to the default global
location.</p>
<p>That sounds like a great idea and would be my favorite way if it wasn‚Äôt
for the fact that <strong>pretty much every package I wanted to install needed
to be compiled from source because the prebuilt binaries only works with
the default global prefix</strong>!</p>
<p>This makes <code>brew</code> effectively unusable as it can take ages to compile
complete dependency trees that way.</p>
<p>On top of that you can read the following in the <a href="https://docs.brew.sh/Installation#alternative-installs">official documentation</a>
which definitely doesn‚Äôt make me want to go that way:</p>
<blockquote>
<p>However do yourself a favour and use the installer to install to the
default prefix. Some things may not build when installed elsewhere.
One of the reasons Homebrew just works relative to the competition is
<strong>because</strong> we recommend installing here. <em>Pick another prefix at your
peril!</em></p>
</blockquote>
<p>This confirms my first feeling about this method: Homebrew is <em>not</em>
designed to be installed outside of its default prefix and you‚Äôll run
into all sort of issues if you do. I don‚Äôt like spending my time fixing
issues like these so I‚Äôll pass.</p>
<h3 id="the-good-dedicate-a-single-user-account-to-homebrew" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#the-good-dedicate-a-single-user-account-to-homebrew"><span>The good: dedicate a single user account to Homebrew</span></a></h3>
<p>This is what‚Äôs recommended for multi-user systems
<a href="https://docs.brew.sh/FAQ#why-does-homebrew-say-sudo-is-bad">in the Homebrew FAQ</a>.
Sadly this page is not well ranked when looking for how to to use
Homebrew in a multi-user system (unlike the previous hacks) and I only
found it write writing this post. The fun thing is that it‚Äôs also the
approach that I decided to use for myself and was about to document
here!</p>
<blockquote>
<p>If you need to run Homebrew in a multi-user environment, consider
creating a separate user account especially for use of Homebrew.</p>
</blockquote>
<p>So while I‚Äôm in fact not inventing anything new here, hopefully I can
help this solution to be better ranked and prevent people from running
into the issues that are guaranteed to happen with the earlier hacks!</p>
<p>The solution is simple. Because <strong>Homebrew is not designed to be used by
multiple users</strong>, and it‚Äôs <strong>not designed to be installed anywhere else than
the default location</strong>, what you want to do instead is to install
Homebrew in its <strong>default location</strong> with a <strong>dedicated user</strong> that you
switch to in order to use it.</p>
<p>Sounds annoying? Just use <code>sudo</code>! While Homebrew
<a href="https://docs.brew.sh/FAQ#why-does-homebrew-say-sudo-is-bad">documents</a>
that it &quot;refuses to work using <code>sudo</code>&quot;, this is not exactly true.
Homebrew refuses to work as root, but you can still use <code>sudo</code> to use it
as another, non-root user!</p>
<p>Typically, if you installed Homebrew in its default location from the
user <code>foo</code>, and now you‚Äôre user <code>bar</code> and want to run <code>brew update</code>:</p>
<pre><code class="hljs language-sh">sudo -Hu foo brew update
</code></pre>
<ul>
<li>The <code>-H</code> option will make sure that the <code>HOME</code> directory is set
to that of the impersonated user (here <code>foo</code>) instead of the
<em>impersonating user</em> (here <code>bar</code>), so that Homebrew can maintain its
cache and other local state in the proper user‚Äôs home.</li>
<li>The <code>-u</code> option allows to specify the user to impersonate instead of
the default of <code>root</code>.</li>
</ul>
<p>This will effectively run <code>brew update</code> like if you had switched to user
<code>foo</code> prior to running it, but without going through the hassle of
actually switching users every single time.</p>
<p>And for what it‚Äôs worth, you don‚Äôt need to create a new, dedicated user
for <code>brew</code>. In my case, since both my users are effectively, me, I
simply installed Homebrew from my personal user and use <code>sudo</code> to run
<code>brew</code> commands from my work user.</p>
<p>To make things even nicer, you can even add an alias in the <code>~/.zshrc</code>
of the user that needs to use <code>sudo</code>:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">alias</span> brew=<span class="hljs-string">&#x27;sudo -Hu foo brew&#x27;</span>
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>That‚Äôs all for today. I hope this helped you figure your bug-free,
multi-user Homebrew situation! Peace. ‚úåÔ∏è</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1461136995544096773">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How I set up a new Mac</title>
    <link href="https://www.codejam.info/2021/11/mac-setup.html" />
    <id>https://www.codejam.info/2021/11/mac-setup.html</id>
    <updated>2021-11-17T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>As I <a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html">recently blogged</a>,
I just upgraded to macOS Monterey taking it as an opportunity to start
from a clean, fresh, pristine system. This means I had to set up
everything again, which is not a big deal, but for the sake of
remembering it and making it even faster next time, I figured I‚Äôd write
about it.</p>
<p>This is the kind of blog post that‚Äôs <em>mostly</em> for my personal interest,
but if you got there somehow, you might take inspiration from my
settings, who knows!</p>
<p>But first, let‚Äôs ask the following question.</p>
<h2 id="why-start-fresh" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#why-start-fresh"><span>Why start fresh?</span></a></h2>
<p>While I could totally have migrated all my data from Big Sur, I like
to start from a clean slate every year or two, to get rid of all the
unnecessary garbage that accumulated over the years.</p>
<p>Wait, what garbage? Well, let me explain.</p>
<p>Every time you update a software (including the OS), there‚Äôs no
guarantee that the state you‚Äôll be in after the update would be the
same as if you installed the new version directly on a fresh system.
Actually, the opposite is pretty much guaranteed.</p>
<p>Most of the time this is not a big deal. Maybe you‚Äôre stuck with the
default settings of the version you originally installed instead of
the ones that would otherwise come with the latest version (i.e. Git
always defaults to <code>master</code> and you have to explicitly configure it to
use <code>main</code>, or any small things like this).</p>
<p>Or maybe some commands or tasks might run slightly slower because of
accumulated ‚Äúbloat‚Äù related to things you don‚Äôt use anymore and forgot
about (keys, passwords, certificates, trusted IP lists and whatnot
from stuff you connected to once or at least stopped connecting to
ages ago, the list of known Wi-Fi networks and <code>~/.ssh/known_hosts</code>
being a typical example).</p>
<p>While the above are pretty inoffensive cases, this kind of undefined
state drifts might cause more sneaky bugs, and ‚Äúworks on that machine‚Äù
kind of answers when you try to figure them out.</p>
<p>The same is also true when you uninstall a software; there‚Äôs no
guarantee that the state you‚Äôll be in after the removal will match the
one you would have been in if you didn‚Äôt install it in the first place.
And again, the opposite is pretty much guaranteed.</p>
<p><a href="https://nixos.org/">NixOS</a> solves some of those issues, but in the real
world, you‚Äôre likely gonna want to use many programs that are not
designed and packaged to be stateless, deterministic, reproducible and
purely functional, and using wrappers (or wrapping them yourself) often
comes at a tremendous cost in time and convenience.</p>
<p>My tradeoff so far? A fresh reinstall every other year, or whenever I
feel like I‚Äôve fucked around enough with that system‚Äôs state to be worth
a clean start.</p>
<h2 id="new-system-setup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#new-system-setup"><span>New system setup</span></a></h2>
<p>Here‚Äôs the things I do when I log in the first time on my freshly
installed system.</p>
<ul>
<li>Get rid of all the garbage in the dock. I just leave the Finder and
the trash, because you can‚Äôt really remove them anyways (did you try
dragging the trash to the trash?), but I happen to use them so that‚Äôs
fine.</li>
<li>Open Safari to download <strong>Firefox</strong>. Very similar to how one would use
Internet Explorer (oh wait, Edge) to install a real browser on
Windows. This comparison might sound like a joke, but Safari
effectively became the new Internet Explorer regarding how far behind
they drag web standards, so this is sadly far more accurate than I‚Äôd
like it to be.</li>
<li>Download and install <strong>iTerm2</strong>.</li>
</ul>
<div class="note">
<p><strong>Note:</strong> I could have installed Firefox and iTerm2 with Homebrew (which
I add later) but for some reason there‚Äôs a few programs I kinda like to
install on their own. Don‚Äôt ask me why.</p>
<p>But now I think about it, it‚Äôs probably because Homebrew became so
ridiculously slow to update its repository and the installed software
that I‚Äôd rather keep the ones I want to be the most up-to-date separate
from Homebrew.</p>
<p>I‚Äôll otherwise update Homebrew once a month or two, or when I need to
install something new with it, and it forces me to upgrade everything
else at the same time.</p>
<p>As a general rule of thumb, everything graphical I tend to install on
its own, and all the CLI stuff is with Homebrew.</p>
</div>
<ul>
<li>Install <strong>Adobe Creative Cloud</strong> and the apps I use with it (Lightroom
Classic, Photoshop, Premiere and After Effects). In Creative Cloud
preferences, turn off file syncing and launch at login.
<ul>
<li>On a multi-user system, you‚Äôll need to sign in to Creative Cloud for
every single user to turn off file syncing and launch at login, even
the ones who don‚Äôt use Creative Cloud apps (because the preferences
pane is only accessible to logged in users). Now all my users have an
empty Creative Cloud account just for the sake of disabling it. I
fucking hate the current state of technology. üôÉ</li>
</ul>
</li>
<li>Install <strong>Logic Pro</strong> an download the full sound library. Sadly a fresh
Logic installation can‚Äôt reuse an existing sound library directory (I
like to keep mine on my hard drive instead of my limited size SSD), so
we need to download the whole 60 GB from scratch. Did I say I
hate the current state of technology already?</li>
<li>Press <kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>5</kbd> to open the
custom screenshot interface, where I can change the <strong>screenshot
directory</strong> to <code>~/Desktop/Screenshots</code>. I don‚Äôt like to clutter my
desktop with screenshots like it‚Äôs the case by default.</li>
<li>I download and run <a href="https://gist.github.com/adaugherity/7435890"><code>patch-edid.rb</code></a>
to <a href="https://www.codejam.info/2020/10/too-much-contrast-external-screen-macos-catalina.html">patch the EDID of my screen</a>
because since Catalina, macOS wants to communicate with it over YCbCr
instead of RGB and that causes colors and contrast to be fucked up.
This is extremely specific to my own screen.</li>
</ul>
<p>Now I‚Äôm ready to configure the <a href="https://www.codejam.info/2021/11/mac-setup.html#system-preferences">system preferences</a>,
<a href="https://www.codejam.info/2021/11/mac-setup.html#iterm2-settings">iTerm2 settings</a> and my <a href="https://www.codejam.info/2021/11/mac-setup.html#terminal-environment">terminal-environment</a>.</p>
<h2 id="system-preferences" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#system-preferences"><span>System preferences</span></a></h2>
<ul>
<li>In <strong>keyboard</strong> I set ‚Äúkey repeat‚Äù and ‚Äúdelay until repeat‚Äù to the
fastest possible. I like my keyboard to be snappy.</li>
<li>For the <strong>dock &amp; menu bar</strong>, I leave only <strong>Time Machine</strong> and <strong>fast
user switching</strong> if I‚Äôm on a multi-user system, and I set the
<strong>clock</strong> to 24 hours format.</li>
<li>I enable <strong>Time Machine</strong> backups to my usual drive after configuring
my exclude list (very specific to my data so not included here).</li>
<li>In <strong>energy saver</strong> I disable <strong>Power Nap</strong> because I don‚Äôt need my
machine to resume from sleep to check emails and run backups (after
all if I‚Äôm not using my machine there‚Äôs not much to back up anyways).</li>
<li>In <strong>displays</strong> I turn on <strong>Night Shift</strong> form sunset to sunrise.</li>
</ul>
<h2 id="iterm2-preferences" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#iterm2-preferences"><span>iTerm2 preferences</span></a></h2>
<ul>
<li>In <strong>appearance</strong>, <strong>windows</strong>, tick <strong>hide scrollbars</strong>.</li>
<li>In <strong>profiles</strong>, <strong>general</strong>, select <strong>reuse previous session‚Äôs
directory</strong> as working directory.</li>
<li>In <strong>profiles</strong>, <strong>terminal</strong>, tick <strong>silence bell</strong>.</li>
<li>In <strong>profiles</strong>, <strong>keys</strong>, <strong>key mappings</strong>, load the <strong>natural text
editing</strong> preset (allow it to remove whatever is already there), and
remove <kbd>Command</kbd> + <kbd>Left</kbd> and <kbd>Command</kbd> +
<kbd>Right</kbd> which otherwise shadow the shortcuts to navigate
between tabs.</li>
</ul>
<h2 id="terminal-environment" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#terminal-environment"><span>Terminal environment</span></a></h2>
<p>First, install <a href="https://brew.sh/">Homebrew</a> with whatever is the current
recommended way. Install it in the default place because otherwise it
won‚Äôt be able to leverage many prebuilt binaries that hardcode the
default prefix in them, and it‚Äôs utterly slow to compile everything. I‚Äôd
be running Gentoo if that‚Äôs what I wanted FFS. Also if you want to run
Homebrew on a multi-user system, <a href="https://www.codejam.info/2021/11/homebrew-multi-user.html">read that first</a>.</p>
<p>Then, make a SSH keypair or copy an existing one in <code>~/.ssh</code>. I usually
run <code>ssh-keygen</code> either way just to let it create the directory with the
proper permissions, even if I‚Äôll override the key later.</p>
<pre><code class="hljs language-sh">ssh-keygen
</code></pre>
<p>Clone my <a href="https://github.com/valeriangalliat/dotfiles">dotfiles</a>
directory and install my Mac preset (mainly my Zsh, Vim and Git
settings).</p>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> git@github.com:valeriangalliat/dotfiles.git
<span class="hljs-built_in">cd</span> dotfiles
make mac
<span class="hljs-built_in">cd</span>
</code></pre>
<p>Edit my default <code>~/.zshrc</code> and <code>~/.zshenv</code> templates and comment or
uncomment some of the stuff there that I may need, mainly enabling my
asdf helper (see below).</p>
<pre><code class="hljs language-sh">vim ~/.zshrc ~/.zshenv
</code></pre>
<p>Install whatever software I pretty much always use with Homebrew.</p>
<pre><code class="hljs language-sh">brew install rg fzf imagemagick ffmpeg ncdu htop
</code></pre>
<ul>
<li><a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>
is my favorite way to search code.</li>
<li><a href="https://github.com/junegunn/fzf">fzf</a> is an awesome fuzzy finder.</li>
<li>I probably don‚Äôt need to introduce <a href="https://imagemagick.org/">ImageMagick</a>
and <a href="https://www.ffmpeg.org/">FFmpeg</a>.</li>
<li><a href="https://dev.yorhel.nl/ncdu">ncdu</a> is a cool tool to monitor disk usage.</li>
<li><a href="https://htop.dev/">htop</a> is an awesome process viewer.</li>
</ul>
<p>Install the <a href="https://github.com/asdf-vm/asdf">asdf</a> plugins I need
and whatever version is in my <code>~/.tool-versions</code>. My <code>~/.zshrc</code>
automatically installs asdf on the first invocation so no need to do
that manually.</p>
<pre><code class="hljs language-sh">asdf plugin add nodejs
<span class="hljs-comment"># asdf plugin add python</span>
<span class="hljs-comment"># asdf plugin add ruby</span>
<span class="hljs-comment"># asdf plugin add elixir</span>
<span class="hljs-comment"># asdf plugin add erlang</span>
asdf install
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>That‚Äôs pretty much the gist! This is a fairly straightforward and not
very time consuming checklist, and the main things that need to be
automated (my dotfiles) are.</p>
<p>I don‚Äôt think it‚Äôs worth automating my macOS system preferences somehow
as they might change in future versions anyways. Same thing for iTerm2,
where I definitely don‚Äôt want to copy over my whole configuration file
from an old installation, I‚Äôd rather start from the latest and greatest
defaults and just tweak what I need on top of it.</p>
<p>Everything else is very specific to the current machine I‚Äôm setting up
and I leave them to my discretion at the time of installing.</p>
<p>If you read until there, I hope that you learnt something, or that it
inspired you to document your base setup in a similar way. Cheers!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1461136814400577537">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Desktop power button not responding and random sleep issues</title>
    <link href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html" />
    <id>https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html</id>
    <updated>2021-11-16T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>A few days ago I started having issues with my computer. When I was
putting it to sleep (or hibernating), it would either crash and turn off
immediately, or would fail to power the GPU and USB ports after waking up,
leaving me with a black screen and unresponsive keyboard and mouse,
and forcing me to hard reset it.</p>
<p>More notably, when it crashed instantly as it entered sleep state, the
power button didn‚Äôt work anymore and I needed to unplug the machine for
a minute or so before being able to start it again. This didn‚Äôt always
work the first shot though but usually after doing it a few times, it
would eventually boot up again.</p>
<p>It‚Äôs something that had already happened to me in rare occurrences
during the past year, enough to get me frustrated and somewhat anxious
when my machine effectively appeared to be bricked (that‚Äôs how I found
the unplug replug trick by despair), but not to a point where I spent
the time to understand and fix the root cause, as it always kinda fixed
itself without my intervention.</p>
<p>I remember one time where the unplug replug trick didn‚Äôt work to a point
where I decided to open the machine and see what I can do inside, but
interestingly just the sheer fact of opening it and moving it around so
that I can work on it fixed the problem, so I was just happy to have a
working computer again and didn‚Äôt question it much.</p>
<p>That‚Äôs until this week, coincidentally right before I <a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html">upgrade to macOS Monterey</a>.</p>
<h2 id="kernel-panic-sleep-wake-failure-in-efi" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#kernel-panic-sleep-wake-failure-in-efi"><span>Kernel panic: sleep wake failure in EFI</span></a></h2>
<p>I was still running Big Sur back then and it‚Äôs been running smooth the
whole year, but the day before I decide to upgrade to Monterey, I get
those sleep issues again, mainly lack of GPU and USB power on wake
(manifested by a black screen and unresponsive keyboard and mouse).</p>
<p>I figured it wasn‚Äôt worth fixing it now, and I might as well upgrade and
see if it still happens. And while <a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html">the upgrade goes smooth AF</a>,
I notice even more of those sleep issues after the fact. They‚Äôre not
occasional anymore, they happen pretty much 90% of the time the computer
sleeps, seemingly at random. It either fails to power the connected
devices on wake or just crashes right away when being put to sleep and
causes the unresponsive power button issue.</p>
<p>At that point I assume that it comes from the upgrade to Monterey,
especially because I‚Äôm running a Hackintosh and I suspect that it must
be for sure the culprit. After all, there‚Äôs ‚Äúhack‚Äù in the name, even
though it‚Äôs been impressively stable <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html">since I use OpenCore</a>.</p>
<p>I spend more time than I‚Äôm willing to admit trying everything to fix
<a href="https://dortania.github.io/OpenCore-Post-Install/universal/pm.html">power management</a>
and <a href="https://dortania.github.io/OpenCore-Post-Install/universal/sleep.html">sleep</a>,
including using <a href="https://github.com/acidanthera/CPUFriend/releases">CPUFriend</a>
and <a href="https://github.com/corpnewt/CPUFriendFriend">CPUFriendFriend</a> to
fix the ‚Äúsleep wake failure in EFI‚Äù system panics. But none of that
changes anything. I try to understand the different macOS sleep modes
and <a href="https://dortania.github.io/OpenCore-Post-Install/universal/sleep.html#preparations">various</a>
<code>pmset</code> <a href="https://github.com/li3p/dell-optiplex-9020-hackintosh-opencore#sleep">settings</a>
to tune them and make things work but without any luck.</p>
<p>I also try to see if it‚Äôs related to any of my external devices, and
while the issues seem to happen less frequently when I unplug my 3
external drives and my external sound card, they still happen somewhat
randomly in a way that I can‚Äôt reliably isolate any of those as being
the problem.</p>
<h2 id="questioning-the-hardware" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#questioning-the-hardware"><span>Questioning the hardware</span></a></h2>
<p>At that point I lost more than 12 hours on this issue and I‚Äôm going on
my second day of relentless debugging. I feel like I‚Äôve tried everything
possible and documented online about fixing sleep at the software,
drivers and configuration level, and the precise issues and symptoms I
run into don‚Äôt seem to exactly match any of the topics I find online.</p>
<p>I have a TP-Link PCI Wi-Fi card in there and I‚Äôm thinking maybe it‚Äôs
unsupported in a way that somehow causes the crashes with the new OS? I
open the case and remove it, but this doesn‚Äôt seem to change anything.</p>
<p>I start questioning my actual hardware, looking more precisely at the
ssue where the power button is unresponsive. I find a
<a href="https://www.reddit.com/r/buildapc/comments/3wn2d8/discussion_just_a_reminder_that_a_dead_bios/">number</a>
<a href="https://www.quora.com/Can-a-dead-CMOS-battery-stop-a-computer-from-booting">of</a>
<a href="https://steamcommunity.com/discussions/forum/11/618460171318429760/">pages</a>
stating that a weak or dead CMOS battery could cause it (or also a
faulty power supply üòÖ).</p>
<p>The CMOS battery is easier to test and cheaper to replace than the power
supply, so I start with that. My machine is now 5 years old so it‚Äôs not
exactly brand new, even though I‚Äôve kept desktop computers much longer
than that in the past without needing to replace a CMOS battery once in
my life. Regardless, I take it out and test it with a multimeter only to
find that it delivers a solid 3 volts as it‚Äôs supposed to. I even test a
brand new battery to compare and get the same results! Not the issue
here, even though I wish it would have been as easy as replacing a
CR2032 battery.</p>
<p>But when I put the battery back in place, my computer still doesn‚Äôt
start! And turning off and on the PSU again doesn‚Äôt seem to work
anymore. Did I accidentally fry the motherboard while manipulating the
battery? I try one more time to be relieved by the sound of my machine
booting, and welcoming me with a fresh BIOS reset screen. I configure
everything again and boot macOS. At that point, all the USB devices are
unplugged and I‚Äôm on a freshly configured BIOS. I try the sleep again
but sadly it keeps crashing.</p>
<h2 id="very-specific-googling-and-final-fix" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#very-specific-googling-and-final-fix"><span>Very specific googling, and final fix</span></a></h2>
<p>As a last resort, I try searching the very specific symptom I‚Äôm having
and the hack I found to work around it: ‚Äúneed to unplug and replug
computer for it to start‚Äù. This sound so ridiculous and far fetched that
I‚Äôve never thought about searching just that before, but I‚Äôm pretty
desperate at that point.</p>
<p>To my whole surprise, I‚Äôm <a href="https://www.ifixit.com/Answers/View/255569/Why+do+I+have+to+first+unplug+my+computer+to+start">not the only one</a>
to <a href="https://forums.tomshardware.com/threads/computer-shuts-off-and-wont-turn-back-on-until-i-unplug-it.217732/">have this issue</a>,
and in those two pages from respectively 5 and 10 years ago, the pinned
solution is the same:</p>
<blockquote>
<p>Open up the computer and look at all the extra cables inside make sure
they‚Äôre all neatly bundled away from any part of the case they may be
shorting it out.</p>
<p>‚Äî <a href="https://www.ifixit.com/Answers/View/255569/Why+do+I+have+to+first+unplug+my+computer+to+start#answer256519">Why do I have to first unplug my computer to start?</a></p>
</blockquote>
<blockquote>
<p>After trying just about everything software wise (except a complete
Windows reinstall) I was able to track the problem down to my PSU as
many forums had suggested. It tuned out that some of the many extra
connectors I had on my PSU I had stuffed into an extra empty drive bay
in order to reduce the clutter inside the case. Somehow one of them
had been causing a short. After moving the cables around and tiding
them up neat and proper the problem has completely gone away (went
from daily occurrence to two weeks so far with no problem).</p>
<p>‚Äî <a href="https://forums.tomshardware.com/threads/computer-shuts-off-and-wont-turn-back-on-until-i-unplug-it.217732/#post-11597639">Computer shuts off and won‚Äôt turn back on until I unplug it</a></p>
</blockquote>
<p>I did also stuff all my dangling PSU cables in an empty bay, and I
thought I was doing myself a service by doing so, preventing a mess of
cables in the middle of the case! I took the cables out of there, tidied
them up differently and put them back in there in a way where they
shouldn‚Äôt move around too much or touch anything.</p>
<p>After that? The computer boots just fine and I haven‚Äôt noticed a single
crash or any of the issues I was having around sleep and wake. I
progressively started to plug my sound card, then my external drives,
testing the sleep every time (to more easily identify a culprit if it
wasn‚Äôt fixed), and it kept working. I‚Äôve restored all of my original
‚Äúclean‚Äù drivers, bootloader and system configuration (that I had
modified during my attempts to fix the issue earlier), none of them
caused any problem again.</p>
<p>I‚Äôve performed more than 20 successful sleep and wake cycles since then,
whether I explicitly put the computer to sleep or let it hibernates by
itself after a period of inactivity.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#conclusion"><span>Conclusion</span></a></h2>
<p>At that point I‚Äôm somewhat confident that like in the two posts above,
the dangling PSU cables in the unit were shorting and causes those
issues. The fact they caused instability specifically at the sleep and
wake level were probably very specific to me and the precise way the
cables where shorting each other.</p>
<p>And the reason why the problem appeared to fix itself when unplugging
and replugging the machine, or sometimes by just opening it and looking
at it, doing no particular change inside? Those mere manipulations
probably bumped the dangling wires inside just enough so that they
weren‚Äôt shorting anymore, until they do again.</p>
<p>It‚Äôs still hard for me to precisely explain why this was happening
especially around sleep, and how the machine would otherwise be
perfectly stable and never crash as long as it didn‚Äôt hit a sleep and
wake cycle. Maybe something to do with the fans slightly moving the
dangling cables while blowing at them? I‚Äôm not technical enough in
hardware and electronics to make sense of that, so if any of you reading
that have a better idea, please <a href="https://www.codejam.info/val.html#contact">let me know</a>!</p>
<p>And at the very least I hope that if you‚Äôre reading this because of a
similar issue, that helped you sort this problem out as well!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1459909788041682952">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Yearly Hackintosh upgrade: macOS Monterey with OpenCore</title>
    <link href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html" />
    <id>https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html</id>
    <updated>2021-11-16T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Exactly a year ago, I <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html">migrated my Hackintosh from Catalina to Big Sur,
and from Clover to OpenCore</a>. Apple recently released
Monterey, so it‚Äôs the first time for me doing a major upgrade since I‚Äôm
using OpenCore.</p>
<p>So far, OpenCore has been a breeze to work with. I‚Äôm not sure if it‚Äôs
because it‚Äôs a really high quality piece of software and ecosystem in
general, or if it‚Äôs because it forced me to learn a lot of low-level
details in order to have a working Hackintosh, but both probably have a
lot to do with this.</p>
<p>I‚Äôve been upgrading seamlessly all year long through Big Sur updates
as smoothly as if I was using a ‚Äúreal Mac‚Äù. Upgrading to Monterey might
have been as easy (with the addition of upgrading OpenCore and all kexts
to their latest version, which I should probably do on minor updates
even though I‚Äôve been getting away perfectly fine by ignoring that all
year long), but I like to take a new major version as an opportunity to
reinstall my system from scratch and start from a clean slate.</p>
<h2 id="my-paranoid-upgrade-procedure" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#my-paranoid-upgrade-procedure"><span>My paranoid upgrade procedure</span></a></h2>
<p>I don‚Äôt do cowboy-style upgrades or installations anymore, because I‚Äôve
bricked my system too many times and while I‚Äôve always managed to fix it
more or less gracefully, it‚Äôs always been a somewhat stressful,
uncomfortable and time-consuming experience.</p>
<p>I‚Äôm also constantly scared of losing critical data by mistake, so
I tend to back up everything more often than not. Here‚Äôs the procedure I
follow to upgrade my system making sure I always have a bootable machine
and without risking data loss.</p>
<ul>
<li>I make space for an empty partition on one of my drives to test the
new system.</li>
<li>I make sure that my current system has a full up-to-date backup on an
external drive <em>that I keep unplugged</em> until I‚Äôm back in a fully
stable state.</li>
<li>Because I make the above backup with Time Machine and I don‚Äôt trust
myself (nor macOS) to 100% reliably set up Time Machine on the new
system without fucking up the previous backups, I also do a second
(manual) backup on another drive. That step is probably unnecessary.</li>
<li>I install the new system to the test partition, tweaking the OpenCore
configuration, drivers and kexts as necessary.</li>
<li>Once the test system is installed and running, I check that everything
I need works as expected (display, audio, network, sleep) or otherwise
find how to fix it, documenting everything along the way especially
for fixes that live outside the EFI directory.</li>
<li>When all is well, I reboot and perform the install on my main
partition.</li>
<li>After the install, I restore whatever I need from my previous backup.
I still keep the rest of the backup (or at least parts of it) for 6
months or so just in case. That came handy a couple of times in the
past. I also wipe the temporary test installation.</li>
<li>Finally, I write a blog post. üòÑ</li>
</ul>
<p>This is a bit more time-consuming than straight up performing the
installation, and some of those steps might be a bit overkill, but I
like going the extra length to make sure everything is backed up and
redundant to prevent any unexpected issue and minimize the impact of a
program or human error.</p>
<h2 id="upgrade-log" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#upgrade-log"><span>Upgrade log</span></a></h2>
<p>I‚Äôll list all the steps I took in that upgrade, which are very similar
to my <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html">Big Sur post</a>, but I‚Äôll note here the differences.
Here‚Äôs the relevant details of my machine:</p>
<dl>
<dt>Motherboard</dt>
<dd><a href="https://www.newegg.ca/p/N82E16813130924">MSI H110M PRO-D</a> (RTL8111H Ethernet chipset,  Realtek ALC887 audio chipset)</dd>
<dt>CPU</dt>
<dd><a href="https://www.newegg.ca/p/N82E16819117563">Intel Core i5-6500 Skylake</a></dd>
<dt>GPU</dt>
<dd><a href="https://www.newegg.ca/p/N82E16814932247">GIGABYTE Radeon RX 580</a></dd>
</dl>
<p>Still following <a href="https://dortania.github.io/OpenCore-Install-Guide/">the OpenCore guide</a>,
I:</p>
<ul>
<li>downloaded the latest <a href="https://github.com/acidanthera/OpenCorePkg/releases"><code>OpenCorePkg</code></a>
(0.7.5 in my case),</li>
<li>downloaded <a href="https://github.com/corpnewt/ProperTree">ProperTree</a> to edit <code>.plist</code> files,</li>
<li>downloaded Monterey from the App Store,</li>
<li>formatted a USB drive as Mac OS Extended (HFS+) with a GUID partition
map,</li>
<li>ran <code>sudo /Applications/Install\ macOS\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</code>
(where <code>MyVolume</code> was‚Ä¶ my volume) to create the installation media,</li>
<li>mounted the EFI partition of the USB key by running <code>sudo diskutil mount /dev/diskXsY</code>
where <code>X</code> was the drive number and <code>Y</code> the partition number (found
using <code>diskutil list</code>),</li>
<li>copied OpenCore <code>DEBUG</code> version to it and removed unneeded files as
instructed by the guide,</li>
<li>added <code>HfsPlus.efi</code> from the <a href="https://github.com/acidanthera/OcBinaryData/blob/master/Drivers/HfsPlus.efi"><code>OcBinaryData</code> repo</a>,</li>
<li>added <a href="https://github.com/acidanthera/VirtualSMC/releases">VirtualSMC</a>,
<a href="https://github.com/acidanthera/Lilu/releases">Lilu</a>,
<a href="https://github.com/acidanthera/WhateverGreen/releases">WhateverGreen</a>,
<a href="https://github.com/acidanthera/AppleALC/releases">AppleALC</a> and
<a href="https://github.com/Mieze/RTL8111_driver_for_OS_X/releases">RealtekRTL8111</a>
kexts.</li>
</ul>
<p>Now here‚Äôs what got easier than my first OpenCore installation.</p>
<h3 id="ssdts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#ssdts"><span>SSDTs</span></a></h3>
<p>I just had to copy <code>SSDT-PLUG.aml</code>, <code>SSDT-EC.aml</code> and <code>SSDT-USBX.aml</code>
from the <code>ACPI</code> directory of my <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#installing-macos-big-sur-with-opencore-and-the-issues-i-encountered">previous installation</a>,
the <a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/plug.html">first</a>
<a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/ec-fix.html">two</a>
which I had built back then with
<a href="https://github.com/corpnewt/SSDTTime">SSDTTime</a>, and the latter being
the <a href="https://github.com/dortania/OpenCore-Post-Install/blob/master/extra-files/SSDT-USBX.aml">prebuilt one</a>
that didn‚Äôt need to be updated.</p>
<h3 id="usb-map" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#usb-map"><span>USB map</span></a></h3>
<p>I could just copy <code>USBMap.kext</code> <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#generating-the-usb-map">from my previous installation</a>
to have my USB ports supported right away without having to generate it
again or to deal with <code>XhciPortLimit</code> and USBInjectAll. Sweet.</p>
<h3 id="making-the-config-plist" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#making-the-config-plist"><span>Making the <code>config.plist</code></span></a></h3>
<p>I started again from OpenCore‚Äôs <code>Sample.plist</code> and applied the same
tweaks from the <a href="https://dortania.github.io/OpenCore-Install-Guide/config.plist/skylake.html#deviceproperties">Skylake</a>
guide. I‚Äôm not sure if I could have reused my previous <code>config.plist</code> or
not, but I wanted to start fresh and up-to-date.</p>
<p>Everything was the same as <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#installing-macos-big-sur-with-opencore-and-the-issues-i-encountered">my previous installation</a>
so I won‚Äôt include it here.</p>
<p>The only difference was that I left <code>XhciPortLimit</code> to <code>False</code> as the
guide mentions to disable it if running macOS 11.3 or newer, plus I
already have my USB map so it shouldn‚Äôt be needed either way.</p>
<p>I also had <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#booting-on-macos-installer-just-reboots-into-recovery">an issue last time</a>
where I needed to set <code>SecureBootModel</code> to <code>Disabled</code> instead of the
<code>Default</code> mentioned in the guide, but just to check, I left it to
<code>Default</code> this time and didn‚Äôt have any issue, meaning I can now benefit
from Apple Secure Boot!</p>
<h3 id="removing-previous-fixes" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#removing-previous-fixes"><span>Removing previous fixes</span></a></h3>
<p>For Big Sur, I <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#no-wi-fi-on-big-sur">needed to add</a>
<code>IO80211HighSierra.kext</code> to get my Wi-Fi to work but I‚Äôm now connected
over Ethernet so I didn‚Äôt need to include it. It‚Äôs a good thing because
<a href="https://github.com/khronokernel/IO80211-Patches/issues/4">it doesn‚Äôt work on Monterey</a>
(at least for now, I tried and had the same issue).</p>
<p>Also I‚Äôve had <a href="https://www.codejam.info/2021/..2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#can-t-find-my-sata-drives-in-the-macos-installer">an issue last time</a>
that required a <code>CtlnaAHCIPort.kext</code> in order to see my SATA drives in
the installer, but that wasn‚Äôt required anymore so I left it alone (it
actually prevented the installer to boot if it was there).</p>
<h3 id="finalizing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#finalizing"><span>Finalizing</span></a></h3>
<p>Once everything was working, I copied OpenCore to my SSD‚Äôs EFI directory,
and applied the <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#cosmetic-tweaks">cosmetic tweaks</a>
including putting the files from the OpenCore <code>RELEASE</code> version,
removing the debug and verbose settings, and adding <code>OpenCanopy.efi</code> for
a nice UI.</p>
<p>I still needed to <a href="https://www.codejam.info/2020/10/too-much-contrast-external-screen-macos-catalina.html">patch the EDID of my screen to force it in RBG mode</a>,
and the <a href="https://gist.github.com/adaugherity/7435890"><code>patch-edid.rb</code></a>
method still works!</p>
<p>After that, I didn‚Äôt need to do <em>any</em> tweak at the system configuration
level, everything works out of the box including CPU power management
and sleep. Power Nap also works like a charm but I turned it off just
because it‚Äôs not useful to me.</p>
<p>Since my system drive was named the same as my previous installation,
Time Machine was able to continue the existing backup and I kept my full
Time Machine history! Had I renamed the drive, it seems that I could
have used <code>tmutil inheritbackup</code> and <code>tmutil associatedisk</code> to help with
that.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>If it wasn‚Äôt for a <a href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html">totally unrelated hardware issue</a> that happened
around the same time I performed the upgrade, migrating to Monterey with
OpenCore was a straightforward and painless procedure and I didn‚Äôt
encounter any hiccup.</p>
<p>If you too are upgrading your Hackintosh to Monterey, I hope it went as
smooth for you as it did for me!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Standalone userland SSH server</title>
    <link href="https://www.codejam.info/2021/11/standalone-userland-ssh-server.html" />
    <id>https://www.codejam.info/2021/11/standalone-userland-ssh-server.html</id>
    <updated>2021-11-09T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I guess I have pretty unusual software needs sometimes. I‚Äôve been
wanting to spawn a one-off SSH server on one of my computers so that I
can <code>rsync</code> something to it from another machine.</p>
<p>I didn‚Äôt want to enable SSH connections systemwide on this host.
Ideally, I wanted to start a server from my unprivileged user, that
would only allow access to that particular user, and only to the
specific SSH key of my other machine.</p>
<p>Turns out with a simple <code>sshd_config</code>, <a href="https://sourceware.org/legacy-ml/cygwin/2008-04/msg00363.html">this is possible</a>!</p>
<div class="note">
<p><strong>Edit:</strong> this is now automated in a easy to use Git repository,
<a href="https://github.com/valeriangalliat/sshd-on-the-go">go check it out</a>!</p>
</div>
<p>First, let‚Äôs make a directory to contain our server files.</p>
<pre><code class="hljs language-sh">mkdir standalone-sshd
<span class="hljs-built_in">cd</span> standalone-sshd
</code></pre>
<p>In there, we generate our host RSA key (the <code>-N ''</code> part specifies an
empty passphrase).</p>
<pre><code class="hljs language-sh">ssh-keygen -f ssh_host_rsa_key -N <span class="hljs-string">&#x27;&#x27;</span>
</code></pre>
<p>Then, add your public key to a <code>authorized_keys</code> file in this same
directory (same format as a regular <code>~/.ssh/authorized_keys</code>), and add
the following configuration in a <code>sshd_config</code> file.</p>
<pre><code class="hljs language-apache"><span class="hljs-attribute">Port</span> <span class="hljs-number">2222</span>
<span class="hljs-attribute">HostKey</span> /path/to/standalone-sshd/ssh_host_rsa_key
<span class="hljs-attribute">PidFile</span> /path/to/standalone-sshd/sshd.pid

<span class="hljs-comment"># Don&#x27;t allow interactive authentication.</span>
<span class="hljs-attribute">KbdInteractiveAuthentication</span> no

<span class="hljs-comment"># Same as above but for older SSH versions.</span>
<span class="hljs-attribute">ChallengeResponseAuthentication</span> no

<span class="hljs-comment"># Don&#x27;t allow password authentication.</span>
<span class="hljs-attribute">PasswordAuthentication</span> no

<span class="hljs-comment"># Only allow my own user.</span>
<span class="hljs-attribute">AllowUsers</span> val

<span class="hljs-comment"># Only allow my own key.</span>
<span class="hljs-attribute">AuthorizedKeysFile</span> /path/to/standalone-sshd/authorized_keys
</code></pre>
<p>Tweak the port, user, and other settings to your liking, but that should
give you a good base!</p>
<p>With that, you can run the server with the following command (the <code>-D</code>
option starts the server in the foreground instead of the default daemon
mode).</p>
<pre><code class="hljs language-sh">/usr/sbin/sshd -f sshd_config -D
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1458282446659653634">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>ImageMagick crop with percentage like CSS background-position</title>
    <link href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html" />
    <id>https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html</id>
    <updated>2021-11-08T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Another one of those posts that are probably only useful to me, but who
knows!</p>
<p>I‚Äôve been wanting to crop images with ImageMagick in a way that mimics
what the CSS <code>background-position</code> property does.</p>
<h2 id="how-does-background-position-behave" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html#how-does-background-position-behave"><span>How does <code>background-position</code> behave?</span></a></h2>
<p>Let‚Äôs say I have a picture that I‚Äôm making shorter, e.g. a 1:1 picture
that I want to make 16:9, and I want to make sure to keep it centered
both horizontally and vertically. I would use the following:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.element</span> {
  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;
}
</code></pre>
<p>In this particular case, we can easily mimic that with ImageMagick.
Let‚Äôs assume <code>input.jpg</code> is currently a 1080x1080 square picture, and we
want to scale it down to a 640x360 16:9 landscape:</p>
<pre><code class="hljs language-sh">convert input.jpg -resize 640x -gravity center -crop 640x360+0+0 output.jpg
</code></pre>
<p>But <code>-gravity</code> only allows us to align top (<code>north</code>), center or bottom
(<code>south</code>). What if we wanted a percentage in between?</p>
<p>In the case of <code>background-position</code>, 0% would align the picture at the
top, and 100% at the bottom. Anything in between would allow to navigate
in that range.</p>
<h2 id="applying-it-to-imagemagick" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html#applying-it-to-imagemagick"><span>Applying it to ImageMagick</span></a></h2>
<p>Let‚Äôs pretend we can‚Äôt do <code>-gravity south</code> to align the crop at the bottom,
and convert our 100% offset to a pixels offset. It would be equal to the
original picture height minus the target crop height, or in the case of
our example, <code>640 - 360</code>, which is 280 pixels.</p>
<pre><code class="hljs language-sh">convert input.jpg -resize 640x -crop 640x360+0+280 output.jpg
</code></pre>
<p>Similarly, our 75% becomes <code>75 / 100 * (640 - 360)</code>, which is 210.</p>
<p>But it gets a bit annoying to calculate that manually every time.
Instead, let me introduce the <code>magick</code> command!</p>
<h2 id="the-magick-command" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html#the-magick-command"><span>The <code>magick</code> command</span></a></h2>
<p><code>magick</code> behaves very similarly to <code>convert</code>, but supports some extra
features like the ability to embed calculations directly in the cropping
options!</p>
<pre><code class="hljs language-sh">magick input.jpg -resize 640x -crop <span class="hljs-string">&#x27;640x360+0+%[fx:75/100*(h-360)]&#x27;</span> output.jpg
</code></pre>
<p>Here, the only variable we have to manually write down is the cropped
height, which we already need to know to perform the crop in the first
place.</p>
<p>With that, it gets easy to adjust the percentage in a way that‚Äôs
consistent with what <code>background-position</code> would otherwise do, without
having to do the math by hand.</p>
<p>It was already possible to do this by combining <code>identify</code> and a command
line calculator like <code>bc</code>, but having the option to do that so easily in
the <code>-crop</code> option is definitely nicer!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1457849255855542279">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Elixir: intercepting Phoenix LiveView events in JavaScript</title>
    <link href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html" />
    <id>https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html</id>
    <updated>2021-11-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Recently, I was dealing with a Phoenix LiveView where I wanted to
intercept some events from the LiveSocket to take specific action in
JavaScript.</p>
<p>Typically, I wanted to know when a form was done being submitted and
processed by the backend <strong>even if that event didn‚Äôt trigger a DOM
change</strong>.</p>
<h2 id="the-use-case" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#the-use-case"><span>The use case</span></a></h2>
<p>To give the context, I have a <code>&lt;span&gt;</code> that is transformed to a <code>&lt;form&gt;</code>
on click. For reactivity, this is done in JavaScript. When the form is
submitted, it triggers a Phoenix event that might or might not update
the DOM.</p>
<p>I don‚Äôt want to reset the state back to the <code>&lt;span&gt;</code> on submission,
because it would temporarily show the old text until the update is
processed by the backend and the DOM is updated, which causes a quick
text flash.</p>
<p>In the happy path where the form submission triggers a DOM update
Phoenix resets the DOM to the <code>&lt;span&gt;</code> and everything is good, but
if we just added a bunch of spaces to the existing text and the backend
decides to trim the value, Phoenix is smart enough to notice that since
the input state didn‚Äôt change, it doesn‚Äôt need to update the DOM. This
is great, except it leaves us with the open <code>&lt;form&gt;</code> even if the
submission was handled successfully.</p>
<p>To deal with this, I wanted a way to tell from JavaScript when the form
submission was <em>completed</em> so that I can make sure to reset the <code>&lt;span&gt;</code>
only then (to avoid the quick text flash mentioned earlier).</p>
<h2 id="using-phoenix-liveview-hooks" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#using-phoenix-liveview-hooks"><span>Using Phoenix LiveView hooks?</span></a></h2>
<p>The first thing I thought about was to use LiveView hooks as documented
in <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html">JavaScript interoperability</a>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { Socket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix&#x27;</span>
<span class="hljs-keyword">import</span> { LiveSocket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix_live_view&#x27;</span>

<span class="hljs-keyword">const</span> csrfToken = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;meta[name=&#x27;csrf-token&#x27;]&quot;</span>).getAttribute(<span class="hljs-string">&#x27;content&#x27;</span>)

<span class="hljs-keyword">const</span> liveSocket = <span class="hljs-keyword">new</span> LiveSocket(<span class="hljs-string">&#x27;/live&#x27;</span>, Socket, {
  <span class="hljs-attr">params</span>: { <span class="hljs-attr">_csrf_token</span>: csrfToken },
  <span class="hljs-attr">hooks</span>: {
    <span class="hljs-attr">ElementUpdated</span>: {
      updated (e) {
        <span class="hljs-built_in">this</span>.el.dispatchEvent(<span class="hljs-keyword">new</span> CustomEvent(<span class="hljs-string">&#x27;phx:element-updated&#x27;</span>))
      }
    }
  }
})

liveSocket.connect()
</code></pre>
<p>By adding <code>phx-hook=&quot;ElementUpdated&quot;</code> on the elements we want to get
notified for updates, we trigger the hook we defined, which here
dispatches a custom <code>phx:element-updated</code> on the node. This allows us to
handle that event at the node level instead of trying to handle every
single case directly from the hook, which is very nice and decoupled if
you ask me.</p>
<p>For example you could now do:</p>
<pre><code class="hljs language-js">someElement.addEventListener(<span class="hljs-string">&#x27;phx:element-updated&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-comment">// Deal with the fact this element got updated!</span>
})
</code></pre>
<p>Sadly, this didn‚Äôt work for me because the <code>updated</code> hook only fires
when the element is‚Ä¶ updated, which is not the case if the form
submission completes but doesn‚Äôt result in a state change. Bummer.</p>
<h2 id="leveraging-the-phx-page-loading-stop-window-event" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#leveraging-the-phx-page-loading-stop-window-event"><span>Leveraging the <code>phx:page-loading-stop</code> <code>window</code> event</span></a></h2>
<p>This is the easiest solution. Unlike the one I talk about after, it
doesn‚Äôt give any granularity on the kind of event that was sent or
received, but it‚Äôs very easy to implement.</p>
<p>In my case, I use <a href="https://alpinejs.dev/">Alpine</a> so my code looks something like this:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">x-data</span>=<span class="hljs-string">&quot;{ edit: false }&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;edit = true&quot;</span> @<span class="hljs-attr">click.outside</span>=<span class="hljs-string">&quot;edit = false&quot;</span> @<span class="hljs-attr">phx:page-loading-stop.window</span>=<span class="hljs-string">&quot;edit = false&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">x-show</span>=<span class="hljs-string">&quot;!edit&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- ... --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">x-show</span>=<span class="hljs-string">&quot;edit&quot;</span> <span class="hljs-attr">phx-submit</span>=<span class="hljs-string">&quot;edit_whatever&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- ... --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- ... --&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p>We start with a state of <code>edit: false</code>. When that element is clicked, we
switch the <code>&lt;span&gt;</code> to a <code>&lt;form&gt;</code> to let the user edit it. On
submission, if the DOM is refreshed, Phoenix will reset the state
anyways and we‚Äôre back to the <code>&lt;span&gt;</code>, but if it‚Äôs not (e.g. input not
modified), we can still handle the <code>page-loading-stop</code> event to go back
to <code>&lt;span&gt;</code> mode. Sweet!</p>
<div class="note">
<p><strong>Note:</strong> if you don‚Äôt use Alpine, you can just listen to the
<code>phx:page-loading-stop</code> event on the <code>window</code> object:</p>
<pre><code class="hljs language-js">addEventListener(<span class="hljs-string">&#x27;phx:page-loading-stop&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-comment">// Your code here!</span>
})
</code></pre>
</div>
<h2 id="monkey-patching-the-livesocket" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#monkey-patching-the-livesocket"><span>Monkey patching the LiveSocket üôà</span></a></h2>
<p>Oh yeah, we love monkey patching. If you use Phoenix LiveView your code
should look something like this (I left alone the Alpine part because
it‚Äôs not relevant to this example).</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { Socket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix&#x27;</span>
<span class="hljs-keyword">import</span> { LiveSocket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix_live_view&#x27;</span>

<span class="hljs-keyword">const</span> csrfToken = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;meta[name=&#x27;csrf-token&#x27;]&quot;</span>).getAttribute(<span class="hljs-string">&#x27;content&#x27;</span>)

<span class="hljs-keyword">const</span> liveSocket = <span class="hljs-keyword">new</span> LiveSocket(<span class="hljs-string">&#x27;/live&#x27;</span>, Socket, {
  <span class="hljs-attr">params</span>: { <span class="hljs-attr">_csrf_token</span>: csrfToken }
})

liveSocket.connect()
</code></pre>
<p>From there, we can intercept the <code>push</code> method on the LiveSocket
channel. That will in turn allow us to add an event handler to the
<code>receive</code> event for a given push, so that we can not only get the full
response from Phoenix, but can also tell from what event it originated!</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> channel = <span class="hljs-built_in">Object</span>.values(liveSocket.roots)[<span class="hljs-number">0</span>].channel
<span class="hljs-keyword">const</span> pushImpl = channel.push

channel.push = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wrappedPush</span> (<span class="hljs-params">event, payload, timeout</span>) </span>{
  <span class="hljs-keyword">const</span> push = pushImpl.call(<span class="hljs-built_in">this</span>, event, payload, timeout)

  push.receive(<span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> {
    <span class="hljs-built_in">console</span>.log(event, payload, resp)
  })

  <span class="hljs-keyword">return</span> push
}
</code></pre>
<p>In the case of my <code>&lt;form&gt;</code> example earlier, <code>event</code> is set to the string
<code>event</code>, <code>resp</code> would contain a <code>diff</code> object that really only makes
sense to Phoenix (or be an empty object if nothing was updated), and the
<code>payload</code> would look something like this:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;form&quot;</span>,
  <span class="hljs-attr">&quot;event&quot;</span>: <span class="hljs-string">&quot;edit_whatever&quot;</span>,
  <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;URL encoded string of the form elements&quot;</span>
}
</code></pre>
<p>This gives pretty useful informations that can allow to hook to LiveView
events in a much more granular manner!</p>
<p>While I didn‚Äôt end up needing that method, I found this trick during my
numerous attempts at dealing with that issue and I found it would be
pretty useful to documented as it‚Äôs pretty easy to implement and I
didn‚Äôt find anything similar online.</p>
<h2 id="further-reading" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#further-reading"><span>Further reading</span></a></h2>
<p>If you enjoy reading about this topic, I encourage you to read those two
articles I stumbled upon during my research on this subject.</p>
<ul>
<li><a href="http://blog.pthompson.org/alpine-js-and-liveview">Integrating Phoenix LiveView with JavaScript and AlpineJS</a>
by <a href="http://blog.pthompson.org/">Patrick Thompson</a>, for a cool demo of
using hooks and events to make LiveView and Alpine play nice together
(but sadly not nice enough for my edge case).</li>
<li><a href="https://elixirschool.com/blog/live-view-with-channels/">Using channels with LiveView for better UX</a>
by <a href="https://twitter.com/sm_debenedetto">Sophie DeBenedetto</a>, to extend
the LiveSocket with a custom channel that allow passing granular
messages to the client. It‚Äôs pretty complex and it kinda scared me at
first to be honest, but if my <a href="https://www.codejam.info/2021/11/monkey-patching-the-livesocket">monkey patch</a>
solution wasn‚Äôt flexible enough for you, this one surely will!</li>
</ul>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1456786062039261187">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>JSDoc: TypeScript inside JavaScript and not the other way around ü§Ø</title>
    <link href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html" />
    <id>https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html</id>
    <updated>2021-10-17T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This post is inspired by this great <a href="https://speakeasyjs.com/">Speakeasy JS</a>
talk by <a href="https://austingil.com/">Austin Gil</a>. üíØ</p>
<figure class="video">
  <iframe src="https://www.youtube.com/embed/iP5XwRT2tNw" allowfullscreen></iframe>
</figure>
<p>Even though I was familiar with the concept of type checking JS files
with TypeScript through JSDoc, I‚Äôve always seen it as a way to
<strong>transition to TypeScript</strong>. You would progressively add
TypeScript-compatible JSDoc to an existing JavaScript project until
everything is covered, to ultimately transition to the actual TypeScript
syntax.</p>
<p>But it never crossed my mind to use TypeScript with JSDoc as an end
goal. Until I saw that talk.</p>
<h2 id="the-problem-with-compiled-javascript" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#the-problem-with-compiled-javascript"><span>The problem with compiled JavaScript</span></a></h2>
<p>The main reason I don‚Äôt use TypeScript is not because of TypeScript
itself (even though there‚Äôs a lot to say here). It‚Äôs because I don‚Äôt
like to compile my JavaScript in the first place, at least not when it‚Äôs
intended for Node.js.</p>
<p>It‚Äôs the same reason I don‚Äôt use <a href="https://flow.org/">Flow</a>,
<a href="https://elm-lang.org/">Elm</a>, <a href="https://dart.dev/">Dart</a>,
<a href="https://babeljs.io/">Babel</a> or <a href="https://coffeescript.org/">CoffeeScript</a>.</p>
<p>JavaScript being an interpreted language, it naturally comes with the
ability to directly run your code. <strong>This is an incredibly convenient
thing.</strong></p>
<ul>
<li>It‚Äôs fast as fuck because there‚Äôs nothing to compile.</li>
<li>You can inspect and debug directly what you write without any extra
tool or configuration.</li>
<li>Your stack traces will be readable and usable out of the box.</li>
<li>Every tool and service you use will (mostly) understand your code by
default, because it‚Äôs <em>native</em> and doesn‚Äôt require special treatment.</li>
</ul>
<p>That‚Äôs a lot of time saved right there by not having to maintain custom
configurations on all the tools and services you use, on top of the fact
you need to install, configure, update and maintain a number of extra
tools, pipelines, workflows, which you‚Äôll also need to teach to
everybody who‚Äôs going to work with you because we all do those things a
little bit differently.</p>
<p>Now, there are benefits to invest in this extra work, so if the cost of
compiling your JavaScript is worth it for you, or you just enjoy the
process, that‚Äôs fine! As far as I‚Äôm concerned, I don‚Äôt enjoy a single
bit of it.</p>
<h2 id="separate-type-definitions-hell" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#separate-type-definitions-hell"><span>Separate type definitions hell üî•</span></a></h2>
<p>Static types are useful and there‚Äôs no argument that having type
checking is generally a beneficial thing. For that reason, more and more
people want types with the libraries they‚Äôre going to use.</p>
<p>I maintain <a href="https://github.com/valeriangalliat">quite a few</a> open source
JavaScript libraries, and on the most popular ones, people have
requested (or better, contributed) TypeScript definitions, whether it‚Äôs
directly in the package repository or on <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">Definitely Typed</a>.</p>
<p>While this comes from a good intention, it causes a number of issues for
everybody involved:</p>
<ul>
<li>
<p>When added directly to the package repository, types represent extra
work for the maintainers who initially wrote a JavaScript project and
didn‚Äôt want to write, maintain, and deal with a TypeScript project.</p>
</li>
<li>
<p>Types are pretty much always added as manually written, static <code>.d.ts</code>
files, because it would represent a lot more work (on top of being
extremely bold and opinionated) to convert the project to TypeScript,
and nobody really wants to do that.</p>
<p>This means there‚Äôs no guarantee that the types will match what the JS
code is actually doing. It‚Äôs a best effort that worked good enough for
whoever contributed it.</p>
</li>
<li>
<p>On top of that, the maintainers (e.g. me) might ‚Äúforget‚Äù to update the
previously contributed TypeScript definitions when they make changes.
The more changes there is, the more likely the types won‚Äôt be updated
because of the amount of extra work it represents.</p>
<p>This means that the included types will most certainly drift out of
sync with the actual code (even more than they already are) until it
breaks someone‚Äôs build and they contribute a fix.</p>
</li>
</ul>
<p>As a maintainer, what can I do?</p>
<ul>
<li>Should I reject a PR that add type definitions because I‚Äôm not ready
to commit to the extra work required to maintain them?</li>
<li>Should I merge the PR only at the condition that the person becomes a
core contributor and maintain the types in future updates?</li>
<li>Should I merge the PR but put a note somewhere that types are
community contributed and might drift out of sync from the JavaScript
code, a bit like I do for translations contributed in languages that I
don‚Äôt speak?</li>
</ul>
<p>I don‚Äôt like any of those choices. Luckily, most of my projects are
small enough that the types don‚Äôt represent a lot of extra work, plus
everybody seems to be happy with type definitions covering only the
happy path which is usually a small subset of the codebase.</p>
<p>So for now I just merge the PRs and let TypeScript users contribute
improvements and bug fixes over time as they need them. It seems that
they‚Äôre used to having things partially broken all the time and they
prefer to have inaccurate or incomplete types than no types.</p>
<h2 id="having-the-best-of-both-worlds" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#having-the-best-of-both-worlds"><span>Having the best of both worlds</span></a></h2>
<p>Out of sympathy for those users (I truly think they deserve something
better), and also because I do believe in the benefits of static typing
(as much as I hate compiling an interpreted language), I decided to
start my <a href="https://github.com/valeriangalliat/node-firefox-sync">latest JavaScript library</a>
with TypeScript definitions in mind from the start.</p>
<p>Thanks to the talk I shared in the beginning of this post, I decided to
write my JSDoc comments in a way that the TypeScript compiler can
consume. Here‚Äôs a few examples:</p>
<details>
  <summary><a href="https://github.com/valeriangalliat/node-firefox-sync/blob/master/auth/oauth.js"><code>auth/oauth.js</code></a></summary>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> base = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./oauth-base&#x27;</span>)

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncOAuthChallengeImpl</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{crypto.KeyPairKeyObjectResult}</span> <span class="hljs-variable">keyPair</span></span>
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{base.OAuthChallenge &amp; SyncOAuthChallengeImpl}</span> <span class="hljs-variable">SyncOAuthChallenge</span></span>
 */</span>

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param <span class="hljs-type">{SyncOAuthChallenge}</span> <span class="hljs-variable">challenge</span></span>
 * <span class="hljs-doctag">@param <span class="hljs-type">{base.OAuthResult}</span> <span class="hljs-variable">result</span></span>
 * <span class="hljs-doctag">@param <span class="hljs-type">{Object}</span> </span>[options]
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.clientId] - OAuth client ID.
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.scope] - OAuth scope.
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.tokenEndpoint] - OAuth token endpoint.
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.tokenServerUrl] - TokenServer URL.
 * <span class="hljs-doctag">@returns <span class="hljs-type">{Promise&lt;import(&#x27;../types&#x27;).SyncCredentials&gt;}</span></span>
 */</span>
<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complete</span> (<span class="hljs-params">challenge, result, options</span>) </span>{
  <span class="hljs-comment">// Actual code.</span>
}

<span class="hljs-built_in">module</span>.exports = { complete }
</code></pre>
</details>
<details>
  <summary><a href="https://github.com/valeriangalliat/node-firefox-sync/blob/master/types.js"><code>types.js</code></a></summary>
<pre><code class="hljs language-js"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncOptions</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[authServerUrl]
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[authorizationUrl]
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[tokenEndpoint]
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[tokenServerUrl]
 * <span class="hljs-doctag">@property <span class="hljs-type">{import(&#x27;./auth/oauth-base&#x27;).OAuthOptions}</span> </span>[oauthOptions]
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">OAuthToken</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">access_token</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">scope</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{number}</span> <span class="hljs-variable">expires_in</span></span>
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncToken</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">id</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">key</span></span>
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncKeyBundle</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">encryptionKey</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">hmacKey</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">kid</span></span>
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncCredentials</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{OAuthToken}</span> <span class="hljs-variable">oauthToken</span></span> - The OAuth token required to authenticate to the TokenServer.
 * <span class="hljs-doctag">@property <span class="hljs-type">{SyncKeyBundle}</span> <span class="hljs-variable">syncKeyBundle</span></span> - The Sync key bundle required to decrypt the collection keys.
 * <span class="hljs-doctag">@property <span class="hljs-type">{SyncToken}</span> <span class="hljs-variable">token</span></span> - The token object required to call the Firefox Sync API.
 * <span class="hljs-doctag">@property <span class="hljs-type">{number}</span> <span class="hljs-variable">tokenIssuedAt</span></span> - Timestamp in milliseconds of when the token was issued to preemptively refresh it.
 */</span>

<span class="hljs-comment">// Does nothing but required for TypeScript to import this file.</span>
<span class="hljs-built_in">module</span>.exports = {}
</code></pre>
</details>
<p>Because I was writing that library from scratch and not adding types to
an existing project, this came at a lower cost, and yielded two major
benefits:</p>
<ul>
<li>I can leverage TypeScript for type checking even though the code is
pure JavaScript.</li>
<li>I can let TypeScript derivate <strong>accurate</strong> type definitions from the
source code.</li>
</ul>
<p>Since the <code>.d.ts</code> files are automatically generated as opposed to being
manually maintained, this drastically reduces the chance for them to go
out of sync or be inaccurate, especially because the code itself is also
type checked (this is important because TypeScript will otherwise
happily generate totally broken type definitions from JSDoc comments
that don‚Äôt pass type checking).</p>
<p>Also for that same reason, if the types were to be incomplete (there‚Äôs
still a number of <code>any</code> in this project, I admit), contributors will
have to add them as JSDoc comments to the JavaScript source and not just
to a ‚Äúdead‚Äù <code>.d.ts</code> file, making the code safer as a side effect by
increasing the actual type checking coverage, and guaranteeing that the
exported types match the underlying implementation. Not only this tests
code against the types, but as importantly, <strong>it tests the types against
the code</strong>.</p>
<h2 id="why-this-works-best-for-me" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#why-this-works-best-for-me"><span>Why this works best for me</span></a></h2>
<p>With this pattern, I can still <strong>write, run and debug native JavaScript
code</strong>.</p>
<p>This is what makes me <strong>efficient at what I‚Äôm doing</strong>. My development is
not slowed down by constantly running a compiler, dealing with the extra
complexity that comes with debugging transpiled code, and time spent
fixing type errors on non-production code.</p>
<p>When I write a piece of code, it‚Äôs rarely going to be perfect,
production quality code from the start. It takes me dozens of iterations
and rewriting pieces of it until I reach a point where I‚Äôm satisfied.
Only when I‚Äôm done I‚Äôll clean up and refactor whatever parts need extra
love, handle the edge cases, and make the linter happy. This is when,
and only when, I want to run the type checks. There‚Äôs no point in having
blocking type checks on code that I‚Äôll rewrite or remove a minute later.</p>
<div class="note">
<p><strong>Note:</strong> this last point is a problem that I had specifically with the
<code>ts-node</code> utility, but <code>tsc</code> itself is more forgiving and will output a
runnable JS code even when there‚Äôs type errors.</p>
<p>Also while writing this section, I stumbled upon <code>ts-node --transpile-only</code>
that allows running the code even if it doesn‚Äôt pass type validation,
which seems like a must-have during development. I‚Äôm kinda sour that
it took me a 4 months post-burnout retirement kind of step back to
finally find about it, after fighting with this problem for years. üò¨</p>
</div>
<h2 id="the-chicken-and-egg-problem-between-js-and-d-ts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#the-chicken-and-egg-problem-between-js-and-d-ts"><span>The chicken and egg problem between <code>.js</code> and <code>.d.ts</code></span></a></h2>
<p>I didn‚Äôt share the commands I use to do the type checking and derive the
<code>.d.ts</code> files from the JSDoc comments yet, and you‚Äôre probably dying to
know them. üòâ</p>
<p>But first, I need to share something else with you. See, I usually have
this kind of structure for packages I publish on npm:</p>
<pre><code class="hljs">my-cool-package
‚îú‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ test.js
</code></pre>
<p>It seems that the natural way to <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html#tsconfig">extract type definitions</a>
would be:</p>
<pre><code class="hljs language-sh">tsc *.js --allowJs --declaration --emitDeclarationOnly
</code></pre>
<p>Which yields:</p>
<pre><code class="hljs">my-cool-package
‚îú‚îÄ‚îÄ <span class="hljs-addition">index.d.ts</span>
‚îú‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ <span class="hljs-addition">test.d.ts</span>
‚îî‚îÄ‚îÄ test.js</code></pre>
<p>You‚Äôll quickly notice that there‚Äôs something funky with this method of
doing things.</p>
<ul>
<li>We generate <code>.d.ts</code> files from <code>.js</code> files.</li>
<li>TypeScript has an <strong>hardcoded</strong> rule where it systematically imports
any <code>.d.ts</code> file that‚Äôs next to an imported <code>.js</code> file. This is
regardless of your explicit <code>include</code> and <code>exclude</code> patterns and
there‚Äôs no way to turn off this behavior.</li>
<li>TypeScript refuses to overwrite input files (and that‚Äôs a good thing).</li>
</ul>
<p>But guess what? <code>test.js</code> imports <code>index.js</code> (so that it can, you know,
test it).</p>
<p>The problem here is that while this command will run fine the first
time, <a href="https://github.com/microsoft/TypeScript/issues/16749">subsequent runs will fail</a>
because TypeScript will <em>always</em> consider a <code>.d.ts</code> that is next to an
included <code>.js</code> file to be part of its inputs and will refuse to
overwrite it. And even if it allowed to overwrite the declaration files,
we would still be loading the stale <code>.d.ts</code> instead of using the
up-to-date JSDoc types, which sounds like a hot mess.</p>
<p>You might tell me that hey, we don‚Äôt really need a <code>.d.ts</code> to be
generated for the test file, and you would be right. Replacing <code>*.js</code> by
<code>index.js</code> in the above example does fix the problem.</p>
<p>But sometimes, I‚Äôm dealing with a more complex package where the
structure would look something like this:</p>
<pre><code class="hljs">my-cool-package
‚îú‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ <span class="hljs-addition">some-other-file.js</span>
‚îî‚îÄ‚îÄ test.js</code></pre>
<p>As soon as <code>index.js</code> imports <code>some-other-file.js</code>, we‚Äôre off the happy
path for TypeScript again.</p>
<p>I wrote about this in more details in <a href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html">cannot write file <code>.d.ts</code> because it would overwrite input file</a>,
and you have many options to go about this, including splitting the code
in a <code>src</code> or <code>dist</code> directory or some combination of both, and while
they all solve this particular problem, they also all leak into other
aspects that you‚Äôll have to work around.</p>
<p>For example in the ‚Äúcomplex‚Äù case above, you might want to allow
your users to <code>import 'my-cool-package/some-other-file'</code>, and not just
<code>import 'my-cool-package'</code>. How wild would that be?</p>
<p>Apparently, wild enough that most of the recommended solutions for the
earlier problem will fail to deliver types information for that use
case, or require you to do crazy things like copying your <code>package.json</code>
to the <code>dist</code> directory and publishing from there.</p>
<h2 id="the-simple-hack-that-just-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#the-simple-hack-that-just-works"><span>The simple hack that just works</span></a></h2>
<p>Because I prefer a simple hack that just works to a fix that will break
other things and require a cascade of other fixes, I settled for the
following command:</p>
<pre><code class="hljs"><span class="hljs-addition">rm -f *.d.ts && </span>tsc *.js --allowJs --declaration --emitDeclarationOnly</code></pre>
<p>It‚Äôs simple, reliable, it works and I understand every bit of why it
works and why it needs to be there (as much as I hate that it needs to
be there in the first place).</p>
<p>I also added <code>--removeComments</code> and replaced <code>--allowJs</code> by <code>--checkJs</code>
to make sure that the code passes type checking when I generate the
final definitions.</p>
<p>In my <code>package.json</code>, the final <code>scripts</code> property looks like this:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;scripts&quot;</span>: {
    <span class="hljs-attr">&quot;check&quot;</span>: <span class="hljs-string">&quot;tsc *.js --checkJs --noEmit&quot;</span>,
    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
    <span class="hljs-attr">&quot;prepare&quot;</span>: <span class="hljs-string">&quot;npm run lint &amp;&amp; npm run types&quot;</span>,
    <span class="hljs-attr">&quot;types&quot;</span>: <span class="hljs-string">&quot;rm *.d.ts &amp;&amp; tsc *.js --checkJs --declaration --emitDeclarationOnly --removeComments&quot;</span>
  }
}
</code></pre>
<p>As always, I use <a href="https://standardjs.com/"><code>standard</code></a> to lint my code,
and in the <a href="https://docs.npmjs.com/cli/v7/using-npm/scripts#life-cycle-scripts"><code>prepare</code></a>
script, the code is linted, typed checked and the definitions are
updated.</p>
<p>There‚Äôs also a convenience <code>check</code> script that doesn‚Äôt emits the
declaration files, to be used for quick checks during development.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#conclusion"><span>Conclusion</span></a></h2>
<p>As usual with TypeScript it was a pain in the ass to get this to work
and (also as usual) I had to resort to a hack at the end of the day. But
that‚Äôs mostly because I‚Äôm a perfectionist and I wasn‚Äôt happy with having
just the happy path working. üòú</p>
<p>Still, I believe that this method allows to reduce the gap between
TypeScript and JavaScript, while <strong>getting rid of manual work</strong>, making
the JavaScript code <strong>safer</strong>, and making the type definitions <strong>more
accurate and reliable</strong> by tightly coupling them to the code.</p>
<p>Because it yields <strong>most of the benefit</strong> at the <strong>lowest cost and
initial investment</strong>, TypeScript-aware JSDoc comments is likely to
become my go-to for writing JS libraries from now on.</p>
<p>What do you think of this solution? Have you used it yourself, or did
this make you want to type your projects this way? Feel free to <a href="https://www.codejam.info/val.html#contact">reach out</a>
and let me know. And as usual, keep hacking! ‚ú®</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1449783928970256394">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>TypeScript: cannot write file .d.ts because it would overwrite input file</title>
    <link href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html" />
    <id>https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html</id>
    <updated>2021-10-16T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>There‚Äôs <a href="https://stackoverflow.com/questions/42609768/typescript-error-cannot-write-file-because-it-would-overwrite-input-file">countless</a>
<a href="https://stackoverflow.com/questions/46914070/how-to-exclude-d-ts-file-for-typescript-compiler">issues</a>
<a href="https://github.com/microsoft/TypeScript/issues/16749">about</a>
this error and I thought it would be useful to write a clear explanation
of what‚Äôs going on and a summary of the possible solutions.</p>
<p>This happens for two reasons:</p>
<ol>
<li>You‚Äôre explicitly including those <code>.d.ts</code> files e.g. as part of your
<code>include</code> array in <code>tsconfig.json</code> or as part of the <code>tsc</code> arguments,
and you‚Äôre asking TypeScript to output type declarations in the same
place. Then the error is pretty obvious and the fix should be too
(don‚Äôt output the generated declarations in the same place as types
you‚Äôre importing, for example using <code>outDir</code>, or don‚Äôt import those
generated declarations in the first place).</li>
<li>You‚Äôre not importing those <code>.d.ts</code> files, or you‚Äôre even explicitly
ignoring them e.g. with the <code>exclude</code> array in <code>tsconfig.json</code>, yet
TypeScript keeps using them as input and complaining that it can‚Äôt
overwrite them when generating type declarations.</li>
</ol>
<p>Here we‚Äôll go in more details about the second reason.</p>
<h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#the-problem"><span>The problem</span></a></h2>
<p>The main thing that you need to know is that if you‚Äôre importing a <code>.js</code>
file and there‚Äôs a matching <code>.d.ts</code> next to it, TypeScript will
<strong>always</strong> import it, even if you didn‚Äôt explicitly include those
<code>.d.ts</code> files as input, and even if you explicitly put them in the
<code>exclude</code> array. There‚Äôs no way around this.</p>
<h2 id="output-d-ts-declarations-to-a-separate-directory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#output-d-ts-declarations-to-a-separate-directory"><span>Output <code>.d.ts</code> declarations to a separate directory</span></a></h2>
<p>One solution is to put the generated type declarations in a separate
directory instead of next to the <code>.js</code> files. You can do that by
configuring a <code>outDir</code>, as explained in the documentation about
<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html#tsconfig">creating <code>.d.ts</code> files from <code>.js</code> files</a>:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;compilerOptions&quot;</span>: {
    <span class="hljs-comment">// Tells TypeScript to read `.js` files, as normally they are</span>
    <span class="hljs-comment">// ignored as source files.</span>
    <span class="hljs-attr">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-comment">// Generate `d.ts` files.</span>
    <span class="hljs-attr">&quot;declaration&quot;</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-comment">// This compiler run should only output `d.ts` files.</span>
    <span class="hljs-attr">&quot;emitDeclarationOnly&quot;</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-comment">// Types should go into this directory. Removing this would place</span>
    <span class="hljs-comment">// the `.d.ts` files next to the `.js` files.</span>
    <span class="hljs-attr">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>
  }
}
</code></pre>
<p>As they nicely indicate, if you don‚Äôt specify <code>outDir</code>, the <code>.d.ts</code> will
be put next to the <code>.js</code> files (which literally means they‚Äôll be
automatically considered as inputs on the next build and it will crash),
and it‚Äôs probably the way you‚Äôre using this right now.</p>
<p>Then you can tell TypeScript where to <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html">find the package types</a>
in your <code>package.json</code>:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;types&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>
}
</code></pre>
<p>But this only works for the main export (<code>import 'my-lib'</code>) and will
break if you attempt to import nested files <code>import 'my-lib/some-file'</code>.</p>
<p>If you want to support this use case, you <strong>have to</strong> ship the <code>.d.ts</code>
files next to the <code>.js</code> files.</p>
<p>So here‚Äôs a few alternative solutions and their tradeoffs.</p>
<h2 id="copy-the-js-files-next-to-the-d-ts-declarations" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#copy-the-js-files-next-to-the-d-ts-declarations"><span>Copy the <code>.js</code> files next to the <code>.d.ts</code> declarations</span></a></h2>
<p>Since we can‚Äôt generate the <code>.d.ts</code> next to the source <code>.js</code> files (well
we can, but just once), we can instead generate the <code>.d.ts</code> files to a
<code>dist</code> directory and copy the <code>.js</code> files next to them.</p>
<p>There‚Äôs two ways you can do that, the first one I tried is to remove
<code>emitDeclarationOnly</code> so that let TypeScript compiles the source <code>.js</code>
files to the <code>outDir</code>, and the other one is to manually copy them.</p>
<p>In both cases there‚Äôs a number of caveats with that about how you import
nested files, and I‚Äôll go through the possible workarounds.</p>
<h3 id="compile-your-js-files-to-js-lol" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#compile-your-js-files-to-js-lol"><span>Compile your JS files to JS (lol)</span></a></h3>
<p>The reason you have this error in the first place is likely because
you‚Äôre writing actual JavaScript and generating types from JSDoc.</p>
<p>One of the numerous benefits of doing that is that you don‚Äôt need to
compile your code. Your <code>src</code> is your <code>dist</code> and that‚Äôs the beauty of
it. You run what you write, no compilation, no source maps, and no
configuration of every single tool and service you use to deal with this
extra complexity.</p>
<p>You can throw away all of those benefits by letting TypeScript compile
your <code>.js</code> files to the <code>outDir</code>, by removing <code>emitDeclarationOnly</code> from
the <code>tsc</code> command or <code>tsconfig.json</code>, so that they‚Äôre put along the
generated <code>.d.ts</code> files.</p>
<p>But at that point you might as well write TypeScript in the first place.</p>
<h3 id="manually-copy-your-js-files-to-the-outdir" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#manually-copy-your-js-files-to-the-outdir"><span>Manually copy your JS files to the <code>outDir</code></span></a></h3>
<p>A <a href="https://vccolombo.github.io/blog/tsc-how-to-copy-non-typescript-files-when-building/">better way</a>
if you want to ship your <code>.js</code> files unaltered is to copy them yourself
next to the <code>.d.ts</code> declarations.</p>
<pre><code class="hljs language-sh">tsc *.js --allowJs --declaration --emitDeclarationOnly --outDir dist &amp;&amp; cp *.js dist
</code></pre>
<p>Then you can <code>import 'my-lib/dist/some-file</code> and types will work
properly. If you want to allow deep imports though, we need to dig a bit
further.</p>
<h2 id="getting-it-to-work-with-deep-nested-imports" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#getting-it-to-work-with-deep-nested-imports"><span>Getting it to work with deep/nested imports</span></a></h2>
<p>If you want to allow <code>import 'my-lib/some-file'</code> and don‚Äôt like the idea
of documenting <code>import 'my-lib/dist/some-file'</code>, you have again
<a href="https://stackoverflow.com/questions/67097803/how-to-let-users-import-from-subfolders-of-my-npm-package">a few options</a>.</p>
<h3 id="compile-to-the-project-root" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#compile-to-the-project-root"><span>Compile to the project root</span></a></h3>
<p>Make sure your source files are in a subfolder, e.g. <code>src</code>, then compile
to the project root directory.</p>
<pre><code class="hljs language-sh">tsc src/*.js --allowJs --declaration --emitDeclarationOnly --outDir . &amp;&amp; cp src/*.js .
</code></pre>
<h3 id="publish-from-your-dist-directory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#publish-from-your-dist-directory"><span>Publish from your <code>dist</code> directory</span></a></h3>
<p>The previous solution might get a bit messy though so
<a href="https://stackoverflow.com/questions/38935176/how-to-npm-publish-specific-folder-but-as-package-root">alternatively</a>
you can use the earlier command with <code>--outDir dist</code>, but put your
<code>package.json</code> in the <code>dist</code> directory as well, and run <code>npm publish dist</code> (or <code>cd dist &amp;&amp; npm publish</code>).</p>
<p>Whether you want your <code>package.json</code> to live in the <code>dist</code> directory
(and commit it there), or run <code>cp package.json dist</code> as part of your
build command is up to you.</p>
<h3 id="write-an-exports-map" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#write-an-exports-map"><span>Write an <code>exports</code> map</span></a></h3>
<p>If you‚Äôre not happy with the previous solutions, you can write an
<a href="https://nodejs.org/api/packages.html#packages_exports"><code>exports</code> map</a>
in your <code>package.json</code> so that <code>import 'my-lib/some-file</code> translates
to <code>my-lib/dist/some-file</code>.</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;exports&quot;</span>: {
   <span class="hljs-attr">&quot;./some-file&quot;</span>: <span class="hljs-string">&quot;./dist/some-file&quot;</span>,
   <span class="hljs-attr">&quot;./some/other-file&quot;</span>: <span class="hljs-string">&quot;./dist/some/other-file&quot;</span>
  }
}
</code></pre>
<p>That being said only the paths defined here will be allowed to be
imported, you won‚Äôt be able to import arbitrary files anymore, which
might not be a bad thing, but maybe you like the simplicity of
everything being importable by default.</p>
<h2 id="quick-and-dirty-hack-that-actually-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#quick-and-dirty-hack-that-actually-works"><span>Quick and dirty hack that actually works</span></a></h2>
<p>To get the best of both worlds by generating <code>.d.ts</code> files next to your
source <code>.js</code> files without adding extra configuration and still allowing
deep imports, you need to <strong>explicitly remove the generated files before
running the compiler</strong>.</p>
<p>Simple, easy and dirty:</p>
<pre><code class="hljs language-sh">rm -f *.d.ts &amp;&amp; tsc *.js --allowJs --declaration --emitDeclarationOnly
</code></pre>
<p>Here I use <code>rm -f</code> so that it doesn‚Äôt fail if the declaration files are
not generated yet. Feel free to tweak the pattern, for example if you
have subfolders you want to include.</p>
<p>I‚Äôm not a big fan of this solution, but it‚Äôs still my favorite of all
the ones I described in this post. It seems that TypeScript wasn‚Äôt built
for simplicity, let alone for working with source <code>.js</code> files, and deep
imports don‚Äôt seem to be part of the happy path either. If you found a
better way, please <a href="https://www.codejam.info/val.html#contact">let me know</a>!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
</feed>
