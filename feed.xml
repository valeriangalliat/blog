<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeJam</title>
  <subtitle>Hey, I’m Val, welcome to my blog!</subtitle>
  <link href="https://www.codejam.info/feed.xml" rel="self" />
  <link href="https://www.codejam.info/" />
  <id>https://www.codejam.info/</id>
  <updated>2024-05-04T00:25:35.537Z</updated>
  <author>
    <name>Val</name>
  </author>
  <entry>
    <title>Use Gmail to send emails with a custom domain for free (secret trick) 😏</title>
    <link href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html" />
    <id>https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html</id>
    <updated>2024-05-03T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>So you want to use Gmail with a custom domain without paying a Google
Workspace subscription? Well, it’s possible!</p>
<p>The main tradeoff with that is that Gmail will
<a href="https://support.google.com/mail/answer/1311182">display</a>
your emails on the recipient side with a “via gmail.com” next to your
email.</p>
<figure class="center">
  <img alt="Sender card showing “via gmail.com”" srcset="../../img/2024/04/gmail/via.png 2x">
</figure>
<p>The second tradeoff is that while the email will appear with your custom
domain, the Gmail address that you use will also show in the source
headers of the email, so a technical user could find it.</p>
<p>The last tradeoff is that you won’t be able to sign your emails with
DKIM.</p>
<p>If you’re fine with that, then read on!</p>
<h2 id="configuring-gmail-smtp-as-an-external-smtp-in-gmail" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#configuring-gmail-smtp-as-an-external-smtp-in-gmail"><span>Configuring Gmail SMTP as an external SMTP in Gmail 🙃</span></a></h2>
<p>Gmail allows you to add external SMTP servers, to send emails using
other email addresses that you own. You can find that in <strong>Settings &gt;
Accounts and Import &gt; Send mail as</strong>.</p>
<p>However, Gmail can itself be used as a SMTP server for <em>other apps</em> to
send emails via your Gmail account. That in itself is a bit of a hidden
trick, and is explained <a href="https://noted.lol/setup-gmail-smtp-sending-2023/">here</a>.</p>
<p>In short: <a href="https://myaccount.google.com/security">in your Google account security settings</a>,
in <strong>2-Step Verification &gt; App passwords</strong>, add a new app password.</p>
<figure class="center">
  <img alt="App passwords" srcset="../../img/2024/04/gmail/app-passwords.png 2x">
</figure>
<div class="note">
<p><strong>Note:</strong> that section may not show for you… on my side it seems to
show only if I already have existing app passwords but it’s completely
missing otherwise!</p>
<p>Luckily you can still access it via its <a href="https://myaccount.google.com/apppasswords">direct URL</a>.</p>
</div>
<p>Then you can use the following SMTP settings:</p>
<pre><code class="hljs">Host: smtp.gmail.com
Port: 587
Encryption: TLS
User: you@gmail.com
Password: the password generated earlier
</code></pre>
<p>Where it gets funky is that you can use those SMTP settings from inside
Gmail itself, like if you were adding an external SMTP server!</p>
<p>Again, in <strong>Settings &gt; Accounts and Import &gt; Send mail as</strong>, you can
<strong>Add another email address</strong>. Use your custom email address in the
email field e.g. <code>you@yourdomain.com</code>. Then use the SMTP settings from
above. In the SMTP settings, the user needs to be your Gmail account,
e.g. <code>you@gmail.com</code>, and not <code>you@yourdomain.com</code>.</p>
<p>Gmail will then need to verify that you own that email by sending you a
confirmation email. Once the verification done, you can start sending
emails using your custom domain! (You may have to reload the page as I
did otherwise sending an email using the new address would hang
forever.)</p>
<h2 id="why-is-that-even-allowed" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#why-is-that-even-allowed"><span>Why is that even allowed?</span></a></h2>
<p>It’s nice that Gmail does that verification step to confirm you do
really own that address, because they definitely don’t want Gmail
servers to be used to send nonlegitimate emails. But not all providers
and SMTP servers are that cautious. If I can make Gmail servers send
emails on the behalf of my domain, what prevents anyone to do the same
with their own servers?</p>
<p>Well, I’m glad you asked. Turns out anyone can, unless you configure
DKIM and DMARC.</p>
<h3 id="dkim-and-dmarc" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#dkim-and-dmarc"><span>DKIM &amp; DMARC</span></a></h3>
<p>With DKIM, you generate a keypair, configure the private key on your
SMTP server to sign your emails, and configure the public key on your
DNS so that the servers receiving your emails can check the signature
against your public key.</p>
<p>DMARC is also configured on your DNS and lets you define rules about how
to deal with emails that don’t pass DKIM validation (ignore, mark as
spam, or block), as well as endpoints to receive reports (so you have a
way to know if you misconfigured something and your emails are getting
blocked).</p>
<h3 id="you-need-google-workspace-for-that" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#you-need-google-workspace-for-that"><span>You need Google Workspace for that</span></a></h3>
<p>However as I mentioned in the beginning, that nifty Gmail setup doesn’t
let you use DKIM. You can’t configure a private key on Gmail’s SMTP
servers for them to sign emails from your custom domain. That’s a Google
Workspace <a href="https://support.google.com/a/answer/180504">feature</a> that you
have to pay for.</p>
<p>So for this trick to work, you need to not have DMARC configured, or
have your DMARC configuration allow unsigned emails.</p>
<h3 id="what-about-spf" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#what-about-spf"><span>What about SPF?</span></a></h3>
<p>Interestingly, SPF doesn’t help with that situation, because it
<a href="https://postmarkapp.com/guides/spf#understanding-the-limitations-of-spf">acts on the <code>Return-Path</code></a>
and not the <code>From</code> header.</p>
<p>In the case of the Gmail setup above, the email headers would look like:</p>
<pre><code class="hljs">From: you@yourdomain.com
Return-Path: you@gmail.com
</code></pre>
<p>(As I mentioned above, that’s where the Gmail email appears in the
source and could be seen by technical users.)</p>
<p>SPF validates against the <code>Return-Path</code>, so it will check that the
server sending the email is indeed allowed to send emails on behalf of
<code>gmail.com</code>, which Gmail servers are. No fucks are given about
<code>yourdomain.com</code> at that point.</p>
<p>Because of this weakness in SPF, that’s why even if SPF validation
passes, Gmail displays the “via” label when the <code>From</code> and <code>Return-Path</code>
domains don’t match <a href="https://postmarkapp.com/blog/dkim-and-the-via-label-in-gmail">and the email is not signed with DKIM</a>.
This gives you a chance to know that the email is not authenticated and
sent through a third party.</p>
<h2 id="it-doesn-t-work-across-gmail-accounts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#it-doesn-t-work-across-gmail-accounts"><span>It doesn’t work across Gmail accounts</span></a></h2>
<p>One thing to note, which you’re probably not likely to run into, but
well, I do weird things sometimes, is that this setup <em>doesn’t work
across different Gmail accounts</em>.</p>
<p>By that, I mean that if you set up an “app password” on <code>you2@gmail.com</code>,
and you configure it as the outbound SMTP server for <code>you@gmail.com</code> to
send emails from <code>you@yourdomain.com</code>, <strong>it won’t work</strong>.</p>
<p>Your emails will be sent, but it won’t show the custom email domain, it
will show from <code>you2@gmail.com</code> instead. The trick only works when the
same Gmail account is used in both places.</p>
<p>If this section makes no sense to you, don’t worry about it. It’s quite
a niche setup to try, but I thought I’d mention anyway if it can be
useful to anyone trying to do the same thing.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>I hope this trick will be useful to you!</p>
<p>As far as I’m concerned, because I wanted to avoid the “via” label and I
wanted to be able to set up DKIM, I went with <a href="https://www.zoho.com/mail/">Zoho Mail</a>
(not affiliated). They try really hard to hide it, but they
<a href="https://help.zoho.com/portal/en/community/topic/free-plan-mail-accounts-details">actually</a>
have a <a href="https://www.zoho.com/mail/help/adminconsole/subscription.html#:~:text=under%20Zoho%20Workplace-,free%20plan,-%3A%20Using%20this%20plan">free plan</a>
with up to 5 GB of storage, which I don’t care about because I just
configure it as an outbound SMTP server that doesn’t store anything. 😄</p>
<p>Either way, you should now be all set to send emails with your own
domain. Enjoy! 🤙</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>gocryptfs on macOS (with and without macFUSE)</title>
    <link href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html" />
    <id>https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html</id>
    <updated>2024-04-26T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In this post I’m taking gocryptfs as an example because that’s what I
use to encrypt my <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">offsite backups</a>, but this
can probably be applied to doing anything FUSE-related on a Mac.</p>
<h2 id="gocryptfs-on-macos" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#gocryptfs-on-macos"><span>gocryptfs on macOS</span></a></h2>
<p>Using gocryptfs on macOS requires <a href="https://osxfuse.github.io/">macFUSE</a>.
macFUSE (previously known as <a href="https://web.archive.org/web/20130710220229/https://osxfuse.github.io/">OSXFUSE</a>
(previously known as <a href="https://web.archive.org/web/20130704045540/http://code.google.com/p/macfuse/">MacFUSE</a>
lol TIL)) is an awesome project that allows to mount
<a href="https://www.kernel.org/doc/html/next/filesystems/fuse.html">FUSE</a>
filesystems on macOS.</p>
<p>All it takes is:</p>
<pre><code class="hljs language-sh">brew --cask install macfuse

<span class="hljs-comment"># Do the reboot dance to allow the kernel extension (see &quot;concerns&quot; below)</span>

brew install gromgit/fuse/gocryptfs-mac

<span class="hljs-comment"># Not needed but might as well have SSHFS around too</span>
brew install gromgit/fuse/sshfs-mac
</code></pre>
<div class="note">
<p><strong>Note:</strong> gocryptfs and SSHFS can’t be installed from Homebrew’s main
registry anymore <a href="https://github.com/Homebrew/homebrew-core/pull/74812#issuecomment-826895526">because</a>
they depend on macFUSE, which is not open source.</p>
<p>This is why the above command installs from <a href="https://github.com/gromgit/homebrew-fuse">this repository</a>,
which hosts the Homebrew formulas that depend on FUSE that were dropped
from Homebrew.</p>
</div>
<h2 id="concerns-about-macfuse" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#concerns-about-macfuse"><span>Concerns about macFUSE</span></a></h2>
<p>Sadly, macFUSE is not open source. But at least it’s been updated
regularly for over 10 years, and keeps supporting the latest macOS
versions, so as long as this stays the case, I don’t mind using it.</p>
<p>That said, depending on macFUSE for a process as critical as my <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">offsite backups</a>
means that I will need to wait for it to support a new macOS version
before I deem to upgrade. Because it’s a kernel extension, it’s
not necessarily as easy to upgrade as other userland programs.</p>
<p>The other problem is that Apple <a href="https://developer.apple.com/support/kernel-extensions/">deprecated kernel extensions</a>
in 2020 with macOS Catalina (although they still work up to this date on
later versions). This is tracked in <a href="https://github.com/osxfuse/osxfuse/issues/987">this macFUSE issue</a>
but at the time of writing, Apple doesn’t provide APIs that allow to
implement macFUSE outside of a (now deprecated) kernel extension.</p>
<p>On top of that, going with the deprecation, Apple made it
<a href="https://github.com/osxfuse/osxfuse/issues/814">annoying</a>
to install kernel extensions on ARM Macs, by having to reboot in
recovery and enabling “reduced security” mode (which is now <a href="https://support.apple.com/en-ca/guide/security/sec7d92dc49f/web">required</a>
for kernel extensions).</p>
<p>While macFUSE works now, and have been working for many years after the
original deprecation of kernel extensions by Apple, its future is still
somewhat unclear.</p>
<p>In future versions, will macOS drop some the APIs that macFUSE depend
on, without providing viable alternatives? Or will they entirely block
kernel extensions? And in the event they do provide viable alternative
APIs, how long will it take for macFUSE to support that new version?</p>
<p>Otherwise, is any of the alternatives like
<a href="https://www.fuse-t.org/">FUSE-T</a> gonna be solid enough by then? And
more importantly, is gocryptfs gonna work with those alternatives?
Actually, it won’t, because right now
<a href="https://github.com/hanwen/go-fuse">go-fuse</a> depends explicitly on
macFUSE.</p>
<p>So, I wasn’t ready to commit to that setup without having a somewhat
viable fallback.</p>
<h2 id="gocryptfs-on-macos-without-macfuse" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#gocryptfs-on-macos-without-macfuse"><span>gocryptfs on macOS without macFUSE</span></a></h2>
<p>While FUSE, as we saw, is a bit of a challenge on macOS, it’s perfectly
fine on Linux. gocryptfs and FUSE on Linux are not going anywhere.</p>
<p>Now, <a href="https://github.com/lima-vm/lima">Lima</a> is a pretty sweet way to
run a Linux VM on macOS. Similarly to <a href="https://learn.microsoft.com/en-us/windows/wsl/install">WSL</a>
on Windows, Lima can drop you in a Linux shell on your Mac, with
transparent access to your files.</p>
<p>This means you can easily install gocryptfs in that Lima environment,
and use it there. Assuming I want to get an encrypted mount of my home
directory (<code>~</code>):</p>
<pre><code class="hljs language-sh">brew install lima

limactl start

lima sudo apt install gocryptfs

<span class="hljs-comment"># Init in a temp dir because Lima can&#x27;t write to the host filesystem</span>
lima gocryptfs -init -reverse /tmp/lima

<span class="hljs-comment"># From the host move the config file in the right place</span>
<span class="hljs-built_in">mv</span> /tmp/lima/.gocryptfs.reverse.conf ~

lima <span class="hljs-built_in">mkdir</span> -p /tmp/encrypted
lima gocryptfs -reverse ~ /tmp/encrypted
lima rsync --archive /tmp/encrypted <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> Depending on how you connect to <code>$DESTINATION</code>, you may want to
copy/link your SSH config and keys inside the Linux home of the VM
user. For example:</p>
<pre><code class="hljs language-sh">lima <span class="hljs-built_in">ln</span> -s ~/.ssh/{config,id_ed25519*} <span class="hljs-string">&quot;<span class="hljs-subst">$(lima sh -c &#x27;echo $HOME&#x27;)</span>/.ssh&quot;</span>
</code></pre>
</div>
<h2 id="decrypting-remote-files" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#decrypting-remote-files"><span>Decrypting remote files</span></a></h2>
<p>We can as easily do the opposite: use SSHFS to mount the remote
encrypted directory locally, then use gocryptfs to decrypt it and access
the files transparently.</p>
<pre><code class="hljs language-sh">lima sudo apt install sshfs

lima <span class="hljs-built_in">mkdir</span> -p /tmp/encrypted /tmp/decrypted
sshfs -o idmap=user <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> /tmp/encrypted
gocryptfs /tmp/encrypted /tmp/decrypted
</code></pre>
<p>At that point we can browse the decrypted tree from the Lima shell,
however we can’t access it from the host.</p>
<h2 id="accessing-decrypted-files-from-the-host" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#accessing-decrypted-files-from-the-host"><span>Accessing decrypted files from the host</span></a></h2>
<p>If Lima can access files from the host, why can’t the host access files
from Lima?</p>
<p>Well, it comes down again to the ability to us FUSE. In order to access
host files, Lima starts a SSHFS server on the macOS host, and then
mounts it via SSHFS (FUSE) inside the Linux VM. That’s fine, because
Linux have absolutely no issue with FUSE stuff.</p>
<p>The other way around however, we would need FUSE on the macOS side in
order to mount a SSHFS server running inside the VM. No bueno, because
we’re doing all this jazz to avoid dealing with FUSE on macOS in the
first place. 😬</p>
<p>So if we’re not gonna use FUSE, we need to fallback to another protocol
that’s better supported on Mac, like WebDAV.</p>
<p>The best way I’ve found to do that is actually to use a simple, plain Go
WebDAV server such as <a href="https://taoofmac.com/space/til/2022/11/25/2200">this one</a>.</p>
<p>Just point the server to serve the decrypted mount point from earlier.</p>
<p>We also need to edit the Lima VM config in
<code>~/.lima/default/lima.yaml</code> to forward the port the WebDAV server is
listening on, so we can access it from the host system, such as:</p>
<pre><code class="hljs language-yaml"><span class="hljs-attr">portForwards:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-attr">guestPort:</span> <span class="hljs-number">1234</span>
</code></pre>
<p>Then on the macOS side we can do:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">mkdir</span> -p mountpoint
mount_webdav http://localhost:1234 mountpoint
</code></pre>
<p>Before going with the custom Go solution, I’ve tried
<a href="https://wiki.gnome.org/phodav">phởdav</a>, because unlike most WebDAV
servers, it doesn’t require any kind of hairy configuration, and can be
spawned in a ad hoc way that just works. But the performance wasn’t as
good as the Go version. I’ve also tried NFS, but that was much even
slower.</p>
<p>That said, don’t get your hopes too high. Even with the Go version, the
performance wasn’t super fast, but I believe it’s mainly because of
being run over SSHFS, so your mileage may vary depending on the network
bandwidth you have with your offsite server. But as a fallback, I’ll
call it good enough anyway.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1784030029187588316">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Encrypted offsite backup system: syncing 📲</title>
    <link href="https://www.codejam.info/2024/04/offsite-backup-sync.html" />
    <id>https://www.codejam.info/2024/04/offsite-backup-sync.html</id>
    <updated>2024-04-26T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<ol>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-storage.html">Encrypted offsite backup system: storage 💾</a></li>
<li>Encrypted offsite backup system: syncing 📲</li>
</ol>
</div>
<p>In <a href="https://www.codejam.info/2024/04/offsite-backup-storage.html">the previous post</a> I decided to go with
a <a href="https://www.hetzner.com/storage/storage-box/">Hetzner Storage Box</a>
for my backups.</p>
<p>It supports a number of file transfer protocols as well as first-class
support for backup protocols like BorgBackup and Restic, and of course,
the venerated rsync.</p>
<p>I ended up settling for rsync, because it’s a lower level option than
BorgBackup and Restic, that gives me a ton of freedom do design my
backup system the way I want.</p>
<p>rsync is also incredibly simple to use and understand, and at the end of
the day it just syncs files from one place to another. There’s nothing
specific to rsync in the layout of my backups, so I don’t actually
<em>need</em> rsync for the backups to be usable. That’s a massive advantage.</p>
<p>It comes to the cost of having to take care of everything else myself,
in particular encryption, as well as incremental backups (which I chose
to not implement, although it’s <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html#bonus-implementing-incremental-backups">possible</a>).</p>
<h2 id="other-tools-i-tried" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#other-tools-i-tried"><span>Other tools I tried</span></a></h2>
<p>I also tried BorgBackup, Restic, Kopia, Duplicaciy, Duplicity.</p>
<p>Having chosen Hetzner as a backend, Kopia, Duplicacy and Duplicity
didn’t have native support so they were reduced to syncing over SFTP
which put them at a disadvantaged for speed compared to the other
options that had native support on Hetzner.</p>
<p>On top of that here’s a few notes of what turned me off for each of
those:</p>
<ul>
<li><strong>Kopia:</strong> I encountered issues setting it up with SFTP.</li>
<li><strong>Duplicacy:</strong>
<ul>
<li>Setting up the CLI wasn’t straightforward, had to resort to finding
info in some random forum posts.</li>
<li>Doesn’t support SSH aliases.</li>
<li>No way to configure a SSH key without being prompted every time.</li>
<li>May ask for SSH password / key in the middle of a backup so you
can’t just walk away.</li>
</ul>
</li>
<li><strong>Duplicity:</strong> can’t easily garbage collect old backups because they
all depend on each other, so it makes regaining space pretty cumbersome.</li>
<li><strong>Restic:</strong> was pretty impressed overall but rsync was significantly
faster despite both having native support on Hetzner.</li>
<li><strong>BorgBackup:</strong> I definitely tried it back then but it doesn’t seem
that I took any notes like for the other ones… maybe I should try it
again at some point? With rsync it’s probably the one that would fit
the best my use case, but I guess I like how transparent is rsync.</li>
</ul>
<h2 id="syncing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#syncing"><span>Syncing</span></a></h2>
<p>The actual syncing part is super easy. I’m just going with a basic:</p>
<pre><code class="hljs language-sh">rsync <span class="hljs-string">&quot;<span class="hljs-variable">$SOURCE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> --archive --delete
</code></pre>
<p>I’m also adding <code>--no-specials</code> and <code>--no-devices</code> if I’m backing up a
directory that could have some of those special handles.</p>
<p>I add <code>--exclude-from exclude-file</code> to ignore a bunch of patterns that
don’t need to be backed up.</p>
<p>And finally, I’m customizing the output with <code>--itemize-changes</code> and
<code>--info=progress2</code>.</p>
<h2 id="encryption" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#encryption"><span>Encryption</span></a></h2>
<p>That’s where things get spicy, because rsync doesn’t do encryption
itself.</p>
<p>I found a blog post about <a href="https://www.gamecreatures.com/blog/2016/06/19/encrypted-offsite-rsync-backups/">encrypted offsite backups with rsync</a>
which is exactly what I was trying to do. It uses
<a href="https://vgough.github.io/encfs/">EncFS</a> as the encryption layer.</p>
<p>I ended up using <a href="https://nuetzlich.net/gocryptfs/">gocryptfs</a> on my
side, mainly because it’s still actively maintained.</p>
<p>gocryptfs allows you to have an encrypted directory on disk, and mount
the decrypted version to use it. But they also have a “reverse” mode,
where you can mount a directory into its encrypted representation.
That’s what I need. (I just want the encryption for syncing to my remote
storage, the data is already encrypted on disk at a lower level
otherwise.)</p>
<p>With gocryptfs, that looks like:</p>
<pre><code class="hljs language-sh">gocryptfs -reverse -init /path/to/directory
gocryptfs -reverse /path/to/directory /path/to/mount
</code></pre>
<p>From there, I can apply my rsync command to sync the encrypted
<code>/path/to/mount</code> with my Hetzner server!</p>
<p>Not that complicated after all.</p>
<p>Well… except if you’re running macOS. This rabbit hole is deep enough
that it <a href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html">deserves its own blog post</a>. 🙃</p>
<h2 id="making-the-encrypted-rsync-output-intelligible" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#making-the-encrypted-rsync-output-intelligible"><span>Making the encrypted rsync output intelligible</span></a></h2>
<p>Now we’re syncing an encrypted directory, the output of rsync only shows
the encrypted paths. That’s OK, but I don’t like it. I wish I saw the
<em>actual</em> files it was transferring, so that if one of them takes a long
time, I can instantly identify if it’s a file that should or not be
included in the backup anyway. Maybe just add it to my ignore list.</p>
<p>Luckily, gocryptfs provides an API to translated encrypted paths to
their plaintext version!</p>
<p>This comes through a separate util, <code>gocryptfs-xray</code>, that’s not
included in the Homebrew version, so we need to compile gocryptfs from
source:</p>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> https://github.com/rfjakob/gocryptfs

<span class="hljs-comment"># Checkout the version you actually want, or YOLO and build from `main`</span>
<span class="hljs-comment"># git checkout v2.4.0</span>

./build-without-openssl
</code></pre>
<p>Then make sure to add the <code>gocryptfs</code> and <code>gocryptfs-xray</code> binaries
somewhere that’s in your <code>PATH</code> (or just run them from there if you
prefer).</p>
<p><code>gocryptfs-xray</code> needs access to the gocryptfs <code>ctlsock</code>, a socket to
communicate with the gocryptfs process. You get one by adding <code>-ctlsock /path/to/ctlsock</code> to your <code>gocryptfs</code> invocation.</p>
<p>Then, we can parse the rsync output and translate any encrypted path in
its decrypted version. I made a script for that:
<a href="https://github.com/valeriangalliat/gocryptfs-rsync/blob/master/gocryptfs-rsync-pretty"><code>gocryptfs-rsync-pretty</code></a>.
Just pipe the rsync output to it:</p>
<pre><code class="hljs language-sh">rsync ... 2&gt;&amp;1 | gocryptfs-rsync-pretty /path/to/ctlsock /path/to/mount
</code></pre>
<h2 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#putting-it-all-together"><span>Putting it all together</span></a></h2>
<p>We now have a functional encrypted offsite backup system! It’s a
combination of:</p>
<ul>
<li>gocryptfs to mount an encrypted representation of a directory,</li>
<li>rsync to sync it to a remote host,</li>
<li>a small script to make the rsync output intelligible.</li>
</ul>
<p>In <a href="https://github.com/valeriangalliat/gocryptfs-rsync">this repo</a> you
can find the code I use to combine those 3 elements.</p>
<p>It’s not much more than:</p>
<pre><code class="hljs language-sh">gocryptfs -reverse -ctlsock /path/to/ctlsock /path/to/directory /path/to/mount

rsync <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> /path/to/mount <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> 2&gt;&amp;1 \
    | gocryptfs-rsync-pretty /path/to/ctlsock /path/to/mount
</code></pre>
<h2 id="bonus-implementing-incremental-backups" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#bonus-implementing-incremental-backups"><span>Bonus: implementing incremental backups</span></a></h2>
<p>In my solution above, the backups are not incremental. I’m just syncing
the <em>current</em> state to the remote host, but I keep no history of the
previous “snapshots”. This could be an issue, for example, if I end up
running a backup <em>after</em> my systems gets compromised or after I lose
some data, then my backup is useless.</p>
<p>This is fine with me because I also do incremental backups that just
don’t happen to be offsite. I guess I’m not edging against my house
burning down or getting my computers and drives robbed, <em>while at the
same time</em> having experienced some kind of data loss that I’ve
accidentally propagated to my offsite server. 🙃</p>
<p>Anyway, in order to add incremental backups to the equation, we could
use <a href="https://github.com/cytopia/linux-timemachine">Linux Time Machine</a>
(which also works very well on Mac despite the name 😁).</p>
<p>It works very much like macOS Time Machine, pretty much down to the
underlying way the incremental backups are implemented on the
filesystem: each “snapshot” gets its own directory, but then files that
didn’t change since the latest snapshot are just hardlinked to avoid
duplication! So essentially, only the files that changed get stored, but
you still have a full picture of the snapshot because the other files
are hardlinked in the right place!</p>
<p>This is genius, and turns out this is provided by rsync through the
<code>--link-dest</code> option. Linux Time Machine adds a nice, easy to use
frontend to it which is very appreciated.</p>
<p>Building off our work from above, we can simply replace the <code>rsync</code>
command by <code>timemachine</code>:</p>
<pre><code class="hljs language-sh">gocryptfs -reverse -ctlsock /path/to/ctlsock /path/to/directory /path/to/mount

timemachine <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> /path/to/mount <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> 2&gt;&amp;1 \
    | gocryptfs-rsync-pretty /path/to/ctlsock /path/to/mount
</code></pre>
<p>This is possible because hard links are supported by Hetzner, and thanks
to native rsync support, they can be preserved along the way!</p>
<div class="note">
<p><strong>Note:</strong> I haven’t tested <code>gocryptfs-rsync-pretty</code> with the output of
<code>timemachine</code>, but because <code>timemachine</code> wraps rsync, it should work out
of the box, or require only basic tuning of the underlying rsync output.
Let me know if you try it!</p>
</div>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>Despite only writing this today, I’ve been using this system for <em>two
years</em> already! (Time flies omg.)</p>
<p>The commits I’ve added over time were mostly to refine the rsync output
parsing, so looks like the core of the script was pretty solid from the
get go.</p>
<p>That setup survived at least two macOS upgrades, and I’ve been using it
on my Linux machines as well.</p>
<p>So feel free to use <a href="https://github.com/valeriangalliat/gocryptfs-rsync">gocryptfs-rsync</a>
for your own backups, or use it as an inspiration to build your own
backup system! Cheers. ✌️</p>
<div class="note">
<ol>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-storage.html">Encrypted offsite backup system: storage 💾</a></li>
<li>Encrypted offsite backup system: syncing 📲</li>
</ol>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1784030027967062106">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Encrypted offsite backup system: storage 💾</title>
    <link href="https://www.codejam.info/2024/04/offsite-backup-storage.html" />
    <id>https://www.codejam.info/2024/04/offsite-backup-storage.html</id>
    <updated>2024-04-26T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<ol>
<li>Encrypted offsite backup system: storage 💾</li>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">Encrypted offsite backup system: syncing 📲</a></li>
</ol>
</div>
<p><strong>Threat model:</strong> my house burns. Or someone breaks in and takes my
computers and hard drives. Everything’s encrypted so I’m not so worried
about them gaining access to my data but I’m concerned about losing my
data.<br>
<strong>Solution:</strong> offsite backup system.</p>
<p><strong>But then… threat model:</strong> breach in the company / data center that hosts
my offsite backups, from a third-party attack or from maleovlent
employees.<br>
<strong>Solution:</strong> <em>end-to-end encrypted</em> offsite backup system.</p>
<h2 id="requirements" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#requirements"><span>Requirements</span></a></h2>
<p>I have over 4 TB of data and I want a bit of buffer, so I’m only gonna
consider solutions for 5 TB of storage.</p>
<h2 id="comparison" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#comparison"><span>Comparison</span></a></h2>
<p>Let’s start with everything I considered for offsite storage. If you
know better options, let me know!</p>
<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Plan</th>
      <th>Storage</th>
      <th>Monthly price (billed annually)</th>
      <th>Monthly price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://www.sync.com/pricing/">Sync</a></td>
      <td>Teams+ Unlimited</td>
      <td>6 TB</td>
      <td>20 CAD</td>
      <td>24 CAD</td>
    </tr>
    <tr>
      <td><a href="https://web.archive.org/web/20221101213929/https://www.dropbox.com/plans"><s>Dropbox</s></a></td>
      <td><s>Standard</s></td>
      <td><s>5 TB</s></td>
      <td><s>15 USD</s></td>
      <td><s>18 USD</s></td>
    </tr>
    <tr>
      <td colspan="5">
        <em>Discontinued.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://www.dropbox.com/plans">Dropbox</a></td>
      <td>Business</td>
      <td>9 TB</td>
      <td>26 CAD</td>
      <td>31 CAD</td>
    </tr>
    <tr>
      <td><a href="https://one.google.com/about/plans"><s>Google One</s></a></td>
      <td><s>5 TB</s></td>
      <td><s>5 TB</s></td>
      <td><s>20.83 USD</s></td>
      <td><s>24.99 USD</s></td>
    </tr>
    <tr>
    <tr>
      <td colspan="5">
        <em>Discontinued. Google One doesn't offer more than 2 TB now so
        it's not an option anymore.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://learn.microsoft.com/en-us/answers/questions/577943/how-to-get-unlimited-onedrive-storage-for-my-enter"><s>OneDrive</s></a></td>
      <td><s>Business (Plan 2)</s></td>
      <td><s>Unlimited</s></td>
      <td><s>65 USD</s></td>
      <td></td>
    </tr>
    <tr>
      <td colspan="5">
        <em>Discontinued. OneDrive only offers up to 1 TB now. They used
        to have unlimited storage if you have 5 or more users with
        "Business (Plan 2)" at 13 USD per user.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://www.box.com/en-ca/pricing">Box Drive</a></td>
      <td>Business</td>
      <td>Unlimited</td>
      <td>63 CAD</td>
      <td>84 CAD</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>21/28 CAD per user per month but need at least 3 users.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://mega.io/pricing">MEGA</a></td>
      <td>Pro II</td>
      <td>8 TB</td>
      <td>16.66 EUR</td>
      <td>19.99 EUR</td>
    </tr>
    <tr>
      <td colspan="2"><a href="https://www.backblaze.com/cloud-storage/pricing">Backblaze B2</a></td>
      <td>5 TB</td>
      <td colspan="2">30 USD*</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>*And $0.01/GB to access the data, so that would be 50 USD
        for me to download my entire 5 TB backup once.</em>
      </td>
    </tr>
    <tr>
      <td colspan="2"><a href="https://www.backblaze.com/cloud-backup/pricing">Backblaze Computer Backup</a></td>
      <td>Unlimited</td>
      <td>8.25 USD*</td>
      <td>9 USD*</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>*Per machine. And can only use through their own proprietary
        backup software with serious limitations.</em>
      </td>
    </tr>
    <tr>
      <td colspan="2"><a href="https://www.linode.com/products/object-storage/">Linode Object Storage</a></td>
      <td>5 TB</td>
      <td colspan="2">100 USD*</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>*1 TB outbound transfer included, after that $0.005/GB, so
        that would be 20 USD for me to download my entire 5 TB backup
        once.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://www.apple.com/ca/icloud/#compare-plans">iCloud</a></td>
      <td>6 TB</td>
      <td>6 TB</td>
      <td colspan="2">39.99 CAD</td>
    </tr>
    <tr>
      <td><a href="https://www.hetzner.com/storage/storage-box/">Hetzner Storage Box</a></td>
      <td>BX21</td>
      <td>5 TB</td>
      <td colspan="2">10.90 EUR</td>
    </tr>
    <tr>
      <td><a href="https://www.hetzner.com/storage/storage-share/">Hetzner Storage Share</a></td>
      <td>NX21</td>
      <td>5 TB</td>
      <td colspan="2">14.19 EUR</td>
    </tr>
  </tbody>
</table>
<h2 id="diving-in" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#diving-in"><span>Diving in</span></a></h2>
<h3 id="backblaze-computer-backup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#backblaze-computer-backup"><span>Backblaze Computer Backup</span></a></h3>
<p>Backblaze Computer Backup is incredibly cheap with 9 USD per month for
<em>unlimited storage</em>, but keep in mind the price is per machine, and
everything needs to go through their own proprietary backup software. No
Linux support, no way to customize the backup strategy, no way to script
it. The software needs to call home at least once a month otherwise data
gets deleted.</p>
<p>While the backups are encrypted, by default <a href="https://help.backblaze.com/hc/en-us/articles/217664688-Can-you-tell-me-more-about-the-encryption-Backblaze-uses">Backblaze can decrypt them</a>,
however they also provide a way to make the backups end-to-end
encrypted, which is nice.</p>
<p>So if you’re fine with the terms and limitations of their backup
software, then it’s by far the cheapest option and it seems convenient
to use.</p>
<h3 id="box-drive" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#box-drive"><span>Box Drive</span></a></h3>
<p>Another “unlimited storage” option without as many limitations as
Backblaze Computer Backup is Box Drive. It’s 63 CAD per month
though so quite a lot pricier. But if you have <em>a lot</em> of data and want
more control over it, that may be very well worth it.</p>
<p>It’s even cheaper than the unlimited OneDrive storage that Microsoft was
offering at some point for 65 USD per month.</p>
<p>Box Drive comes with a decent web interface as well as a native app for
macOS, Windows, iPhone and Android.</p>
<p>However keep in mind that it’s gonna behave like Dropbox and iCloud:
it’s great as a virtual remote drive that has a local copy of some or
all files, but it may not be what you want from a backup solution.</p>
<div class="note">
<p><strong>Note:</strong> on macOS, the app uses the <a href="https://developer.apple.com/documentation/fileprovider/nonreplicated_file_provider_extension">Nonreplicated File Provider extension</a>
to provide the syncing.</p>
</div>
<p>As far as encryption goes, it doesn’t seem that anything prevents Box to
access your data, so it’s something you have to be comfortable with.</p>
<h3 id="mega" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#mega"><span>MEGA</span></a></h3>
<p>Pretty decent option at 16.66 EUR for 8 TB. Like the above, it comes
with an app, and it also supports Linux on top of macOS and Windows!</p>
<p>It’s basically a mix of the 2 products mentioned above. You can back up
entire devices to it, but also use it as a shared drive, so that’s
pretty neat.</p>
<p>However unlike the Box Drive app, all the files in the synced folder
must be present locally. There’s no way to have synced files being on
the server only and being downloaded on demand only when you need them
(and delete just the local copy afterwards).</p>
<div class="note">
<p><strong>Note:</strong> it seems that MEGA uses its own watching and syncing
algorithm, and they only use macOS’s <a href="https://developer.apple.com/documentation/findersync">Finder Sync API</a>
in order to provide feedback in the Finder UI about whether files are
synced or not.</p>
</div>
<p>So like for Box Drive, if you like the way it behaves, it’s a pretty
cheap and convenient solution. If you want more flexibility, they do
offer a SDK but you’ll have to write C++. There’s also a
<a href="https://rclone.org/mega/">Rclone integration for MEGA</a> so that’s neat
to interact with the storage from the CLI and make something more custom
with it.</p>
<p>In terms of encryption, MEGA seems pretty solid because everything is
end-to-end encrypted with a key derived from your account password. If
you forget your password and recovery key, you’re out of luck, but that
also means MEGA can’t read your data. Thumbs up for me.</p>
<h3 id="hetzner-storage-box" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#hetzner-storage-box"><span>Hetzner Storage Box</span></a></h3>
<p>At 10.90 EUR for 5 TB, it’s the cheapest option here to be <em>actually</em>
flexible. You don’t need a proprietary app to use it. Instead it
supports the following <a href="https://www.hetzner.com/storage/storage-box/">protocols</a>:</p>
<ul>
<li>FTP</li>
<li>FTPS</li>
<li>SFTP</li>
<li>SCP</li>
<li>Samba/CIFS</li>
<li>BorgBackup over SSH</li>
<li>Restic over SSH</li>
<li>Rclone over SFTP</li>
<li>rsync over SSH</li>
<li>HTTPS</li>
<li>WebDAV</li>
</ul>
<p>This is quite impressive, as it supports a number of popular backup
software, so unlike the options above, you don’t need to use a backup
or syncing software made by the storage provider. Hetzner only does the
storage (and does it well), and you can use the backup or syncing
software of your choice, whose only focus is to do just that (and do it
well). Now we’re talking.</p>
<p>Most of those protocols are gonna be useful for listing, retrieving and
uploading files, and the few options “over SSH” are gonna be
particularly performant at incremental backups.</p>
<p>While backup and syncing software often have an option to working over
SFTP or similar, it’s usually pretty inefficient when you need to diff
the local and remote state in order to upload only what changed.</p>
<p>However, when paired with a companion command on the server, like is the
case with BorgBackup, Restic and rsync above, the process can be much,
much more efficient, because the client/server programs can exchange
just the minimum amount of metadata in order to determine what changed
and what needs to be transferred.</p>
<p><strong>This makes the Hetzner Storage Box a killer option if you’re gonna use
one of those natively supported options above.</strong></p>
<p>The encryption is gonna depend on the protocol you use. The files are
obviously stored encrypted on disk, and everything but FTP will transfer
the files encrypted, however only BorgBackup and Restic actually perform
end-to-end encryption of the files (meaning that Hetzner can’t decrypt
them).</p>
<p>If you want to use any other protocol and also want end-to-end
encryption, you can still implement it yourself as another layer. See
more <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">in the next article</a>. 😉</p>
<h3 id="hetzner-storage-share" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#hetzner-storage-share"><span>Hetzner Storage Share</span></a></h3>
<p>A bit pricier than the Storage Box at 14.19 EUR for 5 TB, and the use
case is a bit different. It’s a hosted
<a href="https://nextcloud.com/">Nextcloud</a> instance.</p>
<p>They have an app for Windows, macOS and Linux, as well as mobile apps. I
only tried the macOS app and it acts as a shared folder just like
Dropbox would.</p>
<p>At the time of writing, the desktop app will download all the files
locally, <a href="https://help.nextcloud.com/t/mac-desktop-client-dont-download-files-only-show-the-files/101987/4">there’s no way</a>
to browse the remote data without downloading everything locally first.
For me and my 5 TB, that’s a problem.</p>
<p>Also keep in mind Nextcloud <a href="https://help.nextcloud.com/t/end-to-end-encryption-zero-knowledge/172209">doesn’t support end-to-end encryption</a>.</p>
<p>So the Hetzner Storage Share looks like a pretty sweet option with a
decent price if you want a synced folder, but it doesn’t cut it for my
backups.</p>
<h2 id="bonus-why-not-gcp-and-aws" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#bonus-why-not-gcp-and-aws"><span>Bonus: why not GCP and AWS?</span></a></h2>
<p><a href="https://cloud.google.com/">Google Cloud Platform</a> and <a href="https://aws.amazon.com/">Amazon Web Services</a>
both offer solutions that could help. So you may wonder why I’m not
considering a pure cloud storage service like <a href="https://cloud.google.com/storage">GCS</a>
or <a href="https://aws.amazon.com/s3/">S3</a>, or alternatively, a VM with
persistent disk on <a href="https://cloud.google.com/products/compute">GCE</a> or
<a href="https://aws.amazon.com/ec2/">EC2</a>.</p>
<p>Well, I did consider those option, that’s actually the one I
professionally work with most of the time, but they definitely did not
fit the bill for my personal usage.</p>
<h3 id="gcs-s3" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#gcs-s3"><span>GCS/S3</span></a></h3>
<p>As usual with cloud computing, the pricing is hard to predict. Not
because the pricing model is unpredictable <em>per se</em> (although it’s
complex, it’s also relatively clear). But because my potential usage is
unpredictable without gathering data by running real-world simulations.</p>
<p>GCS and S3 charge not only for the amount of data stored, but also the
read/write operations and download bandwidth.</p>
<p>Depending on the selected storage class, either the storage itself is
expensive but reading/writing and downloading are relatively cheap, or
the storage is cheap but reading/writing and downloading gets much, much
more expensive.</p>
<p>GCS and S3 are pretty similar for this in pricing. So for my 5 TB, I
could either:</p>
<ul>
<li>Pay $100 per month for storage and spend $15 to download my entire backup.</li>
<li>Pay $50 per month for storage and spend $50 to download my entire backup.</li>
<li>Pay $20 per month for storage and spend $200 to download my entire backup.</li>
</ul>
<p>And it’s not a precise number because it’s really, really hard to
predict how many operations I will actually use. And it would be totally
possible that I’m missing some egress bandwidth fee on top of what’s
already factored in the data retrieval fees, and it could easily
surprise bump the bill by something like $400 in case of downloading the
entire backup.</p>
<p>Not down to take the risk.</p>
<h3 id="gce-ec2-vm" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#gce-ec2-vm"><span>GCE/EC2 VM</span></a></h3>
<p>On GCE, it would cost ~$200 per month for a 5 TB HDD. Downloading the
entire backup would cost $400.</p>
<p>On EC2, that would be ~$80 per month for a 5 TB HDD, and $500 to
download the entire backup.</p>
<p>Not in my price range <em>at all</em>.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#conclusion"><span>Conclusion</span></a></h2>
<p>The <a href="https://www.codejam.info/2024/04/offsite-backup-storage.html#hetzner-storage-box">Hetzner Storage Box</a> was by far the best
option for me. It’s pretty cheap, and offers a ton of flexibility with
SFTP access as well as support for a number of protocols like rsync,
Restic and BorgBackup. End-to-end encryption comes for free with Restic
and BorgBackup, and can still be implemented “manually” otherwise.</p>
<p>All the other storage providers require a specific app that can’t be
customized to my needs, except for the <a href="https://www.codejam.info/2024/04/offsite-backup-storage.html#bonus-why-not-gcp-and-aws">cloud providers</a>
that are even more flexible but also insanely more expensive (and whose
pricing model can easily result in very costly surprises).</p>
<p>Also except for MEGA and Backblaze Computer Backup (as an option), the
other solutions don’t support end-to-end encryption.</p>
<p>So I subscribed for a 5 TB Hetzner Storage Box. Now, let’s see how I
<a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">implemented end-to-end encryption and syncing</a>
with it!</p>
<div class="note">
<ol>
<li>Encrypted offsite backup system: storage 💾</li>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">Encrypted offsite backup system: syncing 📲</a></li>
</ol>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1784030026759110978">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Duplicated ESM and CJS package in bundle</title>
    <link href="https://www.codejam.info/2024/02/esm-cjs-dupe.html" />
    <id>https://www.codejam.info/2024/02/esm-cjs-dupe.html</id>
    <updated>2024-02-18T08:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<p><strong>Note:</strong> for context we’re in a Next.js TypeScript project, using
Webpack as a bundler, but I could see this happening with similar tools.</p>
<p>The problem occurred with the <a href="https://www.npmjs.com/package/firebase"><code>firebase</code></a>
package, but again that could happen with other packages.</p>
</div>
<p>So we upgrade the Firebase SDK by a few minor versions, and suddenly,
our JS bundle size blows up. Like, 50 kB more of (gzipped) JS shipped on
every page. Not good.</p>
<p>Luckily we have <a href="https://github.com/hashicorp/nextjs-bundle-analysis">tests</a>
to catch this kind of thing.</p>
<p>Further <a href="https://nextjs.org/docs/app/building-your-application/optimizing/bundle-analyzer">investigation</a>
shown that we were shipping <code>@firebase/app</code> and <code>@firebase/auth</code> twice. 🤔</p>
<h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#the-problem"><span>The problem</span></a></h2>
<p>We use <a href="https://github.com/gladly-team/next-firebase-auth">next-firebase-auth</a>
to integrate Firebase Auth with Next.js. next-firebase-auth imports
specifically <code>firebase/app</code> and <code>firebase/auth</code>.</p>
<p>In our own code, we use <code>import</code> to import our dependencies:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> { getApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/app&#x27;</span>
<span class="hljs-keyword">import</span> { getAuth } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/auth&#x27;</span>
</code></pre>
<p>But next-firebase-auth, while they do the same in their
<a href="https://github.com/gladly-team/next-firebase-auth/blob/d51bf07eecf727ef3df45587e4008551b0cb4803/src/initFirebaseClientSDK.ts#L1-L2">TypeScript source code</a>,
is actually bundled down (also with Webpack) to a <a href="https://socket.dev/npm/package/next-firebase-auth/files/1.0.2/build/index.browser.js">CJS file</a>.</p>
<p>The code is minified, but you can see it uses <code>require</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-number">324</span>:<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>{e.<span class="hljs-property">exports</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;firebase/app&quot;</span>)},<span class="hljs-number">610</span>:<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>{e.<span class="hljs-property">exports</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;firebase/auth&quot;</span>)}
</code></pre>
<p>The problem is that the version of the Firebase SDK we upgraded to
contains <a href="https://github.com/firebase/firebase-js-sdk/pull/6981">this PR</a>,
that makes <code>@firebase/auth</code> export both ESM and CJS variants of their
<code>browser</code> bundle, whereas before they only exposed the ESM version for
the browser.</p>
<p>Concretely, this means that before this PR, the <code>package.json</code> of
<code>@firebase/auth</code> looked like:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;exports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;.&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/esm2017/index.js&quot;</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>And after:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;exports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;.&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/esm2017/index.js&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;require&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/browser-cjs/index.js&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;import&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/esm2017/index.js&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Because initially there was no <code>browser</code> entry, Webpack picked the
<code>default</code> value for both <code>import</code> and <code>require</code>, which turns out to be
the ESM bundle.</p>
<p>However after that change, we now have a different bundle configured
depending if it’s imported with <code>import</code> or <code>require</code>. As
<a href="https://webpack.js.org/guides/package-exports/#import">documented</a>
Webpack will map <code>import</code> calls to the file under <code>import</code> in the
<code>package.json</code>, and <code>require</code> to the <code>require</code> field, which makes sense.</p>
<p>However this is a problem for us as we saw earlier, we use <code>import</code> in
our own codebase, but the distribution bundle of next-firebase-auth
(like probably many other packages in the ecosystem) only comes with a
CJS file using <code>require</code>.</p>
<p>This means our own code will use <code>@firebase/auth/dist/esm2017/index.js</code>,
while next-firebase-auth will use <code>@firebase/auth/dist/browser-cjs/index.js</code>.</p>
<p>Not only this increases our bundle size unnecessarily, but it breaks the
Firebase SDK as it depends on shared global state, and now different
parts of the codebase point to a different, isolated version of the SDK.</p>
<h2 id="this-sucks-and-nobody-s-to-blame-really" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#this-sucks-and-nobody-s-to-blame-really"><span>This sucks, and nobody’s to blame really</span></a></h2>
<ul>
<li>It’s absolutely reasonable for the Firebase SDK to expose a different
browser bundle for <code>import</code> and <code>require</code>.</li>
<li>It’s absolutely reasonable, and even expected, that Webpack maps
<code>import</code> and <code>require</code> calls to the matching field in <code>package.json</code>.</li>
<li>It’s absolutely reasonable for next-firebase-auth to export a single
CJS bundle (that’s how npm packages look like since npm is a thing).</li>
</ul>
<p>It’s just a result of the giant fracture in the ecosystem between CJS
and ESM imports. It’s probably for the best, and I look forward to ESM
being widespread enough that we don’t encounter those problems, but the
transition is long and painful. It’s been 3-4 years I’m dealing with
this kind of issues as a package maintainer, and they tend to be
particularly time consuming, and takes away time to fix real problems or
implement new features.</p>
<h2 id="the-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#the-solution"><span>The solution</span></a></h2>
<p>As far as I’m concerned, for that particular instance of this problem,
the solution was to configure Webpack to alias <code>firebase/app</code> and
<code>firebase/auth</code> (the parts of the Firebase SDK used by
next-firebase-auth) to their ESM bundle, so this same bundle gets used
regardless if imported with <code>import</code> or <code>require</code>.</p>
<p>In the Webpack config:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">resolve</span>: {
    <span class="hljs-attr">alias</span>: {
      <span class="hljs-string">&#x27;firebase/app&#x27;</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;firebase/app&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;index.cjs.js&#x27;</span>, <span class="hljs-string">&#x27;index.mjs&#x27;</span>),
      <span class="hljs-string">&#x27;firebase/auth&#x27;</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;firebase/auth&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;index.cjs.js&#x27;</span>, <span class="hljs-string">&#x27;index.mjs&#x27;</span>)
    }
  }
}
</code></pre>
<p>It’s something we’ll have to maintain as we update the Firebase SDK, if
they were to change the layout of their distribution files, since this
doesn’t bother parsing the <code>package.json</code> <code>exports</code> field, but it’s good
enough.</p>
<h2 id="bonus" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#bonus"><span>Bonus</span></a></h2>
<p>For reference, a <a href="https://github.com/webpack/webpack/issues/15967">related GitHub issue</a>
and <a href="https://github.com/webpack/webpack/discussions/18082">discussion</a>.</p>
<p>I’ve also tried using
<a href="https://webpack.js.org/configuration/resolve/#resolveconditionnames"><code>resolve.conditionNames</code></a>
as follows, as a more generic fix to force <em>all</em> packages to use the ESM
build if present:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">resolve</span>: {
    <span class="hljs-attr">conditionNames</span>: [<span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;default&#x27;</span>]
  }
}
</code></pre>
<p>This would have been great as it would prevent similar (but maybe less
noticeable) duplication issues to happen in the dependency graph,
however, as you can expect, this will break some packages (in my case
some <code>@babel/runtime</code> imports), so I couldn’t go with that.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1759280799852179929">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Identify the current system cursor in Swift</title>
    <link href="https://www.codejam.info/2024/02/current-system-cursor-swift.html" />
    <id>https://www.codejam.info/2024/02/current-system-cursor-swift.html</id>
    <updated>2024-02-04T08:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Let’s say for some reason you have a Swift app, and you want to know
what’s the currently displayed macOS cursor (even when the cursor is
outside of your app).</p>
<p>Well, it’s tricker than you would expect.</p>
<h2 id="exploring-nscursor-currentsystem" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/current-system-cursor-swift.html#exploring-nscursor-currentsystem"><span>Exploring <code>NSCursor.currentSystem</code></span></a></h2>
<p>AppKit do expose <a href="https://developer.apple.com/documentation/appkit/nscursor/1533611-currentsystem"><code>NSCursor.currentSystem</code></a>
that returns a <code>NSCursor</code> instance for the current system:</p>
<blockquote>
<p>This method returns the current system cursor regardless of which
application set the cursor, and whether Cocoa or Carbon APIs were used
to set it.</p>
</blockquote>
<p>However, there’s no property on <code>NScursor</code> that lets it identify itself,
e.g. a <code>NSCursor</code> instance doesn’t <em>claim</em> to be a <code>NSCursor.arrow</code> or
<code>NSCursor.iBeam</code> or whatnot. You only get a hot spot point and the
cursor pixel data.</p>
<p>One would think we can test <code>NSCursor.currentSystem</code> against all the
known cursors to know which one is used, e.g.: <code>NSCursor.currentSystem == NSCursor.arrow</code>.</p>
<p>But this doesn’t work, because of a key detail. The return value of
<code>NSCursor.currentSystem</code> is:</p>
<blockquote>
<p>A cursor whose image and hot spot match those of the
currently-displayed cursor on the system.</p>
</blockquote>
<p>This is important, because while the hot spot and image data will indeed
match that of the current cursor, the implicit part is that the
<em>reference</em> of that <code>NSCursor</code> object will differ.</p>
<p>Actually, every time I access <code>NSCursor.currentSystem</code> I get a different
<code>NSCursor</code> reference:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">NSApplicationDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">applicationDidFinishLaunching</span>(<span class="hljs-keyword">_</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;currentSystem&quot;</span>, <span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">!</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;currentSystem&quot;</span>, <span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">!</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;currentSystem&quot;</span>, <span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">!</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arrow&quot;</span>, <span class="hljs-type">NSCursor</span>.arrow)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arrow&quot;</span>, <span class="hljs-type">NSCursor</span>.arrow)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arrow&quot;</span>, <span class="hljs-type">NSCursor</span>.arrow)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;iBeam&quot;</span>, <span class="hljs-type">NSCursor</span>.iBeam)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;iBeam&quot;</span>, <span class="hljs-type">NSCursor</span>.iBeam)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;iBeam&quot;</span>, <span class="hljs-type">NSCursor</span>.iBeam)
  }
}

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">AppDelegate</span>()

app.delegate <span class="hljs-operator">=</span> delegate
app.run()
</code></pre>
<div class="note">
<p><strong>Note:</strong> to run this, put it in a file e.g. <code>test.swift</code> and run with
<code>swift test.swift</code>.</p>
<p>Or <a href="https://github.com/apple/swift/issues/68785#issuecomment-1904624571">at the time of writing</a>:</p>
<pre><code class="hljs language-sh">DYLD_FRAMEWORK_PATH=/System/Library/Frameworks /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift test.swift
</code></pre>
<p>Otherwise it currently fails with:</p>
<pre><code class="hljs">JIT session error: Symbols not found: [ _OBJC_CLASS_$_NSCursor, _OBJC_CLASS_$_NSApplication ]
</code></pre>
</div>
<pre><code class="hljs">currentSystem &lt;NSCursor: 0x600003f001b0&gt;
currentSystem &lt;NSCursor: 0x600003f04a20&gt;
currentSystem &lt;NSCursor: 0x600003f7f1e0&gt;
arrow &lt;NSCursor: 0x600003f7cab0&gt;
arrow &lt;NSCursor: 0x600003f7cab0&gt;
arrow &lt;NSCursor: 0x600003f7cab0&gt;
iBeam &lt;NSCursor: 0x600003f7cb40&gt;
iBeam &lt;NSCursor: 0x600003f7cb40&gt;
iBeam &lt;NSCursor: 0x600003f7cb40&gt;
</code></pre>
<p>We can see the <code>currentSystem</code> cursor is a different object reference
every time it’s accessed, while <code>arrow</code> and <code>iBeam</code> are constant.</p>
<p>So we can’t identify the system cursor by comparing references. Bummer.</p>
<h2 id="going-creative" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/current-system-cursor-swift.html#going-creative"><span>Going creative</span></a></h2>
<p>Well if we can’t compare references, then we need to do with whatever it
is that we have: a hot spot point and pixel data.</p>
<p>Actually, we can probably get away with just the pixel data: since
conveniently the
<a href="https://developer.apple.com/documentation/foundation/data"><code>Data</code></a> type
is already
<a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a>,
we can simply stuff all the known cursors image data in a dictionary,
and try and identify the <code>currentSystem</code> cursor that way:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">NSApplicationDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">applicationDidFinishLaunching</span>(<span class="hljs-keyword">_</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-keyword">let</span> cursors: [<span class="hljs-type">String</span>: <span class="hljs-type">NSCursor</span>] <span class="hljs-operator">=</span> [
      <span class="hljs-string">&quot;arrow&quot;</span>: .arrow,
      <span class="hljs-string">&quot;iBeam&quot;</span>: .iBeam,
      <span class="hljs-string">&quot;crosshair&quot;</span>: .crosshair,
      <span class="hljs-string">&quot;closedHand&quot;</span>: .closedHand,
      <span class="hljs-string">&quot;openHand&quot;</span>: .openHand,
      <span class="hljs-string">&quot;pointingHand&quot;</span>: .pointingHand,
      <span class="hljs-string">&quot;resizeLeft&quot;</span>: .resizeLeft,
      <span class="hljs-string">&quot;resizeRight&quot;</span>: .resizeRight,
      <span class="hljs-string">&quot;resizeLeftRight&quot;</span>: .resizeLeftRight,
      <span class="hljs-string">&quot;resizeUp&quot;</span>: .resizeUp,
      <span class="hljs-string">&quot;resizeDown&quot;</span>: .resizeDown,
      <span class="hljs-string">&quot;resizeUpDown&quot;</span>: .resizeUpDown,
      <span class="hljs-string">&quot;disappearingItem&quot;</span>: .disappearingItem,
      <span class="hljs-string">&quot;iBeamCursorForVerticalLayout&quot;</span>: .iBeamCursorForVerticalLayout,
      <span class="hljs-string">&quot;operationNotAllowed&quot;</span>: .operationNotAllowed,
      <span class="hljs-string">&quot;dragLink&quot;</span>: .dragLink,
      <span class="hljs-string">&quot;dragCopy&quot;</span>: .dragCopy,
      <span class="hljs-string">&quot;contextualMenu&quot;</span>: .contextualMenu,
    ]

    <span class="hljs-keyword">var</span> index: [<span class="hljs-type">Data</span>: <span class="hljs-type">String</span>] <span class="hljs-operator">=</span> [:]

    <span class="hljs-keyword">for</span> (name, cursor) <span class="hljs-keyword">in</span> cursors {
      <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> cursor.image.tiffRepresentation {
        index[image] <span class="hljs-operator">=</span> name
      }
    }

    <span class="hljs-type">Timer</span>.scheduledTimer(
      withTimeInterval: <span class="hljs-number">1</span>, repeats: <span class="hljs-literal">true</span>,
      block: { <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> index[<span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">?</span>.image.tiffRepresentation <span class="hljs-operator">??</span> <span class="hljs-type">Data</span>()] {
          <span class="hljs-built_in">print</span>(cursor)
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not found&quot;</span>)
        }
      })
  }
}

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">AppDelegate</span>()

app.delegate <span class="hljs-operator">=</span> delegate
app.run()
</code></pre>
<p>In my experience, this does great at identifying <code>arrow</code>, <code>pointingHand</code>
and <code>iBeam</code>. I don’t see the other default cursors used that much at
all.</p>
<p>And then other macOS UI elements use cursors that are not exposed
through <code>NSCursor</code>. The crosshair from the native screen capture tool is
not the same as <code>NSCursor.crosshair</code>, and the camera from the window
selection of that same tool is not exposed either. As for window
resizing cursors, they’re different from the ones exposed in
<code>NSCursor.resize*</code>.</p>
<p>Either way, this get the job done the vast majority of the time!</p>
<p>We can go a step further by hooking this up to a
<a href="https://developer.apple.com/documentation/appkit/nsresponder/1525114-mousemoved"><code>mouseMoved</code></a>
event:</p>
<pre><code class="hljs language-swift"><span class="hljs-type">NSEvent</span>.addGlobalMonitorForEvents(matching: [.mouseMoved]) { <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span>
  <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> index[<span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">?</span>.image.tiffRepresentation <span class="hljs-operator">??</span> <span class="hljs-type">Data</span>()] {
    <span class="hljs-built_in">print</span>(cursor)
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not found&quot;</span>)
  }
}
</code></pre>
<p>This works quite well, but hashing the <code>currentSystem</code> cursor image data
on every mouse moved event (they can happen at quite a high rate) sounds
a bit aggressive.</p>
<p>If I was gonna use that code, I would probably debounce the events to
every 200 ms or so prior to resolving the cursor to avoid spending that
much CPU cycles computing hashes of the same image that just happens to
have a different <code>NSCursor</code> object reference. This will introduce a bit
of inaccuracy around cursor transitions but depending on your
application, this may or may not be a problem.</p>
<h2 id="aggressive-optimizing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/current-system-cursor-swift.html#aggressive-optimizing"><span>Aggressive optimizing</span></a></h2>
<p>The above to work quite well, but even though I didn’t bother
benchmarking it, the mechanism of it makes me slightly uneasy about the
performance (although the debounce would help a lot).</p>
<p>However, if we take a step back, we can use a different approach that is
much easier from a computing perspective.</p>
<p>We noticed that in most cases, the only 3 cursors we’ll run into are
arrow, pointing hand and I-beam. Luckily, they all have a different TIFF
image size!</p>
<pre><code class="hljs language-swift"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arrow&quot;</span>, <span class="hljs-type">NSCursor</span>.arrow.image.tiffRepresentation<span class="hljs-operator">!</span>.count)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pointingHand&quot;</span>, <span class="hljs-type">NSCursor</span>.pointingHand.image.tiffRepresentation<span class="hljs-operator">!</span>.count)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;iBeam&quot;</span>, <span class="hljs-type">NSCursor</span>.iBeam.image.tiffRepresentation<span class="hljs-operator">!</span>.count)
</code></pre>
<pre><code class="hljs">arrow 204152
pointingHand 20892
iBeam 85056
</code></pre>
<div class="note">
<p><strong>Note:</strong> I say luckily, because many of the standard cursors actually
have the same image byte size, as seen here:</p>
<pre><code class="hljs">11932 crosshair
11932 resizeDown
11932 resizeLeft
11932 resizeLeftRight
11932 resizeRight
11932 resizeUp
11932 resizeUpDown
204152 arrow
20892 closedHand
20892 openHand
20892 pointingHand
22812 contextualMenu
22812 disappearingItem
22812 dragCopy
22812 operationNotAllowed
6172 iBeamCursorForVerticalLayout
7132 dragLink
85056 iBeam
</code></pre>
<p>In fact, <code>arrow</code> and <code>iBeam</code> are unique in that aspect! So all we have
to be fine with is <code>closedHand</code> and <code>openHand</code> being mistaken for
<code>pointingHand</code>, which is probably fine, especially <code>openHand</code> and
<code>closeHand</code> are seldom if ever used.</p>
</div>
<p>We can then simplify the earlier example to:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">NSApplicationDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">applicationDidFinishLaunching</span>(<span class="hljs-keyword">_</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-keyword">let</span> cursors: [<span class="hljs-type">String</span>: <span class="hljs-type">NSCursor</span>] <span class="hljs-operator">=</span> [
      <span class="hljs-string">&quot;arrow&quot;</span>: .arrow,
      <span class="hljs-string">&quot;iBeam&quot;</span>: .iBeam,
      <span class="hljs-string">&quot;pointingHand&quot;</span>: .pointingHand,
    ]

    <span class="hljs-keyword">var</span> index: [<span class="hljs-type">Int</span>: <span class="hljs-type">String</span>] <span class="hljs-operator">=</span> [:]

    <span class="hljs-keyword">for</span> (name, cursor) <span class="hljs-keyword">in</span> cursors {
      <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> cursor.image.tiffRepresentation {
        index[image.count] <span class="hljs-operator">=</span> name
      }
    }

    <span class="hljs-type">NSEvent</span>.addGlobalMonitorForEvents(matching: [.mouseMoved]) { <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span>
      <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> index[<span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">?</span>.image.tiffRepresentation<span class="hljs-operator">?</span>.count <span class="hljs-operator">??</span> <span class="hljs-number">0</span>] {
        <span class="hljs-built_in">print</span>(cursor)
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not found&quot;</span>)
      }
    }
  }
}

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">AppDelegate</span>()

app.delegate <span class="hljs-operator">=</span> delegate
app.run()
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Swift: convert a delegate to async</title>
    <link href="https://www.codejam.info/2024/02/swift-delegate-to-async.html" />
    <id>https://www.codejam.info/2024/02/swift-delegate-to-async.html</id>
    <updated>2024-02-04T08:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Let’s say we’re using
<a href="https://developer.apple.com/documentation/avfoundation">AVFoundation</a>
to do a screen capture in Swift. We want to response to
<code>didStartRecordingTo</code> and <code>didFinishRecordingTo</code> “events”, which is done
through the use of a delegate such as:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RecordingDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">AVCaptureFileOutputRecordingDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">fileOutput</span>(<span class="hljs-keyword">_</span>: <span class="hljs-type">AVCaptureFileOutput</span>, <span class="hljs-params">didStartRecordingTo</span> <span class="hljs-keyword">_</span>: <span class="hljs-type">URL</span>, <span class="hljs-params">from</span> <span class="hljs-keyword">_</span>: [<span class="hljs-type">AVCaptureConnection</span>])
  {
    <span class="hljs-comment">// Stuff</span>
  }

  <span class="hljs-keyword">func</span> <span class="hljs-title function_">fileOutput</span>(
    <span class="hljs-keyword">_</span>: <span class="hljs-type">AVCaptureFileOutput</span>, <span class="hljs-params">didFinishRecordingTo</span> <span class="hljs-keyword">_</span>: <span class="hljs-type">URL</span>, <span class="hljs-params">from</span> <span class="hljs-keyword">_</span>: [<span class="hljs-type">AVCaptureConnection</span>],
    <span class="hljs-params">error</span>: <span class="hljs-type">Error</span>?
  ) {
    <span class="hljs-comment">// Stuff</span>
  }
}

<span class="hljs-keyword">let</span> session <span class="hljs-operator">=</span> <span class="hljs-type">AVCaptureSession</span>()
<span class="hljs-keyword">let</span> input <span class="hljs-operator">=</span> <span class="hljs-type">AVCaptureScreenInput</span>()
<span class="hljs-keyword">let</span> output <span class="hljs-operator">=</span> <span class="hljs-type">AVCaptureMovieFileOutput</span>()
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">RecordingDelegate</span>()

session.addInput(input)
session.addOutput(output)
session.startRunning()
output.startRecording(to: <span class="hljs-type">URL</span>(filePath: <span class="hljs-string">&quot;test.mov&quot;</span>), recordingDelegate: delegate)
</code></pre>
<p>That’s all good but the delegate makes my life a bit harder in terms of
managing the control flow of the code.</p>
<p>I would much rather something using async/await, e.g. (hypothetical code):</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> events <span class="hljs-operator">=</span> output.startRecording(to: <span class="hljs-type">URL</span>(filePath: <span class="hljs-string">&quot;test.mov&quot;</span>))

<span class="hljs-keyword">await</span> events.didStartRecording

<span class="hljs-comment">// Do stuff now the recording has started</span>

output.stopRecording()

<span class="hljs-keyword">await</span> events.didFinishRecording

<span class="hljs-comment">// Do stuff now the recording is finished</span>
</code></pre>
<p>In order to achieve that, we need a bit of plumbing code. Let’s add
callbacks to our delegate:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RecordingDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">AVCaptureFileOutputRecordingDelegate</span> {
  <span class="hljs-keyword">var</span> didStartRecording: () -&gt; <span class="hljs-type">Void</span> <span class="hljs-operator">=</span> {}
  <span class="hljs-keyword">var</span> didFinishRecording: (<span class="hljs-keyword">_</span> error: <span class="hljs-type">Error</span>?) -&gt; <span class="hljs-type">Void</span> <span class="hljs-operator">=</span> { <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> }

  <span class="hljs-keyword">func</span> <span class="hljs-title function_">fileOutput</span>(<span class="hljs-keyword">_</span>: <span class="hljs-type">AVCaptureFileOutput</span>, <span class="hljs-params">didStartRecordingTo</span> <span class="hljs-keyword">_</span>: <span class="hljs-type">URL</span>, <span class="hljs-params">from</span> <span class="hljs-keyword">_</span>: [<span class="hljs-type">AVCaptureConnection</span>])
  {
    <span class="hljs-keyword">self</span>.didStartRecording()
  }

  <span class="hljs-keyword">func</span> <span class="hljs-title function_">fileOutput</span>(
    <span class="hljs-keyword">_</span>: <span class="hljs-type">AVCaptureFileOutput</span>, <span class="hljs-params">didFinishRecordingTo</span> <span class="hljs-keyword">_</span>: <span class="hljs-type">URL</span>, <span class="hljs-params">from</span> <span class="hljs-keyword">_</span>: [<span class="hljs-type">AVCaptureConnection</span>],
    <span class="hljs-params">error</span>: <span class="hljs-type">Error</span>?
  ) {
    <span class="hljs-keyword">self</span>.didFinishRecording(error)
  }
}
</code></pre>
<p>From there, we can use the <a href="https://developer.apple.com/documentation/swift/withcheckedcontinuation(function:_:)"><code>withCheckedContinuation</code></a>
function to convert a callback to an async result:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">RecordingDelegate</span>()

<span class="hljs-keyword">async</span> <span class="hljs-keyword">let</span> didStartRecording: () <span class="hljs-operator">=</span> withCheckedContinuation { continuation <span class="hljs-keyword">in</span>
  delegate.didStartRecording <span class="hljs-operator">=</span> {
    continuation.resume()
  }
}

<span class="hljs-keyword">async</span> <span class="hljs-keyword">let</span> didFinishRecording: () <span class="hljs-operator">=</span> withCheckedContinuation { continuation <span class="hljs-keyword">in</span>
  delegate.didFinishRecording <span class="hljs-operator">=</span> { error <span class="hljs-keyword">in</span>
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> error <span class="hljs-operator">=</span> error {
      continuation.resume(throwing: error)
    } <span class="hljs-keyword">else</span> {
      continuation.resume()
    }
  }
}

output.startRecording(to: <span class="hljs-type">URL</span>(filePath: <span class="hljs-string">&quot;test.mov&quot;</span>), recordingDelegate: delegate)

<span class="hljs-keyword">await</span> didStartRecording

<span class="hljs-comment">// Do stuff now the recording has started</span>

output.stopRecording()

<span class="hljs-keyword">await</span> didFinishRecording

<span class="hljs-comment">// Do stuff now the recording is finished</span>
</code></pre>
<p>Thanks to <code>withCheckedContinuation</code>, we can get an async result for the
<code>didStartRecording</code> and <code>didFinishRecording</code> events, that we’re free to
<code>await</code> whenever is most convenient!</p>
<div class="note">
<p><strong>Note:</strong> the code above is not perfect. In some cases, we may get an
event on <code>didFinishRecordingTo</code> with an error, before
<code>didStartRecordingTo</code> was called at all. In that case, that example
would just hang forever.</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Life update: Squamish, climbing, skiing…</title>
    <link href="https://www.codejam.info/2024/01/now.html" />
    <id>https://www.codejam.info/2024/01/now.html</id>
    <updated>2024-01-21T08:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In last <a href="https://www.codejam.info/2023/03/now.html">update</a>, I was <a href="https://www.codejam.info/2023/03/now.html#what-do-you-think-of-the-now-page">reflecting</a>
on how I didn’t like that the content of the now page was ephemeral. So
I moved it to a normal blog post, a bit like a year in review post
except it doesn’t have to be about a particular year, but just some ad
hoc update.</p>
<h2 id="moved-to-squamish" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/01/now.html#moved-to-squamish"><span>Moved to Squamish</span></a></h2>
<p>In November 2023, I moved from Montreal to Squamish in western Canada,
British Columbia.</p>
<p>Squamish is a relatively small town (25,000 people), 1 hour drive north
of Vancouver. It’s in the middle of mountains and that’s why I’m here.</p>
<p>After 8 years in Montreal, in flat, flat Quebec, it was time for me to
move back to the mountains. While the BC mountains are 8,000 km away
from the ones I grew up in (French Alps), it instantly felt like home.</p>
<figure class="grid">
  <img alt="Plane" srcset="../../img/2024/01/now/plane.jpg 2x">
  <img alt="City" srcset="../../img/2024/01/now/city.jpg 2x">
</figure>
<p>I packed a U-Haul U-Box container from Montreal and had it shipped to
Vancouver. Took approximately 2 weeks, not too bad. Then rented a van to
move my stuff back home. Experience was flawless, and hardly beatable
for the price.</p>
<p>I didn’t bring any furniture, but it allowed me to keep my guitars and
vinyls collection and other emotional items, as well as all my sport
gear (including my road bike), tools, kitchen stuff and so on, so I
didn’t have to start from scratch all over again. It’s good not having
to buy a screwdriver, can opener and all those small things you think
about only when you need them.</p>
<figure class="grid">
  <img alt="U-Box" srcset="../../img/2024/01/now/box.jpg 2x">
  <img alt="Van" srcset="../../img/2024/01/now/van.jpg 2x">
</figure>
<p>Despite being small, the place I moved in has quite a nice view. Also
bought a car for the first time since I’m in Canada. Quite necessary
since there’s no carsharing option in Squamish.</p>
<figure class="grid">
  <img alt="View" srcset="../../img/2024/01/now/view.jpg 2x">
  <img alt="Car" srcset="../../img/2024/01/now/car.jpg 2x">
</figure>
<p>Overall, it’s a perfect base camp for rock climbing, mountain and gravel
biking, hiking, trail running and skiing (resort and backcountry).
That’s for the sports I’m doing, but there’s even more to this place!</p>
<h2 id="climbed-in-red-rocks-nevada" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/01/now.html#climbed-in-red-rocks-nevada"><span>Climbed in Red Rocks, Nevada</span></a></h2>
<p>With a couple of friends, spent two weeks in Las Vegas to go climb in
the Red Rocks canyon. This was an epic trip, and had fantastic climbing,
bouldering and hiking. (Last picture was during a day trip to Zion.)</p>
<figure class="grid">
  <img alt="Red Rocks" srcset="../../img/2024/01/now/red-rocks-1.jpg 2x">
  <img alt="Red Rocks" srcset="../../img/2024/01/now/red-rocks-2.jpg 2x">
  <img alt="Red Rocks" srcset="../../img/2024/01/now/red-rocks-3.jpg 2x">
  <img alt="Red Rocks" srcset="../../img/2024/01/now/red-rocks-4.jpg 2x">
  <img alt="Zion" srcset="../../img/2024/01/now/zion.jpg 2x">
</figure>
<h2 id="scarface" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/01/now.html#scarface"><span>Scarface</span></a></h2>
<p>A month before moving to Squamish, I crashed on my bike while commuting.
A combination of tires being too old, low pressure, being on gravel,
going fast, and a small bump, resulted in blowing the front tire, which
somehow escalated into dislodging the front wheel.</p>
<p>It felt like the ground vanishing under me (super weird feeling), and a
fraction of a second later I was on the floor.</p>
<p>Cracked my helmet (no brain damage thankfully), teared open my face in a
major way along the line of my jaw, and “road rash” all over my arms and
hands. Had to get stitches on my face. Wound got infected after that (if
the wound smells funky, take antibiotics, lesson learnt). Left me with a
fat scar on my face.</p>
<p>It’s mostly just cosmetic as far as I can tell. Life goes on.</p>
<h2 id="skiing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/01/now.html#skiing"><span>Skiing</span></a></h2>
<p>Ski season’s on! Apparently not the best season here in BC in terms of
snow, but still orders of magnitude better than what I was used to
around Montreal. Can’t complain. Got big mountains and more powder than
I’ve ever seen even on “bad” days.</p>
<p>Did some backcountry early season when avalanche risk was essentially
non-existent. Moved to the resort (Whistler) as snow piled up and
avalanche risk increased. Bought a beacon, shovel and probe and gonna do
an avalanche training soon so I can go back to the backcountry safely.</p>
<figure class="video">
  <iframe src="https://www.youtube.com/embed/FdTZBoKhI4g" allowfullscreen></iframe>
</figure>
<p>The video above is on the main channel, but I’ve started using my
<a href="https://www.youtube.com/@FonkyVal">secondary channel</a> a bit more to
publish skiing videos! I didn’t want to flood the main channel with
skiing stuff since it’s mostly focused on music in the first place. Go
subscribe!</p>
]]></content>
  </entry>
  <entry>
    <title>Branch Verve office chair: make it taller!</title>
    <link href="https://www.codejam.info/2023/07/branch-verve-office-chair-taller.html" />
    <id>https://www.codejam.info/2023/07/branch-verve-office-chair-taller.html</id>
    <updated>2023-07-28T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently bought the <a href="https://www.branchfurniture.ca/products/verve-chair">Verve chair</a>
by Branch as an upgrade for my office. It was quite pricey, but not
Herman Miller pricey, and it’s really comfortable.</p>
<p>Before that, I was sitting on the <a href="https://www.ikea.com/ca/en/p/jaervfjaellet-office-chair-with-armrests-grann-white-70521855/">JÄRVFJÄLLET chair from Ikea</a>,
and to be fair, for half the price of the Verve chair, it was easily 80%
of the comfort. I had no trouble sitting on it all day long, and that’s
even without putting the armrests because I like to play guitar!</p>
<p><strong>Anyways, I’ve had only one complaint about the Verve chair: it’s too
short!</strong> Its highest setting is still pretty low, and that just doesn’t
cut it for 1. me being a tall guy and 2. my workstation being a tad
higher than your typical office desk.</p>
<p>Quite a number of reviews did mention that issue, but you know how it
is, I only searched the reviews for that particular problem once I
encountered it. 😬</p>
<h2 id="how-to-make-the-chair-taller" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/branch-verve-office-chair-taller.html#how-to-make-the-chair-taller"><span>How to make the chair taller</span></a></h2>
<p>As far as I know, this is gonna be applicable to pretty much any office
chair. <strong>The best thing you can do is replace the gas cylinder for a
taller one.</strong></p>
<p>Luckily, this seems to be standard, and the Verve chair was no
exception. I’ve got <a href="https://amzn.to/455kzjv">one off Amazon</a>. Pretty
much any replacement ones I browsed through were taller than the one
that came with the chair, and tall enough for me. Double check the size
for your particular situation though!</p>
<p>In order to replace the cylinder, I also had to buy a
<a href="https://amzn.to/44BRIDD">mallet</a> in order to pop the old one out
without damaging it. (Really, get a mallet if you don’t have one, I
struggled pretty hard with a hammer and couldn’t get it out, then a
single tap with the mallet once I got it got the job done.)</p>
<p>I’ve also got some <a href="https://amzn.to/3Y9d3lr">replacement casters with brakes</a>
because <a href="https://www.codejam.info/2021/01/ikea-office-chair-lock-wheels-uneven-floor.html">my floor is still slanted</a>.
If even with a new cylinder your chair is not tall enough, you can
consider getting some those <a href="https://amzn.to/3OxpnbT">rollerblade-style casters</a>
that are gonna be taller than standard wheels, and apparently have a
bunch of advantages like not damaging floors, working better on carpets,
and being smoother in general, and obviously a sick look. Although I
didn’t get to try them yet.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/branch-verve-office-chair-taller.html#conclusion"><span>Conclusion</span></a></h2>
<figure class="center">
  <img alt="Verve chair in my office" src="https://www.codejam.info/img/2023/07/verve/chair.jpg">
</figure>
<p>In the beginning I was so disappointed to find that I couldn’t use my
brand new chair because it was too short, but at the end of the day it
was actually pretty easy to fix. A $30 replacement gas cylinder and a
cheap mallet got the job done in no time.</p>
<p>That being said, given the price of the chair,  I wish I didn’t have to
go through that extra trouble.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Völkl Touristick ski poles &amp; Komperdell Ice-Flex baskets</title>
    <link href="https://www.codejam.info/2023/07/volkl-touristick-komperdell-ice-flex.html" />
    <id>https://www.codejam.info/2023/07/volkl-touristick-komperdell-ice-flex.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently bought adjustable ski poles as I was getting into backcountry
skiing. I got the <a href="https://volkl.com/en-ca/p/touristick-ac-poles-adjustable-2023">Völkl Touristick AC</a>.</p>
<p>The poles are great. They’re lightweight (224 g per pole), the extended
grip is super convenient, and they feel really solid.</p>
<p>However the “powder baskets” they came with are as tiny as they look on
the product picture. In fact, they have a diameter of 7 cm, which is
just 1 cm more than my groomer poles baskets. 😅</p>
<p>Here’s a comparison of the stock basket (right) with an actual, 10 cm
powder basket (left).</p>
<figure class="center">
  <img alt="" src="https://www.codejam.info/img/2023/07/poles/comparison.jpg">
</figure>
<p>This is much smaller than the competition for backcountry touring ski
poles. For example the <a href="https://www.atomic.com/en-ca/shop/product/bct-touring-aj5005732.html">Atomic BCT Touring</a>
comes with 8.5 cm baskets, and their <a href="https://www.atomic.com/en-ca/shop/product/backland-fr-aj5005314.html">Backland
Freeride</a>
model comes with 9.7 cm baskets. The <a href="https://www.blackdiamondequipment.com/en_US/product/traverse-ski-poles/">Black Diamond Traverse</a>
have 10 cm baskets, and the <a href="https://www.black-crows.com/ca/fr/p/-batons-oxus/101724-020-115.html">Black Crows
Oxus</a>
have 9 cm baskets.</p>
<p>Even a random <a href="https://amzn.to/3OyATE8">cheap powder basket you find on Amazon</a>
is 8.7 cm.</p>
<p>Those small stock baskets provide little to no flotation on deep fluffy
powder. And what do we backcountry skiers like to ski the most? Deep.
Fluffly. Powder.</p>
<figure class="grid grid-2">
  <img alt="" src="https://www.codejam.info/img/2023/07/poles/deep.jpg">
  <img alt="" src="https://www.codejam.info/img/2023/07/poles/powder.jpg">
  <figcaption>You can evaluate the performance of the stock baskets on the second image.</figcaption>
</figure>
<p>So why am I writing this instead of buying the aforementioned cheap
powder baskets on Amazon and installing it on my new poles?</p>
<h2 id="introducing-the-komperdell-ice-flex-system" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/volkl-touristick-komperdell-ice-flex.html#introducing-the-komperdell-ice-flex-system"><span>Introducing the Komperdell Ice-Flex system</span></a></h2>
<p>It turns out the Touristick poles come with a proprietary basket system
by Komperdell. It means you can’t just screw on any replacement baskets.
It’s only compatible with Komperdell Ice-Flex™ baskets.</p>
<p>It’s defined as a <strong>“moveable basket system, that adapts up to 28° to the
slope inclination”</strong>. It’s not exactly obvious what this means, so I
made a quick video to show the mechanism.</p>
<figure class="video">
  <iframe src="https://www.youtube.com/embed/hloFNTuovyo" allowfullscreen></iframe>
</figure>
<p>It doesn’t seem that this mechanism is widely adopted. I’ve only found
it on Komperdell’s own poles and Völkl. Depending on where you live
around the world, it may be extremely hard if not impossible to put your
hand on a wider, compatible basket.</p>
<div class="note">
<p><strong>Note:</strong> don’t confuse it with the Vario basket system (which is
defined as “easy and quick to change”) because the mounting mechanism is
not gonna be compatible, although it seems a bit more common.</p>
<p>Sidenote, the Ice-Flex baskets were definitely <em>not</em> easy and quick to
change. It took quite a lot of force to clip the basket to the tip, and
same to remove it. Although after a few times taking off and on the
same basket and clip piece, it gets much easier.</p>
</div>
<p>On their website you can look for baskets
<a href="https://www.komperdell.com/en/Poles/Accessories/Baskets/?order=price-desc&amp;p=1&amp;properties=0b437375a8a343b89a327d5f8d327cf0">specifically compatible with the Ice-Flex system</a>,
but they don’t ship outside Europe, and even if you do live in Europe,
paying €20 for a €11.95 pair of baskets is quite steep.</p>
<p>You’ve got 4 options:</p>
<ul>
<li><a href="https://www.komperdell.com/en/Regular-UL-Iceflake-Basket/K9949-925-UNI">Regular UL Ice-Flex basket</a></li>
<li><a href="https://www.komperdell.com/en/Ice-Flex-Basket/K9396-925-UNI">Regular Ice-Flex basket</a></li>
<li><a href="https://www.komperdell.com/en/Large-UL-Iceflake-Basket/K9950-925-UNI">Large UL Ice-Flex basket</a></li>
<li><a href="https://www.komperdell.com/en/Ice-Flex-Winter-Basket-XL/K9385-925-UNI">Large Ice-Flex basket</a></li>
</ul>
<p>It’s not clear to me what UL means (maybe ultralight?), but it’s
basically the “rounded hexagon” shape you can see on the right in <a href="https://www.codejam.info/img/2023/07/poles/comparison.jpg">this
picture</a>, while the other kind (not UL) is a
more standard snowflake shape.</p>
<p>They don’t list the basket diameters on the website, but my guess based
on the ones I managed to get is:</p>
<ul>
<li><strong>Regular UL Ice-Flex basket:</strong> 7 cm <small>(assuming those are the ones that came with my poles)</small></li>
<li><strong>Regular snowflake Ice-Flex basket:</strong> 8.5 cm <small>(I don’t have those, but they list 8.5 cm on <a href="https://www.tradeinn.com/trekkinn/en/komperdell-ice-flex-winter-basket/136969928/p">this site</a>)</small></li>
<li><strong>Large UL Ice-Flex basket:</strong> 9.5 cm</li>
<li><strong>Large snowflake Ice-Flex basket:</strong> 10 cm</li>
</ul>
<p>I hope you found the information you were looking for. Let me know if
you have any questions or if you want to add any extra information that
could make this post even more useful.</p>
<p>Hopefully someday Komperdell will distribute those wider baskets in
North America. Cheers!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS harvest cursor from any app 😏</title>
    <link href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html" />
    <id>https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>As a pet project I was building a <a href="https://github.com/valeriangalliat/retina-screenshot">screenshot app</a>,
and I wanted its cursors to match the ones of macOS screenshot utility:
<img class="fit-line-height" alt="Crosshair" srcset="../../img/2023/07/macos-cursors/crosshair.png 2x">
and <img class="fit-line-height" alt="Camera" srcset="../../img/2023/07/macos-cursors/camera.png 2x">.</p>
<p>This was harder than expected. I’ll tell you the whole story because I
find it fun and interesting, but feel free to jump straight to <a href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#harvesting-the-cursor-programmatically">the solution</a>.</p>
<h2 id="default-system-cursors-in-nscursor" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#default-system-cursors-in-nscursor"><span>Default system cursors in <code>NSCursor</code></span></a></h2>
<p>In a Mac app, the <code>NSCursor</code> class <a href="https://developer.apple.com/documentation/appkit/nscursor">exposes a number of default cursors</a>,
like the arrow <img class="fit-line-height" alt="Arrow" srcset="../../img/2023/07/macos-cursors/nscursor/arrow.png 2x">,
I-beam <img class="fit-line-height" alt="I-beam" srcset="../../img/2023/07/macos-cursors/nscursor/i-beam.png 2x">,
pointing hand <img class="fit-line-height" alt="Pointing hand" srcset="../../img/2023/07/macos-cursors/nscursor/pointing-hand.png 2x">,
various resize cursors, and even a cute “disappearing item” cursor <img class="fit-line-height" alt="Disappearing item" srcset="../../img/2023/07/macos-cursors/nscursor/disappearing-item.png 2x">
(that I kinda want to name “poof” for some reason).</p>
<p>There is also a crosshair cursor <img class="fit-line-height" alt="Crosshair" srcset="../../img/2023/07/macos-cursors/nscursor/crosshair.png 2x">,
however it’s not the same that the system screenshot utility uses. And
the camera cursor is nowhere to be found.</p>
<p>So our last resort is to set a custom cursor from an image, e.g. for a
cursor that’s 32x32 pixels where we want the “hot spot” to be in the
middle:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> <span class="hljs-type">NSImage</span>(named: <span class="hljs-string">&quot;cursor.png&quot;</span>)
<span class="hljs-keyword">let</span> hotSpot <span class="hljs-operator">=</span> <span class="hljs-type">NSPoint</span>(x: <span class="hljs-number">16</span>, y: <span class="hljs-number">16</span>)
<span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> <span class="hljs-type">NSCursor</span>(image: image, hotSpot: hotSpot)
</code></pre>
<p>But what image do we use here?</p>
<h2 id="macos-default-cursors-source-location" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#macos-default-cursors-source-location"><span>macOS default cursors source location?</span></a></h2>
<p>By doing a bit of digging in the <code>/System</code> directory, we find the
following path:</p>
<pre><code class="hljs">/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/Resources/cursors
</code></pre>
<p>This seems to contain all the system cursors, one directory for each,
containing a <code>cursor.pdf</code> and <code>info.plist</code>!</p>
<p>Here, we effectively have <code>screenshotselection</code> that matches the
screen capture utility’s crosshair, and <code>screenshotwindow</code> that matches
the camera cursor shown during window selection. Neat.</p>
<p>Parsing the <code>info.plist</code>, we find the hot spot coordinates:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">plutil -p /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/Resources/cursors/screenshotselection/info.plist</span>
{
  &quot;hotx&quot; =&gt; 15
  &quot;hotx-scaled&quot; =&gt; 15
  &quot;hoty&quot; =&gt; 15
  &quot;hoty-scaled&quot; =&gt; 15
}
</code></pre>
<p>We can now load those programmatically:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">loadCursor</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">name</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">NSCursor</span>? {
  <span class="hljs-keyword">let</span> root <span class="hljs-operator">=</span>
    <span class="hljs-string">&quot;/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/Resources/cursors&quot;</span>

  <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> <span class="hljs-type">FileManager</span>.default.contents(atPath: <span class="hljs-string">&quot;<span class="hljs-subst">\(root)</span>/<span class="hljs-subst">\(name)</span>/info.plist&quot;</span>)
  <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">guard</span>
    <span class="hljs-keyword">let</span> plist <span class="hljs-operator">=</span> <span class="hljs-keyword">try?</span> <span class="hljs-type">PropertyListSerialization</span>.propertyList(from: data, options: [], format: <span class="hljs-literal">nil</span>)
      <span class="hljs-keyword">as?</span> [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>]
  <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> pdfData <span class="hljs-operator">=</span> <span class="hljs-keyword">try?</span> <span class="hljs-type">Data</span>(contentsOf: <span class="hljs-type">URL</span>(fileURLWithPath: <span class="hljs-string">&quot;<span class="hljs-subst">\(root)</span>/<span class="hljs-subst">\(name)</span>/cursor.pdf&quot;</span>))
  <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> cursorImage <span class="hljs-operator">=</span> <span class="hljs-type">NSImage</span>(data: pdfData) <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">let</span> hotSpot <span class="hljs-operator">=</span> <span class="hljs-type">NSPoint</span>(
    x: plist[<span class="hljs-string">&quot;hotx&quot;</span>] <span class="hljs-keyword">as!</span> <span class="hljs-type">Int</span>? <span class="hljs-operator">??</span> <span class="hljs-type">Int</span>(cursorImage.size.width) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>,
    y: plist[<span class="hljs-string">&quot;hoty&quot;</span>] <span class="hljs-keyword">as!</span> <span class="hljs-type">Int</span>? <span class="hljs-operator">??</span> <span class="hljs-type">Int</span>(cursorImage.size.height) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>
  )

  <span class="hljs-keyword">return</span> <span class="hljs-type">NSCursor</span>(image: cursorImage, hotSpot: hotSpot)
}
</code></pre>
<p>Let’s use this function in a basic example to demonstrate it:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared

<span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> loadCursor(<span class="hljs-string">&quot;screenshotselection&quot;</span>) {
  <span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="hljs-operator">+</span> <span class="hljs-number">1</span>) {
    cursor.set()
  }
}

app.setActivationPolicy(.regular)
app.activate(ignoringOtherApps: <span class="hljs-literal">true</span>)
app.run()
</code></pre>
<div class="note">
<p><strong>Note:</strong> here we call <code>cursor.set()</code> after a delay because it
<a href="https://stackoverflow.com/a/39905020">doesn’t</a>
<a href="https://stackoverflow.com/a/13848213">always</a> work when called right
away for reasons that are not familiar to me.</p>
<p>In a real app, you probably want to subclass <code>NSView</code>, override
<code>resetCursorRects</code>, and call <code>addCursorRect</code> in it.</p>
</div>
<p>This actually looks good for the camera! But for the crosshair, it
doesn’t seem to match the original one.</p>
<p>The original crosshair size appears to be 50x50 pixels, while this one
is 46x46. More importantly, the original one has some kind of light outline
that makes it visible on darker backgrounds, that is completely missing
from that cursor PDF we just found. You can see the difference easily:</p>
<table>
  <tr>
    <th>Original</th>
    <th>Custom</th>
  </tr>
  <tr>
    <td><img alt="Original crosshair over grey background" srcset="../../img/2023/07/macos-cursors/hiservices/orig-grey.png 2x"></td>
    <td><img alt="Custom crosshair over grey background" srcset="../../img/2023/07/macos-cursors/hiservices/custom-grey.png 2x"></td>
  </tr>
  <tr>
    <td><img alt="Original crosshair over dark background" srcset="../../img/2023/07/macos-cursors/hiservices/orig-dark.png 2x"></td>
    <td><img alt="Custom crosshair over dark background" srcset="../../img/2023/07/macos-cursors/hiservices/custom-dark.png 2x"></td>
  </tr>
</table>
<p>So the screen capture utility doesn’t seem to be using this cursor from
<code>HIServices.framework</code>.</p>
<p>I tried exploring the contents of the screen capture app in
<code>/System/Library/CoreServices/screencaptureui.app</code>, especially the
<code>Contents/Resources/Assets.car</code> file, exploring it using
<a href="https://github.com/insidegui/AssetCatalogTinkerer">Asset Catalog Tinkerer</a>,
but it didn’t contain anything useful.</p>
<h2 id="harvesting-the-cursor-programmatically" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#harvesting-the-cursor-programmatically"><span>Harvesting the cursor programmatically</span></a></h2>
<p>The next idea I tried was to see if I could somehow access the cursor
data from <em>other</em> apps from my Swift app.</p>
<p>It turns out <code>NSCursor</code> exposes a <a href="https://developer.apple.com/documentation/appkit/nscursor/1533611-currentsystem"><code>currentSystem</code></a>
property, containing current system cursor (as opposed to
<code>NSCursor.current</code> that contains your own application’s current cursor).</p>
<p>This way we can easily access the image data of the <code>currentSystem</code>
cursor, as well as its <code>hotSpot</code> to be used later in our own custom
cursor.</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> <span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">!</span>

<span class="hljs-built_in">print</span>(cursor.hotSpot)

<span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> cursor.image.cgImage(forProposedRect: <span class="hljs-literal">nil</span>, context: <span class="hljs-literal">nil</span>, hints: <span class="hljs-literal">nil</span>)<span class="hljs-operator">!</span>
<span class="hljs-keyword">let</span> bitmap <span class="hljs-operator">=</span> <span class="hljs-type">NSBitmapImageRep</span>(cgImage: image)
<span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> bitmap.representation(using: .png, properties: [:])<span class="hljs-operator">!</span>
<span class="hljs-keyword">try!</span> data.write(to: <span class="hljs-type">URL</span>(fileURLWithPath: <span class="hljs-string">&quot;cursor.png&quot;</span>))
</code></pre>
<p>We can put this code in a file <code>test.swift</code>, and run it with <code>sleep 5 &amp;&amp; swift test.swift</code>.
This gives us 5 seconds to do whatever is needed to show the cursor we
want to harvest, before our script actually runs and saves the current
system cursor to a PNG file.</p>
<p>In the case of the screen capture utility crosshair, I’ve got this
(pictured over transparent, grey and dark background to show how well it
reacts to those):</p>
<table>
  <tr>
    <td><img alt="Harvested crosshair" srcset="../../img/2023/07/macos-cursors/crosshair-raw.png 2x"></td>
    <td style="background-color: #3f3f40"><img alt="Harvested crosshair over grey background" srcset="../../img/2023/07/macos-cursors/crosshair-raw.png 2x"></td>
    <td style="background-color: #111111"><img alt="Harvested crosshair over dark background" srcset="../../img/2023/07/macos-cursors/crosshair-raw.png 2x"></td>
  </tr>
</table>
<p>Perfect. 👌</p>
<p>I didn’t want to get into adding support for showing the dynamic
coordinates as part of the cursor, so as far as I’m concerned, I got rid
of those and used just the crosshair in my app.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>I hope you found this post useful! Now if you want to get the cursor
data from any app, in its original transparent quality, you can use the
simple script above to do so. Enjoy!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1684688732694130688">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Swift: support cut/copy/paste shortcuts in a NSOpenPanel and NSSavePanel</title>
    <link href="https://www.codejam.info/2023/07/swift-nsopenpanel-nssavepanel-edit-shortcuts.html" />
    <id>https://www.codejam.info/2023/07/swift-nsopenpanel-nssavepanel-edit-shortcuts.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Let’s consider this basic Swift app that simply shows an <code>NSSavePanel</code>:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">NSApplicationDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">applicationDidFinishLaunching</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">notification</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
    app.activate(ignoringOtherApps: <span class="hljs-literal">true</span>)

    <span class="hljs-keyword">let</span> savePanel <span class="hljs-operator">=</span> <span class="hljs-type">NSSavePanel</span>()
    savePanel.runModal()
  }
}

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">AppDelegate</span>()

app.setActivationPolicy(.regular)
app.delegate <span class="hljs-operator">=</span> delegate
app.run()
</code></pre>
<p>This shows a generic open panel as expected:</p>
<figure class="center">
  <img alt="Open panel" srcset="../../img/2023/07/open-panel.png 2x">
</figure>
<p>However we have a problem: we can’t cut, copy or paste in of the text
fields (<strong>Save As</strong>, <strong>Tags</strong>, <strong>Search</strong>). We can’t <kbd>Command</kbd>
+ <kbd>X</kbd>, <kbd>C</kbd> or <kbd>V</kbd>. All those shortcuts do is
playing an annoying <em>beep</em> noise telling us we can’t do that.</p>
<p><strong>This is because on macOS, those shortcuts are actually tied to menu
items.</strong> You can’t have <kbd>Command</kbd> + <kbd>C</kbd> work unless
you have a matching menu item, typically <strong>Edit &gt; Copy</strong>.</p>
<h2 id="adding-an-edit-menu" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/swift-nsopenpanel-nssavepanel-edit-shortcuts.html#adding-an-edit-menu"><span>Adding an edit menu</span></a></h2>
<p>To solve this, we’re gonna add an edit menu tour app with the proper
shortcuts.</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> mainMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()
app.mainMenu <span class="hljs-operator">=</span> mainMenu

<span class="hljs-keyword">let</span> appMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
mainMenu.addItem(appMenu)

<span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
mainMenu.addItem(editMenu)

<span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>)
editMenu.submenu <span class="hljs-operator">=</span> editSubmenu

editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Cut&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.cut(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;x&quot;</span>)
editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Copy&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.copy(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;c&quot;</span>)
editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Paste&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.paste(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;v&quot;</span>)

editSubmenu.addItem(
  withTitle: <span class="hljs-string">&quot;Select All&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.selectAll(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;a&quot;</span>)
</code></pre>
<p>We now have a nice edit menu:</p>
<figure class="center">
  <img alt="Edit menu" srcset="../../img/2023/07/edit-menu.png 2x">
</figure>
<p>Here, we leverage <em>automatic menu enabling</em> in the <code>action</code> in order to map
menu items and shortcuts to the first object in the responder chain that
implements the given action, as explained in <a href="https://stackoverflow.com/a/47577869">this Stack Overflow post</a>.</p>
<p>This is pretty neat, and thanks to this feature, we now have working
cut/copy/paste in our dialog!</p>
<p>As a bonus, it would be a good practice to also add a way to quit our
app using the same method:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> appSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()
appMenusubmenu <span class="hljs-operator">=</span> appSubmenu

appSubmenu.addItem(
  withTitle: <span class="hljs-string">&quot;Quit&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSApplication</span>.terminate(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;q&quot;</span>)
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Swift: NSMenuItem title not showing</title>
    <link href="https://www.codejam.info/2023/07/swift-nsmenuitem-title-blank.html" />
    <id>https://www.codejam.info/2023/07/swift-nsmenuitem-title-blank.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If for some reason you’re making a Swift app and want to
programmatically define your menu items, as opposed to using Xcode’s
storyboards to create them visually, you may run into an issue where
your menu title is not showing.</p>
<p>Let’s consider the following example (e.g. put it in <code>test.swift</code> and
run it with <code>swift test.swift</code>):</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">NSApplicationDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">applicationDidFinishLaunching</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">notification</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
    app.activate(ignoringOtherApps: <span class="hljs-literal">true</span>)

    <span class="hljs-keyword">let</span> mainMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()
    app.mainMenu <span class="hljs-operator">=</span> mainMenu

    <span class="hljs-keyword">let</span> appMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
    mainMenu.addItem(appMenu)

    <span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)
    mainMenu.addItem(editMenu)

    <span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()

    editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Test&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)
    editMenu.submenu <span class="hljs-operator">=</span> editSubmenu
  }
}

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">AppDelegate</span>()

app.setActivationPolicy(.regular)
app.delegate <span class="hljs-operator">=</span> delegate
app.run()
</code></pre>
<p>When we run it, the edit menu doesn’t show. Or actually, it’s there but
its text is blank!</p>
<figure class="center">
  <img alt="Blank edit menu" srcset="../../img/2023/07/swift-edit-blank.png 2x">
</figure>
<p><strong>This is because the <code>NSMenuItem</code> title actually doesn’t matter here.</strong>
It’s the title of the <code>NSMenu</code> that we use as a submenu that matters.</p>
<p>Let’s fix it up:</p>
<pre><code class="hljs language-diff:swift"><span class="hljs-deletion">-<span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)</span>
<span class="hljs-addition">+<span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>(title: <span class="hljs-string">&quot;Doesn&#x27;t matter&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)</span>
 mainMenu.addItem(editMenu)

<span class="hljs-deletion">-<span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()</span>
<span class="hljs-addition">+<span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>)</span>
</code></pre>
<p>And now our title shows up properly!</p>
<figure class="center">
  <img alt="Good edit menu" srcset="../../img/2023/07/swift-edit-good.png 2x">
</figure>
<h2 id="a-note-about-the-app-menu" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/swift-nsmenuitem-title-blank.html#a-note-about-the-app-menu"><span>A note about the app menu</span></a></h2>
<p>In the example above, note that it was also important to explicitly add
an app menu before our edit menu:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> appMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
mainMenu.addItem(appMenu)
</code></pre>
<p>This is important, because the first item of the main menu is gonna be
treated as the app menu. If we didn’t do that, our edit menu would
actually become the app menu, so that <strong>Test</strong> would appear under
<strong>swift-frontend</strong>, and <strong>Edit</strong> would be nowhere to be seen.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Using zx with TypeScript, ESM and top-level await</title>
    <link href="https://www.codejam.info/2023/04/zx-typescript-esm.html" />
    <id>https://www.codejam.info/2023/04/zx-typescript-esm.html</id>
    <updated>2023-04-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/google/zx"><code>zx</code></a> is a cool library by Google to
write shell-like scripts in Node.js.</p>
<p>As shown in their main example, you could have a file <code>myscript.mjs</code>:</p>
<pre><code class="hljs language-js">#!<span class="hljs-regexp">/usr/</span>bin/env zx

<span class="hljs-keyword">await</span> $<span class="hljs-string">`cat package.json | grep name`</span>
</code></pre>
<p>And run it as <code>./myscript.mjs</code>, or even put it in your <code>PATH</code> and run it
as <code>myscript.mjs</code>.</p>
<p>This works if you installed <code>zx</code> globally. If you want to keep it local,
<code>#!/usr/bin/env npx zx</code> should work with most <code>env</code> implementations.</p>
<p>They say that you <em>have</em> to use a <code>.mjs</code> extension, and if you prefer
<code>.js</code> or no extension at all, you won’t have access to top-level
<code>await</code>, and you need to wrap your code in an
<abbr title="Immediately invoked function expression">IIFE</abbr>:</p>
<pre><code class="hljs language-js">#!<span class="hljs-regexp">/usr/</span>bin/env zx

<span class="hljs-keyword">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`cat package.json | grep name`</span>
}()
</code></pre>
<p><strong>This actually doesn’t appear to be necessary!</strong> It looks like when
invoking the script via <code>zx</code>, it <em>forces</em> it to be interpreted as an
ECMAScript module, even without extension, so the original example will
work regardless of how the script is named. Sweet.</p>
<p>What if you want TypeScript though? They just document that you need to
explicitly import <code>zx</code> and use an IIFE again:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>
<span class="hljs-comment">// Or</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;zx/globals&#x27;</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`ls -la`</span>
}()
</code></pre>
<p>But they also tell you that you need to set <code>&quot;type&quot;: &quot;module&quot;</code> in your
<code>package.json</code> and <code>&quot;module&quot;: &quot;esnext&quot;</code> in <code>tsconfig.json</code>. There’s no
mention what shebang to use, nor what file extension.</p>
<p>It turns out you don’t necessarily need to do all this. Let’s dig in the
details.</p>
<h2 id="shebang-for-a-typescript-script" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#shebang-for-a-typescript-script"><span>Shebang for a TypeScript script</span></a></h2>
<p>It’s clear that <code>zx</code> doesn’t support TypeScript out of the box, so we
can ditch the <code>#!/usr/bin/env -S npx zx</code> shebang. We need something that
will parse TypeScript, and because we can’t rely on the <code>zx</code> wrapper,
we’ll need to import <code>zx</code> explicitly. No problem.</p>
<p>Let’s go with <a href="https://www.npmjs.com/package/ts-node"><code>ts-node</code></a> first,
because it’s one of the most common options to do this.</p>
<p>TypeScript defaults to transpiling to CommonJS modules, so we won’t be
able to use top-level <code>await</code> out of the box. We also won’t be able to
use an <code>import</code> statement (that TypeScript translates to <code>require</code>) to
import <code>zx</code>, because <code>zx</code> is an ESM-only package. But we can use dynamic
<code>import</code> for that:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> { $ } = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;zx&#x27;</span>)
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
}()
</code></pre>
<p>You’ll also need to set <code>&quot;moduleResolution&quot;: &quot;nodenext&quot;</code> in the
<code>compilerOptions</code> of your <code>tsconfig.json</code> for it to support dynamic
imports like this, but you have to be careful, because this will change
the settings for your whole app!</p>
<p>Alternatively, you could put your script in a subdirectory, and have a
dedicated <code>tsconfig.json</code> there, then you could set those settings
locally to this subdirectory without affecting the rest of your app.</p>
<p>The advantage of this method is that <strong>the extension doesn’t matter</strong>!
You can have this script in <code>myscript.ts</code> but you can as well have it
just <code>myscript</code> for being more command-looking. This a pretty good
advantage of this solution as we’ll see later.</p>
<div class="note">
<p><strong>Note:</strong> keep in mind because this will run in whatever directory the
script was run from, <code>npx</code> will try to install <code>ts-node</code> globally if
you’re not running this from a directory where <code>ts-node</code> is part of the
local modules.</p>
<p>Most of the time this is fine, but if you want a script that can be
called from anywhere, you would be better off using a wrapper shell
script, like we’ll see below.</p>
</div>
<h2 id="configuring-typescript-in-the-shebang" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#configuring-typescript-in-the-shebang"><span>Configuring TypeScript in the shebang</span></a></h2>
<p>Alternatively, we can pass <code>--compilerOptions</code> to <code>ts-node</code> directly in
the shebang to avoid depending on a <code>tsconfig.json</code>. The problem is
that there’s no cross-platform way to this (this is made harder by the
fact we have to pass a JSON string).</p>
<p>On macOS:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env npx ts-node --compilerOptions {&quot;moduleResolution&quot;:&quot;nodenext&quot;}</span>
</code></pre>
<p>On Linux:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;}&#x27;</span>
</code></pre>
<p>Notice how on macOS, the quotes of the JSON object were <em>not</em> escaped!
Its implementation of  <code>env</code> doesn’t try to parse quotes in the first
place, so we can (and need) to give them as is. This also means we can’t
include spaces as the JSON would be split into multiple arguments.</p>
<p>For Linux, we have to pass <code>-S</code> (makes <code>env</code> split arguments), but then
it <em>does</em> support quoting and various escape sequences, so we <em>have</em> to
add the quotes. macOS “supports” the <code>-S</code> option but currently it just
ignores it and treats the rest of the string as it normally does.</p>
<p>Sadly I’m not aware of a way to do this in a cross-platform way, without
having to resort to a wrapper shell script. If you have a better option,
let me know!</p>
<p>Such a script would look like:</p>
<pre><code class="hljs language-sh"><span class="hljs-meta">#!/bin/sh</span>

<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>&quot;</span>
npx ts-node --compilerOptions <span class="hljs-string">&#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;}&#x27;</span> myscript.ts
</code></pre>
<p>It would be in a <code>myscript</code> file next to <code>myscript.ts</code>, and you invoke
it with <code>./myscript</code>.</p>
<div class="note">
<p>This will not preserve the <abbr title="Current working directory">CWD</abbr>
information, because it <code>cd</code> into the script directory first. The
advantage is that now <code>npx</code> will find your local version of <code>ts-node</code>
regardless where you run the script from.</p>
</div>
<p>At that point you could even bypass <code>npx</code>, e.g. if your script is in a
<code>bin</code> directory at the root of your project, you could run
<code>../node_modules/.bin/ts-node</code> instead of <code>npx ts-node</code> and remove the
extra latency from <code>npx</code>.</p>
<p><strong>For the rest of this post I’ll user the Linux version of the shebang
for simplicity. Adapt accordingly to your needs, either for macOS or
using a script wrapper for portability.</strong></p>
<h2 id="adding-esm-support" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#adding-esm-support"><span>Adding ESM support</span></a></h2>
<p><strong>If you want to import other parts of your codebase, you should
probably stick with the previous approach.</strong> I’ll continue by exploring
options to make <em>this particular script</em> ESM, but keep in mind that if
you import non-ESM parts of your application, this will confuse
TypeScript (especially with default exports) and you’ll likely run into
issues.</p>
<p>If you don’t though, we have a few ways to force it to be ESM, so we can
directly import <code>zx</code> and also use top-level <code>await</code>!</p>
<p><code>ts-node</code> has a <code>--esm</code> option to parse the input as ECMAScript module,
and even ships a <a href="https://github.com/TypeStrong/ts-node#esm"><code>ts-node-esm</code></a>
executable to do the same thing.</p>
<p>On top of that, we need to configure the TypeScript compiler to support
ESM, which we do by adding the following to our <code>tsconfig.json</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodenext&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>As we saw earlier, we can pass that to <code>ts-node</code> in a
<code>--compilerOptions</code> flag. This gives us:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --esm --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>We can now import <code>zx</code> directly and happily use to-level <code>await</code>, and
get rid of that IIFE!</p>
<p>One thing we notice right away though is that the <code>ts-node</code> ESM loader
doesn’t let us use any extension (or in particular, no extension). <strong>It
<em>needs</em> to be in a <code>.mts</code> file.</strong> This means no more command-looking
script. It seems to be related to <a href="https://github.com/nodejs/node/issues/34049">this issue</a>
on the Node.js side.</p>
<h2 id="making-it-faster" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#making-it-faster"><span>Making it faster</span></a></h2>
<p><code>ts-node</code> doesn’t have a reputation to be fast, actually quite the
opposite. Its excuse is that it not only transpiles TypeScript to
JavaScript, but also performs type checking.</p>
<h2 id="using-ts-node-transpile-only" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-ts-node-transpile-only"><span>Using <code>ts-node --transpile-only</code></span></a></h2>
<p>We can pass <code>--transpile-only</code> to skip the type checking part, which
does improve the performance quite a bit:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --esm --transpile-only --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>This small example takes 500 ms to run on my machine, as opposed to 1
second when it was doing type checking!</p>
<pre><code class="hljs language-console">time ./myscript.mts
1.61s user 0.13s system 152% cpu 1.137 total

time ./myscript-transpile-only.mts
0.48s user 0.09s system 96% cpu 0.587 total
</code></pre>
<p>It’s still relatively slow though, considering <a href="https://esbuild.github.io/">esbuild</a>
takes 15 ms to transpile that file:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time node_modules/.bin/esbuild myscript.mts --target=node16</span>
0.01s user 0.01s system 79% cpu 0.014 total
</code></pre>
<p>But for a fair comparison, we have to consider that <code>npx</code> adds a 200 ms
overhead:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time npx esbuild myscript.mts --target=node16</span>
0.21s user 0.04s system 111% cpu 0.227 total
</code></pre>
<h3 id="using-tsx" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-tsx"><span>Using <code>tsx</code></span></a></h3>
<p>Interestingly, there’s a cool project called <a href="https://github.com/esbuild-kit/tsx"><code>tsx</code></a>,
which is TypeScript’s analogue to <code>npx</code>. And it uses esbuild in the
background.</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx tsx</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>But we notice it’s not quite fast, it does barely better than <code>ts-node --transpile-only</code>:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time ./myscript.mts</span>
0.42s user 0.08s system 120% cpu 0.413 total
</code></pre>
<p>There’s <a href="https://github.com/esbuild-kit/tsx/issues/167">an issue open for that</a>,
and it seems that it’s because <code>tsx</code> target older Node.js versions in a
way where it transpiles all the imported <code>node_modules</code> too! And it
seems that there’s currently no way around this behavior.</p>
<p>And again, this relies on a <code>.mts</code> extension being present for ESM
support. And even if you go the CommonJS route, you’ll still need a
<code>.ts</code> extension, unlike when using <code>ts-node</code>. It won’t work with
extensionless scripts.</p>
<h3 id="using-swc" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-swc"><span>Using SWC</span></a></h3>
<p><a href="https://swc.rs/">SWC</a> is a “Rust-based platform for the web”, but
really the part I care about is that it claims to transpile TypeScript
to JavaScript <em>pretty damn fast</em>, just like esbuild.</p>
<p>They provide <a href="https://github.com/swc-project/swc-node"><code>swc-node</code></a> to
run TypeScript files with Node.js, which is exactly what we want. It’s
not directly a command we can invoke unlike <code>ts-node</code>, instead we need
to do:</p>
<pre><code class="hljs language-sh">node --require @swc-node/register script.ts <span class="hljs-comment"># CJS</span>
node --loader @swc-node/register/esm script.ts <span class="hljs-comment"># ESM</span>
</code></pre>
<p>So we can and that to our shebang!</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S node --loader @swc-node/register/esm</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>This is the fastest one so far!</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time ./myscript.mts</span>
0.28s user 0.04s system 110% cpu 0.289 total
</code></pre>
<p>However, we have to consider that it uses <code>node --loader</code>
instead of <code>npx</code> like the previous examples, and as we saw <code>npx</code> costs
200 ms by itself.</p>
<p>Also, even with today’s latest Node.js, custom ESM loaders are
experimental, so running the script like this will show the following
warning:</p>
<pre><code class="hljs">(node:13239) ExperimentalWarning: Custom ESM Loaders is an experimental feature and might change at any time
</code></pre>
<p>Also you need to make sure your <code>tsconfig.json</code> contains <code>&quot;target&quot;: &quot;esnext&quot;</code>
in <code>compilerOptions</code> otherwise SWC will not let you use top-level
<code>await</code>. Unlike the previous options, we can’t customize this directly
in the shebang.</p>
<p>Lastly, we also need a <code>.mts</code> extension for this to work, like with all
the ESM solutions so far.</p>
<div class="note">
<p><strong>Note:</strong> I couldn’t get <code>swc-node</code> to work with a CJS file, with the
IIFE and dynamic <code>import</code>. Even with a <code>.swcrc</code>, which requires running
your code as <code>SWCRC=true ./myscript.ts</code>, it keeps transpiling the
dynamic <code>import</code> into a <code>require</code> statement, which is not supported by
<code>zx</code>.</p>
</div>
<h3 id="using-swc-with-ts-node" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-swc-with-ts-node"><span>Using SWC with <code>ts-node</code></span></a></h3>
<p>A cool surprised I found while writing this post is that <code>ts-node</code>
actually have <a href="https://typestrong.org/ts-node/docs/swc/">first-class support for SWC</a>!</p>
<p>All you need is install <code>@swc/core</code> or <code>@swc/wasm</code>, and then simply use
<code>ts-node --swc</code>, or set the following in your <code>tsconfig.json</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;ts-node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;swc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>In our initial example, this gives us:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> { $ } = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;zx&#x27;</span>)
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
}()
</code></pre>
<div class="note">
<p><strong>Note:</strong> we had to add <code>&quot;module&quot;: &quot;esnext&quot;</code> too, probably because
<code>ts-node</code> and SWC have different defaults when it comes to this setting.</p>
</div>
<p>And for the ESM version:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --esm --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#conclusion"><span>Conclusion</span></a></h2>
<p>All things considered, my favorite option is the <code>ts-node</code> approach we
started from but with a few tweaks that we learnt about along the way:
plain <code>ts-node</code> in the default CommonJS environment, using an IIFE and
dynamic <code>import</code>, but with the addition of <code>--compilerOptions</code> and
<code>--swc</code> (or alternatively, <code>--transpile-only</code>) in the shebang:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> { $ } = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;zx&#x27;</span>)
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
}()
</code></pre>
<ul>
<li>We can configure TypeScript directly in the shebang, no need to
maintain a separate <code>tsconfig.json</code> for our executable scripts.</li>
<li>We can import any of our project TypeScript files with no CJS/ESM
interoperability issues.</li>
<li>It’s reasonably fast.</li>
</ul>
<p>The downside is that it’s not cross-platform, but we saw we can use a
wrapper script to work around that if needed.</p>
<p>And if I don’t need need to import anything local to my CommonJS
project (or if I’m in a ESM project), I add <code>--esm</code> and <code>&quot;target&quot;: &quot;esnext&quot;</code>
to benefit from top-level <code>await</code>:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --esm --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>Sweet!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS reset app window to default size and position</title>
    <link href="https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html" />
    <id>https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html</id>
    <updated>2023-04-20T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Maybe it’s because I’m a bit of a perfectionist, but I sometimes like to
reset an app’s window to its default size and position. It looks like
I’m <a href="https://superuser.com/q/1485027">definitely</a>
<a href="https://apple.stackexchange.com/q/195479/452681">not</a>
<a href="https://discussions.apple.com/thread/250618907">the</a>
<a href="https://www.reddit.com/r/MacOS/comments/hbbg7z/reset_default_window_positionsize_in_catalina/">only one</a>.</p>
<p>The summary of the above links is that the window information is usually
stored in <code>~/Library/Preferences</code> or <code>~/Library/Saved Application State</code>, and you can get away with removing the matching application
preferences files in one of those locations, or carefully editing it to
remove <em>just</em> the window position if that’s what you want.</p>
<p>This is generally true, but not all the time (as shown in the
<a href="https://apple.stackexchange.com/a/195494/452681">case of the Mail app</a>).</p>
<p>This means this solution isn’t perfect. Did I say I was a perfectionist?</p>
<h2 id="finding-every-window-position-preferences" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html#finding-every-window-position-preferences"><span>Finding <em>every</em> window position preferences</span></a></h2>
<p>From the files we could find from the earlier solution, we can see that
the window position is either in a <code>NSWindowFrame</code> key, or a key that
starts with <code>NSWindow Frame</code>, e.g. for Activity Monitor and Finder:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">plutil -p ~/Library/Preferences/com.apple.ActivityMonitor.plist | grep NSWindow | grep Frame</span>
  &quot;NSWindow Frame main window&quot; =&gt; &quot;161 208 960 640 0 0 1728 1079 &quot;
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">plutil -p ~/Library/Saved\ Application\ State/com.apple.finder.savedState/windows.plist | grep NSWindow | grep Frame</span>
    &quot;NSWindowCloseButtonFrame&quot; =&gt; &quot;{{19, 876}, {14, 16}}&quot;
    &quot;NSWindowFrame&quot; =&gt; &quot;42 1193 1652 910 -87 1117 1920 1055 &quot;
    &quot;NSWindowMiniaturizeButtonFrame&quot; =&gt; &quot;{{39, 876}, {14, 16}}&quot;
    &quot;NSWindowZoomButtonFrame&quot; =&gt; &quot;{{59, 876}, {14, 16}}&quot;
</code></pre>
<p>Moreover, this setting is always stored in a <code>plist</code> file, the property
list file that macOS apps store their preferences in.</p>
<p>So we can try and find for those keys in all <code>plist</code> files in the whole
<code>~/Library</code>!</p>
<pre><code class="hljs language-sh">find ~/Library -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&#x27;*.plist&#x27;</span> -<span class="hljs-built_in">exec</span> grep -E <span class="hljs-string">&#x27;NSWindow ?Frame&#x27;</span> {} +
</code></pre>
<div class="note">
<p><strong>Note:</strong> <code>-exec command {} +</code> will execute the <code>command</code>, replacing <code>{} +</code> by all the files that <code>find</code> found! See the
<a href="https://linux.die.net/man/1/find"><code>find(1)</code></a> man page for more details.</p>
</div>
<p>Thanks to that, we uncover more locations! Here’s the exhaustive list of
where I found those window position preferences:</p>
<ul>
<li><code>~/Library/Preferences/{appId}.plist</code></li>
<li><code>~/Library/Saved Application State/{appId}.savedState/windows.plist</code></li>
<li><code>~/Library/Containers/{appId}/Data/Library/Preferences/{appId}.plist</code></li>
<li><code>~/Library/Containers/{appId}/Data/Library/Saved Application State/{appId}.savedState/windows.plist</code></li>
</ul>
<p>Where <code>appId</code> is the application ID, aka its bundle identifier, e.g.
<code>com.apple.mail</code> for Apple Mail.</p>
<h2 id="resetting-the-window-position" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html#resetting-the-window-position"><span>Resetting the window position</span></a></h2>
<p>Now you were able to locate the preferences file for your app’s window
location, you can reset it! There’s a few ways.</p>
<p>For the ones in <code>Prefererences</code>, this is typically managed (and cached)
by the <code>defaults</code> command. The cached part is important: while you can
manually edit or remove those files, your changes are more likely to be
ignored until you reboot. To avoid that, use
<a href="https://www.unix.com/man-page/osx/1/defaults/"><code>defaults(1)</code></a> to edit
them.</p>
<p>For Activity Monitor, that would be:</p>
<pre><code class="hljs language-sh">defaults delete ~/Library/Preferences/com.apple.ActivityMonitor.plist <span class="hljs-string">&#x27;NSWindow Frame main window&#x27;</span>
</code></pre>
<p>Which is equivalent to:</p>
<pre><code class="hljs language-sh">defaults delete com.apple.ActivityMonitor <span class="hljs-string">&#x27;NSWindow Frame main window&#x27;</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> this works even for containerized apps like Apple Mail:</p>
<pre><code class="hljs language-sh">defaults delete com.apple.mail
</code></pre>
<p>Because no key was passed, it’ll delete all the preferences. But either
way, it’ll know to target
<code>~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail.plist</code>.</p>
</div>
<p>As for the <code>Saved Application State</code> files, they don’t seem to be
cached, and they’re definitely not editable with the <code>defaults</code> command,
so feel free to remove them, or edit them with your favorite <code>plist</code>
editor!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS won’t sleep from the Apple menu</title>
    <link href="https://www.codejam.info/2023/04/macos-wont-sleep.html" />
    <id>https://www.codejam.info/2023/04/macos-wont-sleep.html</id>
    <updated>2023-04-20T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This one has been bugging me for a while now and I’m so glad I finally
found the cause.</p>
<p>It was <strong>so stupid</strong>: when I clicked <strong>Sleep</strong> in the Apple menu to
manually put my Mac to sleep, I was leaving my fingers on the trackpad
for a fraction of a second, and that “trackpad activity” caused it to
instantly wake up! 🤦‍♀️</p>
<p>If that was your issue as well, enjoy, you can stop reading here. In
case you’re bored though, here’s the full story.</p>
<h2 id="external-monitors-laptop-lid-and-sleep" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#external-monitors-laptop-lid-and-sleep"><span>External monitors, laptop lid, and sleep</span></a></h2>
<p>Before I got my external monitor, I was never putting my Mac to sleep
<em>explicitly</em>. I just closed the lid and that was it.</p>
<p>But with an external monitor connected, it’s another story.</p>
<p>This <a href="https://apple.stackexchange.com/q/18037/452681">goes back to 2011</a>,
with Mountain Lion. Before then, on Snow Leopard, closing the lid of
your MacBook was putting it to sleep, regardless whether or not an
external monitor was connected. Since Mountain Lion though, doing so
puts your MacBook in clamshell mode, where the external screen becomes
your primary monitor!</p>
<p>There’s essentially two groups of people when it comes to closing the
laptop with an external screen connected: the ones who want it to sleep
and the ones who want it to go in clamshell mode.</p>
<p>To be fair I could see myself leaning one way or the other depending on
what I want to do! We can’t have both at the same time, and the option
that’s not the default will have added friction.</p>
<p>When sleep was the default and you wanted to close your lid to go in
clamshell mode, you had to:</p>
<ol>
<li>Close the lid and let your laptop go to sleep.</li>
<li>Wake it up with your external mouse/keyboard.</li>
</ol>
<p>With clamshell being the default, if you want to sleep, you have to:</p>
<ol>
<li>Unplug the monitor.</li>
<li>Close the lid.</li>
<li>Plug the monitor again if you were also charging through it.</li>
</ol>
<p>Or even better:</p>
<ol>
<li>Click <strong>Sleep</strong> in the Apple menu.</li>
<li>Close the lid.</li>
</ol>
<p>That last one is acceptable to me, except at first, it didn’t seem to
work!</p>
<h2 id="waking-up-right-away-after-manually-sleeping" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#waking-up-right-away-after-manually-sleeping"><span>Waking up right away after manually sleeping</span></a></h2>
<p>After clicking <strong>Sleep</strong> in the Apple menu, both screens would turn off
for like a second, and then they would come right up!</p>
<p>Usually after trying a couple times, it would actually go to sleep, but
I could never really understand why. This exactly
<a href="https://discussions.apple.com/thread/253854954">what’s described in this Apple support thread</a>
although it got locked for inactivity before ever being resolved.
It just links to a Apple guide about <a href="https://support.apple.com/en-ca/guide/mac-help/mchlp2995/mac">diagnosing sleep issues</a>
with some generic advice but nothing useful to our case.</p>
<p>The other day though even after 10 tries, it kept waking up right away,
so I decided to dig into it.</p>
<h2 id="the-technical-symptoms" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#the-technical-symptoms"><span>The technical symptoms</span></a></h2>
<p>When we look at the Activity Monitor app, I discovered we can show
additional columns by right clicking on the columns header. In there, we
have <strong>Preventing Sleep</strong>.</p>
<figure class="center">
  <img alt="Activity Monitor column settings" srcset="../../img/2023/04/activity-monitor-sleep.png 2x">
</figure>
<p>In my case, it was <code>WindowServer</code>, aka the macOS process responsible for
managing windows, as well as <code>powerd</code>:</p>
<figure class="center">
  <img alt="Processes preventing sleep" srcset="../../img/2023/04/activity-monitor-prevent-sleep.png 2x">
</figure>
<div class="note">
<p><strong>Note:</strong> the <strong>Energy</strong> tab in Activity Monitor is also useful to
diagnose sleep issues! Not only it displays the power consumption
details of the currently running apps, <em>but also of the ones that were
previously closed</em>! And you can directly see if they’re preventing sleep
or not.</p>
<p>In our particular case though it wasn’t as useful as the <strong>CPU</strong> tab
because it doesn’t show the system processes.</p>
</div>
<p>Moreover, we can use the <code>pmset</code> command (power management settings) to
list if anything is preventing sleep (emphasis mine):</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pmset -g assertions</span>
Assertion status system-wide:
   BackgroundTask                 0
   ApplePushServiceTask           0
<strong>   UserIsActive                   1</strong>
   PreventUserIdleDisplaySleep    0
   PreventSystemSleep             0
   ExternalMedia                  0
<strong>   PreventUserIdleSystemSleep     1</strong>
   NetworkClientActive            0
Listed by owning process:
<strong>   powerd: PreventUserIdleSystemSleep named: "Powerd - Prevent sleep while display is on"
   WindowServer: UserIsActive named: "com.apple.iohideventsystem.queue.tickle service:AppleHIDKeyboardEventDriverV2 product:Apple Internal Keyboard / Trackpad eventType:3"</strong>
	Timeout will fire in 600 secs Action=TimeoutActionRelease
</code></pre>
<h2 id="researching-the-symptoms" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#researching-the-symptoms"><span>Researching the symptoms</span></a></h2>
<p>Again, we saw that <code>powerd</code> and <code>WindowServer</code> are the culprits.</p>
<ul>
<li><code>powerd</code> has an assertion <code>PreventUserIdleSystemSleep</code> “prevent sleep
while display is on”.</li>
<li><code>WindowServer</code> has an assertion <code>UserIsActive</code> materialized by my own
activity on the keyboard/trackpad.</li>
</ul>
<p>Looking for those leads us to a thread on Apple support about
<a href="https://discussions.apple.com/thread/252520499"><code>WindowServer</code> preventing sleep mode</a>,
but without any proper resolution: the problem just seems to have gone
away for some people with an Apple update, but the messages are from a
few years ago, and in my case I’m running the latest version of macOS.</p>
<p>We also find two Reddit threads,
<a href="https://www.reddit.com/r/MacOS/comments/n525zt/windowserver_preventing_my_mbp_from_sleeping/">one for <code>WindowServer</code></a>
and <a href="https://www.reddit.com/r/macbook/comments/o6kwqp/sleep_prevented_by_powerd/">one for <code>powerd</code></a>,
again both without a clear resolution.</p>
<div class="note">
<p><strong>Note:</strong> The <code>WindowServer</code> thread has <em>unrelated</em> resolutions where
<code>sharingd</code> and <code>coreaudiod</code> were preventing sleep, which is not what
we’re looking for here. That being said if you’re currently sharing
files over the network, or you have music playing, this will prevent
your Mac to sleep, so look into this first!</p>
</div>
<p>On top of that, I’m a bit dubious that <code>powerd</code> and <code>WindowServer</code> are
the problem here. After all, “preventing sleep while display is on”
sounds like a very reasonable thing to do, as well as preventing sleep
when there’s activity on the keyboard/trackpad! And it would be
logical to expect that manually putting the system to sleep would bypass
those assertions anyway.</p>
<p>This is confirmed by <a href="https://www.bravolt.com/post/why-won-t-my-computer-sleep">this post</a>:</p>
<blockquote>
<p><code>PreventUserIdleSystemSleep</code>: per the docs, the system should still sleep if you close your
laptop’s lid, or sleep manually.</p>
</blockquote>
<p><a href="https://developer.apple.com/documentation/iokit/kiopmassertiontypepreventuseridlesystemsleep">The <code>PreventUserIdleSystemSleep</code> docs</a>:</p>
<blockquote>
<p>The system may still sleep for lid close, Apple menu, low battery, or
other sleep reasons.</p>
</blockquote>
<p>It looks like we’re hitting a rock wall here. No appropriate solution
out there, my only suspects turned out to be innocent, and I still can’t
reliably put my Mac to sleep from the Apple menu!</p>
<h2 id="digging-deeper" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#digging-deeper"><span>Digging deeper</span></a></h2>
<p>We already tinkered with <code>pmset</code> earlier, and that’s what we’ll use to
find more about the problem. We can use <code>pmset -g assertionslog</code> to show
a log of the sleep assertions! Like <code>pmset -g assertions</code>, it’ll show
the <em>current</em> assertions (whatever may be preventing sleep), but it will
keep running and print any further event related to sleep (or not
sleep)!</p>
<p>So I can run <code>pmset -g assertionslog</code>, then click the <strong>Sleep</strong> button
from the Apple menu, and see what’s in the logs when the screens light
back up right away.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pmset -g assertionslog</span>
Showing assertion changes(Press Ctrl-T to log all currently held assertions):

Action      Age       Type                          Name
======      ========  ====                          ====
Created     00:00:00  InternalPreventSleep          com.apple.powermanagement.darkwakelinger
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-login
<strong>Released    00:00:24  PreventUserIdleSystemSleep    Powerd - Prevent sleep while display is on</strong>
Created     00:00:00  NoIdleSleepAssertion          com.apple.timed.ntp
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-lastpowerassertionlinger
Released    00:00:00  InteractivePushServiceTask    com.apple.apsd-login
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-keepalive-push.apple.com
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-datareceived-push.apple.com
Released    00:00:00  InteractivePushServiceTask    com.apple.apsd-keepalive-push.apple.com
Released    00:00:00  NoIdleSleepAssertion          com.apple.timed.ntp
<strong>TurnedOn    00:00:00  UserIsActive                  com.apple.iohideventsystem.queue.tickle service:AppleMultitouchDevice product:Apple Internal Keyboard / Trackpad eventType:11</strong>
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-login
Created     00:00:00  PreventUserIdleSystemSleep    Powerd - Prevent sleep while display is on
Created     00:00:00  NoIdleSleepAssertion          com.apple.timed.ntp
</code></pre>
<p>I highlighted the parts that were relevant in our case. First, we can
see that when we explicitly sleep, <code>powerd</code> do release its “prevent
sleep while display is on” assertion, so it effectively doesn’t prevent
sleep anymore!</p>
<p><strong>However we see just after that <code>UserUsActive</code> was turned on, by
“tickling” the trackpad. What?</strong></p>
<h2 id="the-moment-it-clicked" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#the-moment-it-clicked"><span>The moment it clicked 🤯</span></a></h2>
<p>Then it occurred to me: when I click the <strong>Sleep</strong> button, my hand is,
well, on the trackpad, and it stays there for a fraction of a second
after I click. That’s a fraction of a second too long, because the mere
fact of me removing my finger from the trackpad triggers an
<code>UserIsActive</code> event which wakes the system right back up!</p>
<p>So the solution is simple: I need to remove my finger from the trackpad
<em>immediately</em> after I click the <strong>Sleep</strong> button!</p>
<p>I couldn’t believe I spent hours to figure this out. I played around
with it and it’s 100% that. The <strong>Sleep</strong> button actually works great,
regardless whether or not I have an external display connected, as long
as I don’t keep my finger on the damn trackpad for even a fraction of a
second after clicking it. The gentlest touch will wake everything up
right away, even if it happens half a second after clicking that button.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1649122170780491776">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS screenshot: capture selected window but for dialogs</title>
    <link href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html" />
    <id>https://www.codejam.info/2023/04/macos-screenshot-dialog.html</id>
    <updated>2023-04-13T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>On macOS, you can take a screenshot of a specific window, by pressing
<kbd>Command</kbd> + <kbd>Shfit</kbd> + <kbd>5</kbd> and selecting
<strong>Capture Selected Window</strong> as explained <a href="https://support.apple.com/en-ca/guide/mac-help/mh26782/mac">here</a>.</p>
<p>Alternatively, you can use <kbd>Command</kbd> + <kbd>Shfit</kbd> +
<kbd>4</kbd> to bring the free selection tool, and press
<kbd>Space</kbd> to go in window selection mode.</p>
<p>This is neat, because it captures the window with a nice shadow over a
transparent background, so when embedded, it looks like this:</p>
<figure class="center">
  <img alt="A blank terminal window" srcset="../../img/2023/04/dialog/window.png 2x">
</figure>
<p>This is great, but sometimes you want to select just a <em>dialog</em> inside a
window. For example, if I was to try to close this terminal:</p>
<figure class="center">
  <img alt="A dialog to confirm whether to close all tabs" srcset="../../img/2023/04/dialog/window-dialog.png 2x">
</figure>
<p>Here, the screenshot tool only lets me capture the whole window, but I
can’t have it capture <em>just</em> the dialog in the middle, and do so with
the nice shadow.</p>
<p>In this case it’s not too bad because the parent window was small, but
what if you’re capturing a small dialog inside a very large window?</p>
<p>You can always do a free selection or crop it yourself, but then you
still won’t have the nice shadow with transparency:</p>
<figure class="center">
  <img alt="Cropped dialog" srcset="../../img/2023/04/dialog/dialog-crop.png 2x">
</figure>
<p>Wouldn’t it be great if we could have the following instead?</p>
<figure class="center">
  <img alt="Nice dialog with shadow" srcset="../../img/2023/04/dialog/dialog-shadow.png 2x">
</figure>
<h2 id="introducing-windowify" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html#introducing-windowify"><span>Introducing Windowify</span></a></h2>
<p><a href="https://github.com/valeriangalliat/windowify">Windowify</a> is a small
tool that I made to solve this issue. I’ll start with how to use it for
that use case, then I’ll jump in the <a href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html#technical-details">technical details</a>.</p>
<p>Once installed, you can give it an image of your choice, and all it does
is display it in a native macOS window, exposing to you the various
styling options that macOS offers.</p>
<p>By default, if we gave it the earlier crop, it would display the following:</p>
<figure class="center">
  <img alt="Dialog with a title bar" srcset="../../img/2023/04/dialog/dialog-title.png 2x">
</figure>
<p>In our case, we need to use <code>windowify --minimal</code>, which is really a
shortcut for <code>windowify -closable -miniaturizable -resizable +fullSizeContentView +titlebarAppearsTransparent +titleHidden</code>. It will
show our image in a window with rounded corners but without any UI
element otherwise (like the title bar and close button).</p>
<p>We can now take a screenshot of this new window, this time using the
native window selection, so we get the shadow and transparency!</p>
<figure class="center">
  <img alt="Nice dialog with shadow" srcset="../../img/2023/04/dialog/dialog-shadow.png 2x">
</figure>
<h2 id="technical-details" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html#technical-details"><span>Technical details</span></a></h2>
<p>To whoever may be interested, I’ll give some technical details on how
this works.</p>
<p>Windowify is a Swift program, and uses it as a dynamic interpreter,
simply by using <code>#!/usr/bin/env swift</code> as a shebang, which I had no clue
was possible prior to this.</p>
<p>While most Swift windowed apps are expected to be created as part of an
Xcode project, it turns out the library <a href="https://stackoverflow.com/questions/30763229/display-window-on-osx-using-swift-without-xcode-or-nib">is flexible enough</a>
to allow easily creating windows without a complex app boilerplate and
an explicit compilation process!</p>
<p>This is made particularly easy using
<a href="https://developer.apple.com/documentation/appkit/nsapplication/1428360-shared"><code>NSApplication.shared</code></a>
which automatically creates the application instance if it doesn’t
exist.</p>
<p>The script looks at <code>CommandLine.arguments</code> to parse the CLI arguments,
and uses a <code>NSImage</code> and <code>NSImageView</code> to display the image in a
<code>NSWindow</code>.</p>
<p>The main logic is to translate the CLI arguments into the matching
<code>styleMask</code> and other properties of <code>NSWindow</code>, to make the appearance
customizable by the user.</p>
<p>In the first place I had it working without even using a custom
<code>NSApplicationDelegate</code>, but the main application loop was then blocking
the thread and made the menu unresponsive (I use a menu to handle
<kbD>Command</kbd> + <kbd>W</kbd> to close the window). Moving the logic
inside an application delegate resolved that.</p>
<p>Take a look at <a href="https://github.com/valeriangalliat/windowify/blob/main/windowify">the code</a>
if you want to know in more details how this all works!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Changing default mail client on macOS without signing in to the Mail app</title>
    <link href="https://www.codejam.info/2023/04/macos-default-mail-client.html" />
    <id>https://www.codejam.info/2023/04/macos-default-mail-client.html</id>
    <updated>2023-04-13T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>The things we have to do sometimes… 🙈</p>
<p>Maybe you use another mail client than the Mail app on macOS, and you
want to make it the default, so that when you click <code>mailto:</code> links, it
actually opens the app you want.</p>
<p>Apple documents how to do that in <a href="https://support.apple.com/en-ca/HT201607">change the default email app</a>:</p>
<blockquote>
<ol>
<li>Open the Mail app.</li>
<li>From the menu bar, choose <strong>Mail &gt; Settings</strong>.</li>
<li>Click <strong>General</strong>.</li>
<li>Choose an email app from the <strong>Default email reader</strong> menu.</li>
</ol>
</blockquote>
<p>That’s great, except it doesn’t work. If you never used the Mail app,
which you probably didn’t if you use another mail client, you can’t
access the settings! You’re greeted with this screen:</p>
<figure class="center">
  <img alt="A dialog prompting you to set up a mail account" srcset="../../img/2023/04/mail/01-blocking-dialog.png 2x">
</figure>
<p>And the settings are greyed out!</p>
<figure class="center">
  <img alt="Greyed out settings menu" srcset="../../img/2023/04/mail/02-disabled-settings.png 2x">
</figure>
<p>What to do then? There’s <a href="https://apple.stackexchange.com/q/261881/452681">a number of solutions</a>:</p>
<ul>
<li>Connect your mail account to the Mail app to go through this dialog
and finally access the settings.</li>
<li>Use a number of different third-party apps that can change default
associations.</li>
<li>Write a script to mess with the <code>LaunchServices</code> API.</li>
</ul>
<p>But <a href="https://apple.stackexchange.com/a/422772/452681">my</a>
<a href="https://osxdaily.com/2014/05/06/change-default-mail-app-mac/#comment-745047">favorite</a>,
that doesn’t require any third-party app, consists in selecting <strong>Other
Mail Account</strong>, putting garbage in the fields, and let it fail a few
times until it works!</p>
<figure class="center">
  <img alt="Mail account settings" srcset="../../img/2023/04/mail/03-add-account.png 2x">
</figure>
<p>This will obviously fail, and prompt you for more information:</p>
<figure class="center">
  <img alt="Advanced account settings" srcset="../../img/2023/04/mail/04-add-account-error.png 2x">
</figure>
<p>Just keep hitting the <strong>Sign In</strong> button until it gives up and lets you
through! You now have access to the settings menu.</p>
<figure class="center">
  <img alt="Active settings menu" srcset="../../img/2023/04/mail/05-settings-menu.png 2x">
</figure>
<p>From there, you can set your <strong>Default email reader</strong> to your favorite
app.</p>
<figure class="center">
  <img alt="Default email reader settings" srcset="../../img/2023/04/mail/06-settings.png 2x">
</figure>
<h2 id="using-gmail-inside-firefox-as-default-email-reader-on-macos" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-default-mail-client.html#using-gmail-inside-firefox-as-default-email-reader-on-macos"><span>Using Gmail inside Firefox as default email reader on macOS</span></a></h2>
<p>In my case, I selected the Firefox app in the previous step, because I
want to use Gmail inside Firefox as my default email reader.</p>
<p>With that, the next time you open a <code>mailto:</code> link from anywhere on your
system, it’s going to open Firefox, and Firefox will then need to know
you want to use Gmail for this. Normally it’ll prompt you the first
time, but you can also configure it in the <strong>Applications</strong> settings:</p>
<figure class="center">
  <img alt="Firefox settings" srcset="../../img/2023/04/mail/07-firefox-settings.png 2x">
</figure>
<p>I hope this helps!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Configuring a GCP Pub/Sub dead letter queue with Pulumi</title>
    <link href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html" />
    <id>https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html</id>
    <updated>2023-04-09T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I’ve been playing a bit with <a href="https://www.pulumi.com/">Pulumi</a> lately,
and it quickly became one of my favorite infrastructure as code tools.
It feels like the power of <a href="https://aws.amazon.com/cdk/">AWS CDK</a> which
lets you code your infrastructure in a full-fledged scripting language,
but without being limited to AWS!</p>
<p>I like coding my infrastructure in TypeScript because the typing,
autocomplete and IDE integrations makes it particularly nice to discover
the SDK on the fly as you’re creating your infrastructure, so that’s
what I’ll use in the examples.</p>
<p>Today, we’re gonna see how to programmatically create a Pub/Sub topic
and subscription on GCP, with a matching dead letter queue. Finally,
we’ll add a monitoring alert policy to warn us when our
<abbr title="Dead letter queue">DLQ</abbr> is not empty.</p>
<h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#getting-started"><span>Getting started</span></a></h2>
<p>If you already have Pulumi installed, and an existing project, you can
skip this. In order to install Pulumi on macOS, run:</p>
<pre><code class="hljs language-sh">brew install pulumi
</code></pre>
<p>Create an account on Pulumi if you don’t have one already, then create a
new directory for your project, and inside it, run:</p>
<pre><code class="hljs language-sh">pulumi new gcp-typescript
</code></pre>
<p>Follow the instructions to initialize your project and connect it to
your GCP account.</p>
<p>Finally, you can remove the default code from <code>index.ts</code> that creates a
test bucket.</p>
<h2 id="creating-a-topic-and-a-subscription" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#creating-a-topic-and-a-subscription"><span>Creating a topic and a subscription</span></a></h2>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> gcp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@pulumi/gcp&#x27;</span>

<span class="hljs-keyword">const</span> topic = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Topic</span>(<span class="hljs-string">&#x27;hello-world-topic&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span> })

<span class="hljs-keyword">const</span> subscription = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-subscription&#x27;</span>, {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span>,
  <span class="hljs-attr">topic</span>: topic.<span class="hljs-property">id</span>
})
</code></pre>
<p>This will create a topic and a basic pull subscription, that you can…
subscribe to using the Google Cloud SDK in your favorite language.</p>
<h2 id="adding-the-dead-letter-queue" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#adding-the-dead-letter-queue"><span>Adding the dead letter queue</span></a></h2>
<p>On GCP, a dead letter queue consists in configuring an existing
subscription to send messages that failed a number of times to another
topic. Having a subscription on that dead letter topic, even if it has
no consumer, lets us store those messages for a period of time, so we
can eventually do something with them.</p>
<p>Here’s our DLQ:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> dlqTopic = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Topic</span>(<span class="hljs-string">&#x27;hello-world-dl-topic&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;helo-world-dl&#x27;</span> })

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-dl-subscription&#x27;</span>, {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world-dl&#x27;</span>,
  <span class="hljs-attr">topic</span>: dlqTopic.<span class="hljs-property">id</span>
})
</code></pre>
<p>Then we can add the dead letter policy to our existing subscription:</p>
<pre><code class="hljs language-diff:ts"> <span class="hljs-keyword">const</span> subscription = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-subscription&#x27;</span>, {
   <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span>,
   <span class="hljs-attr">topic</span>: topic.<span class="hljs-property">name</span>,
<span class="hljs-addition">+  <span class="hljs-attr">deadLetterPolicy</span>: {</span>
<span class="hljs-addition">+    <span class="hljs-attr">deadLetterTopic</span>: dlqTopic.<span class="hljs-property">id</span>,</span>
<span class="hljs-addition">+    <span class="hljs-attr">maxDeliveryAttempts</span>: <span class="hljs-number">5</span></span>
<span class="hljs-addition">+  }</span>
 })
</code></pre>
<p><code>maxDepliveryAttempts</code> is optional and defaults to 5. When a messaged
failed to be delivered that many times, it’ll be sent to the DLQ.</p>
<p>You may also like to tweak your subscription’s retry policy at that
point. By default, it retries a failed message immediately, but you can
configure an exponential backoff instead:</p>
<pre><code class="hljs language-diff:ts"> <span class="hljs-keyword">const</span> subscription = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-subscription&#x27;</span>, {
   <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span>,
   <span class="hljs-attr">topic</span>: topic.<span class="hljs-property">id</span>,
<span class="hljs-addition">+  <span class="hljs-attr">retryPolicy</span>: {</span>
<span class="hljs-addition">+    <span class="hljs-attr">minimumBackoff</span>: <span class="hljs-string">&#x27;10s&#x27;</span>,</span>
<span class="hljs-addition">+    <span class="hljs-attr">maximumBackoff</span>: <span class="hljs-string">&#x27;600s&#x27;</span></span>
<span class="hljs-addition">+  },</span>
   <span class="hljs-attr">deadLetterPolicy</span>: {
     <span class="hljs-attr">deadLetterTopic</span>: dlqTopic.<span class="hljs-property">id</span>,
     <span class="hljs-attr">maxDeliveryAttempts</span>: <span class="hljs-number">5</span>
   }
 })
</code></pre>
<p>While you don’t have precise control over the exponential backoff
behavior, you can tweak the minimum and maximum duration that Pub/Sub
will wait before retrying a message. Anything in between is out of your
control.</p>
<h2 id="handling-permissions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#handling-permissions"><span>Handling permissions</span></a></h2>
<p>But we’re not done yet! If you go to your subscription page, you’ll
notice the following issues warnings:</p>
<figure class="center">
  <img alt="Permission issues with dead letter queue" srcset="../../img/2023/04/pubsub-dlq-warning.png 2x">
</figure>
<blockquote>
<p>❗️ <strong>Assign Publisher role</strong></p>
<p>The Cloud Pub/Sub service account for this project needs the publisher
role to publish dead-lettered messages to the dead letter topic.</p>
<p>❗️ <strong>Assign Subscriber role</strong></p>
<p>The Cloud Pub/Sub service account for this project needs the subscriber
role to forward messages from this subscription to the dead letter topic.</p>
</blockquote>
<p>You can identify the Pub/Sub service account in your IAM principals
list, by ticking “include Google-provided role grants”. It’s always
under the form <code>service-{projectId}@gcp-sa-pubsub.iam.gserviceaccount.com</code>.</p>
<p>We can fix that in our Pulumi code by adding the following:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> pulumi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@pulumi/pulumi&#x27;</span>

<span class="hljs-keyword">const</span> project = gcp.<span class="hljs-property">organizations</span>.<span class="hljs-title function_">getProjectOutput</span>()

<span class="hljs-keyword">const</span> pubSubServiceAccountPublisherPolicy =
  gcp.<span class="hljs-property">organizations</span>.<span class="hljs-title function_">getIAMPolicyOutput</span>({
    <span class="hljs-attr">bindings</span>: [
      {
        <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;roles/pubsub.publisher&#x27;</span>,
        <span class="hljs-attr">members</span>: [
          pulumi.<span class="hljs-property">interpolate</span><span class="hljs-string">`serviceAccount:service-<span class="hljs-subst">${project.<span class="hljs-built_in">number</span>}</span>@gcp-sa-pubsub.iam.gserviceaccount.com`</span>
        ]
      }
    ]
  })

<span class="hljs-keyword">const</span> pubSubServiceAccountSubscriberPolicy =
  gcp.<span class="hljs-property">organizations</span>.<span class="hljs-title function_">getIAMPolicyOutput</span>({
    <span class="hljs-attr">bindings</span>: [
      {
        <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;roles/pubsub.subscriber&#x27;</span>,
        <span class="hljs-attr">members</span>: [
          pulumi.<span class="hljs-property">interpolate</span><span class="hljs-string">`serviceAccount:service-<span class="hljs-subst">${project.<span class="hljs-built_in">number</span>}</span>@gcp-sa-pubsub.iam.gserviceaccount.com`</span>
        ]
      }
    ]
  })

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">TopicIAMPolicy</span>(<span class="hljs-string">&#x27;hello-world-dl-topic-policy&#x27;</span>, {
  <span class="hljs-attr">topic</span>: dlqTopic.<span class="hljs-property">name</span>,
  <span class="hljs-attr">policyData</span>: pubSubServiceAccountPublisherPolicy.<span class="hljs-property">policyData</span>
})

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">SubscriptionIAMPolicy</span>(<span class="hljs-string">&#x27;hello-world-subscription-policy&#x27;</span>, {
  <span class="hljs-attr">subscription</span>: subscription.<span class="hljs-property">name</span>,
  <span class="hljs-attr">policyData</span>: pubSubServiceAccountSubscriberPolicy.<span class="hljs-property">policyData</span>
})
</code></pre>
<p>Now our Pub/Sub DLQ page should be all green!</p>
<h2 id="getting-alerted-for-new-messages-in-the-dlq" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#getting-alerted-for-new-messages-in-the-dlq"><span>Getting alerted for new messages in the DLQ</span></a></h2>
<p>The first thing you usually do when you create a DLQ is add a mechanism
to <em>know</em> when messages hit the DLQ, so that you can act on them.</p>
<p>When it comes to alert policies, I typically create them in the GCP
console, then I use the “download as JSON” button in the policy details.
I can use this verbatim inside Pulumi’s <code>gcp.monitoring.AlertPolicy</code>
constructor!</p>
<p>Here’s what I’ve got when I made an alert policy to get notified when
any of my subscriptions whose name ends with <code>-dl</code> has undelivered
messages.</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> notificationChannels = [
  <span class="hljs-string">&#x27;projects/{projectId}/notificationChannels/{channelId}&#x27;</span>
]

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">monitoring</span>.<span class="hljs-title class_">AlertPolicy</span>(<span class="hljs-string">&#x27;alert-policy-pubsub-dl&#x27;</span>, {
  <span class="hljs-attr">alertStrategy</span>: {
    <span class="hljs-attr">autoClose</span>: <span class="hljs-string">&#x27;604800s&#x27;</span>
  },
  <span class="hljs-attr">combiner</span>: <span class="hljs-string">&#x27;OR&#x27;</span>,
  <span class="hljs-attr">conditions</span>: [
    {
      <span class="hljs-attr">conditionThreshold</span>: {
        <span class="hljs-attr">aggregations</span>: [
          {
            <span class="hljs-attr">alignmentPeriod</span>: <span class="hljs-string">&#x27;300s&#x27;</span>,
            <span class="hljs-attr">perSeriesAligner</span>: <span class="hljs-string">&#x27;ALIGN_MEAN&#x27;</span>
          }
        ],
        <span class="hljs-attr">comparison</span>: <span class="hljs-string">&#x27;COMPARISON_GT&#x27;</span>,
        <span class="hljs-attr">duration</span>: <span class="hljs-string">&#x27;0s&#x27;</span>,
        <span class="hljs-attr">filter</span>: <span class="hljs-string">`
              resource.type = &quot;pubsub_subscription&quot;
          AND metric.type = &quot;pubsub.googleapis.com/subscription/num_undelivered_messages&quot;
          AND resource.labels.subscription_id = ends_with(&quot;-dl&quot;)
        `</span>,
        <span class="hljs-attr">thresholdValue</span>: <span class="hljs-number">0</span>,
        <span class="hljs-attr">trigger</span>: {
          <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>
        }
      },
      <span class="hljs-attr">displayName</span>: <span class="hljs-string">&#x27;Cloud Pub/Sub Subscription - Unacked messages&#x27;</span>
    }
  ],
  notificationChannels,
  <span class="hljs-attr">displayName</span>: <span class="hljs-string">&#x27;Pub/Sub messages in dead letter&#x27;</span>
})
</code></pre>
<p>Just put the ID of your notification channel in the array on top. To
find it, you can use the following command that will list all your
notification channels including their full ID:</p>
<pre><code class="hljs language-sh">gcloud alpha monitoring channels list
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Firebase functions in a monorepo? A challenging pile of hacks</title>
    <link href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html" />
    <id>https://www.codejam.info/2023/04/firebase-functions-monorepo.html</id>
    <updated>2023-04-07T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently went through the trouble of migrating a Firebase app to a
monorepo, in particular the Cloud Functions part. While doing so, I went
through a total of 3 different “methods”, all of which were full of
surprises that I discovered along the way.</p>
<p>In this blog post I’ll go through those 3 options, and highlight their
tradeoffs, in order to help you pick the one that’s the most appropriate
to your workflow. It’s a long post, so feel free to jump to the
<a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#comparison">comparison</a> directly, and then cherry pick what to read
from there. 😄</p>
<p>Here, I assume that your monorepo uses something like npm or Yarn
workspaces. It may be applicable to pnpm but I didn’t try it.</p>
<h2 id="the-common-ground" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-common-ground"><span>The common ground</span></a></h2>
<p>Before we get started with the 3 options, they all share a common
ground. And for the sake of this blog post, I’ll start with an
hypothetical base monorepo structure which I’ll lay down below.</p>
<h3 id="the-base-monorepo" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-base-monorepo"><span>The base monorepo</span></a></h3>
<p>This is a basic monorepo with two websites and a shared package, e.g.
for helper functions, types or any other common code.</p>
<pre><code class="hljs">monorepo
├── apps
│   ├── website1
│   │   └── package.json
│   └── website2
│       └── package.json
├── packages
│   └── shared
│       └── package.json
├── package-lock.json
└── package.json
</code></pre>
<p>The top-level <code>package.json</code> contains:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;workspaces&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;apps/*&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;packages/*&quot;</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 id="the-firebase-functions-in-its-own-repo" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-firebase-functions-in-its-own-repo"><span>The Firebase functions in its own repo</span></a></h3>
<p>In another repo, you have a Firebase app with functions:</p>
<pre><code class="hljs">firebase
├── functions
│   ├── src
│   │   └── index.js
│   ├── package-lock.json
│   └── package.json
└── firebase.json
</code></pre>
<p>Where your <code>firebase.json</code> contains:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;functions&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 id="merging-them-together" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#merging-them-together"><span>Merging them together</span></a></h3>
<p>Since in a Firebase repo, <code>functions</code> is already its own subdirectory
with its own <code>package.json</code>, it feels pretty natural to just “merge”
both repos together, maybe  renaming <code>functions</code> into <code>apps/functions</code>
to match our initial structure better, but no more than that:</p>
<pre><code class="hljs language-diff"> monorepo
 ├── apps
 │   ├── website1
 │   │   └── package.json
 │   ├── website2
 │   │   └── package.json
<span class="hljs-addition">+│   └── functions</span>
<span class="hljs-addition">+│       ├── src</span>
<span class="hljs-addition">+│       │   └── index.js</span>
<span class="hljs-addition">+│       └── package.json</span>
 ├── packages
 │   └── shared
 │       └── package.json
<span class="hljs-addition">+├── firebase.json</span>
 ├── package-lock.json
 └── package.json
</code></pre>
<p>In <code>firebase.json</code>, we just update the <code>source</code> to be <code>apps/functions</code>,
and we remove the <code>functions/package-lock.json</code> to let npm merge the
functions dependencies in the top-level <code>package-lock.json</code>. This way,
we only need to run <code>npm install</code> at the root of the monorepo, instead
of having to go inside <code>apps/functions</code> and run <code>npm install</code> there
again. After all, that’s part of the point of a monorepo.</p>
<p>Great, so we’re done? That was easy.</p>
<h2 id="why-this-works-but-not-really" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#why-this-works-but-not-really"><span>Why this works, but not really</span></a></h2>
<p>Not so fast. This will seemingly work, but it will do so kind of by
chance, as a somewhat lucky accident.</p>
<h3 id="how-firebase-deploy-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#how-firebase-deploy-works"><span>How <code>firebase deploy</code> works</span></a></h3>
<p>See, when <code>firebase deploy</code> deploys the functions, it will make a ZIP
archive of the functions source directory (as defined in <code>firebase.json</code>).</p>
<p>Then, it will deploy the function from that ZIP. The Cloud Functions
deploy process will send that ZIP to Cloud Build, which will:</p>
<ol>
<li>Run some variant of <code>npm install</code> or <code>yarn install</code>.</li>
<li>Run the <code>gcp-build</code> script if defined in <code>package.json</code>.</li>
<li>Prune development dependencies from <code>node_modules</code> if needed.</li>
<li>Use the output of that process as the source for the function
runtime.</li>
</ol>
<p>This is defined in GCP buildpacks, e.g. <a href="https://github.com/GoogleCloudPlatform/buildpacks/blob/99553d0a2051834324d621f20ad5355453f675a1/cmd/nodejs/npm/main.go">for npm</a>
and <a href="https://github.com/GoogleCloudPlatform/buildpacks/blob/99553d0a2051834324d621f20ad5355453f675a1/cmd/nodejs/yarn/main.go">for Yarn</a>.</p>
<p>We can already see a bit of a problem. Because we’re sending only the
<code>apps/functions</code> context to Cloud Build, it doesn’t have access to the
top-level <code>package-lock.json</code>, which means the install output will be
nondeterministic, and each deploy is subject to using different versions
of different packages and potentially break your code without you
knowing.</p>
<p><strong>This can introduce a whole range of sneaky errors that will be a pain to
debug!</strong></p>
<h3 id="using-shared-packages" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#using-shared-packages"><span>Using shared packages</span></a></h3>
<p>Moreover, we now understand that this will not allow using <em>shared
packages</em> inside the monorepo!</p>
<p>If we wanted to use <code>packages/shared</code> inside <code>apps/functions</code>, by adding
<code>&quot;shared&quot;: &quot;*&quot;</code> in our <code>dependencies</code>, letting npm or Yarn resolve it to
the local workspace version, it wouldn’t actually work.</p>
<p>Or actually, it will work in development, because we have the whole
monorepo there. And in our particular example, even the Firebase
deployment will surprisingly succeed, <strong>but only as an accident because
<a href="https://www.npmjs.com/package/shared"><code>shared</code></a> is a valid npm
package</strong>! It will break at runtime when you try to use a package that
doesn’t contain the code you expect at all.</p>
<p>Other names for common monorepo shared packages that are also valid npm
packages would be <a href="https://www.npmjs.com/package/eslint-config"><code>eslint-config</code></a>
and <a href="https://www.npmjs.com/package/tsconfig"><code>tsconfig</code></a>, so they would
also result in this kind of collision.</p>
<div class="note">
<p><strong>Note:</strong> if you use Yarn, you can prevent those collisions by prefixing
your version specifier for your shared dependencies with <code>workspace:</code>,
e.g. <code>&quot;shared&quot;: &quot;workspace:*&quot;</code> to use any version. This will ensure the
dependency is <em>always</em> installed from the local workspace and not from
the registry.</p>
<p>npm doesn’t support that, but you can still add a layer of safety by
making sure all your shared package names don’t conflict with anything
on npm, for example by prefixing them with <code>@myorg</code> such as
<code>@myorg/shared</code>, <code>@myorg/eslint-config</code>, <code>@myorg/tsconfig</code> and so on.</p>
<p>Or as an abundance of caution if you use Yarn, maybe do both. 😬</p>
</div>
<h2 id="the-good-enough-for-me-approach" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach"><span>The “good enough for me” approach</span></a></h2>
<p>We’re now in a situation where 1. the top-level <code>package-lock.json</code> is
not respected when deploying Cloud Functions, and 2. we cannot use any
workspace shared package in our functions.</p>
<p>You may actually be fine with that. Maybe you don’t care that your
production functions have an unpredictable dependency tree every time
you deploy, and maybe you don’t want to use shared packages in your
functions anyway!</p>
<div class="note">
<p><strong>Note:</strong> you can even use shared packages in your <code>devDependencies</code>
with that setup, as long as you don’t have a <code>gcp-build</code> script that
depends on them!</p>
<p>At least if you use npm. Because there’s currently a bug with the Yarn
Cloud Build buildpack that makes it install <code>devDependencies</code> before
pruning them right after, even when no build script is present. 😅</p>
<p>This would fail your build if the shared package from your
<code>devDependencies</code> don’t exist on npm. It’s one of those cases where
having a shared package name that collisions with a npm package would
help, although I wouldn’t really recommend this as a fix.</p>
</div>
<p>If that works for you, congratulations, your job here is done.
Otherwise, let’s dig in the two other options. 👇</p>
<h2 id="the-full-context-approach" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-full-context-approach"><span>The full context approach</span></a></h2>
<p>There’s a <a href="https://github.com/firebase/firebase-tools/issues/653">long thread</a>
in the <code>firebase-tools</code> repo about monorepo support. The majority of the
solutions described there are some variation of a deploy script that
packs your shared dependencies into <code>.tgz</code> files, and patch the
<code>functions/package.json</code> file to reference them with <code>file:</code> for the
time of the deployment. We’ll explore this in details in the last solution: <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach">the hybrid approach</a>.</p>
<p>However, there’s <a href="https://github.com/firebase/firebase-tools/issues/653#issuecomment-1371306331">a particular comment</a>
in that thread that describes something very different, and caught my
attention despite not being given very much interest there.</p>
<figure class="center">
  <img alt="A comment suggesting to put the monorepo root as the functions source" srcset="../../img/2023/04/firebase-monorepo-comment.png 2x">
</figure>
<p>This comment suggests that we put the monorepo root as the functions
source in <code>firebase.json</code> (ignoring unnecessary files as needed), to
ensure we send the whole relevant monorepo context to Cloud Build!</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;ignore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">&quot;firebase.json&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">&quot;**/.*&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">&quot;**/node_modules/**&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">&quot;**/packages/@(web|mobile)/**&quot;</span>
    <span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Then, adding the functions entrypoint in the top-level <code>package.json</code>,
because Cloud Functions still don’t know about monorepos, and expects the
functions <code>package.json</code> to be at the root.</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./packages/functions/dist/index.js&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> if you use <code>.env</code> files in your functions, e.g. <code>.env</code>,
<code>.env.production</code>, <code>.env.staging</code>, and any other project aliases you may
have, which is becoming more and more common <a href="https://firebase.google.com/docs/functions/config-env#environment_configuration">now Firebase deprecated
<code>functions.config()</code></a>,
you also need to put them at the root of your monorepo with this
solution, otherwise they will be ignored during deploy!</p>
</div>
<p>To me, this sounds <em>much more elegant</em> than the hacks with deploy
scripts and <code>file:</code> references! But after using this approach in
production for a few weeks, I decided to rollback, because there was too
many downsides for my use case.</p>
<h3 id="the-ignore-list-is-quirky" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-ignore-list-is-quirky"><span>The ignore list is quirky</span></a></h3>
<p>The ignore list is not exactly intuitive to work with. And if you forget
to ignore anything somewhat large, <a href="https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html">your functions will fail to deploy</a>.
It struggled so much to figure out the precise rules of this ignore list
that I had to go in the <code>firebase-tools</code> source code in order to
understand it, and I wrote <a href="https://www.codejam.info/2023/04/firebase-functions-ignore.html">another blog post</a>
to explain how it really works, and how to test your ignore patterns!</p>
<p>The main caveat is that you <a href="https://github.com/firebase/firebase-tools/issues/2677">can’t use negative ignore rules</a>
like you could in <code>.gitignore</code> and most ignore systems, e.g.:</p>
<pre><code class="hljs language-gitignore">/apps/website1/*
!/apps/website1/package.json
/apps/website2/*
!/apps/website2/package.json
</code></pre>
<p>In a <code>.gitignore</code>, this would ignore everything in <code>apps/website1</code> and
<code>apps/website2</code> except for their <code>package.json</code>. If you use “a modern
version of Yarn” (not 1.x), this is something you would need to do, because
<code>yarn install --immutable</code> will fail if the workspaces identified in
your <code>yarn.lock</code> don’t actually point to directories with a
<code>package.json</code> in them!</p>
<p>If you use npm or Yarn 1.x though, <code>npm ci</code> and <code>yarn install --frozen-lockfile</code> won’t care, so you’re good to go.</p>
<div class="note">
<p><strong>Note:</strong> just keep in mind that Yarn 1.x doesn’t let you install
dependencies for a single workspace, you systematically have to install
all dependencies for the whole monorepo, which can be a pretty bad hit
for any pipeline that works only on a small subset of the monorepo.</p>
<p>While you can <a href="https://classic.yarnpkg.com/en/docs/cli/install#toc-yarn-install-focus"><code>yarn install --focus</code></a>
with 1.x, which kind of sounds like this, it doesn’t work with
dependencies that are local to the monorepo, they <em>need</em> to be fetched
from a registry.</p>
</div>
<p>But on new Yarn versions, this is a pretty big deal because you can’t
ignore a whole workspace from your functions deploy, and because there’s
no negative patterns to ignore everything but the <code>package.json</code> in a
given workspace, you’re stuck with having to <em>explicitly</em> ignore
everything but the <code>package.json</code> in each of the workspaces you want to
exclude. And it’s a list you’ll now have to maintain forever every time
you add new things to your monorepo.</p>
<p>This is even more of a problem because if you have any kind of secret in
your repo, and you fail to add them to your <code>functions.ignore</code> list,
they’ll be packaged in your functions source and you won’t notice. Your
functions source is private to your Google Cloud account by default, but
this is silently waiting to make a future security issue much worse.</p>
<h3 id="all-the-other-workspace-dependencies-are-installed" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#all-the-other-workspace-dependencies-are-installed"><span>All the other workspace dependencies are installed</span></a></h3>
<p>This is the one that made me give up this solution. I could deal with
the ignore list issues, but this was another level.</p>
<p>As we saw earlier, Cloud Functions use Cloud Build to install your
dependencies. The whole thing is not designed for monorepos, which is
why we had to put our <code>main</code> entrypoint in the root <code>package.json</code>. A
more concerning effect of that though, is that Cloud Build will run <code>npm install</code>
at the top level of the monorepo.</p>
<p>This means installing all the dependencies of all your apps and
packages. This is big problem if you have a lot of unrelated
dependencies across your different workspaces.</p>
<p>Firebase doesn’t let you configure the install command either, to run
e.g. <code>npm install --workspace functions</code> or <code>yarn workspace function workspaces focus</code>
(I know, awkward command), which would install only the functions
dependencies. <em>This can speed up your install times drastically</em> in
remote build environments, but here it’s not an option.</p>
<p>For us, the difference was 10 minutes to deploy Firebase functions vs. 2
minutes, if we could install the dependencies of the functions only.</p>
<p>This was to much, which is why I ended up with the last approach.</p>
<div class="note">
<p><strong>Note:</strong> the build time issue was heavily magnified in my case by the
fact Cloud Build <a href="https://github.com/GoogleCloudPlatform/buildpacks/issues/203">doesn’t do any caching for Yarn 2.x and greater</a>
if it’s not used in <a href="https://yarnpkg.com/features/pnp">PnP mode</a>.
Proper caching may help a bit with npm and Yarn 1.x, even though it’s
still not ideal.</p>
<p>There may be a way though, for example by replacing the top-level
<code>package.json</code> and <code>package-lock.json</code> by dummy ones during <code>firebase deploy</code> so that from Cloud Build’s perspective it looks like you have no
dependencies, and then hijacking the <code>gcp-build</code> script to <em>actually</em>
install your dependencies yourself using the appropriate command that
doesn’t install the whole world at the same time. 🥹</p>
<p>I haven’t tested this but it may work. However, if you’re gonna get that
hacky, you might as well embrace the third solution.</p>
</div>
<h2 id="the-hybrid-approach" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach"><span>The hybrid approach</span></a></h2>
<p>This is an improved version of <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach">the first “good enough for me” solution</a>,
where in our development environment, we work with a full-fledged
monorepo, with shared packages and everything, but when we deploy the
Firebase functions, we narrow it down to its own independent-repo-like
entity, but in a way that will actually work with our
<code>package-lock.json</code> and shared packages!</p>
<p>This will take a bit of code though, in the form of a <code>predeploy</code> and
<code>postdeploy</code> script for our functions. The <code>predeploy</code> script needs to:</p>
<ol>
<li>Do anything you were already doing in a <code>predeploy</code> script like
linting and building your app.</li>
<li>Copy all the shared packages you depend on in your functions
directory, either through <code>.tgz</code> files from using <code>npm pack</code> or <code>yarn pack</code>, or the directories themselves (see below for the difference).</li>
<li>Patch your functions <code>package.json</code> to reference the internal
dependencies using <code>file:</code> references to the <code>.tgz</code> files or
directories you just created.</li>
<li><strong>Do so recursively for your whole graph of internal dependencies.</strong>
Hopefully it’s small enough to be manageable, but I can see this
turning into a living hell in complex monorepos.</li>
<li>Copy the top-level lock file in the functions directory. If you use
Yarn 2.x and greater, you’ll need to do a bit more than that, see
below.</li>
</ol>
<p>As for the <code>postdeploy</code> script, it needs to undo everything that
<code>predeploy</code> did.</p>
<p>Of course, your repo will be in an inconsistent state for the duration
of <code>firebase deploy</code>, so maybe run that from another copy of your
monorepo that you don’t work from, or make sure to not mess with your
dependencies during the deploy, or things will fall apart!</p>
<p>You’ll find a number of examples of those <code>predeploy</code> and <code>postdeploy</code>
scripts in the issue thread I linked earlier. Here’s
<a href="https://github.com/firebase/firebase-tools/issues/653#issuecomment-1464911379">one of the most recent ones</a>
that you can take inspiration from.</p>
<p>For the part where you replace the versions of your internal packages in
your <code>package.json</code>, you can use <a href="https://docs.npmjs.com/cli/v7/commands/npm-pkg"><code>npm pkg set</code></a></p>
<pre><code class="hljs language-sh">npm pkg <span class="hljs-built_in">set</span> <span class="hljs-string">&#x27;dependencies.@myorg/shared=file:shared.tgz&#x27;</span> <span class="hljs-string">&#x27;dependencies.@myorg/tsconfig=file:tsconfig.tgz&#x27;</span>
</code></pre>
<p>Just make a backup of your original <code>package.json</code> so you can restore it
in the <code>postdeploy</code> script. Feel free to use it with Yarn as well since
this really just edits your <code>package.json</code> from the command line.</p>
<p>Now, about the downsides.</p>
<h3 id="you-have-to-recursively-package-your-internal-dependencies" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#you-have-to-recursively-package-your-internal-dependencies"><span>You have to recursively package your internal dependencies</span></a></h3>
<p>And to do so, you have to patch your <code>package.json</code> files all the way
down the internal dependency graph for your functions. Nasty.</p>
<p>As for using <code>.tgz</code> files from <code>npm pack</code> or <code>yarn pack</code> vs. copying the
directories directly, it comes down to personal preference with npm, but
if you use Yarn and you have nested internal dependencies, you’re much
better off going with the directory approach.</p>
<p>That’s because npm can resolve <code>file:</code> references to <code>.tgz</code> files
relative to <em>where <code>npm install</code> is ran from</em>, but Yarn only looks for
the <code>.tgz</code> files relative to the <code>package.json</code> referencing it.</p>
<p>You can see how this becomes a problem with more than one level of
dependency, because you would have to embed the archive of the same
packages in all the packages that reference it, and do so recursively,
which can get exponentially heavy and inefficient! Not to mention that
you’d end up with a lot of duplicated dependencies, which can cause a
whole lot of other problems on its own.</p>
<p>It will work with the directory approach though:</p>
<ol>
<li>You make your functions depend on <code>&quot;@myorg/shared&quot;: &quot;file:shared&quot;</code>.</li>
<li>You make <code>shared/package.json</code> depends on <code>&quot;@myorg/tsconfig&quot;: &quot;file:../tsconfig&quot;</code>.</li>
<li>You copy both <code>shared</code> and <code>tsconfig</code> under your functions directory
and you’re god to go.</li>
</ol>
<h3 id="you-need-to-mirror-some-top-level-logic" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#you-need-to-mirror-some-top-level-logic"><span>You need to mirror some top-level logic</span></a></h3>
<p>In the previous solution, we saw how we had to copy some functions logic
at the top level (<code>main</code> inside <code>package.json</code> as well as <code>.env</code> files).
Here, we have the opposite problem.</p>
<p>Because we’re shipping only the functions directory to Cloud Functions,
it’s missing your <code>package-lock.json</code> or <code>yarn.lock</code> from the top
level (and maybe a number of other files you may need without knowing it).</p>
<p>For example, if you use “a modern version of Yarn” aka not Yarn 1.x, it
also needs its <code>.yarnrc.yml</code> as well as <code>.yarn/releases</code> and
<code>.yarn/plugins</code> directories in order to function!</p>
<p>If you forget to copy any of those inside your functions directory,
Cloud Build will either use the wrong package manager or the wrong
version of your package manager, which may result in the best case in a
broken deploy, or worst, resolving and linking dependencies differently
than in your local environment, which can lead to a number of sneaky
issues.</p>
<p>This is not something that’s accounted for in any of the solutions from
<a href="https://github.com/firebase/firebase-tools/issues/653">the thread</a>
I linked earlier. <strong>They all ship a lonely <code>functions/package.json</code> that
will end up installing unpredictable dependency versions in their
production environment.</strong></p>
<p>Luckily, this is easy to fix! Just copy your top-level
<code>package-lock.json</code> or <code>yarn.lock</code> in the functions directory as part of
your <code>predeploy</code> script.</p>
<p>npm and Yarn 1.x are resilient enough to do the right thing from a
<em>superset</em> of the lock file. More recent versions of Yarn though, are
pretty strict and will refuse to install if it finds anything
<em>superfluous</em> in <code>yarn.lock</code> (from its partial perspective).</p>
<p>There’s a whole bunch of ways to addresses this, tracked in
<a href="https://github.com/yarnpkg/yarn/issues/5428">those</a> <a href="https://github.com/yarnpkg/berry/issues/1223">issues</a>,
with the emerging of various experimental Yarn plugins to fix it like
<a href="https://github.com/andreialecu/yarn-plugin-workspace-lockfile">yarn-plugin-workspace-lockfile</a>
(<a href="https://github.com/bertho-zero/yarn-plugin-workspace-lockfile">and</a>
<a href="https://github.com/milesforks/yarn-plugin-workspace-lockfile">its</a>
<a href="https://github.com/jakebailey/yarn-plugin-workspace-lockfile">forks</a>)
or <a href="https://github.com/JanVoracek/yarn-plugin-entrypoint-lockfiles">yarn-plugin-entrypoint-lockfiles</a>
that maintains individual lock files for each workspaces (or
“entrypoint”) at the cost of slightly slower installs when you add or
remove dependencies.</p>
<p>I initially used some version of this, but while writing this blog post,
I stumbled upon <a href="https://stackoverflow.com/a/73118909/4324668">this StackOverflow comment</a>
that mentions <code>yarn install --mode update-lockfile</code>. This is <em>exactly
what we want</em>! So as of Yarn 3.x, we can just do the following:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">cp</span> yarn.lock apps/functions
<span class="hljs-built_in">cd</span> apps/functions
yarn install --mode update-lockfile
</code></pre>
<p>This will updates <code>apps/functions/yarn.lock</code> to contain <em>only</em> the
entries <em>necessary</em> for your functions, while keeping the versions that
were pinned in the original lock file. This will happily work when Cloud
Build runs <code>yarn install --immutable</code> later on. 😍</p>
<p>Again, this is something you need to do in your <code>predeploy</code> script, and
undo in your <code>postdeploy</code>.</p>
<h2 id="comparison" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#comparison"><span>Comparison</span></a></h2>
<p>Let’s compare the pros and cons of those 3 options.</p>
<p><strong><a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach">Good enough</a></strong></p>
<ul>
<li>🟢 Easy AF.</li>
<li>🟡  Doesn’t use your lock file, you’re installing nondeterministic
versions of your dependencies in production (easily fixable by taking
that specific part of the hybrid approach though).</li>
<li>🔴 Can’t use workspace shared packages.</li>
</ul>
<p><strong><a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-full-context-approach">Full context</a></strong></p>
<ul>
<li>🟢 Supports your lock file and any other monorepo-wide config
(Yarn version, etc.) by design and out of the box.</li>
<li>🟢 Supports shared workspaces packages by design and out of the box.</li>
<li>🟡 Need to proxy the functions <code>main</code> entrypoint in the top-level <code>package.json</code>,
as well as other things like functions <code>.env</code> files.</li>
<li>🟠 Need to maintain the <code>functions.ignore</code> list which is clunky,
and gets significantly worst when using modern Yarn versions.</li>
<li>🔴 It installs your whole monorepo dependencies instead of just your
functions dependencies.</li>
</ul>
<p><strong><a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach">Hybrid</a></strong></p>
<ul>
<li>🟢 None of the downsides of the previous approach.</li>
<li>🟡 You have to copy your lock file and maybe other global requirements
like your <code>.yarnrc.yml</code>, <code>.yarn</code> folder and alike inside your
functions directory.</li>
<li>🔴 Needs a <code>predeploy</code> and <code>postdeploy</code> script to package workspace
dependencies inside the functions directories, and recursively patch
their <code>package.json</code> to reference them with <code>file:</code>.</li>
</ul>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#conclusion"><span>Conclusion</span></a></h2>
<p>Today, we went through 3 methods to make Firebase functions <em>somewhat</em>
work with a monorepo: <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach">the “good enough for me” approach</a>,
<a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-full-context-approach">the full context approach</a>
and <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach">the hybrid approach</a>. Finally, we
<a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#comparison">compared their pros and cons</a>.</p>
<p>By now, you should have everything you need in order to make an educated
decision about which method to pick.</p>
<p>And if you find any other cool trick to make working with Firebase
functions in a monorepo easier, don’t hesitate to <a href="https://www.codejam.info/val.html#contact">let me know</a>!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1644495294803898369">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
</feed>
