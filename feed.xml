<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeJam</title>
  <subtitle>Hey, I‚Äôm Val, welcome to my blog!</subtitle>
  <link href="https://www.codejam.info/feed.xml" rel="self" />
  <link href="https://www.codejam.info/" />
  <id>https://www.codejam.info/</id>
  <updated>2022-05-15T17:49:12.966Z</updated>
  <author>
    <name>Val</name>
  </author>
  <entry>
    <title>Migrating from X11 to Wayland and from i3 to Sway</title>
    <link href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html" />
    <id>https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html</id>
    <updated>2022-05-15T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Finally. After so long. I switched to Wayland. üéâ</p>
<p>I remember back when I started using Linux, more than 10 years ago now,
I was already reading about Wayland, and seeing early adopters on forums
using it and loving it despite running into all kinds of issues‚Ä¶ this
wasn‚Äôt for me. X11, while old and outdated, was well supported for
everything I wanted to do, and that was awesome.</p>
<p>But the other day, I was bored or something, and I asked myself: is
Wayland mainstream enough for me to use it yet?</p>
<p>The answer was‚Ä¶ nearly yes. Yes enough for me to switch. And that‚Äôs a
fucking good news.</p>
<p>In this post I‚Äôll share with you what was needed to <strong>get a usable Wayland
server running with Sway</strong>, all the Wayland alternatives to the X11
programs I was previously using, and finally how I completely purged
X11 from my system.</p>
<p>I‚Äôm a Arch Linux user, so the commands will be adapted to that system.</p>
<h2 id="installing-wayland-and-sway" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#installing-wayland-and-sway"><span>Installing Wayland and Sway</span></a></h2>
<p>Being a long time <a href="https://i3wm.org/">i3</a> user,
<a href="https://swaywm.org/">Sway</a> was the obvious choice as a Wayland
compositor. The fact it‚Äôs compatible with my existing i3 config should
ease the transition quite a lot.</p>
<pre><code class="hljs language-sh">pacman -S wayland sway
</code></pre>
<p>Then from a TTY I could just run <code>sway</code>, and end up in an environment
pretty close to my habitual i3! Good start.</p>
<h2 id="figuring-all-the-wayland-alternatives" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#figuring-all-the-wayland-alternatives"><span>Figuring all the Wayland alternatives</span></a></h2>
<p>There‚Äôs a number of X11 programs that I was using, that just don‚Äôt work
on Wayland. The good thing is that the Wayland ecosystem is mature
enough nowadays that there was a solid alternative for all of them!</p>
<ul>
<li><a href="https://tools.suckless.org/dmenu/">dmenu</a>, the great simple dynamic menu
is now <a href="https://github.com/Cloudef/bemenu">bemenu</a>.</li>
<li><a href="https://feh.finalrewind.org/">feh</a>, the fast and light image
viewer, is now <a href="https://sr.ht/~exec64/imv/">imv</a>.</li>
<li><a href="https://github.com/naelstrof/maim">maim</a> (the improved
<a href="https://github.com/resurrecting-open-source-projects/scrot">scrot</a>)
to take screenshots is replaced by <a href="https://sr.ht/~emersion/grim/">grim</a>,
with <a href="https://github.com/emersion/slurp">slurp</a> to select a region.</li>
<li><a href="https://github.com/astrand/xclip">xclip</a> and <a href="https://vergenet.net/~conrad/software/xsel/">XSel</a>
that allow to manipulate the selection and clipboard from the terminal
are replaced by <a href="https://github.com/bugaevc/wl-clipboard">wl-clipboard</a>
(providing <code>wl-copy</code> and <code>wl-paste</code>).</li>
<li><code>xbacklight</code> that helps controlling the screen backlight is now
<a href="https://github.com/haikarainen/light">Light</a>.</li>
<li><a href="https://www.semicomplete.com/projects/xdotool/">xdotool</a> that I
<a href="https://github.com/valeriangalliat/dmenumoji/blob/997e48c69315131b32f9e3368b88151f811d14eb/dmenumoji#L24">use to type an emoji</a>
in my <a href="https://github.com/valeriangalliat/dmenumoji">dmenumoji</a> emoji
picker is now <a href="https://github.com/atx/wtype">wtype</a> (and I made a
<a href="https://github.com/valeriangalliat/dotfiles/blob/14bcdb5d9e7c9d14f15cf3af33c0c862e18bdfb2/bin/bemenumoji"><code>bemenumoji</code></a>
script instead).</li>
<li><a href="http://jonls.dk/redshift/">Redshift</a> that gives an orange tint to the
screen in the evening, is now <a href="https://gitlab.com/chinstrap/gammastep">Gammastep</a>.</li>
</ul>
<p>There‚Äôs also a number of programs that are no longer needed:</p>
<ul>
<li><a href="https://bitbucket.org/raymonad/xss-lock">xss-lock</a> that I used to
lock the screen on suspend and hibernate is superseded by
<a href="https://github.com/swaywm/swayidle">swayidle</a>.</li>
<li><a href="https://gitlab.com/jD91mZM2/xidlehook">xidlehook</a> (the replacement
for <a href="https://linux.die.net/man/1/xautolock">xautolock</a>) allowing to
execute commands after a certain idle period (like dim screen, lock,
suspend), is superseded by <a href="https://github.com/swaywm/swayidle">swayidle</a>
too.</li>
<li><code>xset</code> that I used to set to lower the keyboard repeat delay is
replaced by the <code>repeat_delay</code> Sway option.</li>
<li><a href="https://github.com/yshui/picom">picom</a>, the compositor I used with
X11 is no longer needed because Sway itself is a compositor.</li>
</ul>
<p>So in the end, this leaves us with the following commands:</p>
<pre><code class="hljs language-sh">pacman -S bemenu-wayland imv grim slurp wl-clipboard light wtype gammastep
pacman -Rns dmenu feh maim xclip xsel xorg-xbacklight xdotool redshift xss-lock xidlehook xorg-xset picom
</code></pre>
<p>Because <a href="https://codeberg.org/dnkl/foot">foot</a> is the default terminal
emulator of Sway, I <a href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html">decided to try it</a>
instead of my usual <a href="https://docs.xfce.org/apps/terminal/start">xfce4-terminal</a>.
That wasn‚Äôt a complete success for me and I rolled back to
xfce4-terminal since it works just fine on Wayland anyways!</p>
<p>Finally, I had a few <code>.xmodmaprc</code> modifications that I use to
<a href="https://github.com/valeriangalliat/dotfiles/blob/1d2098a7da513dab195554997efaac22a0d77a02/x11/xmodmaprc">invert <kbd>Alt</kbd> and <kbd>Ctrl</kbd></a>
and also <a href="https://www.codejam.info/2019/06/software-fn-lock.html">emulate <kbd>Fn Lock</kbd></a>
because it‚Äôs not supported on my laptop.</p>
<p>xmodmap is a X11-only thing, and I had to <a href="https://www.codejam.info/2022/04/xmodmaprc-wayland.html">configure XKB directly</a>
to reproduce this behavior. XKB stands for ‚ÄúX keyboard extension‚Äù but it
is also <a href="https://wayland-book.com/seat/xkb.html">used by Wayland</a>.</p>
<h2 id="full-diff" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#full-diff"><span>Full diff</span></a></h2>
<p>If you want to see the details, here‚Äôs
<a href="https://github.com/valeriangalliat/dotfiles/commit/537f9e14f332b6591a7d932aee056d4d412ec873#diff-d46a2e36b87ce6bb331477a420580121b2fe0c856f81fd5176053ffc4e0828af">the link to the full diff in my dotfiles</a>.</p>
<p>I anchored it to the conversion from <code>~/.config/i3/config</code> to
<code>~/.config/sway/config</code> but feel free to move around and see the other
changes I did.</p>
<p>I took this as an opportunity to change a few unrelated things in there
so not all the modifications were strictly necessary.</p>
<h2 id="cleaning-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#cleaning-up"><span>Cleaning up</span></a></h2>
<p>Now we have a working Wayland and Sway installation, we can remove X11
altogether from the system! Or can we?</p>
<pre><code class="hljs language-sh">pacman -Rns xorg-server i3
</code></pre>
<p>Turns out this didn‚Äôt work for me. VLC, <a href="https://mpv.io/">mpv</a>, Chromium
and <a href="https://calibre-ebook.com/">calibre</a> all required some X11
dependency that would be removed by this command. Bummer.</p>
<p>So what I did instead:</p>
<pre><code class="hljs language-sh">pacman -Rns xorg-server i3 vlc mpv chromium calibre
pacman -S vlc mpv chromium calibre
</code></pre>
<h2 id="quirks" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#quirks"><span>Quirks</span></a></h2>
<h3 id="qt-and-wayland" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#qt-and-wayland"><span>Qt and Wayland</span></a></h3>
<p>VLC and calibre both use Qt, and as <a href="https://wiki.archlinux.org/title/wayland#Qt">documented on the ArchWiki</a>,
we need to install <code>qt5-wayland</code> for Qt to work.</p>
<h3 id="special-flags-for-chromium" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#special-flags-for-chromium"><span>Special flags for Chromium</span></a></h3>
<p>Programs built on Chromium (including Chromium itself obviously) support
Wayland <em>nearly</em> out of the box, but they require some kind of flag to
enable the support. Not really sure why this is a thing, but basically I
need to start Chromium and Visual Studio Code like this:</p>
<pre><code class="hljs language-sh">chromium --ozone-platform-hint=auto
code --enable-features=UseOzonePlatform --ozone-platform=wayland
</code></pre>
<p>I use those programs once in a blue moon anyways, so I don‚Äôt really
care.</p>
<h3 id="idle-inhibitor" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#idle-inhibitor"><span>Idle inhibitor</span></a></h3>
<p>I used to use <code>xidlehook --not-when-audio</code> to prevent dimming the
screen, disconnecting the screen, or locking the computer after an idle
period if there‚Äôs audio playing.</p>
<p>This is great for example when watching a movie‚Ä¶ you don‚Äôt necessarily
actively use the computer but you don‚Äôt want it to lock and suspend or
hibernate while it‚Äôs playing either!</p>
<p>Some programs like mpv support inhibiting idle while playing, which
is great, but others like VLC and Firefox don‚Äôt.</p>
<p>In general, the ‚Äúnot when audio‚Äù trick was a pretty good fallback that
didn‚Äôt require any custom implementation in existing programs.</p>
<p>Luckily, there‚Äôs <a href="https://github.com/ErikReider/SwayAudioIdleInhibit">SwayAudioIdleInhibit</a>
(<a href="https://aur.archlinux.org/packages/sway-audio-idle-inhibit-git">on the AUR</a>)
that does exactly that. Fantastic.</p>
<p>The only quirk I noticed with it is that in Firefox, some very specific
sites like <a href="https://artlist.io/">Artlist</a> (the only one I identified so
far) manage to register an active audio channel at all times even if
they‚Äôre not playing anything, and as long as the tab is open, idle will
be inhibited. This is not good as I tend to keep tabs around for days if
not weeks!</p>
<p>To be able to notice when this happens more easily, I
<a href="https://github.com/valeriangalliat/dotfiles/commit/2fd9359a6a0e76891b6b10fe1ef97f7aec35f926">modified my i3blocks volume block</a>
to display a different icon whether or not there‚Äôs any PulseAudio sink
in state <code>RUNNING</code>.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html#conclusion"><span>Conclusion</span></a></h2>
<p>Migrating to Wayland was a pretty smooth transition at the end of the
day, and I‚Äôm glad I finally did it! Everything works great, it seems
like Wayland programs are usually more recent and have better UX than
their X11 equivalent that I was previously using.</p>
<p>For example I love the <em>slurp</em> screen selection, and I don‚Äôt have to
<a href="https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html">patch dmenu</a> anymore
in order to support emojis, since they natively work with bemenu, and
basically everything else?</p>
<p>Also I realized that Wayland allowed me to zoom in on any part of the
screen with my trackpad out of the box, and that‚Äôs pretty useful. One of
the features I was kinda missing from MacBooks but never spent the time
to figure if I could do it or not with X11.</p>
<p>If you‚Äôve been thinking about migrating to Wayland, it‚Äôs probably a good
time to do so!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How to make a GitHub Action that exposes a SSH server</title>
    <link href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html" />
    <id>https://www.codejam.info/2022/05/github-action-expose-ssh-server.html</id>
    <updated>2022-05-14T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In the <a href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html">first post</a>, I
explained how to use <a href="https://github.com/valeriangalliat/action-sshd-cloudflared">action-sshd-cloudflared</a>,
a GitHub Action that I wrote to easily SSH to a GitHub workflow
container and debug it efficiently. I gave a precise explanation of
<a href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#details-of-the-client-connect-commands">what the client commands do</a>,
and I <a href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#what-about-action-upterm-and-action-tmate">compared it to similar alternatives</a>.</p>
<p>In this post, we‚Äôll go through the details of the server (the code that
runs inside the GitHub workflow). We‚Äôll see how to make a simple GitHub
Action that runs a shell script (or anything <em>executable</em>), a couple
useful environment variables, and most importantly, what‚Äôs the recipe to
run a SSH server there and expose it over the internet despite the
container not being publicly addressable.</p>
<h2 id="making-the-simplest-github-action-possible" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#making-the-simplest-github-action-possible"><span>Making the simplest GitHub Action possible</span></a></h2>
<p>All we need to turn a simple GitHub repository in a GitHub Action is to
add a valid <code>action.yml</code> at the top level.</p>
<p>GitHub can run
<a href="https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action">Docker actions</a>,
<a href="https://docs.github.com/en/actions/creating-actions/creating-a-javascript-action">JavaScript actions</a>,
but the one we care about is the <a href="https://docs.github.com/en/actions/creating-actions/creating-a-composite-action">composite action</a>.
A composite action allows us to run simple <em>commands</em> in a <em>shell</em> and
that‚Äôs exactly what we need. üëç</p>
<pre><code class="hljs language-yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Debug</span> <span class="hljs-string">via</span> <span class="hljs-string">SSH</span>
<span class="hljs-attr">description:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">a</span> <span class="hljs-string">SSH</span> <span class="hljs-string">server</span> <span class="hljs-string">with</span> <span class="hljs-string">a</span> <span class="hljs-string">tunnel</span> <span class="hljs-string">to</span> <span class="hljs-string">access</span> <span class="hljs-string">it</span> <span class="hljs-string">to</span> <span class="hljs-string">debug</span> <span class="hljs-string">your</span> <span class="hljs-string">action</span> <span class="hljs-string">via</span> <span class="hljs-string">SSH.</span>
<span class="hljs-attr">runs:</span>
  <span class="hljs-attr">using:</span> <span class="hljs-string">composite</span>
  <span class="hljs-attr">steps:</span>
    <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">$GITHUB_ACTION_PATH/setup-ssh</span>
      <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span>
</code></pre>
<p>Unlike in a normal workflow YAML, the <code>run</code> command must also include an
explicit shell. We can use any of the <a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables">GitHub Actions environment variables</a>
directly in there, which is convenient because we have
<code>GITHUB_ACTION_PATH</code>, the path to our action repository (by default the
working directory is the one containing the user‚Äôs code, not our action
code).</p>
<p>From there, the <a href="https://github.com/valeriangalliat/action-sshd-cloudflared/blob/master/setup-ssh"><code>setup-ssh</code> script</a>
can be broken down in 9 simple steps:</p>
<ol>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#download-cloudflared">Download the latest <code>cloudflared</code> binary</a>.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#fetch-the-actor-keys">Fetch the public SSH keys</a> of the GitHub user
who triggered the workflow to a <code>authorized_keys</code> file.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#set-a-password">If there was no SSH key, set a password</a> for the
<code>runner</code> user so that there‚Äôs alternative way to connect.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#generate-a-server-key">Generate a server key</a>.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#create-the-sshd-config">Create the <code>sshd</code> config</a>.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#start-sshd">Start <code>sshd</code></a>.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#start-a-tmux-session">Start a tmux session</a>.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#start-cloudflared">Start <code>cloudflared</code></a> to expose the <code>sshd</code> port on the internet.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#output-the-client-instructions">Output the client instructions</a>.</li>
<li><a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#watch-for-session-end">Wait for the tmux session to end and stop everything</a>.</li>
</ol>
<h2 id="download-cloudflared" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#download-cloudflared"><span>Download <code>cloudflared</code></span></a></h2>
<p>We start simple and easy.</p>
<pre><code class="hljs language-sh">curl --location --silent --output cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
<span class="hljs-built_in">chmod</span> +x cloudflared
</code></pre>
<h2 id="fetch-the-actor-keys" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#fetch-the-actor-keys"><span>Fetch the actor keys</span></a></h2>
<p>In GitHub Actions, the user who trigger the workflow is called an
‚Äúactor‚Äù. Their username is set in the <code>GITHUB_ACTOR</code> environment
variable.</p>
<p>As you may know, <a href="https://github.com/settings/keys">you configured</a> a
number of SSH keys on GitHub to be able to push to repositories over
SSH. Those keys are public knowledge, and we can fetch them via the
public GitHub API, which is convenient here to automatically give the
actor SSH access to that server.</p>
<pre><code class="hljs language-sh">curl -s <span class="hljs-string">&quot;https://api.github.com/users/<span class="hljs-variable">$GITHUB_ACTOR</span>/keys&quot;</span> | jq -r <span class="hljs-string">&#x27;.[].key&#x27;</span> &gt; authorized_keys
</code></pre>
<p>The GitHub API response is in JSON, but we use a simple <a href="https://stedolan.github.io/jq/">jq</a>
script to extract the raw key, one per line, to put it in a valid
<code>authorized_keys</code> file.</p>
<h2 id="set-a-password" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#set-a-password"><span>Set a password</span></a></h2>
<p>If there was no SSH keys for that user, we set a password as a fallback,
so they still have a means to connect.</p>
<p>To test whether or not there was any SSH key, we use:</p>
<pre><code class="hljs language-sh">grep -q . authorized_keys
</code></pre>
<p><code>-q</code> makes <code>grep</code> quiet (we don‚Äôt need to display the output), <code>.</code> is
the regular expression to match (any character), and <code>authorized_keys</code>
is the file we use as input.</p>
<p>If there‚Äôs any character in that file, <code>grep</code> will exit with 0
(success). Otherwise with a nonzero code, which means nothing was
matched.</p>
<p>We can conveniently use it in a <code>if</code> condition:</p>
<pre><code class="hljs language-sh"><span class="hljs-keyword">if</span> grep -q . authorized_keys; <span class="hljs-keyword">then</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Configured SSH key(s) for user: <span class="hljs-variable">$GITHUB_ACTOR</span>&quot;</span>
<span class="hljs-keyword">else</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;No SSH key found for user: <span class="hljs-variable">$GITHUB_ACTOR</span>&quot;</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Setting SSH password...&quot;</span>
<span class="hljs-keyword">fi</span>
</code></pre>
<p>It‚Äôs in that <code>else</code> branch that we generate and set the password. To
generate it, we fetch 16 characters from <code>/dev/urandom</code>:</p>
<pre><code class="hljs language-sh">password=$(<span class="hljs-built_in">base64</span> &lt; /dev/urandom | <span class="hljs-built_in">tr</span> -<span class="hljs-built_in">cd</span> <span class="hljs-string">&#x27;[:alnum:]&#x27;</span> | <span class="hljs-built_in">head</span> -c16)
</code></pre>
<ul>
<li><code>base64 &lt; /dev/urandom</code> encodes as Base64 the stream of random bytes
from <code>/dev/urandom</code>. The stream is infinite but the pipleine is
‚Äúlazy‚Äù.</li>
<li><code>tr -cd '[:alnum:]'</code> keeps only alphanumeric characters.</li>
<li><code>head -c16</code> keeps only the first 16 characters (or should I say,
bytes, to be accurate) and terminates the stream as soon as it has
them.</li>
</ul>
<p>This gives us a password that we can set for the current user.</p>
<pre><code class="hljs language-sh">(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>&quot;</span>; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>&quot;</span>) | sudo passwd <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>
</code></pre>
<p>We can‚Äôt use the <code>passwd</code> command directly because it first prompts us
for our own current password (which we don‚Äôt know), but we have <code>root</code>
access in this VM through <code>sudo</code>, and <code>root</code> doesn‚Äôt need confirmation
to change anyone‚Äôs password.</p>
<p>We echo the password twice because <code>passwd</code> typically asks to input the
password first, then a second time for confirmation.</p>
<h2 id="generate-a-server-key" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#generate-a-server-key"><span>Generate a server key</span></a></h2>
<p><code>ssh-keygen</code> is a cool utility to generate SSH keys. It defaults to a
RSA key which is fine with me.</p>
<ul>
<li><code>-q</code> makes it quiet (we don‚Äôt need the logs).</li>
<li><code>-f</code> indicates the output file to write the key to (the public key
will be in a file with a <code>.pub</code> suffix).</li>
<li><code>-N ''</code> is to set an empty passphrase (otherwise <code>ssh-keygen</code> will
prompt to set a passphrase).</li>
</ul>
<pre><code class="hljs language-sh">ssh-keygen -q -f ssh_host_rsa_key -N <span class="hljs-string">&#x27;&#x27;</span>
</code></pre>
<h2 id="create-the-sshd-config" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#create-the-sshd-config"><span>Create the <code>sshd</code> config</span></a></h2>
<p>We copy it from a template file, where we just replace the <code>$PWD</code> and
<code>$USER</code> symbols by the corresponding environment variable.</p>
<pre><code class="hljs language-sh">sed <span class="hljs-string">&quot;s,\$PWD,<span class="hljs-variable">$PWD</span>,;s,\$USER,<span class="hljs-variable">$USER</span>,&quot;</span> sshd_config.template &gt; sshd_config
</code></pre>
<p>This is a good time to review the template. It‚Äôs heavily based on my
<a href="https://www.codejam.info/2021/11/standalone-userland-ssh-server.html">standalone userland SSH server</a>
config I <a href="https://github.com/valeriangalliat/sshd-on-the-go">published</a>
last year!</p>
<pre><code class="hljs language-apache"><span class="hljs-attribute">Port</span> <span class="hljs-number">2222</span>
<span class="hljs-attribute">HostKey</span> $PWD/ssh_host_rsa_key
<span class="hljs-attribute">PidFile</span> $PWD/sshd.pid
</code></pre>
<p>First we set the port to 2222, and we define the host key and process ID
file. We could have written <code>PidFile none</code> to prevent the default of
<code>/run/sshd.pid</code>, because we don‚Äôt actually use it, but it doesn‚Äôt hurt.</p>
<pre><code class="hljs language-apache"><span class="hljs-attribute">UsePAM</span> yes
</code></pre>
<p>We enable PAM (pluggable authentication module). Not going in details
with this, but keep in mind it‚Äôs required for this to work at least on
Debian-based systems.</p>
<pre><code class="hljs language-apache"><span class="hljs-attribute">KbdInteractiveAuthentication</span> yes
<span class="hljs-attribute">ChallengeResponseAuthentication</span> yes
<span class="hljs-attribute">PasswordAuthentication</span> yes
</code></pre>
<p>This enables interactive password authentication. They‚Äôre actually
enabled by default so we could leave them out.</p>
<pre><code class="hljs language-apache"><span class="hljs-attribute">AllowUsers</span> $USER
<span class="hljs-attribute">AuthorizedKeysFile</span> $PWD/authorized_keys
</code></pre>
<p>We only allow the Unix user who the workflow is running as, and we allow
the SSH keys we fetched earlier in <code>authorized_keys</code>. Remember that we
replace those <code>$USER</code> and <code>$PWD</code> symbols with a <code>sed</code> command before
starting the server, you can‚Äôt actually use variables in here otherwise.</p>
<pre><code class="hljs language-apache"><span class="hljs-attribute">ForceCommand</span> tmux attach
</code></pre>
<p>Finally we force the <code>tmux attach</code> command to run upon login. This makes
sure the user is connecting to the tmux session we‚Äôll start in the
following steps, and it‚Äôs important because we monitor the status of
this session to determine when to stop the server.</p>
<h2 id="start-sshd" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#start-sshd"><span>Start <code>sshd</code></span></a></h2>
<pre><code class="hljs language-sh">/usr/sbin/sshd -f sshd_config -D &amp;
sshd_pid=$!
</code></pre>
<ul>
<li>We need to start it with an absolute path (it is required when
starting an ad hoc SSH server like this).</li>
<li><code>-f</code> lets us specify the configuration file to use.</li>
<li><code>-D</code> starts it as foreground (by default it starts as a daemon).</li>
<li><code>&amp;</code> makes it a background process in this script so that we can fetch
its process ID with <code>$!</code> right after, and kill it at the end.</li>
</ul>
<p>We could avoid <code>-D</code> and <code>&amp;</code> altogether by using the <code>sshd.pid</code> file that
we configured in <code>PidFile</code> to retrieve the process ID instead. Whatever
works.</p>
<h2 id="start-a-tmux-session" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#start-a-tmux-session"><span>Start a tmux session</span></a></h2>
<pre><code class="hljs language-sh">(<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GITHUB_WORKSPACE</span>&quot;</span> &amp;&amp; tmux new-session -d -s debug)
</code></pre>
<p>We start a subshell (the parens around the command), so that <code>cd</code> only
affects the subshell and not our top-level environment.</p>
<p>We effectively change the current directory to the main workflow
directory, defined in <code>GITHUB_WORKSPACE</code>, and start a tmux session.</p>
<p>With <code>tmux new-session</code>, <code>-d</code> disables the default behaviour of
attaching the session to the current terminal, and <code>-s</code> allows us to
give it a name.</p>
<h2 id="start-cloudflared" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#start-cloudflared"><span>Start <code>cloudflared</code></span></a></h2>
<pre><code class="hljs language-sh">./cloudflared tunnel --no-autoupdate --url tcp://localhost:2222 &amp;
cloudflared_pid=$!
</code></pre>
<p>We run the <code>cloudflared</code> binary that we downloaded to the current
directory earlier. This command allows us to start a tunnel forwarding
to port 2222, where our SSH server is listening.</p>
<p>And again, we terminate with <code>&amp;</code> to start it as a background process so
that we can keep running commands and kill it at the end.</p>
<p>But there‚Äôs a few more things we need to add to this command:</p>
<pre><code class="hljs language-sh">./cloudflared tunnel ... 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> cloudflared.log | sed -u <span class="hljs-string">&#x27;s/^/cloudflared: /&#x27;</span> &amp;
</code></pre>
<ul>
<li><code>2&gt;&amp;1</code> redirects the <code>stderr</code> output to <code>stdout</code>, so that we can
<code>tee</code> it to <code>cloudflared.log</code> file.</li>
<li><code>tee</code> will write the input to the given file, but also keep outputting
it to <code>stdout</code> at the same time.</li>
<li>This is great because we can now use a simple <code>sed</code> command to prefix
it with <code>cloudflared:</code> (so that the logs have some context).</li>
</ul>
<p>This log file is useful for us to retrieve the relay URL that
<code>cloudflared</code> will output, which we do right after:</p>
<pre><code class="hljs language-sh">url=$(<span class="hljs-built_in">head</span> -1 &lt;(<span class="hljs-built_in">tail</span> -f cloudflared.log | grep --line-buffered -o <span class="hljs-string">&#x27;https://.*\.trycloudflare.com&#x27;</span>))
</code></pre>
<ul>
<li><code>tail -f cloudflared.log</code> <em>follows</em> the file, meaning that it keeps
watching for new lines indefinitely, and outputs them as they come.</li>
<li>The <code>grep</code> command has a simple regex to identify the relay URL.
<ul>
<li><code>--line-buffered</code> is important here because we want to work <em>lazily</em>
and exit as soon as we find a match. If <code>grep</code> was buffering more
than one line of data, this could just hang forever.</li>
<li><code>-o</code> will print only the text matched by the regex instead of the
whole matching line.</li>
</ul>
</li>
<li>We put all of that in a subshell that we use as input to the <code>head</code>
command with the <code>&lt;()</code> syntax.</li>
<li><code>head -1</code> will exit the whole pipeline after one line is outputted,
allowing us to continue running the script.</li>
</ul>
<div class="note">
<p><strong>Note:</strong> we can‚Äôt put <code>head -1</code> at the end of the pipeline even though
that would seem intuitive, because it would take <code>grep</code> to try to
<em>write</em> to the <code>head</code> input after it was closed to notice that the pipe
was broken, and then it would take another line output from <code>tail</code> to
notice that <code>grep</code> exited.</p>
<p>In practice this just means this would hang indefinitely because
<code>cloudflared</code> doesn‚Äôt output the relay host twice.</p>
<p>See more details <a href="https://stackoverflow.com/questions/45326901/lazy-non-buffered-processing-of-shell-pipeline">here</a>.</p>
</div>
<h2 id="output-the-client-instructions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#output-the-client-instructions"><span>Output the client instructions</span></a></h2>
<p>We already have the <code>url</code> variable as well as an optional <code>password</code>
variable.</p>
<p>With that, all we need is the SSH server public key to include it as
part of the connection command that the user will paste.</p>
<pre><code class="hljs language-sh">public_key=$(<span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f1,2 &lt; ssh_host_rsa_key.pub)
</code></pre>
<p>Thanks to the <code>cut</code> command, we split the single line in the given file
by space, and output only fields 1 and 2. This file normally has 3
fields: the key type, the actual key, and a comment. We don‚Äôt need the
comment.</p>
<p>We can then display those variables in a friendly and convenient way to
the user. I already detailed that in <a href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#details-of-the-client-connect-commands">the first part</a>
focusing on the client side, check it out if you didn‚Äôt already!</p>
<h2 id="watch-for-session-end" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#watch-for-session-end"><span>Watch for session end</span></a></h2>
<pre><code class="hljs language-sh">tmux wait-for channel
</code></pre>
<p>This commands waits for a channel named <code>channel</code> to be ‚Äúwoken up‚Äù by a
matching <code>tmux wait-for -S channel</code>.</p>
<p>We don‚Äôt actually ever run this last command, and we don‚Äôt really care
about the channel either, but the effect this have if we never ‚Äúwake up‚Äù
the channel, is that it will hang until the tmux session itself is over.</p>
<p>That‚Äôs exactly what we need: when the user is done debugging, they‚Äôll
typically end the tmux session, and this is our way to know we can tear
down the servers:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">kill</span> <span class="hljs-string">&quot;<span class="hljs-variable">$cloudflared_pid</span>&quot;</span>
<span class="hljs-built_in">kill</span> <span class="hljs-string">&quot;<span class="hljs-variable">$sshd_pid</span>&quot;</span>
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>And just like that, you know everything about
<a href="https://github.com/valeriangalliat/action-sshd-cloudflared">action-sshd-cloudflared</a>!</p>
<p>This script is simple enough to be explained in depth in a blog post,
and builds on top of rock solid programs like <code>sshd</code>, <code>cloudflared</code> and
tmux.</p>
<p>Thanks to Cloudflare Tunnel guest mode, we don‚Äôt even need an API key or
token to set up the relay, and because GitHub already exposes the actor
public SSH keys, we can preconfigure them so that everything just works
out of the box.</p>
<p>I hope GitHub introduces a SSH feature natively at some point, that
would make actions like this obsolete. In the meantime, I hope this
helps you debug your GitHub workflows!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1525554351648956416">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Debugging a GitHub Actions workflow via SSH</title>
    <link href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html" />
    <id>https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html</id>
    <updated>2022-05-14T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Since GitHub introduced <a href="https://github.com/features/actions">Actions</a>,
it‚Äôs more and more common to use them for CI/CD tasks, because of the
tight integration with GitHub, and its simplicity.</p>
<p>Coming from <a href="https://circleci.com/">CircleCI</a>, I was used to their
<a href="https://circleci.com/docs/2.0/ssh-access-jobs/">‚Äúrerun job with SSH‚Äù feature</a>,
which allowed to rerun a job while exposing a SSH server, to debug the
live test environment, and I was surprised to not find a similar feature
on GitHub Actions.</p>
<h2 id="why-ssh-to-the-ci-environment" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#why-ssh-to-the-ci-environment"><span>Why SSH to the CI environment?</span></a></h2>
<p>SSHing to CI is extremely handy in scenarios where <strong>a bug happens only
on CI</strong> and can‚Äôt be reproduced locally or on other staging servers we
have control over.</p>
<p>It can also be useful <strong>when initially setting up a GitHub Action</strong> for
your app when you‚Äôre not sure exactly what‚Äôs available in the GitHub
image, what versions, etc. and want to <strong>quickly fiddle around</strong> to find
the right instructions to set up the environment for success.</p>
<h2 id="what-about-containers" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#what-about-containers"><span>What about containers?</span></a></h2>
<p>The advent of containers should mitigate part of the problem, with more
and more apps being <a href="https://en.wiktionary.org/wiki/dockerize">‚Äúdockerized‚Äù</a>,
but the reality is that your GitHub Actions workflow
<a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners">likely runs on <code>ubuntu-latest</code></a>
because that‚Äôs far more convenient, and that‚Äôs the main way that‚Äôs
documented basically everywhere. You‚Äôre still running in a container,
but that‚Äôs GitHub‚Äôs container, and it‚Äôs (very) different from your
development, staging and production containers.</p>
<p>And even if you <a href="https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container">bring your own container</a>,
you‚Äôre still likely to encounter <strong>differences inherent to running in a
CI environment</strong>: are the volumes and ports configured exactly the same?
What about the services you depend on like PostgreSQL, Redis, etc.? How
do you manage your environment variables? Are they any different from
your local environment? (They probably should.)</p>
<p>Also did you ever encounter timing-based bugs that <strong>only happen on a
slow machine</strong> (or network), or inversely, only happen <strong>when the code
runs too fast</strong>? I did. Both of those.</p>
<h2 id="introducing-action-sshd-cloudflared" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#introducing-action-sshd-cloudflared"><span>Introducing action-sshd-cloudflared</span></a></h2>
<p>This is why I created <a href="https://github.com/valeriangalliat/action-sshd-cloudflared">action-sshd-cloudflared</a>.</p>
<p>The idea? Find the <strong>simplest way to run a SSH server</strong> in a GitHub
Action and somehow connect to it. The last part can be a challenge
because as you can expect, the VM the workflow runs in <strong>doesn‚Äôt have a
public IP</strong>, and not even IPv6. No way to directly bind a port publicly
accessible from the internet.</p>
<p>That‚Äôs why we need to <strong>resort to a relay host</strong>. I chose
<a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/">Cloudflare Tunnel</a>
for that, which is convenient because it includes a way to
<a href="https://developers.cloudflare.com/cloudflare-one/applications/non-http/arbitrary-tcp/">forward abritrary TCP</a>,
and happily runs as guest (no need to be authenticated).</p>
<p>In the end, it takes <a href="https://github.com/valeriangalliat/action-sshd-cloudflared/blob/master/setup-ssh">100 lines of commented shell script</a>,
and if you‚Äôre interested in the details, I encourage you to read my
<a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html">explanation of how the server works</a>.</p>
<p>But for now, I‚Äôll start by <strong>showing you how to use it</strong>, then I‚Äôll
break down <strong>what the client-side commands do</strong>, and finally I‚Äôll
compare it to other options.</p>
<h2 id="usage" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#usage"><span>Usage</span></a></h2>
<p>Here‚Äôs an example workflow YAML file that does nothing but checking out
your repository and starting a SSH server.</p>
<pre><code class="hljs language-yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span>
<span class="hljs-attr">on:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">push</span>
<span class="hljs-attr">jobs:</span>
  <span class="hljs-attr">build:</span>
    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>
    <span class="hljs-attr">steps:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">valeriangalliat/action-sshd-cloudflared@v1</span>
</code></pre>
<p>More likely you already have a workflow YAML and the only part you care
about is to add this to your <code>steps</code> array:</p>
<pre><code class="hljs language-yaml">      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">valeriangalliat/action-sshd-cloudflared@v1</span>
</code></pre>
<p>From there, here‚Äôs an example output you‚Äôll find on your workflow logs:</p>
<pre><code class="hljs">Downloading `cloudflared` from &lt;https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64&gt;...
Configured SSH key(s) for user: valeriangalliat
Creating SSH server key...
Creating SSH server config...
Starting SSH server...
Starting tmux session...
Starting Cloudflare tunnel...

Run the following command to connect:

    ssh-keygen -R action-sshd-cloudflared &amp;&amp; echo &#x27;action-sshd-cloudflared ssh-rsa (public key goes here)&#x27; &gt;&gt; ~/.ssh/known_hosts &amp;&amp; ssh -o ProxyCommand=&#x27;cloudflared access tcp --hostname https://recycling-currently-enjoy-pregnant.trycloudflare.com&#x27; runner@action-sshd-cloudflared

What the one-liner does:

    # Remove old SSH server public key for `action-sshd-cloudflared`
    ssh-keygen -R action-sshd-cloudflared

    # Trust the public key for this session
    echo &#x27;action-sshd-cloudflared ssh-rsa (public key goes here)&#x27; &gt;&gt; ~/.ssh/known_hosts

    # Connect using `cloudflared` as a transport (SSH is end-to-end encrpted over this tunnel)
    ssh -o ProxyCommand=&#x27;cloudflared access tcp --hostname https://recycling-currently-enjoy-pregnant.trycloudflare.com&#x27; runner@action-sshd-cloudflared

    # Alternative if you don&#x27;t want to verify the host key
    ssh -o ProxyCommand=&#x27;cloudflared access tcp --hostname https://recycling-currently-enjoy-pregnant.trycloudflare.com&#x27; -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new runner@action-sshd-cloudflared
</code></pre>
<p>From there you can copy the (long, I know) one-liner that will connect
you to the VM. As you can see I also a commented version of the commands
for people to have a better understanding of what‚Äôs happening. Let‚Äôs go
through it in even more details.</p>
<h2 id="details-of-the-client-connect-commands" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#details-of-the-client-connect-commands"><span>Details of the client connect commands</span></a></h2>
<h3 id="remove-keys-from-previous-debugging-sessions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#remove-keys-from-previous-debugging-sessions"><span>Remove keys from previous debugging sessions</span></a></h3>
<p>The first step is to remove all the keys matching host
<code>action-sshd-cloudflared</code> in <code>~/.ssh/known_hosts</code>. This is where your
SSH client stores the public keys of all the server you connected to.</p>
<pre><code class="hljs language-sh">ssh-keygen -R action-sshd-cloudflared
</code></pre>
<p>The reason we need to do this is because the fact the action generates a
new key every time it runs, we need to ‚Äúforget‚Äù any previous key as they
won‚Äôt be valid anymore. Otherwise SSH is confused and will prevent you
to connect to a host whose key is not the one it expects.</p>
<div class="note">
<p><strong>Note:</strong> an alternative would be to use a unique host every time (as
we‚Äôll see later, because of the way use a proxy command, we could put
any host in there), for example the same one that Cloudflare generated
for us (<code>https://recycling-currently-enjoy-pregnant.trycloudflare.com</code>
in the earlier example).</p>
<p>What I don‚Äôt like about that is every time you debug a GitHub workflow,
a new host will be added to your <code>~/.ssh/known_hosts</code> and this can
quickly pollute it. Sure, you can garbage collect them manually at some
point, but I‚Äôm still not a big fan of this idea.</p>
</div>
<h3 id="trust-the-key-for-the-current-session" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#trust-the-key-for-the-current-session"><span>Trust the key for the current session</span></a></h3>
<p>This step is not technically required, for if we don‚Äôt do it, the SSH
client will prompt you to trust the key when it first encounters it
(trust on first use model).</p>
<p>But here we‚Äôre already copy/pasting quite a long one-liner, so might as
well include an extra step to include the server public key and put it
in the known hosts file.</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;action-sshd-cloudflared ssh-rsa (public key goes here)&#x27;</span> &gt;&gt; ~/.ssh/known_hosts
</code></pre>
<p>Trust on first use is fine, but this is better; would you really check
that the server key fingerprint matches what was shown in the server
logs otherwise?</p>
<h3 id="connect-to-the-cloudflare-tunnel" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#connect-to-the-cloudflare-tunnel"><span>Connect to the Cloudflare Tunnel</span></a></h3>
<p>It is the command we use as SSH <code>ProxyCommand</code>:</p>
<pre><code class="hljs language-sh">cloudflared access tcp --hostname https://recycling-currently-enjoy-pregnant.trycloudflare.com
</code></pre>
<p>This command if run by itself, will open a TCP connection to our SSH
server inside the GitHub VM, on port 2222 (the one we configured from
the other side of the Cloudflare Tunnel), through the relay that
Cloudflare gave us (the random subdomain on <code>trycloudflare.com</code>).</p>
<p>Everything written on <code>stdin</code> will be sent over the TCP socket, and
everything received will go to <code>stdout</code>. Simple as that.</p>
<p>The good thing is that this simple interface is supported by the <code>ssh</code>
command configure the underlying connection, with the <code>-o ProxyCommand</code>
flag.</p>
<h3 id="ssh-through-the-proxy" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#ssh-through-the-proxy"><span>SSH through the proxy</span></a></h3>
<p>This is the final piece of the puzzle:</p>
<pre><code class="hljs language-sh">ssh -o ProxyCommand=<span class="hljs-string">&#x27;cloudflared access tcp --hostname https://recycling-currently-enjoy-pregnant.trycloudflare.com&#x27;</span> runner@action-sshd-cloudflared
</code></pre>
<p>We explained already what the <code>cloudflared access tcp</code> command does, so
we‚Äôll focus on the rest:</p>
<pre><code class="hljs language-sh">ssh -o ProxyCommand=<span class="hljs-string">&#x27;...&#x27;</span> runner@action-sshd-cloudflared
</code></pre>
<p>Here we issue a SSH connection to host <code>action-sshd-cloudflared</code> with
user <code>runner</code>. But because of the <code>ProxyCommand</code> we configured, the
given host is not actually used, and we could put anything in there.</p>
<p>We could even connect to <code>runner@</code> (effectively no hostname), and that
would work. That being said this is not an ideal solution because it
would leave an entry in <code>~/.ssh/known_hosts</code> for a ‚Äúempty string‚Äù host,
and that‚Äôs not really useful. Putting <code>action-sshd-cloudflared</code> here is
more clear on what this key is related to.</p>
<p>The combination of both those commands effectively connects you to the
remote SSH server in the GitHub VM.</p>
<h2 id="what-about-action-upterm-and-action-tmate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#what-about-action-upterm-and-action-tmate"><span>What about action-upterm and action-tmate?</span></a></h2>
<p>When I first tried to debug a GitHub workflow via SSH, I stumbled upon
two actions: <a href="https://github.com/marketplace/actions/debugging-with-ssh">debugging with SSH</a>
and <a href="https://github.com/marketplace/actions/debugging-with-tmate">debugging with tmate</a>,
also named <a href="https://github.com/lhotari/action-upterm">action-upterm</a>
and <a href="https://github.com/mxschmitt/action-tmate">action-tmate</a> in their
respective repos.</p>
<p>They‚Äôre both great and work perfectly for the task at hand, and can do
even more than that, because both <a href="https://upterm.dev/">Upterm</a>
and <a href="https://tmate.io/">tmate</a> are designed to <em>share</em> a terminal
session amongst multiple clients.</p>
<p>They both work by providing a client ‚Äúhost‚Äù software, and a public relay
server. The host uses the client to connect to the relay server and
share a terminal input and output with it, and other users can SSH to
that relay to access the shared session.</p>
<p>The advantage of the relay server in a world where most computers don‚Äôt
have a public IP address and probably not public IPv6 either, is to
enable <a href="https://en.wikipedia.org/wiki/NAT_traversal">NAT traversal</a> to
share a local service with the internet despite not being publicly
routable to. This is the problem that the famous
<a href="https://ngrok.com/">ngrok</a> is solving, or more simply, SSH TCP
forwarding (with the <code>-L</code> and <code>-R</code> options).</p>
<h3 id="the-problem-with-the-relay-server" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#the-problem-with-the-relay-server"><span>The problem with the relay server</span></a></h3>
<p>There‚Äôs one thing that bugs me very much with the way they both designed
the relay server: it‚Äôs not just acting as a TCP relay to enable NAT
traversal! Not only the server contains business logic, but for this
business logic to work, it needs plaintext access to the SSH connection
(as opposed to only forwarding encrypted TCP traffic).</p>
<p>This is very much a no-no for me. The good thing is that they both
provide a way to <a href="https://upterm.dev/#deploy-uptermd">host</a> your
<a href="https://tmate.io/#host">own</a> relay server, where it‚Äôs not as much of a
big deal that the relay sees plaintext traffic (it moves the trust from
‚Äúrandom strangers on the internet‚Äù to the entity you pay to host your
server, which is arguably an improvement, although far from end-to-end
encryption).</p>
<p>But I‚Äôm lazy, and that‚Äôs too much work anyways. Especially when I know a
bare <code>sshd</code> and a ‚Äúdumb‚Äù (here used in a positive sense) TCP relay would
do the job for me.</p>
<p>I would have been more keep to using Upterm or tmate if they moved all
the business logic to the host client software, and let the relay be‚Ä¶
a (dumb) TCP relay happily breaking NAT and forwarding encrypted traffic
around. But I reckon this can be a challenge especially with the
extended feature set those tools want to support.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/debugging-github-actions-workflow-ssh.html#conclusion"><span>Conclusion</span></a></h2>
<p>Overall, <code>sshd</code> and <code>cloudflared</code> work perfectly hand in hand to allow
SSHing in an otherwise unroutable GitHub workflow container.</p>
<p>This is the beauty of the Unix philosophy: tools that do one thing, and
do it well, and are <em>composable</em> through <em>universal interfaces</em>.</p>
<p>If you liked this post, you will definitely enjoy the second part where
I <a href="https://www.codejam.info/2022/05/github-action-expose-ssh-server.html">explain how action-sshd-cloudflared works internally</a>.
Cheers!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1525554350042619904">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Notion: import CSV with Markdown page content</title>
    <link href="https://www.codejam.info/2022/05/notion-csv-markdown-page-content.html" />
    <id>https://www.codejam.info/2022/05/notion-csv-markdown-page-content.html</id>
    <updated>2022-05-11T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>As I was <a href="https://github.com/valeriangalliat/github-to-notion">migrating a GitHub project to Notion</a>,
one of the solutions I considered was to import a CSV using the native
import feature.</p>
<p>Sadly, there was no way to set the page content from the rows in the CSV
file. All the columns are imported as custom attributes and we
can‚Äôt pick one to be used as page content.</p>
<p>So I ended up making a <a href="https://github.com/valeriangalliat/github-to-notion/blob/master/import-to-notion.js">custom script</a>
using the <a href="https://developers.notion.com/">Notion API</a>. And while this
script is very specific to my use case, I figured it would be good to
generalize it and go back to my original CSV idea, this way other people
can leverage it for their own projects!</p>
<h2 id="the-way-it-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/notion-csv-markdown-page-content.html#the-way-it-works"><span>The way it works</span></a></h2>
<p>The idea is simple. First, we import a CSV using the native import
feature, which results in our ‚Äúcontent‚Äù column being imported as a page
attribute. Then we run a simple scripts that goes through all the pages
with a non-empty ‚Äúcontent‚Äù column, and moves it to the page body
instead!</p>
<p>I named this script <a href="https://github.com/valeriangalliat/notion-property-to-content">Notion property to content</a>
(I know, I suck at naming things), and with a bit terminal fu, you can
use it on your own Notion imports!</p>
<h2 id="running-the-script" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/notion-csv-markdown-page-content.html#running-the-script"><span>Running the script</span></a></h2>
<p>It requires <a href="https://nodejs.org/">Node.js</a> version 18 or later.</p>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> https://github.com/valeriangalliat/notion-property-to-content
<span class="hljs-built_in">cd</span> notion-property-to-content
npm install
</code></pre>
<p>From there, we need a Notion token. For this, you need to
<a href="https://www.notion.so/my-integrations">create a new integration</a>. The
default parameters should do. At the end Notion will give you a token
that we‚Äôll set in an environment variable (lines starting with <code>$</code> means
an actual command that you run, but don‚Äôt type the <code>$</code>):</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">read</span> NOTION_TOKEN</span>
Paste the token here
<span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> NOTION_TOKEN</span>
</code></pre>
<p>Now you need to share the database you‚Äôre working on with your newly
created integration. On the top right corner of your database page, hit
the ‚Äúshare‚Äù button:</p>
<figure class="center">
  <img src="https://www.codejam.info/img/2022/05/notion-share.png">
</figure>
<p>Click on the search field to reveal your integration, and click
‚Äúinvite‚Äù:</p>
<figure class="center">
  <img src="https://www.codejam.info/img/2022/05/notion-invite.png">
</figure>
<p>While you‚Äôre on the database page, copy its ID from the URL bar, for
example if the current URL is:</p>
<pre><code class="hljs">https://www.notion.so/513bff94c55a4cf09a66a336c87e7964?v=0eb7b11463c94c3a84786bd3191e4032
</code></pre>
<p>Copy this part:</p>
<pre><code class="hljs">513bff94c55a4cf09a66a336c87e7964
</code></pre>
<p>Finally, back to the terminal, you can run the following command to
move the property of your choice to the page content:</p>
<pre><code class="hljs language-sh">node property-to-content.js &lt;database-id&gt; &lt;property&gt; --remove
</code></pre>
<p>Where <code>&lt;database-id&gt;</code> is the ID of your database and <code>&lt;property&gt;</code> is the
name of the property you want to use as page content. For example if
your database ID is <code>513bff94c55a4cf09a66a336c87e7964</code> and your property
is named ‚ÄúPage Content‚Äù, run:</p>
<pre><code class="hljs language-sh">node property-to-content.js 513bff94c55a4cf09a66a336c87e7964 <span class="hljs-string">&#x27;Page Content&#x27;</span> --remove
</code></pre>
<div class="note">
<p><strong>Note:</strong> I recommend you to run this on a test database first just to
make sure it behaves the way you want with your data!</p>
</div>
<p>The <code>--remove</code> part is to empty the property after writing its value to
the actual page content. It is useful so that if you were to run the
script again, it doesn‚Äôt copy the content a second time at the end of
the page, as the script only goes through non-empty content values.</p>
<p>If you plan to only run this once and want to keep the content in its
original property, don‚Äôt add the <code>--remove</code> part.</p>
<h2 id="need-some-help" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/notion-csv-markdown-page-content.html#need-some-help"><span>Need some help?</span></a></h2>
<p>If you need help with this, or importing data to your Notion workspace
and working with the Notion API in general, don‚Äôt hesitate to
<a href="https://www.codejam.info/val.html#contact">shoot me an email</a>, I‚Äôll be happy to help you on a
consulting basis! You‚Äôll even get a 20% discount if you tell me you‚Äôre
coming from this article. üòú</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Google Cloud service account authorization without OAuth</title>
    <link href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html" />
    <id>https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html</id>
    <updated>2022-05-07T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Google‚Äôs <a href="https://developers.google.com/identity/protocols/oauth2/service-account">OAuth documentation</a>
goes in length about how to sign a JWT with the service account key in
order to call their token endpoint <code>https://oauth2.googleapis.com/token</code>
to get an OAuth token so that you can call actual Google Cloud APIs,
only to mention at the end in a small addendum that you can skip the
token endpoint step altogether and
<a href="https://developers.google.com/identity/protocols/oauth2/service-account#jwt-auth">just use your self-signed JWT directly</a>. üò¨</p>
<p>In this blog post we‚Äôll develop this last step, because it‚Äôs so much
more convenient, reliable, and there‚Äôs a few undocumented things about
it.</p>
<h2 id="the-normal-flow" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html#the-normal-flow"><span>The normal flow</span></a></h2>
<p>But before, let‚Äôs quickly look at the ‚Äúnormal‚Äù recommended OAuth flow.
Borrowing this diagram from their documentation:</p>
<figure class="center">
  <img alt="JWT OAuth flow" src="https://www.codejam.info/img/2022/05/jwt-flow.png">
</figure>
<ol>
<li>Create a self-signed JWT using your service account key.</li>
<li>Use it to authenticate to <code>https://oauth2.googleapis.com/token</code> to
request an OAuth token.</li>
<li>Use that OAuth token to call Google APIs.</li>
</ol>
<p>This is not bad, but having to go over the network to authenticate and
refresh tokens before they expire adds extra overhead, delay, error
handling, retry logic, and in general just an extra few things that can
go wrong.</p>
<p>And I don‚Äôt like things out of my control that can go wrong.</p>
<h2 id="the-better-flow" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html#the-better-flow"><span>The better flow</span></a></h2>
<p>On the other hand, the poorly documented ‚Äúservice account authorization
without OAuth method‚Äù consists in:</p>
<ol>
<li>Create a self-signed JWT using your service account key.</li>
<li>Use it directly to call Google APIs.</li>
<li>Profit.</li>
</ol>
<p>Same amount of steps, but you can imagine why I like this method better.</p>
<h2 id="implementing-direct-authorization-from-scratch" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html#implementing-direct-authorization-from-scratch"><span>Implementing direct authorization from scratch</span></a></h2>
<p>Typically, the Google Cloud SDK in the language of your choice takes
care of this for you (and most of the time uses this self-signed method,
because they too realize it‚Äôs a much superior method). But in some
cases, you have to reimplement the authorization step, for example
<a href="https://hookdeck.com/blog/post/how-to-call-google-cloud-apis-from-cloudflare-workers#the-problem-with-cloudflare-workers">when running on Cloudflare Workers</a>,
which I wrote about in details in that article.</p>
<p>As of today their <a href="https://developers.google.com/identity/protocols/oauth2/service-account#jwt-auth">documentation</a>
mentions the JWT must have the following header and payload:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RS256&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;kid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SERVICE_ACCOUNT_PRIVATE_KEY_ID&quot;</span>
<span class="hljs-punctuation">}</span>
.
<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;iss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SERVICE_ACCOUNT_EMAIL&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SERVICE_ACCOUNT_EMAIL&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;aud&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://SERVICE.googleapis.com/&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1511900000</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;exp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1511903600</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Where the parts in all caps are variables to adapt to your situation.
Then the JWT can be signed with RS256 (RSA signature with SHA-256), and
used in a <code>Authorization: Bearer</code> header against the service you
included in the <code>aud</code> field.</p>
<p>And it does work most of the time (again checkout <a href="https://hookdeck.com/blog/post/how-to-call-google-cloud-apis-from-cloudflare-workers#the-problem-with-cloudflare-workers">my post</a>
to see the vanilla JavaScript implementation), but in some cases like
with Google Cloud Storage, <a href="https://stackoverflow.com/q/63222450">it breaks down</a>.</p>
<h2 id="when-it-breaks-down" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html#when-it-breaks-down"><span>When it breaks down</span></a></h2>
<p>With Google Cloud Storage, when using the documented method with a <code>aud</code>
field of <code>https://storage.googleapis.com/</code>, we sadly <a href="https://stackoverflow.com/q/63222450">get an error</a>
when calling the API, e.g. when trying to get a file:</p>
<pre><code class="hljs language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">Error</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Code</span>&gt;</span>AuthenticationRequired<span class="hljs-tag">&lt;/<span class="hljs-name">Code</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Message</span>&gt;</span>Authentication required.<span class="hljs-tag">&lt;/<span class="hljs-name">Message</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">Error</span>&gt;</span>
</code></pre>
<p>Or when trying to upload a file:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">401</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Invalid Credentials&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;errors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Invalid Credentials&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;domain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;global&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;authError&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;locationType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;header&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Authorization&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>But the exact same code to generate a JWT works seamlessly with Pub/Sub,
Datastore and other services! Why is that? Should we fall back to using
the OAuth endpoint for those problematic services?</p>
<p>No.</p>
<h2 id="the-new-undocumented-jwt-payload" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html#the-new-undocumented-jwt-payload"><span>The new, undocumented JWT payload</span></a></h2>
<p>It turns out that you need to remove the <code>aud</code> field and replace it with
a <code>scope</code> field, akin to the one we would pass to the main OAuth token
endpoint.</p>
<p>In the case of Google Cloud Storage, our JWT payload would now look like
this:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;iss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SERVICE_ACCOUNT_EMAIL&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SERVICE_ACCOUNT_EMAIL&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.googleapis.com/auth/iam https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/devstorage.full_control&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1511900000</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;exp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1511903600</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>You can find the <a href="https://developers.google.com/identity/protocols/oauth2/scopes">full list of OAuth scopes</a>
in the Google Cloud OAuth 2.0 documentation.</p>
<p>It turns out the <code>scope</code> field is also accepted by Pub/Sub and other
services that were working fine with <code>aud</code>, so we can just make our
generic implementation use the <code>scope</code> field and be done with it. Sweet!</p>
<h2 id="bonus-how-did-i-find-out-about-that" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html#bonus-how-did-i-find-out-about-that"><span>Bonus: how did I find out about that?</span></a></h2>
<p>This is the story about <a href="https://stackoverflow.com/a/71834557">this answer</a>
I posted on the Stack Overflow question I linked earlier.</p>
<p>First, I dug in the <a href="https://github.com/googleapis/google-cloud-node">Google Cloud Node.js SDK</a>
to see how they implemented the service account authentication.</p>
<p>It turns out they do use the <a href="https://github.com/googleapis/google-auth-library-nodejs/blob/b48254490768799e465a8fa4aae13296ddceea53/src/auth/jwtclient.ts#L126">self-signed JWT method</a>,
in their shared auth library, but it‚Äôs conditional to a variable
<code>useJWTAccessWithScope</code> being set to <code>true</code> by the client SDK. For
example, this is <a href="https://github.com/googleapis/nodejs-pubsub/blob/ba333c2284b802cdd43df7568b553b2a90dba8d8/src/v1/publisher_client.ts#L139">where Pub/Sub sets it</a>,
and this is
<a href="https://github.com/googleapis/nodejs-storage/search?q=useJWTAccessWithScope">where GCS <strong>doesn‚Äôt</strong> set it</a>
(as of today).</p>
<p>But what if we force this variable to <code>true</code>?</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Storage</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@google-cloud/storage&#x27;</span>

<span class="hljs-keyword">const</span> storage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Storage</span>()

storage.<span class="hljs-property">authClient</span>.<span class="hljs-property">useJWTAccessWithScope</span> = <span class="hljs-literal">true</span>

<span class="hljs-keyword">const</span> file = <span class="hljs-keyword">await</span> storage.<span class="hljs-title function_">bucket</span>(<span class="hljs-string">&#x27;bucket&#x27;</span>).<span class="hljs-title function_">file</span>(<span class="hljs-string">&#x27;file&#x27;</span>).<span class="hljs-title function_">get</span>()
</code></pre>
<p>By running this script with <code>NODE_DEBUG=https</code>, we can see that without
the <code>useJWTAccessWithScope</code> line, the client makes a call to
<code>https://www.googleapis.com/oauth2/v4/token</code> first, then calls
<code>https://storage.googleapis.com/storage/v1/b/bucket/o/file</code>, but with
<code>useJWTAccessWithScope</code>, it skips the first token call (and everything
works still)!</p>
<p>We can also notice that the token from the OAuth token endpoint contains
hundreds of dots (<code>.</code>) at the end, whereas the self-signed token is just
the usual 3 parts Base64URL JWT. Not an useful information, but
interesting.</p>
<p>Either way, this proved that despite not working with the method in the
documentation, self-signed authentication was effectively supported by
Google Cloud Storage. So how did that SDK-generated token differ? The
easiest is to copy that token from our <code>NODE_DEBUG=https</code> output and
parse the payload segment:</p>
<pre><code class="hljs language-sh">pbpaste | <span class="hljs-built_in">cut</span> -d. -f2 | <span class="hljs-built_in">base64</span> --decode
</code></pre>
<p>Or in Node.js:</p>
<pre><code class="hljs language-js"><span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(token.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toString</span>()
</code></pre>
<p>There we see they use a <code>scope</code> parameter as opposed to <code>aud</code>.</p>
<p>We can track it down to the <a href="https://github.com/googleapis/google-auth-library-nodejs/blob/b48254490768799e465a8fa4aae13296ddceea53/src/auth/jwtclient.ts#L191">code of the authentication library</a>,
and we can also see where the Google Cloud Storage client
<a href="https://github.com/googleapis/nodejs-storage/blob/c3240060b3dc905013ab6fa219e975631b41f5c4/src/storage.ts#L653">defines the necessary OAuth scopes</a>.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/google-cloud-service-account-authorization-without-oauth.html#conclusion"><span>Conclusion</span></a></h2>
<p>With some investigation in the Google Cloud Node.js SDK source code and
some <code>NODE_DEBUG=https</code> debugging, we can dissect their implementation
of the self-signed service account authentication, and replicate it on
our side.</p>
<p>This enables us to use this simpler and superior mechanism that Google
uses internally, instead of the method that‚Äôs widely documented of
calling their OAuth endpoint.</p>
<p>I hope that you learnt something thanks to this article, and that it
helps you build great things! And as always, keep hacking! üöÄ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1523114655698554880">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>The disk wasn‚Äôt ejected because one or more programs may be using it</title>
    <link href="https://www.codejam.info/2022/05/macos-disk-not-ejected-programs-using-it.html" />
    <id>https://www.codejam.info/2022/05/macos-disk-not-ejected-programs-using-it.html</id>
    <updated>2022-05-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If you run macOS, you might have run in the following error message when
trying to eject a removable device:</p>
<figure class="center">
  <img alt="The disk wasn‚Äôt ejected because one or more programs may be using it" src="https://www.codejam.info/img/2022/05/macos-disk-eject.png">
</figure>
<p>In some cases, even waiting a few minutes doesn‚Äôt solve the problem.
Often, it happens after deleting files from the device just before
ejecting, and Quick Look is often the culprit. Let‚Äôs see.</p>
<p><em>Inspired by <a href="https://mycyberuniverse.com/macos/how-fix-volume-cant-be-ejected-because-currently-use-user.html">this post</a>
and <a href="https://mycyberuniverse.com/macos/how-fix-volume-cant-be-ejected-because-currently-use.html">this post</a>.</em></p>
<h2 id="investigating" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/macos-disk-not-ejected-programs-using-it.html#investigating"><span>Investigating</span></a></h2>
<p>To know what program is currently using the volume you‚Äôre trying to
eject, you can use the <a href="https://linux.die.net/man/8/lsof"><code>lsof(8)</code></a>
command. In my case the volume is <code>/Volumes/LUMIX</code>:</p>
<pre><code class="hljs language-console"> lsof +c0 /Volumes/LUMIX
COMMAND            PID USER   FD   TYPE DEVICE   SIZE/OFF   NODE NAME
QuickLookUIService 611  val    3r   REG   1,31 2970637594     51 /Volumes/LUMIX/.Trashes/501/P2770021.MP4
</code></pre>
<div class="note">
<p><strong>Note:</strong> the <code>+c0</code> option here is to display the full command string.
By default, it only shows 9 characters.</p>
</div>
<p>You can see that <code>QuickLookUIService</code> is still doing something with the
file <code>P2770021.MP4</code> that I deleted‚Ä¶ and it‚Äôs probably stuck and
confused because the file is not there anymore.</p>
<h2 id="killing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/macos-disk-not-ejected-programs-using-it.html#killing"><span>Killing</span></a></h2>
<p>To fix that, we can kill the <code>QuickLookUIService</code> process (or whatever
process was blocking in your case).</p>
<div class="note">
<p><strong>Note:</strong> in the case of <code>QuickLookUIService</code>, it‚Äôs safe to kill, but if
you‚Äôre dealing with a different program preventing you to eject your
drive, it‚Äôs up to your own judgment whether it‚Äôs a good idea or not to
kill it!</p>
</div>
<p>There‚Äôs essentially two methods we‚Äôll talk about: soft kill, which would
be<code>pkill QuickLookUIService</code> and hard kill, with <code>pkill -9 QuickLookUIService</code>.</p>
<p>In the case of this bug, it looks like we need to resort to hard kill,
as a soft kill doesn‚Äôt terminate the hanging process:</p>
<pre><code class="hljs language-sh">pkill -9 QuickLookUIService
</code></pre>
<p>Now you should be able to eject your device!</p>
<h2 id="restarting-quick-look" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/macos-disk-not-ejected-programs-using-it.html#restarting-quick-look"><span>Restarting Quick Look</span></a></h2>
<p>Quick Look is the macOS service responsible for computing file previews
for various UI components. After we killed it, it might or might not
restart by itself, so if you notice that new file previews and
thumbnails don‚Äôt appear anymore in your Finder, you can restart Quick
Look with the following command:</p>
<pre><code class="hljs language-sh">qlmanage -r
</code></pre>
<p>It won‚Äôt hurt to run it either way after killing the process and
ejecting the drive.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS faster switch between desktops and faster Dock</title>
    <link href="https://www.codejam.info/2022/05/macos-faster-desktops-dock.html" />
    <id>https://www.codejam.info/2022/05/macos-faster-desktops-dock.html</id>
    <updated>2022-05-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Quick tip for macOS! I‚Äôve always found the animation to switch between
desktops and spaces quite slow, when using <kbd>Ctrl</kbd> +
<kbd>Left</kbd> or <kbd>Right</kbd>, or using the 3 fingers swipe on a
trackpad.</p>
<p>Same thing when configuring the Dock to hide by default and only show
when the mouse is near it. There‚Äôs a slight delay that just drives me
nuts and caused me to keep the Dock visible at all times, wasting
precious vertical screen real estate! But luckily, I‚Äôve found solutions
for those two problems.</p>
<div class="note">
<p><strong>Note:</strong> initially I shared those on Twitter,
<a href="https://twitter.com/valeriangalliat/status/1519696597940158464">here</a>
for the Dock and
<a href="https://twitter.com/valeriangalliat/status/1519698499927158787">here</a>
for switching between desktops.</p>
</div>
<p>For the Dock, the delay can be removed with this command:</p>
<pre><code class="hljs language-sh">defaults write com.apple.dock autohide-delay -<span class="hljs-built_in">float</span> 0; killall Dock
</code></pre>
<p>And to switch faster between desktops, I found that macOS provides
Mission Control shortcuts to switch to a specific desktop directly. It‚Äôs
just not enabled by default, and you need to have multiple <em>active</em>
desktops in order for those shortcuts to be even shown in the
preferences!</p>
<p>For example with 3 active desktops, opening the keyboard shortcut
preferences, in the Mission Control section:</p>
<figure class="center">
  <img alt="macOS keyboard shortcuts" src="https://www.codejam.info/img/2022/05/macos-keyboard-shortcuts.png">
</figure>
<p>We see we can activate <kbd>Ctrl</kbd> and the number keys to directly
switch to a given desktop.</p>
<p>And it turns out the animation when using those shortcuts is noticeably
faster than <kbd>Ctrl</kbd> + <kbd>Left</kbd> and <kbd>Right</kbd>! And
on top of that instead of having to navigate through all the desktops
one by one, we can jump to the one we want directly, which makes the
flow even faster.</p>
<p>Sadly this doesn‚Äôt work with spaces (e.g. full screen windows), only
with desktops. Because of that, I switched from using iTerm2 and Visual
Studio Code in full screen, and I instead use them as a maximized window
in a new desktop. I lose a tiny bit of vertical space because of the top
bar, but I gained even more vertical space with the Dock trick earlier
that this is not a big deal!</p>
<p>I hope this tip was useful to you. ü•∞</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Firefox credit card autofill not working on Linux</title>
    <link href="https://www.codejam.info/2022/05/firefox-credit-card-autofill-not-working-on-linux.html" />
    <id>https://www.codejam.info/2022/05/firefox-credit-card-autofill-not-working-on-linux.html</id>
    <updated>2022-05-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Firefox 79 <a href="https://techdows.com/2020/07/firefox-autofiil-credit-card.html">introduced</a>
credit card autofill capability back in summer 2020. The feature is
limited to a few regions, starting with US, and now supporting US, CA,
UK, FR and DE.</p>
<p>Today, I‚Äôm using Firefox 101 in Canada, and I noticed this feature
wasn‚Äôt working on my Linux computer. In this post I‚Äôll show what the
problem was, how I debugged it and especially how I fixed it!</p>
<h2 id="symptoms" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/firefox-credit-card-autofill-not-working-on-linux.html#symptoms"><span>Symptoms</span></a></h2>
<p>I know I have a few credit cards saved in my Firefox Sync account, they
work perfectly on macOS and Android versions of Firefox, and Firefox was
configured to sync them. Yet, the ‚Äúsaved credit cards‚Äù window in the
privacy preferences pane was empty!</p>
<figure class="center">
  <img alt="Empty credit cards window" src="https://www.codejam.info/img/2022/05/firefox-saved-credit-cards.png">
</figure>
<p>Also if I clicked the <kbd>Add‚Ä¶</kbd> button and try to add a credit
card (e.g. <code>4111111111111111</code> for a Visa card to pass the validation for
testing), the <kbd>Save</kbd> button was completely unresponsive.</p>
<h2 id="debugging" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/firefox-credit-card-autofill-not-working-on-linux.html#debugging"><span>Debugging</span></a></h2>
<p>I opened the browser console from ‚Äúmore tools‚Äù in the application menu.
Every time I clicked <kbd>Save</kbd>, an error would pop: ‚ÄúUser canceled
OS unlock entry‚Äù.</p>
<pre><code class="hljs">[Exception... &quot;User canceled OS unlock entry&quot; nsresult: &quot;0x80004004 (NS_ERROR_ABORT)&quot; location: &quot;JS frame :: resource://gre/modules/OSKeyStore.jsm :: encrypt :: line 332&quot; data: no] OSKeyStore.jsm:332:24
</code></pre>
<p>Luckily this problem is already reported <a href="https://bugs.archlinux.org/task/74373">on the Arch Linux bug tracker</a>,
and the solution seems to be to install a software providing
<code>org.freedesktop.secrets</code>, which as of today is either <code>gnome-keyring</code>
or <code>keepassxc</code>.</p>
<p>I installed <code>gnome-keyring</code> and had to reboot for it to start
automatically (ain‚Äôt no time to figure how this thing work under the
hood for now). Yet the bug persisted, despite people on that thread
mentioning this solves the issue for them!</p>
<p>The ‚ÄúUser canceled OS unlock entry‚Äù exception is thrown
during the <a href="https://github.com/mozilla/gecko-dev/blob/bf243bc817f97b0bb74af710bd9d874370468e8b/toolkit/modules/OSKeyStore.jsm#L333"><code>OSKeyStore.encrypt</code></a>
call, because the <code>ensureLoggedIn</code> function determined we were not
authenticated. The underlying reason seemed to be the
<a href="https://github.com/mozilla/gecko-dev/blob/bf243bc817f97b0bb74af710bd9d874370468e8b/toolkit/modules/OSKeyStore.jsm#L254"><code>nativeOSKeyStore.asyncGenerateSecret</code></a>
call returning <code>NS_ERROR_FAILURE</code>.</p>
<p>More likely Firefox wasn‚Äôt able to generate a secret in GNOME Keyring.
So I installed <a href="https://en.wikipedia.org/wiki/Seahorse_(software)">Seahorse</a>
to test it myself, and indeed, I couldn‚Äôt store new secrets from there
either, it would fail with <code>No such secret collection at path: /</code>. This
bug is also <a href="https://wiki.archlinux.org/title/GNOME/Keyring#No_such_secret_collection_at_path:_/">documented</a>
on the ArchWiki, but sadly the solution there didn‚Äôt work for me.</p>
<h2 id="the-underlying-issue" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/firefox-credit-card-autofill-not-working-on-linux.html#the-underlying-issue"><span>The underlying issue</span></a></h2>
<p>I use LightDM autologin to automatically start my compositor on boot
(where I <a href="https://www.codejam.info/2021/08/lock-screen-as-login-screen-linux.html">greet myself with a lock screen</a>).
It turns out GNOME Keyring doesn‚Äôt play well with autologin. From the
<a href="https://wiki.archlinux.org/title/GNOME/Keyring#Using_the_keyring">ArchWiki</a>:</p>
<blockquote>
<p>To use automatic unlocking with automatic login, you can set a blank
password for the default keyring. Note that the contents of the
keyring are stored unencrypted in this case.</p>
</blockquote>
<p>That‚Äôs not ideal. And I already have a primary password configured in
Firefox so it would suck to set a second one on GNOME Keyring just for
Firefox to deal with credit cards differently‚Ä¶</p>
<p>In the end I decided to ditch my automatic login and go back to TTY
login and <a href="https://wiki.archlinux.org/title/Sway#Automatically_on_TTY_login">starting Sway automatically upon login on TTY1</a>.
This is the recommended way to start Sway anyway, and they officially
don‚Äôt support display managers, so that definitely can‚Äôt hurt.</p>
<p>All I had to do was to edit <code>/etc/pam.d/login</code> according to the ‚Äúwhen
using console-based login‚Äù instructions of the <a href="https://wiki.archlinux.org/title/GNOME/Keyring#PAM_step">PAM
step</a> in the
GNOME Keyring page on ArchWiki, appending the following:</p>
<pre><code class="hljs">auth       optional     pam_gnome_keyring.so
session    optional     pam_gnome_keyring.so auto_start
</code></pre>
<h2 id="the-keepassxc-alternative" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/firefox-credit-card-autofill-not-working-on-linux.html#the-keepassxc-alternative"><span>The KeePassXC alternative</span></a></h2>
<p>In the bug tracker there‚Äôs also <a href="https://bugs.archlinux.org/task/74373#comment207641">an answer</a>
describing how to fix this issue with KeePassXC:</p>
<blockquote>
<ol>
<li>KeePassXC needs to be running.</li>
<li>The secret service integration must be enabled in settings.</li>
<li>A database must be setup where at least one group is accessible to the secret service.</li>
</ol>
</blockquote>
<p>That‚Äôs a solid alternative, but then if I want secrets to be properly
secured, I need to add another password to that KeePassXC database, on
top of my encrypted filesystem password, login password and Firefox
primary password. That starts to be quite a lot of passwords‚Ä¶ so I‚Äôll
stick with GNOME Keyring for now because it‚Äôs able to reuse my login
password for that purpose.</p>
<h2 id="final-words" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/05/firefox-credit-card-autofill-not-working-on-linux.html#final-words"><span>Final words</span></a></h2>
<p>I now have a successful credit card sync and autofill in Firefox on
Linux! I hope this becomes a bit simpler in the future, but at least I
learnt a thing or two about the underlying implementation and the
technical challenges and tradeoffs it involves.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>graftcp: inspect any program‚Äôs HTTPS traffic through a proxy!</title>
    <link href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html" />
    <id>https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html</id>
    <updated>2022-04-30T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Recently, I <a href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#spying-on-the-spyware-and-monitoring-its-network-traffic">needed to sniff an app‚Äôs HTTPS traffic</a>.</p>
<p>While sniffing plaintext HTTP traffic is easy, by targeting the
transport layer with tools like <a href="https://linux.die.net/man/8/tcpdump"><code>tcpdump(8)</code></a>
or Wireshark, <em>HTTPS is another beast</em>.</p>
<p>Because of the TLS encryption, all we see at the transport layer is a
bunch of unusable encrypted data (and that‚Äôs the whole point of HTTPS).
So we need to resort to solutions at a higher layer in the stack.</p>
<p>My go-to for this kind of task is <a href="https://mitmproxy.org/">mitmproxy</a>,
an interactive HTTPS proxy, as well as its headless counterpart
<em>mitmdump</em>.</p>
<p>But those are only half of the solution. A proxy server is useless until
we route HTTPS traffic <em>through it</em>. And depending on the context, this
task can go from pretty trivial to quite tricky.</p>
<h2 id="common-ways-to-configure-a-proxy" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#common-ways-to-configure-a-proxy"><span>Common ways to configure a proxy</span></a></h2>
<p>There‚Äôs 3 main ways that you can use to configure a proxy:</p>
<ol>
<li>the OS level,</li>
<li>the application level,</li>
<li>the environment level.</li>
</ol>
<p>I already <a href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html">gave an introduction to mitmproxy</a>
last year on the blog, in which I explored <a href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#first-try-macos-network-proxy-settings">the OS level</a>
and <a href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#second-try-spotify-supports-app-level-proxy-settings">the app level</a>,
but I‚Äôll give a quick refresher here.</p>
<h3 id="the-os-level" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#the-os-level"><span>The OS level</span></a></h3>
<p>Your OS usually lets you configure a proxy in the networking settings.
For example on macOS it‚Äôs in the advanced network preferences, and on
Android it‚Äôs in the advanced Wi-Fi settings.</p>
<p>It‚Äôs a good way to globally configure a proxy, but there‚Äôs no guarantee
that apps are going to respect it. Typically, the default browser that
ships with the OS (e.g. Safari) will use it, and some third-party
browsers might too, but in general most other apps just ignore it. Not
so good.</p>
<h3 id="the-application-level" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#the-application-level"><span>The application level</span></a></h3>
<p>While most apps don‚Äôt respect OS-level proxy configuration, some can
provide you with a way to configure a proxy at their own level.</p>
<p>Typically this will be Firefox‚Äôs connection settings, with its very own
proxy configuration, Spotify‚Äôs advanced settings that <a href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#second-try-spotify-supports-app-level-proxy-settings">let you configure a proxy</a>,
or more recently I‚Äôve explored <a href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#the-proxy-hostname-argument">the <code>--proxy_hostname</code> argument</a>
to the <code>osqueryd</code> program.</p>
<p>But it‚Äôs up to the app‚Äôs developers to decide if they want or not to let
you configure a proxy, and how rigorously they use it‚Ä¶ (they might use
the proxy for some requests but not all of them).</p>
<h3 id="the-environment-level" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#the-environment-level"><span>The environment level</span></a></h3>
<p>Finally, there are two pretty commonly used environment variables
(although I believe not standard per se) to configure a proxy:
<code>http_proxy</code> and <code>https_proxy</code>. They respectively configure a proxy to
route HTTP and HTTPS traffic through.</p>
<p>For example the Python language <a href="https://github.com/python/cpython/blob/a03a09e068435f47d02649dda93988dc44ffaaf1/Lib/urllib/request.py#L2507">supports those</a>
in its native <code>urllib</code> package, and while Node.js <a href="https://github.com/nodejs/node/issues/8381">doesn‚Äôt</a>,
the popular <a href="https://github.com/axios/axios">axios</a> library
<a href="https://github.com/axios/axios/blob/bc733fec78326609e751187c9d453cee9bf1993a/lib/adapters/http.js#L186">also supports them</a>
out of the box.</p>
<p>So basically, it might or might not work depending on the implementation
of the software that you‚Äôre using, but it‚Äôs definitely worth trying!</p>
<h2 id="when-nothing-works-the-hacker-way" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#when-nothing-works-the-hacker-way"><span>When nothing works: the hacker way</span></a></h2>
<p>So far all we‚Äôve done is configuring a proxy in interfaces that
explicitly allow us to set a proxy. But sometimes this is just not
enough. That‚Äôs when we resort to ways to configure a proxy in places
that don‚Äôt explicitly let us do so. üòè</p>
<p>There‚Äôs two ways to do this. The most common one is to leverage
<code>LD_PRELOAD</code> with dynamically linked binaries to override symbols in a
library. This is the approach that <a href="https://linux.die.net/man/8/tsocks"><code>tsocks(1)</code></a>,
<a href="https://github.com/haad/proxychains">ProxyChains</a> and <a href="https://github.com/rofl0r/proxychains-ng">ProxyChains-NG</a>
use, hijacking the <a href="https://linux.die.net/man/2/connect"><code>connect(2)</code></a>
<a href="https://en.wikipedia.org/wiki/C_standard_library">libc</a> function to
route requests through the proxy of your choice.</p>
<p>This is a great method when using programs that are dynamically linked
against libc, but it will fail for statically liked programs, as well as
programs that don‚Äôt use libc (Go programs for example).</p>
<p>This is where <a href="https://github.com/hmgle/graftcp">graftcp</a> shines.
Instead of hooking at the libc level, it leverages
<a href="https://linux.die.net/man/2/ptrace"><code>ptrace(2)</code></a> to modify the
<a href="https://linux.die.net/man/3/connect"><code>connect(3)</code></a> syscall arguments!
Essentially, it‚Äôs acting at a lower level and that‚Äôs how it‚Äôs able to
proxy against statically liked programs that don‚Äôt use libc. Their
detailed <a href="https://github.com/hmgle/graftcp#principles">how does it work</a>
explanation is really worth a read.</p>
<h3 id="installation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#installation"><span>Installation</span></a></h3>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> https://github.com/hmgle/graftcp.git
<span class="hljs-built_in">cd</span> graftcp
make
</code></pre>
<h3 id="usage" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#usage"><span>Usage</span></a></h3>
<p>From there, you can use <code>local/graftcp-local</code> to start the graftcp
server, and configure it to use your proxy (for example mitmproxy
starts a HTTP proxy on port 8080 by default). Because graftcp also
defaults to a SOCKS5 proxy on <code>localhost:1080</code>, we need to force it to
use the HTTP proxy we configured by using <code>--select_proxy_mode only_http_proxy</code>:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">local</span>/graftcp-local --http_proxy localhost:8080 --select_proxy_mode only_http_proxy
</code></pre>
<p>We can do the same thing by ‚Äúemptying‚Äù the preconfigured SOCKS5 proxy:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">local</span>/graftcp-local --http_proxy localhost:8080 --socks5 <span class="hljs-string">&#x27;&#x27;</span>
</code></pre>
<p>Or we can instead run mitmproxy as a SOCKS5 proxy, here on port 1080
(the default for graftcp):</p>
<pre><code class="hljs language-sh">mitmproxy --mode socks5 -p 1080
</code></pre>
<p>Then we can run <code>local/graftcp-local</code> without arguments and it‚Äôll just
work.</p>
<p>Either way, once the proxy and <code>local/graftcp-local</code> program is started,
we can prefix any command with <code>./graftcp</code> to force it to run its
network calls through the proxy!</p>
<pre><code class="hljs language-sh">./graftcp curl https://www.codejam.info/
</code></pre>
<h3 id="dealing-with-certificates" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#dealing-with-certificates"><span>Dealing with certificates</span></a></h3>
<p>However, this should complain that the SSL certificate from mitmproxy is
untrusted. We can make it go through by appending <code>-k</code> (<code>--insecure</code>) to
the <code>curl</code> command:</p>
<pre><code class="hljs language-sh">./graftcp curl https://www.codejam.info/ --insecure
</code></pre>
<p>A better solution though would be to add the mitmproxy CA certificate
found in <code>~/.mitmproxy/mitmproxy-ca-cert.pem</code> to the system trusted
certificates. This will vary depending on your OS and distribution, but
in my case that would be done with:</p>
<pre><code class="hljs language-sh">sudo trust anchor ~/.mitmproxy/mitmproxy-ca-cert.pem
</code></pre>
<p>Then the <code>curl</code> command should work without <code>--insecure</code>!</p>
<h3 id="short-version" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#short-version"><span>Short version</span></a></h3>
<p>Finally, if you don‚Äôt want to bother running <code>local/graftcp-local</code> and
<code>./graftcp</code> separately, you can instead use <code>local/mgraftcp</code>. If you
still use the SOCKS5 proxy on port 1080:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">local</span>/mgraftcp curl https://www.codejam.info/
</code></pre>
<p>Or with a HTTP proxy on port 8080:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">local</span>/mgraftcp --http_proxy localhost:8080 --select_proxy_mode only_http_proxy curl https://www.codejam.info/
</code></pre>
<p>This is useful if you only want to use graftcp for a single command, or
don‚Äôt mind configure the proxy settings every single time. Otherwise the
graftcp server method with <code>local/graftcp-local</code> works better as you
only have to configure your proxy once and any call to <code>./graftcp</code> will
use it!</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html#conclusion"><span>Conclusion</span></a></h2>
<p>graftcp is a really powerful tool that allows you to redirect HTTPS
traffic through a proxy of your choice, even in situations where this
wouldn‚Äôt be allowed or planned for.</p>
<p>Because I love inspecting programs‚Äô network traffic to know how they
work, and it‚Äôs not always easy to get access to their requests logs,
graftcp is now a go-to of mine for this kind of task, as it‚Äôs proven to
work flawlessly and very reliably, even with statically linked binaries
and programs that don‚Äôt link against libc like it‚Äôs the case with Go!</p>
<p>I hope you learnt something with this post, and I wish you a happy
network sniffing. ü§ò</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1520528360182620160">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Install the Vanta agent on a M1 Mac without Rosetta (and more)</title>
    <link href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html" />
    <id>https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html</id>
    <updated>2022-04-30T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Did you recently get asked to install the Vanta agent on your M1 Mac and
got prompted to install Rosetta for it to run?</p>
<p>Do you like running a Rosetta-free system?</p>
<p>Then this post is for you.</p>
<p>Also if you also don‚Äôt like running (benevolent) spyware with <code>root</code>
permissions, and want to monitor what the spyware is precisely spying
about you, read on, I have a few other things for you. üòâ</p>
<h2 id="the-rosetta-thing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#the-rosetta-thing"><span>The Rosetta thing</span></a></h2>
<p>I wrote <a href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html">a more generic post</a>
about this, and I encourage you to read it if you want to learn about
all the technical details, but for the purpose of this Vanta-specific
article, I‚Äôll keep it short. The objective is to:</p>
<ol>
<li>Extract the <code>vanta.pkg</code> installer to access its contents.</li>
<li>Update the <code>Distribution</code> XML file to flag ARM support (removes the
Rosetta prompt).</li>
<li>Extract the <code>vanta-raw.pkg/Payload</code> archive and replace the x86-64
<code>osqueryd</code> binary by the universal binary from <a href="https://github.com/osquery/osquery/releases/tag/5.2.2">version 5.2.2</a>
(or greater).</li>
<li>Repackage the whole thing.</li>
</ol>
<p>Assuming you have <code>vanta.pkg</code> already downloaded (otherwise you can get
it from <a href="https://github.com/VantaInc/vanta-agent-scripts/blob/b4e421f11d51896d274ae5782884c90f6ba5ce27/install-macos.sh#L8%5D">here</a>),
run the following commands:</p>
<pre><code class="hljs language-sh"><span class="hljs-comment"># Create a directory to extract the package into</span>
<span class="hljs-built_in">mkdir</span> vanta
<span class="hljs-built_in">cd</span> vanta

<span class="hljs-comment"># Extract the package in the current directory</span>
xar -xf ../vanta.pkg

<span class="hljs-comment"># Go in the subpackage</span>
<span class="hljs-built_in">cd</span> vanta-raw.pkg

<span class="hljs-comment"># Create a directory to extract the payload into</span>
<span class="hljs-built_in">mkdir</span> PayloadOut
<span class="hljs-built_in">cd</span> PayloadOut

<span class="hljs-comment"># Extract the payload in the current directory</span>
cpio -i &lt; ../Payload

<span class="hljs-comment"># Stream the tar archive for `osqueryd` 5.2.2 (follow redirects) and extract it to the current directory</span>
curl --location <span class="hljs-string">&#x27;https://github.com/osquery/osquery/releases/download/5.2.2/osqueryd-macos-bare-5.2.2.tar.gz&#x27;</span> | tar xf -

<span class="hljs-comment"># We now have a `osqueryd` binary that we can move to the right location</span>
<span class="hljs-built_in">mv</span> osqueryd usr/local/vanta

<span class="hljs-comment"># Recreate the cpio archive</span>
find . | cpio -oz --owner 0:80 &gt; ../Payload

<span class="hljs-comment"># Go back to the parent directory and remove our temporary `PayloadOut` directory</span>
<span class="hljs-built_in">cd</span> ..
<span class="hljs-built_in">rm</span> -rf PayloadOut

<span class="hljs-comment"># Go back to the parent directory</span>
<span class="hljs-built_in">cd</span> ..

<span class="hljs-comment"># Flag ARM support in the `Distribution` file</span>
sed -i <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;s/&lt;allowed-os-versions&gt;/&lt;options hostArchitectures=&quot;arm64,x86_64&quot; \/&gt;\n    &lt;allowed-os-versions&gt;/&#x27;</span> Distribution

<span class="hljs-comment"># Alternative with GNU sed</span>
<span class="hljs-comment"># gsed -i &#x27;/&lt;installer-gui-script/a \    &lt;options hostArchitectures=&quot;arm64,x86_64&quot; /&gt;&#x27; Distribution</span>

<span class="hljs-comment"># Repackage the main installer</span>
xar --compression none -cf ../vanta-new.pkg .
</code></pre>
<p>This will give you a <code>vanta-new.pkg</code> installer that now has proper ARM
support and won‚Äôt prompt you to install Rosetta!</p>
<p>Again if you want to know precisely how this works, check out my
<a href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html">detailed article on the topic</a>.</p>
<p>But while having native M1 support is great, there‚Äôs still a few things
that concern me about this program.</p>
<p>For example, I didn‚Äôt actually run that installer on my machine because
it requires <code>root</code> permissions and I don‚Äôt want to run untrusted code as
<code>root</code>. I still tested the package in a macOS VM (which is <a href="https://www.codejam.info/2022/04/macos-docker-linux-wayland.html">surprisingly easy to do nowdays</a>)
to confirm that the script works end-to-end. But for a machine I care
about, how do we install and run that thing with only user privileges?</p>
<h2 id="installing-and-running-vanta-without-root-privilege" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#installing-and-running-vanta-without-root-privilege"><span>Installing and running Vanta without <code>root</code> privilege</span></a></h2>
<p>It‚Äôs unclear what the this program does concretely, but it
<a href="https://help.vanta.com/hc/en-us/articles/360060881051-Getting-Started-with-the-Vanta-Agent">claims</a>
to be read-only (‚Äúit will <strong>not</strong> change anything on your machine‚Äù),
despite their installer and other commands requesting <code>root</code> access
(this is fishy AF).</p>
<p>I don‚Äôt like running as <code>root</code> anything that wasn‚Äôt shipped by Apple
as part of the macOS base system, with the exception of some specific
open-source programs in very particular cases (e.g. some <code>nmap</code>
invocations and such), or programs like nginx that I trust to properly
drop privileges after starting and binding to a reserved port.</p>
<p>This is definitely not the case of this agent, and there‚Äôs no way this
thing is going to run as <code>root</code>.</p>
<p>So how do we run it without giving it superuser privileges? First, we
need to dissect the package a bit and install it manually.</p>
<p>In the <a href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#the-rosetta-thing">first part</a>, we already extracted the
installer as well as the <code>Payload</code> archive, in a <code>PayloadOut</code> directory.
We‚Äôll start from there, and go in the <code>PayloadOut</code> directory to manually
install everything we need.</p>
<p>First we‚Äôll copy <code>Library/LaunchDaemons/com.vanta.metalauncher.plist</code>
to <code>~/Library/LaunchAgents/com.vanta.metalauncher.plist</code>. Why? Launch
daemons are systematically run as <code>root</code> while launch agents are user
services. Their format is otherwise compatible so that makes things easy
for us.</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">cp</span> Library/LaunchDaemons/com.vanta.metalauncher.plist ~/Library/LaunchAgents
</code></pre>
<p>We also replace the error log path in that file to point to a location
where we actually have write permission:</p>
<pre><code class="hljs language-sh">sed -i <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;s,/var/log/vanta_stderr.log,/usr/local/vanta/log/vanta_stderr.log,&#x27;</span> ~/Library/LaunchAgents/com.vanta.metalauncher.plist
</code></pre>
<p>Then we can copy <code>etc/vanta.conf</code> and <code>usr/local/vanta</code> to <code>/etc/</code> and
<code>/usr/local</code> respectively.</p>
<pre><code class="hljs language-sh">sudo <span class="hljs-built_in">cp</span> etc/vanta.conf /etc
sudo <span class="hljs-built_in">cp</span> -r usr/local/vanta /usr/local
</code></pre>
<div class="note">
<p><strong>Note:</strong> OK I lied earlier, we do need <code>root</code> permission for this step.
But at no point in this section we‚Äôll run third-party code as <code>root</code>,
and that‚Äôs what I intended by ‚Äúwithout <code>root</code> privilege‚Äù.</p>
<p>Also, keep in mind that we need to copy the <code>vanta</code> directory to
<code>/usr/local</code> because that path is actually hardcoded everywhere in the
software binaries so we can‚Äôt easily run it from another location.</p>
</div>
<p>Vanta asserts that some binaries are owned by <code>root</code>, and refuses to run
otherwise. Once owned by <code>root</code> though, the program runs just fine
even from a user account.</p>
<pre><code class="hljs language-sh">sudo <span class="hljs-built_in">chown</span> root:admin /usr/local/vanta/launcher
sudo <span class="hljs-built_in">chown</span> root:admin /usr/local/vanta/osqueryd
</code></pre>
<p>Then, edit the <code>/etc/vanta.conf</code> file to set your agent key and email.</p>
<p>Finally we can start the service:</p>
<pre><code class="hljs language-sh">launchctl load -w ~/Library/LaunchAgents/com.vanta.metalauncher.plist
</code></pre>
<p>You can alternatively start the agent from any CLI instead of using
<a href="https://en.wikipedia.org/wiki/Launchd">launchd</a>:</p>
<pre><code class="hljs language-sh">/usr/local/vanta/metalauncher
</code></pre>
<div class="note">
<p><strong>Note:</strong> the agent needs to be started using an absolute path if you
want the <code>vanta-cli</code> and the Vanta app in the tray to report that the
agent is running. If you <code>cd /usr/local/vanta</code> and run <code>./metalauncher</code>,
those other tools will think it‚Äôs not running even though the agent is
actually running and reporting properly. üòÖ</p>
</div>
<p>And we‚Äôre up! The logs are happily reporting that everything is running
fine, and the menu bar app (if you chose to run it) also reports that
the agent is running.</p>
<div class="note">
<p><strong>Note:</strong> if you don‚Äôt want your menu bar to be ‚Äúpolluted‚Äù by the Vanta
icon, I think there‚Äôs a setting to hide it, or even better, just get rid
of <code>/usr/local/vanta/Vanta Agent.app</code> and you won‚Äôt see it ever again!</p>
<p>All that app seems to be really doing is <code>ps aux | grep /usr/local/vanta/metalauncher</code>
to check that the agent is running, so you can easily do that yourself
if you want.</p>
</div>
<blockquote>
<p>But Val, how do you know that the agent is working properly after you
installed it in such an esoteric way?</p>
</blockquote>
<p>Well, thanks to <a href="https://www.codejam.info/2022/04/macos-docker-linux-wayland.html">the VM</a> I mentioned
earlier, I could test that the network traffic of the agent installed
with the original x86-64 package is identical to that of my method
without <code>root</code>. üòÅ</p>
<blockquote>
<p>But Val, how do you see the network traffic of the app? It‚Äôs all HTTPS
and stuff.</p>
</blockquote>
<p>Well‚Ä¶</p>
<h2 id="spying-on-the-spyware-and-monitoring-its-network-traffic" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#spying-on-the-spyware-and-monitoring-its-network-traffic"><span>Spying on the spyware and monitoring its network traffic</span></a></h2>
<p>This agent is essentially a spyware that employees willingly install on
their work computer (or employers secretly install in some less ethical
cases) to spy on them with good intentions.</p>
<p>I‚Äôm more comfortable being spied on when I know precisely what is
captured and what is not. A salesperson can always say ‚Äúdon‚Äôt worry, we
respect your privacy‚Äù, but I tend to trust HTTPS traffic logs better. üòè</p>
<h3 id="ways-to-sniff-packets" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#ways-to-sniff-packets"><span>Ways to sniff packets</span></a></h3>
<p>There‚Äôs a multitude of ways to sniff network traffic from an app. If all
you care about is transport layer data (e.g. raw TCP or UDP traffic),
you can easily monitor it with tools like <a href="https://linux.die.net/man/8/tcpdump"><code>tcpdump(8)</code></a>
or Wireshark. But for encrypted HTTPS traffic, that won‚Äôt cut it (and
that‚Äôs the whole point of HTTPS).</p>
<p>When you have some control over the application you want to monitor, or
if it natively supports running through a proxy, a logging HTTPS proxy
like <a href="https://mitmproxy.org/">mitmproxy</a> is really useful. Some software
support communicating over a proxy through the pretty common
<code>http_proxy</code> and <code>https_proxy</code> environment variables. Others support
configuring a proxy via configuration files, UI, or command line
arguments. If this is your case, you‚Äôre in luck, and you can use those
means to make that program run its HTTPS traffic through mitmproxy!</p>
<p>Otherwise, you need to dig deeper and tools like
<a href="https://linux.die.net/man/8/tsocks"><code>tsocks(1)</code></a>,
<a href="https://github.com/haad/proxychains">ProxyChains</a>,
<a href="https://github.com/rofl0r/proxychains-ng">ProxyChains-NG</a> and
<a href="https://github.com/hmgle/graftcp">graftcp</a> (my personal favorite),
can really help. I wrote a <a href="https://www.codejam.info/2022/04/graftcp-inspect-https-traffic-proxy.html">dedicated article on the matter</a>
if you‚Äôre interested!</p>
<h3 id="the-proxy-hostname-argument" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#the-proxy-hostname-argument"><span>The <code>--proxy_hostname</code> argument</span></a></h3>
<p>In our case, it turns out that Vanta uses the open-source
<a href="https://github.com/osquery/osquery">osquery</a> program, which allows
defining a custom proxy (see <code>--proxy_hostname</code> on <a href="https://osquery.readthedocs.io/en/stable/deployment/remote/">this page</a>)!</p>
<p>So all we need to do is add our own <code>--proxy_hostname</code> to the <code>osqueryd</code>
arguments. While we don‚Äôt control the invocation of <code>osqueryd</code> (it‚Äôs in
the Vanta launcher binary), we can easily achieve this by wrapping the
<code>osqueryd</code> binary with a shell script:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">mv</span> osqueryd osqueryd-orig

<span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt; osqueryd
#!/bin/sh -e

exec /usr/local/vanta/osqueryd-orig --proxy_hostname=localhost:1337 &quot;$@&quot;
EOF</span>

<span class="hljs-built_in">chmod</span> +x osqueryd
</code></pre>
<p>With that shell script, we invoke the original <code>osqueryd</code> binary,
passing our custom <code>--proxy_hostname</code> option (here with a proxy running
on port 1337), and otherwise forwarding all other arguments.</p>
<h3 id="what-about-certificates" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#what-about-certificates"><span>What about certificates?</span></a></h3>
<p>In order to intercept HTTPS traffic, mitmproxy uses its own certificate,
that you can find in <code>~/.mitmproxy/mitmproxy-ca-cert.pem</code>. You can add
it to your system‚Äôs trusted certificates list, and as long as the
software you‚Äôre monitoring uses the system CA certificates list, you
should be good!</p>
<p>However Vanta pins their own certificate chain (using the
<code>--tls_server_certs</code> option), ignoring the certificates trusted at the
OS level.</p>
<p>The good news is that this pinned certificate is stored in
<code>/usr/local/vanta/cert.pem</code>, and we can just replace it with the
mitmproxy certificate!</p>
<pre><code class="hljs language-sh">sudo <span class="hljs-built_in">cat</span> ~/.mitmproxy/mitmproxy-ca-cert.pem &gt; /usr/local/vanta/cert.pem
</code></pre>
<p>After that, and restarting the service, we should be able to monitor the
traffic:</p>
<pre><code class="hljs language-sh">launchctl unload ~/Library/LaunchAgents/com.vanta.metalauncher.plist
launchctl load ~/Library/LaunchAgents/com.vanta.metalauncher.plist
</code></pre>
<h3 id="dump-with-mitmdump" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#dump-with-mitmdump"><span>Dump with mitmdump</span></a></h3>
<p>mitmproxy is great to interactively monitor the intercepted traffic, but
you don‚Äôt want to be watching that all the time. Instead, mitmdump can
be used to log the captured traffic to a file. Then you can parse that
file and query it the way you like.</p>
<pre><code class="hljs language-sh">mitmdump -w +/path/to/dump/file --listen-host 127.0.0.1 --listen-port 1337
</code></pre>
<p>Here, <code>-w</code> specifies the file we want to log to, and it‚Äôs prefixed by
<code>+</code> because we want to append to it instead of truncating it. The other
arguments are self-explanatory.</p>
<p>To start it as a launch agent the same way we start the Vanta agent, we
can add the following to <code>~/Library/LaunchAgents/mitmdump.plist</code>:</p>
<pre><code class="hljs language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">plist</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="hljs-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KeepAlive<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>mitmdump<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>ProgramArguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/path/to/mitmdump<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-w<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>+/path/to/dump/file<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>--listen-host<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>127.0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>--listen-port<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>1337<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>RunAtLoad<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span>
</code></pre>
<p>And enable it with:</p>
<pre><code class="hljs language-sh">launchctl load -w ~/Library/LaunchAgents/mitmdump.plist
</code></pre>
<h2 id="check-that-it-all-worked" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#check-that-it-all-worked"><span>Check that it all worked</span></a></h2>
<p>Finally, you can confirm that the agent is registered properly after all
those tweaks by checking the following link:</p>
<pre><code class="hljs">https://app.vanta.com/agent/info?uuid=YOUR-HARDWARE-UUID
</code></pre>
<p>Where <code>YOUR-HARDWARE-UUID</code> is your hardware UUID as it can be found in
<kbd>About This Mac</kbd>, <kbd>System Report‚Ä¶</kbd>, <kbd>Hardware
UUID</kbd>.</p>
<p>And that‚Äôs all for today! I hope you found on this page what is it you
were looking for, and that you learnt a thing or two along the way! Or
at least that you enjoyed reading through my adventures messing around
with this program. üòÇ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How to repackage a macOS .pkg installer for M1 support without Rosetta</title>
    <link href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html" />
    <id>https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html</id>
    <updated>2022-04-30T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>To start with, some basis that you might already know:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Apple_M1">Apple M1</a> is an
<a href="https://en.wikipedia.org/wiki/ARM_architecture_family">ARM</a>-based
CPU/GPU chip that ships with the latest Apple devices.</li>
<li><a href="https://en.wikipedia.org/wiki/Rosetta_(software)">Rosetta</a> is a
compatibility layer to translate <a href="https://en.wikipedia.org/wiki/X86-64">x86-64</a>
instructions to <a href="https://en.wikipedia.org/wiki/ARM_architecture_family">ARM</a>
instructions.</li>
</ul>
<p>Until recently, x86-64 was happily ruling the market (and still is by
orders of magnitude, let‚Äôs be honest), but since Apple dropped those
<strong>LIT</strong> üî• M1 chips that are basically killing the game in terms of
performance, things are changing.</p>
<p>This means that Mac software that was previously only targeting x86-64
now needs to ship <strong>universal</strong> binaries that support both x86-64 and
ARM if they want native performance.</p>
<p>But some vendors didn‚Äôt catch up yet, and in those cases, you‚Äôll need to
rely on Rosetta for the while being to run those programs.</p>
<p>That being said, there‚Äôs a thin chance that the program you install can
be repackaged in a way that can run natively, <em>without Rosetta</em>! In this
post we‚Äôll explore the Vanta agent, that claims it requires Rosetta, but
can easily be patched to run natively.</p>
<p>If you‚Äôre in luck, you might be able to apply this knowledge to other
macOS installers.</p>
<h2 id="the-case-of-the-vanta-agent" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#the-case-of-the-vanta-agent"><span>The case of the Vanta agent</span></a></h2>
<p>As part of a security policy, my employer requires me to install an
agent program on my work laptop. This program is provided by a company
called Vanta.</p>
<p>I won‚Äôt go in details about what is this program, but if you care, you
can checkout my <a href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html">detailed post on the topic</a>!</p>
<p>Anyways, they ship a <code>vanta.pkg</code> installer, that, when opened, claims to
be incompatible with the M1 architecture and requests to install
Rosetta. Not good.</p>
<h2 id="why-not-install-rosetta" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#why-not-install-rosetta"><span>Why not install Rosetta?</span></a></h2>
<p>I don‚Äôt like installing garbage on my computer, and when I‚Äôm required to
install garbage on my computer, I don‚Äôt like when on top of that the
garbage requires me to emulate another CPU architecture in order to run
it.</p>
<p>Also the challenge is fun, and a bit of software golfing here and there
is always enjoyable. I know it‚Äôs common practice to golf on production
code these days in the industry, but I personally prefer to keep it
contained and isolated. Golfing is a personal pleasure and, like
masturbating, you shouldn‚Äôt impose it on your colleagues.</p>
<h2 id="how-is-a-macos-installer-pkg-made" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#how-is-a-macos-installer-pkg-made"><span>How is a macOS installer (<code>.pkg</code>) made?</span></a></h2>
<p>Let‚Äôs ask <a href="https://linux.die.net/man/1/file"><code>file(1)</code></a> for some
information.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">file vanta.pkg</span>
vanta.pkg: xar archive compressed TOC: 4838, SHA-1 checksum
</code></pre>
<p>It looks like we‚Äôre looking at a wild archive format, mostly
used on Darwin: <a href="https://linux.die.net/man/1/xar"><code>xar(1)</code></a>.
Its arguments are pretty similar to <a href="https://linux.die.net/man/1/tar"><code>tar(1)</code></a>.</p>
<p>Let‚Äôs make a directory to extract the archive in:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> vanta</span>
<span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> vanta</span>
<span class="hljs-meta prompt_">$ </span><span class="language-bash">xar -xf ../vanta.pkg</span>
<span class="hljs-meta prompt_">
$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -lh</span>
total 8
-rw-r--r--  1 val  staff   1.1K 13 Apr 16:50 Distribution
drwx------  3 val  staff    96B 31 Dec  1969 Resources
drwx------  6 val  staff   192B 31 Dec  1969 vanta-raw.pkg
</code></pre>
<p>So we have a file, <code>Distribution</code> and two directories, <code>Resources</code> and
<code>vanta-raw.pkg</code>. Let‚Äôs investigate.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">file Distribution</span>
Distribution: XML 1.0 document text, ASCII text
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">vim Distribution</span>
</code></pre>
<p><code>Distribution</code> is a XML document, and when we look at it, we can see a
bunch of metadata for the macOS installer, where vendors can customize
background, logos, images and so on of the installer. In our case, it
also references the <code>vanta-raw.pkg</code> directory.</p>
<p>We‚Äôll see <a href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#preventing-the-rosetta-prompt">later</a> that‚Äôs also where we
can specify whether or not the package supports universal binaries!</p>
<p>But first, let‚Äôs inspect that <code>vanta-raw.pkg</code>.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> vanta-raw.pkg</span>
<span class="hljs-meta prompt_">
$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -lh</span>
total 75880
-rw-r--r--  1 val  staff    42K  4 Jan 16:32 Bom
-rw-r--r--  1 val  staff   920B 13 Apr 16:50 PackageInfo
-rw-r--r--  1 val  staff    36M  4 Jan 16:32 Payload
-rw-r--r--  1 val  staff   1.2K  4 Jan 16:32 Scripts
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">file *</span>
Bom:         Mac OS X bill of materials (BOM) file
PackageInfo: XML 1.0 document text, ASCII text
Payload:     gzip compressed data, from Unix, original size modulo 2^32 104344576
Scripts:     gzip compressed data, from Unix, original size modulo 2^32 3072
</code></pre>
<p>So, another XML, two gzipped files, and a BOM file that we won‚Äôt care
about in the scope of this article.</p>
<p>The XML specifies ‚Äúbundles‚Äù as well as <code>preinstall</code> and <code>postinstall</code>
scripts. Nothing really interesting in there.</p>
<p>Let‚Äôs look at the gzipped data. This doesn‚Äôt tell us anything other than
the fact that it‚Äôs compressed with gzip‚Ä¶ but let‚Äôs ask <code>file</code> for its
opinion on the decompressed data.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gunzip &lt; Payload | file -</span>
/dev/stdin: ASCII cpio archive (pre-SVR4 or odc)
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">gunzip &lt; Scripts | file -</span>
/dev/stdin: ASCII cpio archive (pre-SVR4 or odc)
</code></pre>
<p>Another archive format? And another obscure (at least to me) one on top
of that? Alright.</p>
<p>According to <a href="https://linux.die.net/man/1/cpio"><code>cpio(1)</code></a>, we‚Äôll use
<code>cpio -i</code> to extract it (it knows to handle gzipped data so we don‚Äôt
need to uncompress it first).</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> PayloadOut</span>
<span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> PayloadOut</span>
<span class="hljs-meta prompt_">$ </span><span class="language-bash">cpio -i &lt; ../Payload</span>
203798 blocks
<span class="hljs-meta prompt_">
$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -lh</span>
total 0
drwxr-xr-x  3 val  staff    96B 13 Apr 18:40 Library
drwxr-xr-x  3 val  staff    96B 13 Apr 18:40 etc
drwxr-xr-x  3 val  staff    96B 13 Apr 18:40 usr
</code></pre>
<p>Looks like this is the tree of files to be copied to the target system
during the installation. We can do the same thing with <code>Scripts</code>:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> ScriptsOut</span>
<span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ScriptsOut</span>
<span class="hljs-meta prompt_">$ </span><span class="language-bash">cpio -i &lt; ../Scripts</span>
6 blocks
<span class="hljs-meta prompt_">
$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -lh</span>
total 16
-rwxr-xr-x  1 val  staff   1.7K 13 Apr 18:40 postinstall
-rwxr-xr-x  1 val  staff   890B 13 Apr 18:40 preinstall
</code></pre>
<p>Those are two shell scripts that the installer runs respectively before
and after the installation.</p>
<p>We don‚Äôt need to mess with those in the scope of this article, but in
general, I like to read those scripts prior to running any macOS <code>.pkg</code>
installer to get an idea of what it‚Äôs going to do to my system.</p>
<h2 id="finding-the-non-arm-binaries" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#finding-the-non-arm-binaries"><span>Finding the non-ARM binaries</span></a></h2>
<p>Let‚Äôs go back to the extracted <code>Payload</code> and find all the executables in
there to see which ones are not ARM-compatible.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">find . <span class="hljs-built_in">type</span> f -perm +111 | xargs file</span>
./usr/local/vanta/launcher:          Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64
- Mach-O 64-bit executable x86_64] [arm64]
./usr/local/vanta/launcher (for architecture x86_64):	Mach-O 64-bit executable x86_64
./usr/local/vanta/launcher (for architecture arm64):	Mach-O 64-bit executable arm64
./usr/local/vanta/osquery-vanta.ext: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64
- Mach-O 64-bit executable x86_64] [arm64]
./usr/local/vanta/osquery-vanta.ext (for architecture x86_64):	Mach-O 64-bit executable x86_64
./usr/local/vanta/osquery-vanta.ext (for architecture arm64):	Mach-O 64-bit executable arm64
./usr/local/vanta/autoupdater:       Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64
- Mach-O 64-bit executable x86_64] [arm64]
./usr/local/vanta/autoupdater (for architecture x86_64):	Mach-O 64-bit executable x86_64
./usr/local/vanta/autoupdater (for architecture arm64):	Mach-O 64-bit executable arm64
./usr/local/vanta/vanta-cli:         Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64
- Mach-O 64-bit executable x86_64] [arm64]
./usr/local/vanta/vanta-cli (for architecture x86_64):	Mach-O 64-bit executable x86_64
./usr/local/vanta/vanta-cli (for architecture arm64):	Mach-O 64-bit executable arm64
./usr/local/vanta/metalauncher:      Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64
- Mach-O 64-bit executable x86_64] [arm64]
./usr/local/vanta/metalauncher (for architecture x86_64):	Mach-O 64-bit executable x86_64
./usr/local/vanta/metalauncher (for architecture arm64):	Mach-O 64-bit executable arm64
./usr/local/vanta/osqueryd:          Mach-O 64-bit executable x86_64
</code></pre>
<div class="note">
<p><strong>Note:</strong> in GNU <code>find</code>, this would be <code>find . -type f -executable</code> but
BSD <code>find</code> doesn‚Äôt support <code>-executable</code>. Instead we can pass <code>-perm</code>
with an expression for matching the permission bits, where <code>+</code> means
we‚Äôre passing a bitmask where at least one of the bits must match, and
<code>111</code> is the bitmask to match executable permissions (for owner, group
and others).</p>
<p>See <a href="https://stackoverflow.com/a/4458361">this thread</a> for details.</p>
</div>
<p>By scanning this output we see that <code>usr/local/vanta/osqueryd</code> isn‚Äôt
compatible with ARM. We can sort through this output to confirm we
didn‚Äôt miss anything (by printing only the files where <code>file(1)</code> didn‚Äôt
give the string <code>universal</code>):</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> $(find . -<span class="hljs-built_in">type</span> f -perm +111 | grep -v <span class="hljs-string">&#x27;\.app&#x27;</span>); <span class="hljs-keyword">do</span> file <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> | grep -q universal || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>; <span class="hljs-keyword">done</span></span>
./usr/local/vanta/osqueryd
</code></pre>
<p>So we identified our culprit.</p>
<p>If this binary wasn‚Äôt essential to the program (or what we specifically
want to do with it), we could just ignore it and jump to the <a href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#preventing-the-rosetta-prompt">last step</a>
to prevent the installer from prompting to install Rosetta.</p>
<h2 id="replacing-the-binary" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#replacing-the-binary"><span>Replacing the binary</span></a></h2>
<p>Because in our case it‚Äôs actually an essential binary, we need to
replace it with an ARM-compatible version. This is not always going to
be possible, in which case you might have to resort to Rosetta (or
deciding to not install this package after all).</p>
<p>For this specific program, we‚Äôre in luck because
<a href="https://github.com/osquery/osquery">osquery</a> is actually an
open source program!</p>
<p>This means that even if they don‚Äôt provide an ARM version, hopefully
with little work we can compile from source for ARM and use that for our
package.</p>
<p>But for us it‚Äôs even better, because they released <a href="https://github.com/osquery/osquery/releases/tag/5.2.2">version 5.2.2</a>
a few months ago with Apple silicon support. Dope!</p>
<p>So we can just fetch <a href="https://github.com/osquery/osquery/releases/download/5.2.2/osqueryd-macos-bare-5.2.2.tar.gz">the <code>osqueryd</code> binary from this release</a>
and replace the one from the original Vanta package.</p>
<p>In my case I <a href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#installing-and-running-vanta-without-root-privilege">did a few</a>
<a href="https://www.codejam.info/2022/04/vanta-agent-m1-mac-without-rosetta.html#spying-on-the-spyware-and-monitoring-its-network-traffic">other tweaks</a>
because I didn‚Äôt want to give this program <code>root</code> privileges and I also
wanted to monitor its HTTPS traffic, but that‚Äôs off-topic for this
article.</p>
<h2 id="preventing-the-rosetta-prompt" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#preventing-the-rosetta-prompt"><span>Preventing the Rosetta prompt</span></a></h2>
<p>Or in other words, marking the package as ARM-compatible.</p>
<p>If we were to <a href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#repackaging-the-installer">repackage the installer</a>
right now, even though all the binaries in the payload are
ARM-compatible, we would still be greeted by a prompt to install Rosetta
when running it!</p>
<p>We can find the solution as part of <a href="https://stackoverflow.com/a/11487658">this answer</a>
(the ‚ÄúApple silicon‚Äù part). By adding the following line in the
<code>Distribution</code> XML file inside our package, we claim that the installer
supports ARM64 natively and hence doesn‚Äôt need Rosetta:</p>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">options</span> <span class="hljs-attr">hostArchitectures</span>=<span class="hljs-string">&quot;arm64,x86_64&quot;</span> /&gt;</span>
</code></pre>
<p>It can be added anywhere inside the <code>installer-gui-script</code> node.</p>
<h2 id="repackaging-the-installer" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#repackaging-the-installer"><span>Repackaging the installer</span></a></h2>
<p>Now we made sure all the binaries we needed are compatible with ARM,
and the <code>Distribution</code> file reflects that, we‚Äôre ready to repackage the
installer!</p>
<p>This is done in two steps.</p>
<ol>
<li>Recreate the <code>Payload</code> cpio archive from our updated content.</li>
<li>Recreate the <code>.pkg</code> archive containing the whole structure.</li>
</ol>
<p>All the necessary instructions are in <a href="https://stackoverflow.com/questions/11298855/how-to-unpack-and-pack-pkg-file">this thread</a>
but I‚Äôll detail the specific ones I used below.</p>
<h3 id="the-payload" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#the-payload"><span>The payload</span></a></h3>
<p>For the <code>Payload</code>, that we extracted and updated in a temporary
<code>PayloadOut</code> directory next to it, we‚Äôll run the following command from
the <code>PayloadOut</code> directory:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">find . | cpio -oz --owner 0:80 &gt; ../Payload</span>
203798 blocks
</code></pre>
<p>Here, <code>cpio -o</code> archives the file list from <code>stdin</code> and outputs the
archive in <code>stdout</code>. <code>-z</code> was added for built-in gzip compression (could
also be achieved by piping the output to <code>gzip -c</code>). <code>--owner 0:80</code> is
used to archive the files with <code>root:admin</code> ownership (instead of my own
user and group), which was necessary for this particular program.</p>
<div class="note">
<p><strong>Note:</strong> there‚Äôs also a <code>Bom</code> file next to our <code>Payload</code> and <code>Scripts</code>
archives, which is effectively a BOM (bill of materials), containing a
bunch of information about the files in the package.</p>
<p>In my experience I didn‚Äôt need to touch this file despite some of the
contents of the package changing, but your mileage may vary, in which
case you might want to regenerate the BOM from our extracted
<code>PayloadOut</code> directory by running <code>mkbom PayloadOut Bom</code>.</p>
</div>
<h3 id="the-package" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#the-package"><span>The package</span></a></h3>
<p>Before repackaging don‚Äôt forget to remove our temporary <code>PayloadOut</code> and
<code>ScriptsOut</code> directories.</p>
<p>Then, from the root of the extracted package, we can run the following
command to create a new package:</p>
<pre><code class="hljs language-sh">xar --compression none -cf ../vanta-new.pkg .
</code></pre>
<p>The <code>--compression none</code> part turned out to be important because if the
XAR archive is compressed, we encounter the following error during the
installation:</p>
<pre><code class="hljs">Error Domain=BOMCopierFatalError Code=1 &quot;cpio read error: bad file format&quot;
</code></pre>
<p>This error is kinda misleading because it points to the cpio archive
while the issue really is with the top-level XAR archive.</p>
<p>It‚Äôs even more confusing because the macOS installer was able to extract
the XAR archive to read the metadata from it (and can happily show files
of the nested <code>Payload</code> archive), yet somehow fails to proceed with
the rest of the installation because the archive it‚Äôs already reading
from is compressed?</p>
<p>I‚Äôm not gonna try to understand why that is, but just know that
<code>--compression none</code> is necessary for this to work!</p>
<h2 id="what-about-the-package-signature" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#what-about-the-package-signature"><span>What about the package signature?</span></a></h2>
<p>You might have noticed that we didn‚Äôt sign that newly created package.</p>
<p>It turns out that this is fine. Sure, we‚Äôre now lacking the lock icon on
the top right corner of the installer, but for our own usage, this isn‚Äôt
a big deal. It doesn‚Äôt prevent the installation from completing
whatsoever.</p>
<p>So how come we get a security warning when we try to run an unsigned
installer downloaded from the internet? That‚Äôs because Apple flags
downloaded files as quarantined. You can see it by running e.g. <code>xattr vanta.pkg</code> and seeing it includes <code>com.apple.quarantine</code>.</p>
<p>When opening a quarantined installer, macOS will check for a valid
signature and print a security warning otherwise.</p>
<p>But the archive we just created on our own is not quarantined, because
we didn‚Äôt download it, so macOS is happy to let us run it without
signature, which is pretty useful here.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/repackage-macos-app-m1-support-without-rosetta.html#conclusion"><span>Conclusion</span></a></h2>
<p>Was it worth going through all that trouble to keep running my software
as natively as possible? Definitely not.</p>
<p>Did I learn a lot about macOS installers in the process, and how they
handle universal binaries? Hell yeah.</p>
<p>So in the end, I‚Äôm happy I dug through this, and if you ended up on this
article somehow, I hope this was useful to you too!</p>
<p>Wishing you a happy Rosetta-free Mac!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1520527092219355138">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Run macOS inside Docker on Linux, with Wayland</title>
    <link href="https://www.codejam.info/2022/04/macos-docker-linux-wayland.html" />
    <id>https://www.codejam.info/2022/04/macos-docker-linux-wayland.html</id>
    <updated>2022-04-13T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This is gonna be a short one. There‚Äôs this fucking fantastic software
called <a href="https://github.com/sickcodes/Docker-OSX">Docker-OSX</a> that
lets you run a macOS VM on Linux out of the box, just like that. ‚ú®</p>
<p>Running macOS on a non-Apple hardware is already
<a href="https://www.codejam.info/2019/03/macos-high-sierra-msi-h110m-pro-d-skylake-nvidia-pascal.html">not a</a>
<a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html">trivial task</a>,
even though <a href="https://github.com/acidanthera/OpenCorePkg">OpenCore</a> and
the (also fucking fantastic) <a href="https://dortania.github.io/OpenCore-Install-Guide/">Dortania guide</a>
help greatly. Let alone running it inside a VM.</p>
<p>Docker-OSX is based on <a href="https://github.com/kholia/osx-kvm">OSX-KVM</a> as
well as <a href="https://github.com/thenickdude/KVM-Opencore/">KVM-OpenCore</a>,
and provides a Docker container that‚Äôs preconfigured to run the macOS
installer of your choice inside a KVM virtual machine that‚Äôs already
set up to support macOS.</p>
<p>With some Docker volume mounts magic, it can show the KVM window
directly on your X11 display, despite you not installing KVM on your
main system and configuring anything. Sweet.</p>
<p>The commands to run various macOS versions are directly <a href="https://github.com/sickcodes/Docker-OSX#quick-start-docker-osx">in the readme</a>
and work out of the box! Example for Monterey:</p>
<pre><code class="hljs language-sh">docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span class="hljs-string">&quot;DISPLAY=<span class="hljs-variable">${DISPLAY:-:0.0}</span>&quot;</span> \
    -e GENERATE_UNIQUE=<span class="hljs-literal">true</span> \
    -e MASTER_PLIST_URL=<span class="hljs-string">&#x27;https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist&#x27;</span> \
    sickcodes/docker-osx:monterey
</code></pre>
<h2 id="making-it-work-on-wayland" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/macos-docker-linux-wayland.html#making-it-work-on-wayland"><span>Making it work on Wayland</span></a></h2>
<p>I recently <a href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html">moved to Wayland</a>,
so setting <code>DISPLAY=:0.0</code> and mount binding <code>/tmp/.X11-unix</code> is not
gonna do much. üò¨</p>
<p>At the time of writing, there‚Äôs no official instructions in the readme
to run with Wayland, but the task turned out to be fairly easy!</p>
<p>Luckily I‚Äôm not the first one to try to do that, and there‚Äôs already two
<a href="https://github.com/sickcodes/Docker-OSX/issues/410">open</a>
<a href="https://github.com/sickcodes/Docker-OSX/issues/419">issues</a> on the
topic! The second one in particular contains a
<a href="https://github.com/sickcodes/Docker-OSX/issues/419#issuecomment-1011401905">solution</a>,
essentially replacing the X11-specific volume and environment variable
by Wayland equivalents (which I would definitely not have guessed easily üòÇ).</p>
<p>Once adapted for Monterey, the command is the following:</p>
<pre><code class="hljs language-sh">docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e XDG_RUNTIME_DIR=/tmp \
    -e WAYLAND_DISPLAY=<span class="hljs-variable">$WAYLAND_DISPLAY</span> \
    -v <span class="hljs-variable">$XDG_RUNTIME_DIR</span>/<span class="hljs-variable">$WAYLAND_DISPLAY</span>:/tmp/<span class="hljs-variable">$WAYLAND_DISPLAY</span>  \
    -e GENERATE_UNIQUE=<span class="hljs-literal">true</span> \
    -e MASTER_PLIST_URL=<span class="hljs-string">&#x27;https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist&#x27;</span> \
    sickcodes/docker-osx:monterey
</code></pre>
<p>The original comment specified a number of extra environment variables
but they didn‚Äôt appear to be needed for me.</p>
<p>And that‚Äôs it! Happy hacking on macOS in a VM! üéâ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1514368088531247108">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Make floats and lists collaborate üôà</title>
    <link href="https://www.codejam.info/2022/04/make-floats-and-lists-collaborate.html" />
    <id>https://www.codejam.info/2022/04/make-floats-and-lists-collaborate.html</id>
    <updated>2022-04-11T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Am I the only one struggling to get lists and other styled elements to
render properly next to a float?</p>
<p>At least, it definitely doesn‚Äôt work well out of the box. Let‚Äôs start
from a generic browser style sheet context (a HTML file without any CSS
added), or <a href="https://necolas.github.io/normalize.css/">Normalize.css</a>.</p>
<h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/make-floats-and-lists-collaborate.html#the-problem"><span>The problem</span></a></h2>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.square</span> {
    <span class="hljs-attribute">float</span>: left;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">6em</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">6em</span>;
    <span class="hljs-attribute">background</span>: <span class="hljs-number">0366</span>d6;
}
</code></pre>
<iframe src="https://www.codejam.info/img/2022/04/float-demo/example-0.html" width="100%"></iframe>
<p>This is not great. The left padding of the <code>&lt;ul&gt;</code> overlaps with the
square, and so does the bullet point.</p>
<p>The only way I‚Äôm aware of to fix this in a normal document flow (e.g.
not doing a very custom thing with Flexbox or grids) is to set
<code>overflow: hidden</code> to the <code>&lt;ul&gt;</code> (or on a parent block that‚Äôs also being
pushed by the float):</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">ul</span> {
    <span class="hljs-attribute">overflow</span>: hidden;
}
</code></pre>
<iframe src="https://www.codejam.info/img/2022/04/float-demo/example-1.html" width="100%"></iframe>
<p>Better. Let‚Äôs add a paragraph <em>before</em> the square and <em>after</em> the <code>&lt;ul&gt;</code>
and see what happens.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
</code></pre>
<iframe src="https://www.codejam.info/img/2022/04/float-demo/example-2.html" width="100%"></iframe>
<p>So far so good.</p>
<h2 id="breaking-it-again" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/make-floats-and-lists-collaborate.html#breaking-it-again"><span>Breaking it again</span></a></h2>
<p>Now let‚Äôs assume we have paragraphs <em>inside</em> our list items (yes, this
happens). You also get a similar problem with <code>&lt;blockquote&gt;</code>s or any
other element where you might want to have a left border and padding,
and that contains paragraphs or anything with a vertical margin.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello from a paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
</code></pre>
<iframe src="https://www.codejam.info/img/2022/04/float-demo/example-3.html" width="100%"></iframe>
<p>Subtle yet important thing to notice: the vertical margin from the
list paragraph now don‚Äôt merge with the adjacent margins because of our
<code>overflow: hidden</code> hack! So we have double the margin before and after
the list. Not good.</p>
<p>But what is this behavior in the first place? Meet <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing">margin collapsing</a>.
This concept is is very well defined by <a href="https://css-tricks.com/what-you-should-know-about-collapsing-margins/">CSS-Tricks</a>:</p>
<blockquote>
<p>Collapsing margins happen when two vertical margins come in contact
with one another. If one margin is greater than the other, then that
margin overrides the other, leaving one margin.</p>
</blockquote>
<p>So by using <code>overflow: hidden</code>, we break margin collapsing.</p>
<h2 id="avoiding-collapsing-altogether" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/make-floats-and-lists-collaborate.html#avoiding-collapsing-altogether"><span>Avoiding collapsing altogether</span></a></h2>
<p>It‚Äôs quite common to use something like <code>margin-top: 0</code> and
<code>margin-bottom: 1em</code> on all content elements (or the other way
around) to avoid relying on (and dealing with) margin collapsing.</p>
<p><a href="https://twitter.com/valeriangalliat/status/1512869222111756292">I ran a poll on Twitter</a>
that got 74 answers. A majority of y‚Äôall use this technique to avoid
margin collapsing!</p>
<table>
  <tr>
    <td><code>p { margin: 1em 0; }</code>
    <td>37.8%</td>
  </tr>
  <tr>
    <td><code>p { margin-bottom: 1em; }</code>
    <td>62.2%</td>
  </tr>
</table>
<p>We can try this and see if it helps with our problem.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">ul</span> {
    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;
}
</code></pre>
<iframe src="https://www.codejam.info/img/2022/04/float-demo/example-4.html" width="100%"></iframe>
<p>It‚Äôs better. We don‚Äôt have double the spacing anymore above the <code>&lt;ul&gt;</code>,
but we still have the problem with the <code>margin-bottom</code> of the <code>&lt;ul&gt;</code> not
collapsing with its inner paragraph.</p>
<p>What we can do though is to set <code>overflow: hidden</code> on a wrapper element
instead of the <code>&lt;ul&gt;</code> directly, then this should let the inner paragraph
collapse with it‚Äôs parent <code>&lt;ul&gt;</code>'s <code>margin-bottom</code>:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;float-hack&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello from a paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.float-hack</span> {
    <span class="hljs-attribute">overflow</span>: hidden;
}
</code></pre>
<iframe src="https://www.codejam.info/img/2022/04/float-demo/example-5.html" width="100%"></iframe>
<p>Sweet, that works like a charm!</p>
<p>That being said, it works especially well because we decided to kill the
<code>margin-top</code> of content elements, but if you want to remove the
<code>margin-bottom</code> instead and keep the <code>margin-top</code>, it‚Äôs a different
story:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">ul</span> {
    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;
}
</code></pre>
<iframe src="https://www.codejam.info/img/2022/04/float-demo/example-6.html" width="100%"></iframe>
<p>So keep that in mind of you want to drop margin collapsing, the margin
you kill has an importance!</p>
<h2 id="a-solution-to-keep-collapsing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/make-floats-and-lists-collaborate.html#a-solution-to-keep-collapsing"><span>A solution to keep collapsing?</span></a></h2>
<p>The simplicity of the previous solution pretty much convinced me to use
this pattern on my blog. But for some reason you might want to keep
relying on margin collapsing and still need to fix this spacing issues
with floats. Let‚Äôs find a way.</p>
<p>Since we need to combat the fact that <code>overflow: hidden</code> prevents our
vertical margins from collapsing, an option is to set <code>margin-top: 0</code>
<strong>recursively</strong> on all the first children of the <code>overflow: hidden</code> element,
and <code>margin-bottom: 0</code> on all the last children.</p>
<p>Why <em>recursively</em>? Because any element in the tree of direct first
children could set a <code>margin-top</code> that we want to cancel (and similarly
for <code>margin-bottom</code> and the last children tree).</p>
<p>But <a href="https://stackoverflow.com/questions/12477272/select-recursive-last-child-possible">we can‚Äôt recursively target all the first or last children of an element</a>!</p>
<p>So a solution would be to write something like this (relying on the
<code>float-hack</code> class we introduced earlier:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.float-hack</span> {
    <span class="hljs-attribute">overflow</span>: hidden;
}

<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:first</span>-child,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child &gt; <span class="hljs-selector-pseudo">:first</span>-child {
    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;
}

<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:last-child</span>,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span>,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span>,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span>,
<span class="hljs-selector-class">.float-hack</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> &gt; <span class="hljs-selector-pseudo">:last-child</span> {
    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;
}
</code></pre>
<p>This should be good enough for most simple cases. You can even have a
paragraph inside a <code>&lt;blockquote&gt;</code>, itself inside a list item!</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;float-hack&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a quote<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p>Or a nested list, which reach the same level of nesting:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;float-hack&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Nested list item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p>Maybe don‚Äôt add a <code>&lt;blockquote&gt;</code> with paragraphs inside this nested list
item or you might want to add a few recursion levels to our earlier CSS
rule. üòÇ</p>
<div class="note">
<p><strong>Note:</strong> this isn‚Äôt a complete fix as it won‚Äôt behave properly if the
collapsing margins are not equal.</p>
<p>The engine normally keeps the greater margin, but here we‚Äôll always nuke
the margin of the first and last items of our <code>float-hack</code> element.</p>
</div>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/make-floats-and-lists-collaborate.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>And there you go! Two solutions for the price of one:</p>
<ol>
<li>Prevent margin collapsing altogether by only applying a
<code>margin-bottom</code> and setting <code>margin-top: 0</code> on all content elements.</li>
<li>Recursively target the first and last children of the <code>overflow: hidden</code>
element to cancel their margin.</li>
</ol>
<p>Which one is your favorite?</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1513692138776801287">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How can rsync work on a host without shell access? ü§î</title>
    <link href="https://www.codejam.info/2022/04/rsync-without-shell-access.html" />
    <id>https://www.codejam.info/2022/04/rsync-without-shell-access.html</id>
    <updated>2022-04-09T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="tldr" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#tldr"><span>TLDR</span></a></h2>
<p>It does not. But sometimes, hosting providers use a trick so that you
don‚Äôt have shell access but rsync thinks it does‚Ä¶</p>
<h2 id="the-case-of-a-file-hosting-provider" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#the-case-of-a-file-hosting-provider"><span>The case of a file hosting provider</span></a></h2>
<p>I use a <a href="https://www.hetzner.com/storage/storage-box?country=us">Hetzner storage box</a>
for my backups. They have a super competitive offer that can get you 1
TB of storage for ‚Ç¨2.90 per month, or 5 TB for ‚Ç¨9.90!</p>
<p>On their <a href="https://www.hetzner.com/storage/storage-box?country=us">features page</a>
they list they support a number of protocols, including <strong>SFTP, SCP,
BorgBackup, and rsync over SSH</strong>.</p>
<p>All of those protocols happen over a SSH connection, yet Hetzner doesn‚Äôt
give us SSH access to the box:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh u123456@u123456.your-storagebox.de</span>
PTY allocation request failed on channel 0

+-------------------------------------------------------------------------------+
| Your authentication works but we do not support interactive logins.           |
| For more information on how to access your Storage Box please check our Docs: |
| https://docs.hetzner.com/robot/storage-box/access/access-ssh-rsync-borg       |
+-------------------------------------------------------------------------------+

Connection to u123456.your-storagebox.de closed.
</code></pre>
<p>Let‚Äôs assume the following <code>~/.ssh/config</code> for further commands for
simplicity, so that we can just <code>ssh hetzner</code>:</p>
<pre><code class="hljs">Host hetzner
    HostName u123456.your-storagebox.de
    User u123456
</code></pre>
<p>While interactive SSH is not allowed, we can try running a command
directly:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">ls</span></span>
file1
file2
file3
</code></pre>
<p>Interesting. What other commands do they allow?</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">cp</span> file3 file4</span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">cat</span> file1</span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">du</span> -sh .</span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">pwd</span></span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">whoami</span></span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">rm</span> file3</span>
Command not found
</code></pre>
<p>Well, not much. So by what sorcery are SFTP, SCP, BorgBackup and rsync
able to work over this connection?</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sftp hetzner</span>
Connected to hetzner.
<span class="hljs-meta prompt_">sftp&gt;</span><span class="language-bash">
</span><span class="hljs-meta prompt_">
$ </span><span class="language-bash">scp file4 hetzner:</span>
file4
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">rsync -v file5 hetnzer:</span>
file5
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner <span class="hljs-built_in">ls</span> file4 file5</span>
file4
file5
</code></pre>
<p>To understand, let‚Äôs dig in the internals of SFTP, SCP, BorgBackup and
rsync.</p>
<h2 id="sftp" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#sftp"><span>SFTP</span></a></h2>
<p>SFTP is actually the odd one in the room. But we‚Äôll start with it
nevertheless.</p>
<p>Using <code>-v</code> to enable debug output gives one interesting line near the
end of the log:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sftp -v hetzner</span>
...
debug1: Sending subsystem: sftp
...
</code></pre>
<p>It looks like we‚Äôre dealing with something called SSH subsystems. A good
way to find more about them is to search
<a href="https://serverfault.com/questions/354615/allow-sftp-but-disallow-ssh">how to enable SFTP but disallow SSH</a>.</p>
<p>Here, we meet our SSH server subsystem again, which is typically
configured on the server as:</p>
<pre><code class="hljs language-conf">Subsystem sftp internal-sftp
</code></pre>
<p>From the <a href="https://linux.die.net/man/1/ssh"><code>ssh(1)</code></a> man page, we can
see that <code>ssh -s</code> allows to pass a subsystem where we would normally
pass a command, e.g:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner -s sftp</span>
</code></pre>
<p>This command hangs, meanings the remote server is waiting for SFTP
commands. Since it‚Äôs a binary protocol, we won‚Äôt be able to play with it
directly, but this is the connection over which a normal SFTP client
would be able to do its magic. Sweet!</p>
<h2 id="scp" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#scp"><span>SCP</span></a></h2>
<p>Let‚Äôs use the verbose/debug mode trick like we did previously with SFTP:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">scp -v file4 hetzner:</span>
...
debug1: Sending command: scp -v -t .
...
</code></pre>
<p>Here, the relevant part of the debug output is where <code>scp</code> sends the
remote command <code>scp -v -t .</code>.</p>
<p><code>-v</code> is for the verbose mode we specified, but if we look at the
<a href="https://linux.die.net/man/1/scp"><code>scp(1)</code></a> man page, there‚Äôs nothing
for <code>-t</code>.</p>
<p>We can look at
<a href="https://github.com/openssh/openssh-portable/blob/90452c8b69d065b7c7c285ff78b81418a75bcd76/scp.c#L575">the source code</a>
where they parse the command line arguments:</p>
<pre><code class="hljs language-c"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:    <span class="hljs-comment">/* &quot;from&quot; */</span>
    iamremote = <span class="hljs-number">1</span>;
    fflag = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:    <span class="hljs-comment">/* &quot;to&quot; */</span>
    iamremote = <span class="hljs-number">1</span>;
    tflag = <span class="hljs-number">1</span>;
</code></pre>
<p>So we learn that <code>-f</code> or <code>-t</code> are used internally to trigger the remote
mode. Because in our case we were sending a file to the remote host, we
entered <code>-t</code> mode, but if we were downloading a file form the host, we
would likely see <code>-f</code>. Let‚Äôs try:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">scp -v hetzner:file4 .</span>
...
debug1: Sending command: scp -v -f file4
...
</code></pre>
<p>So it‚Äôs through invoking <code>scp</code> on the remote host over SSH that our
local <code>scp</code> is able to transfer files. But how is that possible? We saw
earlier that basically every command but <code>ls</code> was returning ‚Äúcommand not
found‚Äù! And we can confirm <code>scp</code> is not present on the remote host:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner scp</span>
Command not found
</code></pre>
<p>Or is it? Let‚Äôs try the full command that <code>scp</code> would normally run on
the remote host‚Ä¶</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner scp -t .</span>
<span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner scp -f file4</span>
</code></pre>
<p>Both those commands hang, meaning that Hetzner actually ran them, and we
now have a communication channel with the remote <code>scp</code> process!</p>
<p>So Hetzner disallowed us to run <code>scp</code> directly on the remote host, but
they whitelisted the specific arguments that <code>scp</code> would internally pass
to start the remote process. Smart.</p>
<h2 id="borgbackup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#borgbackup"><span>BorgBackup</span></a></h2>
<p>Now we know the pattern, it‚Äôs easy to confirm that they do the same
whitelisting for BorgBackup. We can see that <a href="https://borgbackup.readthedocs.io/en/stable/usage/serve.html"><code>borg serve</code></a>
is used to start the remote process.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner borg</span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner borg --<span class="hljs-built_in">help</span></span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner borg serve</span>
</code></pre>
<p>The last command hangs, and again we exposed the way Borg internally
opens a communication channel with a Borg implementation on the remote
server!</p>
<h2 id="rsync" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#rsync"><span>rsync</span></a></h2>
<p>One more time, we leverage the verbose mode, this time with <code>-vv</code> to get
extra debug output, to see what rsync does internally:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">rsync -vv file5 hetzner:</span>
opening connection using: ssh hetzner rsync --server -vve.LsfxCIvu . .  (7 args)
delta-transmission enabled
file5
...
</code></pre>
<p>Sweet. Let‚Äôs try to run this manually:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh hetzner rsync</span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner rsync --<span class="hljs-built_in">help</span></span>
Command not found
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">ssh hetzner rsync --server -vve.LsfxCIvu . .</span>
</code></pre>
<p>And again, Hetzner allowed the last command and we have an open
communication channel with the remote rsync process!</p>
<h3 id="digging-deeper-just-for-fun" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#digging-deeper-just-for-fun"><span>Digging deeper just for fun</span></a></h3>
<p>If you‚Äôre curious, there‚Äôs <a href="https://serverfault.com/questions/793669/what-is-the-rsync-option-logdtprze-ilsf-for/1096808">a Server Fault question</a>
about the meaning of the <code>-vve.LsfxCIvu</code> part.</p>
<p>The answers there were a pretty good start, but there was something
fishy and unexplained about the <code>.</code> in the middle, and I wasn‚Äôt quite
satisfied. So <a href="https://serverfault.com/a/1096808">I dug I bit more</a>.</p>
<p>In the case of <code>-vve.LsfxCIvu</code>, it‚Äôs actually equivalent to <code>-v -v -e '.LsfxCIvu'</code>,
because of the way <code>popt(3)</code>'s <code>POPT_ARG_STRING</code> parses command line
options (the library used by rsync to parse options), which is quite a
common behavior for Unix commands short options.</p>
<p>The trick is that <code>-e</code> is interpreted differently when we‚Äôre in
<code>--server</code> mode, in a way that‚Äôs not related to the <code>-e</code> client option
from the man page, that is normally the short version of <code>--rsh</code>,
allowing to specify the remote shell to use.</p>
<p>Setting <code>-e</code> or <code>--rsh</code> will have the options parser populate the
<code>shell_cmd</code> variable, but <a href="https://github.com/WayneD/rsync/blob/13c4019e94015b234697c75d9d3624862e962d3c/compat.c#L160">they hijack it in server mode</a>
to populate a <code>client_info</code> variable instead, which is used
<a href="https://github.com/WayneD/rsync/blob/13c4019e94015b234697c75d9d3624862e962d3c/compat.c#L134">differently</a>,
to define a number of internal protocol compatibility options.</p>
<p>We can look at <a href="https://github.com/WayneD/rsync/blob/f44e76b65c5819edb1a5b2fbbe732d5d214b35de/options.c#L2951">the code that creates the value for the <code>-e</code> option</a>
to get an idea of what those options do. In my case:</p>
<ul>
<li><code>L</code>: symlink time-setting support</li>
<li><code>s</code>: symlink iconv translation support</li>
<li><code>f</code>: <code>flist</code> I/O-error safety support</li>
<li><code>x</code>: <code>xattr</code> hardlink optimization not desired</li>
<li><code>C</code>: support checksum seed order fix</li>
<li><code>I</code>: support <code>inplace_partial</code> behavior</li>
<li><code>v</code>: use <code>varint</code> for <code>flist</code> &amp; compat flags; negotiate checksum</li>
<li><code>u</code>: include name of <code>uid 0</code> &amp; <code>gid 0</code> in the <code>id</code> map</li>
</ul>
<p>I didn‚Äôt really need to know that <code>-vve.LsfxCIvu</code> means
<code>-v -v -e '.LsfxCIvu'</code> and not <code>-v -v -e . -L -s -f -x -C -I -v -u</code>? No.
Does this makes my life any better? Not really. But there‚Äôs an invisible
force that pushes me to spend ridiculous amounts of time to make sense
of this kind of things.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/rsync-without-shell-access.html#conclusion"><span>Conclusion</span></a></h2>
<p>SFTP, SCP, BorgBackup and rsync all work on a client/server model, where
the command is run both on the client <em>and</em> the server, and communicate
together over SSH. It means that the command needs to be installed on
the remote server as well, and allowed to be run over SSH.</p>
<p>rsync and BorgBackup can achieve great performance to synchronize files
on a storage server like Hetzner, because despite not having shell
access on that server, the specific commands used by those tools to
start a remote process are whitelisted.</p>
<p>For other tools like <a href="https://restic.net/">restic</a>, because Hetzner
doesn‚Äôt support their custom server protocol, they are constrained to
use the more generic (and limited) commands of SFTP, which doesn‚Äôt allow
optimal performance.</p>
<p>So if you were wondering how all those tools can run code on your
storage box despite you being denied shell access, now you know!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1512854917702164494">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Make a bootable Windows USB from Linux in 2022</title>
    <link href="https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html" />
    <id>https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html</id>
    <updated>2022-04-09T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In the Linux world we‚Äôre used to <code>dd if=some-image.iso of=/dev/some-usb-key bs=4M</code>
and it Just Works‚Ñ¢.</p>
<p>It is because most Linux ISO <a href="https://askubuntu.com/a/1174287">are hybrid</a>
in a way where the same ISO can be used on a DVD, USB or SD card. It‚Äôs
not the case for the Windows ISO.</p>
<p>From Windows, <a href="https://rufus.ie/">Rufus</a> is the easiest solution, but if
I‚Äôm making a bootable Windows USB, maybe it‚Äôs because I don‚Äôt have a
Windows installation handy at the moment. üò¨</p>
<h2 id="the-traditional-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html#the-traditional-solution"><span>The traditional solution</span></a></h2>
<p>Before Windows shipped ISOs with files larger than 4 GB, making a
bootable Windows USB for EFI was as simple as format the key as FAT32,
and just copying over the contents of the ISO to it. Example:</p>
<pre><code class="hljs language-sh">fdisk /dev/sdX <span class="hljs-comment"># Make a single partition for the whole drive</span>
mkfs.fat -F32 /dev/sdX1 <span class="hljs-comment"># Format as FAT32</span>

<span class="hljs-built_in">mkdir</span> usb windows <span class="hljs-comment"># Make some mount points</span>
mount /dev/sdX1 usb
mount windows.iso windows

<span class="hljs-built_in">cp</span> -rv windows/* usb <span class="hljs-comment"># Copy contents</span>

umount windows
umount usb
</code></pre>
<p>If your motherboard‚Äôs EFI somehow supports exFAT out of the box, you can
replace <code>mkfs.fat</code> by <code>mkfs.exfat</code> in the above script and that should
work for you with files larger than 4 GB.</p>
<p>This didn‚Äôt work on any of the PCs I tried this on, but according to
<a href="https://www.tonymacx86.com/threads/guide-how-to-create-bootable-windows-usb-install-media-in-macos-and-linux.305580/">this post</a>,
some firmware have native UEFI boot support for exFAT, and
<a href="https://youtu.be/Nt58WrkgAzk">this video</a> is full of comments of people
booting the Windows installer from an exFAT drive using this method, so
it might work for you!</p>
<p>Otherwise, nowadays <a href="https://github.com/WoeUSB/WoeUSB">WoeUSB</a> seems
like a good solution to prepare Windows USB drives, but if you want to
keep it low-level, there‚Äôs an even easier solution!</p>
<h2 id="splitting-the-iso-in-two-partitions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/bootable-windows-usb-from-linux.html#splitting-the-iso-in-two-partitions"><span>Splitting the ISO in two partitions</span></a></h2>
<p>I found this quite unique solution in <a href="https://win10.guru/usb-install-media-with-larger-than-4gb-wim-file/">this blog post</a>.</p>
<p>It consists in making a 1 GB FAT32 partition on the USB, and using the
rest as NTFS, then copying everything from the ISO but the <code>sources</code>
directory to the FAT32 partition (only including <code>sources/boot.wim</code>),
and copying the whole ISO contents to the NTFS partition.</p>
<p>I‚Äôm not sure why this works, but it looks like Windows is able to handle
such a USB layout seamlessly, and it‚Äôs by far the easiest solution out
there, because it doesn‚Äôt require splitting the <code>install.wim</code> file, or
<a href="https://willhaley.com/blog/windows-installer-usb-linux/">installing and configuring</a>
<a href="https://help.ubuntu.com/community/Installation/iso2usb/diy/windows-installer-for-big-files">another bootloader</a>
to boot from a second partition (after all Windows installer‚Äôs
bootloader is already capable of doing that by itself!).</p>
<p>Here‚Äôs how to do it:</p>
<pre><code class="hljs language-sh">fdisk /dev/sdX <span class="hljs-comment"># Make a 1 GB partition and another partition with the rest</span>
mkfs.fat -F32 /dev/sdX1 <span class="hljs-comment"># Format as FAT32</span>
mkfs.ntfs --fast /dev/sdX2 <span class="hljs-comment"># Format as NTFS</span>

<span class="hljs-built_in">mkdir</span> boot usb windows <span class="hljs-comment"># Make some mount points</span>
mount /dev/sdX1 boot
mount /dev/sdX2 usb
mount windows.iso windows

<span class="hljs-comment"># Copy everything but the `sources` directory</span>
find iso -mindepth 1 -maxdepth 1 -not -name sources -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> -rv {} boot \;

<span class="hljs-comment"># Add `sources/boot.wim`</span>
<span class="hljs-built_in">mkdir</span> boot/sources
<span class="hljs-built_in">cp</span> iso/sources/boot.wim boot/sources

<span class="hljs-built_in">cp</span> -rv iso/* usb <span class="hljs-comment"># Copy everything to the NTFS partition</span>

umount windows
umount usb
umount boot
</code></pre>
<p>I hope you found this trick useful! And I wish you a smooth Windows
installation. üéâ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>xfce4-terminal vs. foot</title>
    <link href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html" />
    <id>https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html</id>
    <updated>2022-04-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This is going to be a pretty personal piece, but I figured I‚Äôd share
either way. ü§∑</p>
<p>I‚Äôve been using <a href="https://docs.xfce.org/apps/terminal/start">xfce4-terminal</a>
as my terminal emulator on Linux for quite a while now, and I like it.
It‚Äôs lightweight, supports emojis and has transparency, and it just
works for me.</p>
<p>Recently I <a href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html">switched to Wayland</a>,
and saw that <a href="https://swaywm.org/">Sway</a> (the Wayland alternative to
<a href="https://i3wm.org/">i3</a>) was using <a href="https://codeberg.org/dnkl/foot">foot</a>
as their default terminal emulator. I didn‚Äôt know about it, but it‚Äôs
described as ‚Äúa fast, lightweight and minimalistic Wayland terminal
emulator‚Äù, which sounds like music to my ears, so I decided to try it!</p>
<p>Here‚Äôs my feedback after using it for a couple of weeks, in particular
the issues I encountered and the fixes I found.</p>
<h2 id="incompatibility-with-vim-for-some-ctrl-key-combinations" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#incompatibility-with-vim-for-some-ctrl-key-combinations"><span>Incompatibility with Vim for some <kbd>Ctrl</kbd> key combinations</span></a></h2>
<p>The (deep) details are explained in <a href="https://github.com/vim/vim/issues/9014">this issue on Vim</a>,
<a href="https://codeberg.org/dnkl/foot/issues/849">this issue on foot</a>, and the
solution is documented <a href="https://codeberg.org/dnkl/foot/wiki#user-content-ctrl-key-breaks-input-in-vim">in foot‚Äôs wiki</a>.</p>
<p>Basically, doing some <kbd>Ctrl</kbd> key combinations can break other
<kbd>Ctrl</kbd> key mappings when using Vim inside foot.</p>
<p>This is due to the fact that <a href="https://github.com/vim/vim/issues/9014#issuecomment-965187794">foot uses CSI 27 escape sequences</a>
for some key combinations but keeps using ‚Äúlegacy‚Äù escape sequences for
others.</p>
<p><a href="https://invisible-island.net/xterm/manpage/xterm.html">xterm defines a feature <code>modifyOtherKeys</code></a>
defining 2 behaviors for dealing with escape sequences (level 1 and
level 2).</p>
<p>foot implements the level 1 but after seeing a CSI 27 escape sequence,
<a href="https://github.com/vim/vim/issues/9014#issuecomment-965388693">Vim assumes level 2</a>,
resulting in this incompatibility.</p>
<p>As mentioned <a href="https://codeberg.org/dnkl/foot/wiki#user-content-ctrl-key-breaks-input-in-vim">in foot‚Äôs wiki</a>,
I added the following to my <code>vimrc</code> to fix it:</p>
<pre><code class="hljs language-vim"><span class="hljs-comment">&quot;</span>
<span class="hljs-comment">&quot; Make Vim and foot collaborate.</span>
<span class="hljs-comment">&quot;</span>
<span class="hljs-comment">&quot; See &lt;https://codeberg.org/dnkl/foot/wiki#ctrl-key-breaks-input-in-vim&gt;</span>
<span class="hljs-comment">&quot; and &lt;https://github.com/vim/vim/issues/9014&gt;.</span>
<span class="hljs-comment">&quot;</span>
<span class="hljs-keyword">let</span> &amp;t_TI = <span class="hljs-string">&quot;\&lt;Esc&gt;[&gt;4;2m&quot;</span>
<span class="hljs-keyword">let</span> &amp;t_TE = <span class="hljs-string">&quot;\&lt;Esc&gt;[&gt;4m&quot;</span>
</code></pre>
<p>If you‚Äôre curious about <code>t_TI</code> and <code>t_TE</code>, you can read more about it
<a href="https://vi.stackexchange.com/a/27400">here</a>.</p>
<h2 id="bracketed-paste" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#bracketed-paste"><span>Bracketed paste</span></a></h2>
<p><a href="https://cirw.in/blog/bracketed-paste">Bracketed paste</a> allows terminal
emulator to communicate through escape sequences that content is being
pasted as opposed of being typed, allowing programs to handle the
content differently.</p>
<p>This is especially useful inside Vim to paste text without having to
care about turning on and off <code>paste</code> mode (for example to avoid messed
up indent when pasting code).</p>
<p>Vim doesn‚Äôt know that foot supports bracketed paste so it doesn‚Äôt work
by default. But as shown in <code>:help xterm-bracketed-paste</code>, we can hint
at it by adding this to our <code>vimrc</code>:</p>
<pre><code class="hljs language-vim"><span class="hljs-keyword">if</span> &amp;term =~ <span class="hljs-string">&quot;foot&quot;</span>
    <span class="hljs-keyword">let</span> &amp;t_BE = <span class="hljs-string">&quot;\e[?2004h&quot;</span>
    <span class="hljs-keyword">let</span> &amp;t_BD = <span class="hljs-string">&quot;\e[?2004l&quot;</span>
    exec <span class="hljs-string">&quot;set t_PS=\e[200~&quot;</span>
    exec <span class="hljs-string">&quot;set t_PE=\e[201~&quot;</span>
<span class="hljs-keyword">endif</span>
</code></pre>
<p>Not too bad!</p>
<p>This is for Vim specifically, but <a href="https://codeberg.org/dnkl/foot/issues/305">from looking at this issue</a>,
it looks like there might be other bracketed paste support issues with
other software that need to be addressed individually. Not a problem for
me for now‚Ä¶</p>
<h2 id="clicking-urls" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#clicking-urls"><span>Clicking URLs</span></a></h2>
<p>I took for granted to be able to <kbd>Ctrl</kbd> + click links in
terminal emulators. <a href="https://codeberg.org/dnkl/foot#user-content-urls">foot took a different approach</a>
to this with a keyboard-driven URL mode:</p>
<blockquote>
<p>Pressing <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd> enters ‚ÄúURL
mode‚Äù, where all currently visible URLs are underlined, and is
associated with a ‚Äújump-label‚Äù. The jump-label indicates the key
sequence (e.g. ‚ÄúAF‚Äù) to use to activate the URL.</p>
</blockquote>
<p>I love the ability to be <em>able</em> to navigate URLs using my keyboard only,
but I also like to have the <em>option</em> to click those links.</p>
<p>Sometimes the cost of pressing <kbd>Ctrl</kbd> + <kbd>Shift</kbd> +
<kbd>U</kbd>, identify the ‚Äújump-label‚Äù and typing it, feels higher than
the cost of switching to my trackpad and <kbd>Ctrl</kbd> + clicking the
URL I‚Äôm already looking at.</p>
<p>I probably would get used to it after a while if I <em>only</em> used foot, but
I also use iTerm2 on macOS where I <kbd>Command</kbd> + click the links,
and I like to keep shortcuts and habits somewhat consistent between all
the systems I use.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xfce4-terminal-vs-foot.html#conclusion"><span>Conclusion</span></a></h2>
<p>foot is indeed fast and lightweight, and it‚Äôs a great Wayland terminal
emulator.</p>
<p>Because it sets <code>TERM=foot</code> in the environment, many programs (like Vim)
don‚Äôt have built-in support for it (e.g. knowing how foot handles escape
sequences and bracketed paste), meaning that you might need to add extra
configuration to all the programs where you need this to add foot
support.</p>
<p>xfce4-terminal, for better or for worse, sets <code>TERM=xterm-256color</code>,
which means most programs know out of the box how to deal with it (as
long as it maintains proper xterm compatibility). In practice, that‚Äôs
probably why xfce4-terminal ‚Äújust works‚Äù for me.</p>
<p>Because of that, and the fact I personally see clicking links as a ‚Äúmust
have‚Äù and a keyboard mode to open links a ‚Äúnice to have‚Äù, and not the
other way around, I‚Äôm moving back to xfce4-terminal.</p>
<p>I like lightweight and minimalist programs, but I like convenience as
well. xfce4-terminal is the perfect balance for me, and it‚Äôs pretty
strongly on the lightweight side already!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Migrating .xmodmaprc to Wayland: remap arbitrary keys</title>
    <link href="https://www.codejam.info/2022/04/xmodmaprc-wayland.html" />
    <id>https://www.codejam.info/2022/04/xmodmaprc-wayland.html</id>
    <updated>2022-04-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently <a href="https://www.codejam.info/2022/05/migrating-x11-wayland-i3-sway.html">moved from X11 to Wayland</a>,
and one of my challenges that came with it was to find an alternative
for my <code>.xmodmaprc</code>, that I used for two purposes:</p>
<ol>
<li><a href="https://github.com/valeriangalliat/dotfiles/blob/1d2098a7da513dab195554997efaac22a0d77a02/x11/xmodmaprc">Invert the left <kbd>Alt</kbd> and <kbd>Ctrl</kbd> keys</a>.</li>
<li><a href="https://www.codejam.info/2019/06/software-fn-lock.html">Invert the behavior of the function keys</a>,
(to emulate <kbd>Fn Lock</kbd> which is not supported on my laptop).</li>
</ol>
<p>Since <code>xmodmap</code> is a X11 thing, I needed to find a Wayland alternative
to this.</p>
<p>It seems that the common answer is to directly modify the XKB database
in <code>/usr/share/X11/xkb</code>, but according to <a href="https://unix.stackexchange.com/a/698044/521108">this Stack Exchange post</a>
(referencing the <a href="https://xkbcommon.org/doc/current/md_doc_user_configuration.html">XKB docs</a>),
we learn that we can customize XKB symbols in
<code>~/.config/xkb/symbols/&lt;name&gt;</code> and XKB rules in
<code>~/.config/xkb/rules/evdev</code>. Great.</p>
<h2 id="inverting-alt-and-ctrl" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xmodmaprc-wayland.html#inverting-alt-and-ctrl"><span>Inverting <kbd>Alt</kbd> and <kbd>Ctrl</kbd></span></a></h2>
<p>This is something commonly done with <code>xmodmap</code>, and there‚Äôs very little
documentation of alternative solutions, but I found <a href="https://askubuntu.com/a/885047">this answer</a>
showing how to achieve that by modifying the XKB symbols in
<code>/usr/share/X11/xkb/symbols/ctrl</code>:</p>
<pre><code class="hljs language-conf">xkb_symbols &quot;swap_ralt_rctl&quot; {
    replace key &lt;RALT&gt; { [ Control_R, Control_R ] };
    replace key &lt;RCTL&gt; { [ Alt_R, Meta_R ] };
};
</code></pre>
<p>Because I just learnt I could modify stuff in <code>~/.config/xkb/symbols</code>
instead, I added this code to <code>~/.config/xkb/symbols/ctrl</code>.</p>
<p>Then in my Sway config (this will vary depending on your window manager
or desktop environment), I enabled the <code>ctrl:swap_ralt_rctl</code> option for
my keyboard:</p>
<pre><code class="hljs language-conf">input type:keyboard {
    xkb_options ctrl:swap_lalt_lctl
}
</code></pre>
<p>And this worked! <strong>But it shouldn‚Äôt have.</strong> I realized later (when
adding another option with a different name) that it is <strong>required</strong> to
also add a matching entry to the <code>xkb/rules/evdev</code> file. So why did it
work?</p>
<p>It turns out that there was already a native XKB option with that exact
name (in <code>/usr/share/X11/xkb/symbols/ctrl</code> and
<code>/usr/share/X11/xkb/rules/evdev</code>), and that‚Äôs why the name was
recognized. And unsurprisingly, that native option does exactly what I
want, so I could get rid of that <code>~/.config/xkb/symbols/ctrl</code> file
altogether and just use <code>ctrl:swap_lalt_lctl</code> in my Sway config. üòÜ</p>
<h2 id="emulating-fn-lock" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/xmodmaprc-wayland.html#emulating-fn-lock"><span>Emulating <kbd>Fn Lock</kbd></span></a></h2>
<p>Now on to the hardest part. My <code>~/.xmodmaprc</code> used to look like this,
essentially, mapping <kbd>F5</kbd> to what <kbd>Fn</kbd> + <kbd>F5</kbd>
would do, and inversely, and so on for a number of function keys that I
use.</p>
<pre><code class="hljs language-xmodmap">keycode 71  = XF86MonBrightnessDown
keycode 232 = F5
keycode 72  = XF86MonBrightnessUp
keycode 233 = F6
keycode 73  = XF86ScreenSaver
keycode 160 = F7
keycode 76  = XF86AudioMute
keycode 121 = F10
keycode 95  = XF86AudioLowerVolume
keycode 122 = F11
keycode 96  = XF86AudioRaiseVolume
keycode 123 = F12
</code></pre>
<p>With a bit of trial and error, and looking at the
<code>/usr/share/X11/xkb/keycodes/evdev</code> file, I could figure what were the
corresponding XKB keys for the codes above:</p>
<pre><code class="hljs">&lt;FK01&gt; = 67;
&lt;FK02&gt; = 68;
&lt;FK03&gt; = 69;
&lt;FK04&gt; = 70;
&lt;FK05&gt; = 71;
&lt;FK06&gt; = 72;
&lt;FK07&gt; = 73;
&lt;FK08&gt; = 74;
&lt;FK09&gt; = 75;
&lt;FK10&gt; = 76;
&lt;FK11&gt; = 95;
&lt;FK12&gt; = 96;
...
&lt;MUTE&gt; = 121;
&lt;VOL-&gt; = 122;
&lt;VOL+&gt; = 123;
...
alias &lt;I121&gt; = &lt;MUTE&gt;;	// #define KEY_MUTE                113
alias &lt;I122&gt; = &lt;VOL-&gt;;	// #define KEY_VOLUMEDOWN          114
alias &lt;I123&gt; = &lt;VOL+&gt;;	// #define KEY_VOLUMEUP            115
...
&lt;I160&gt; = 160;		// #define KEY_COFFEE              152
&lt;I232&gt; = 232;		// #define KEY_BRIGHTNESSDOWN      224
&lt;I233&gt; = 233;		// #define KEY_BRIGHTNESSUP        225
</code></pre>
<p>Leading me to the write following <code>~/.config/xkb/symbols/ctrl</code>:</p>
<pre><code class="hljs language-conf">partial modifier_keys
xkb_symbols &quot;swap_fn_keys&quot; {
    replace key &lt;FK05&gt; { [ XF86MonBrightnessDown ] };
    replace key &lt;FK06&gt; { [ XF86MonBrightnessUp ] };
    replace key &lt;FK07&gt; { [ XF86ScreenSaver ] };
    replace key &lt;FK09&gt; { [ XF86TouchpadToggle ] };
    replace key &lt;FK10&gt; { [ XF86AudioMute ] };
    replace key &lt;FK11&gt; { [ XF86AudioLowerVolume ] };
    replace key &lt;FK12&gt; { [ XF86AudioRaiseVolume ] };
    replace key &lt;I232&gt; { [ F5 ] };
    replace key &lt;I233&gt; { [ F6 ] };
    replace key &lt;I160&gt; { [ F7 ] };
    replace key &lt;I199&gt; { [ F9 ] };
    replace key &lt;I121&gt; { [ F10 ] };
    replace key &lt;I122&gt; { [ F11 ] };
    replace key &lt;I123&gt; { [ F12 ] };
};
</code></pre>
<p>And this time because <code>swap_fn_keys</code> is a new entry, I did need to add
it to <code>~/.config/xkb/rules/evdev</code>. According to the
<a href="https://xkbcommon.org/doc/current/md_doc_user_configuration.html#autotoc_md17">XKB docs</a>,
this is done with the following pattern:</p>
<pre><code class="hljs language-conf">! option = symbols
  ctrl:swap_fn_keys = +ctrl(swap_fn_keys)

! include %S/evdev
</code></pre>
<p>And I can finally include it to my Sway keyboard options:</p>
<pre><code class="hljs language-conf">input type:keyboard {
    xkb_options ctrl:swap_lalt_lctl,ctrl:swap_fn_keys
}
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Google Apps Script: sorry, unable to open the file at this time</title>
    <link href="https://www.codejam.info/2022/04/google-apps-script-unable-to-open-the-file.html" />
    <id>https://www.codejam.info/2022/04/google-apps-script-unable-to-open-the-file.html</id>
    <updated>2022-04-01T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I was casually trying to open Google Apps Script on a spreadsheet of
mine:</p>
<figure class="center">
  <img alt="Google Apps Script opening from Google Sheets" src="https://www.codejam.info/img/2022/04/google-apps-script-open.png">
</figure>
<p>When I ran in the following error:</p>
<figure class="center">
  <img alt="Sorry, unable to open the file at this time, please check the address and try again" src="https://www.codejam.info/img/2022/04/google-apps-script-sorry.png">
</figure>
<p>Definitely not getting stuff done with Google Drive today. ü§¶‚Äç‚ôÄÔ∏è</p>
<p>A quick search for this error leads to <a href="https://support.google.com/docs/thread/99474963">this support thread</a>
where people report encountering the same problem and say it magically
goes away after a while without knowing why.</p>
<p>The thread was eventually locked without a reliable solution. Not good.</p>
<h2 id="the-reliable-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/04/google-apps-script-unable-to-open-the-file.html#the-reliable-solution"><span>The reliable solution</span></a></h2>
<p>Turns out the cause of the problem (in my case) was that I was logged in
multiple Google accounts in this browser. Google Apps Script was working
well for the default Google account, but trying to open it in any of my
other Google accounts would result in this error.</p>
<figure class="center">
  <img alt="Multiple Google accounts" src="https://www.codejam.info/img/2022/04/google-multiple-accounts.png">
  <figcaption>Not my actual emails obviously</figcaption>
</figure>
<p>I didn‚Äôt find a way to properly associate a new spreadsheet with a
Google Apps Script on a Google account that‚Äôs not the default one, so
the solution is to <strong>log in to that Google account in a private window
(or another browser) so that it‚Äôs the default account, and use Google
Apps Script from there</strong>.</p>
<p>After you associated a new Google Apps Scripts project to the
spreadsheet of your choice, you can come back to your main browser and
open <a href="https://script.google.com/">Google Apps Scripts</a> directly there.
Using the user switcher on the top right you can connect to the proper
account and manage your project from there. Note that the Google Apps
Scripts UI doesn‚Äôt handle multiple users very well and might return you
at any time to the default user.</p>
<p>I know, not a fantastic solution, but now you know!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Clearing cookies: the spec vs. the browser implementations</title>
    <link href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html" />
    <id>https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html</id>
    <updated>2022-03-25T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I was watching the awesome
<a href="https://www.youtube.com/playlist?list=PL1y1iaEtjSYiiSGVlL1cHsXN_kvJOOhu-">Stanford CS 253 course about web security</a>
by <a href="https://feross.org/">Feross</a>, that he graciously made available for
free on YouTube, and in <a href="https://youtu.be/0-q69vAYSwo?t=2132">lecture 4, at 35:32</a>,
one thing bugged me about <strong>clearing cookies</strong>.</p>
<blockquote>
<p>When you actually go to clear the cookies [‚Ä¶], you got to make sure
that all the other attributes are also exactly the same than when it
was set.</p>
<p>It‚Äôs a little bit jinky, because if you don‚Äôt do this, the browser
thinks that it‚Äôs actually a separate cookie with the same name.</p>
</blockquote>
<p>In code, using Node.js and Express, this looks like this:</p>
<pre><code class="hljs language-js">res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;sessionId&#x27;</span>, sessionId, {
  <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>,
  <span class="hljs-attr">maxAge</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> <span class="hljs-comment">// 30 days</span>
})

res.<span class="hljs-title function_">clearCookie</span>(<span class="hljs-string">&#x27;sessionId&#x27;</span>, {
  <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>
})
</code></pre>
<p>Or on plain HTTP:</p>
<pre><code class="hljs language-http"><span class="hljs-attribute">Set-Cookie</span><span class="hljs-punctuation">: </span>sessionId=...; MaxAge=...; Path=/; HttpOnly; Secure; SameSite=Lax

<span class="hljs-attribute">Set-Cookie</span><span class="hljs-punctuation">: </span>sessionId=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure; SameSite=Lax
</code></pre>
<p>That was quite a gotcha moment for me because I‚Äôve been dealing with
cookies all my career as a web developer and I had no idea about that.
I‚Äôm also pretty sure I‚Äôve been using <code>HttpOnly</code>,  <code>Secure</code> and
<code>SameSite</code> when setting cookies in the past, and don‚Äôt remember having
issues when clearing them without those flags.</p>
<h2 id="the-express-documentation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#the-express-documentation"><span>The Express documentation</span></a></h2>
<p>The first step is to look at the <a href="https://expressjs.com/en/api.html#res.clearCookie"><code>res.clearCookie</code> documentation</a>.</p>
<p>Indeed, there‚Äôs a warning box with the following message:</p>
<blockquote>
<p>Web browsers and other compliant clients will only clear the cookie if
the given <code>options</code> is identical to those given to <code>res.cookie()</code>,
excluding <code>expires</code> and <code>maxAge</code>.</p>
</blockquote>
<p>There‚Äôs no source for what ‚Äúcompliant clients‚Äù means here though.</p>
<h2 id="the-spec" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#the-spec"><span>The spec</span></a></h2>
<p>By digging a bit, we find <a href="https://github.com/expressjs/express/issues/3874">this issue</a>
on the Express repo, from someone else that was apparently bugged by
this same warning a few years ago.</p>
<p>An Express maintainer jumps in with a link to the <a href="https://tools.ietf.org/search/rfc6265">HTTP cookies RFC</a>, in
particular the <a href="https://tools.ietf.org/search/rfc6265#section-5.3">storage model</a>
part:</p>
<blockquote>
<p>Ah, here is the specifics: <a href="https://tools.ietf.org/search/rfc6265#section-5.3">https://tools.ietf.org/search/rfc6265#section-5.3</a>.</p>
<p>I hope that helps! It‚Äôs the specification of exactly how clients are
supposed to set cookies, and outlines the algorithm of how to set the
cookie even when a given cookie already exists. It notes the following
have to match: <code>domain</code>, <code>path</code>, <code>httpOnly</code> if the <code>name</code> already
exists in the store (see step 11). The list of attributes in that spec
is not comprehensive, as additional attributes were added by other
specs, which I suspect define their own behaviors.</p>
</blockquote>
<p>And here‚Äôs the part 11 of the spec that was referred to here:</p>
<blockquote>
<ol start="11">
<li>
<p>If the cookie store contains a cookie with the same name,
domain, and path as the newly created cookie:</p>
<ol>
<li>
<p>Let old-cookie be the existing cookie with the same name,
domain, and path as the newly created cookie.  (Notice that
this algorithm maintains the invariant that there is at most
one such cookie.)</p>
</li>
<li>
<p>If the newly created cookie was received from a ‚Äúnon-HTTP‚Äù
API and the old-cookie‚Äôs http-only-flag is set, abort these
steps and ignore the newly created cookie entirely.</p>
</li>
<li>
<p>Update the creation-time of the newly created cookie to
match the creation-time of the old-cookie.</p>
</li>
<li>
<p>Remove the old-cookie from the cookie store.</p>
</li>
</ol>
</li>
</ol>
</blockquote>
<p>My understanding of the spec is that indeed <code>name</code>, <code>domain</code> and <code>path</code>
are all used to identify a specific cookie, so a cookie with the same
<code>name</code> but different <code>domain</code> or <code>path</code> won‚Äôt match. For <code>httpOnly</code> though,
it only mentions that if a non-HTTP API tries to expire an existing
<code>httpOnly</code> cookie (e.g. by doing <code>document.cookie = '...'</code>), this call
will be ignored, which makes sense.</p>
<p>But <code>httpOnly</code> is not used to match a cookie otherwise. A HTTP response
can expire a <code>httpOnly</code> cookie without setting <code>httpOnly</code> in the
<code>Set-Cookie</code> options, as long as the <code>name</code>, <code>domain</code> and <code>path</code> match.</p>
<p>As for additional attributes by newer specs like <code>secure</code> and
<code>sameSite</code>, no behavior seem to be documented but in practice they don‚Äôt
seem to matter, like <code>httpOnly</code>.</p>
<h2 id="real-life-example" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#real-life-example"><span>Real-life example</span></a></h2>
<p>Let‚Äôs build a server with an endpoint that sets a cookie with <code>secure</code>,
<code>httpOnly</code> and <code>sameSite</code>, and another endpoint that clears the cookie
without passing any option.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)
<span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>)

<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()

app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>())

app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.<span class="hljs-title function_">json</span>(req.<span class="hljs-property">cookies</span>)
})

app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/set&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, {
    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>,
    <span class="hljs-attr">maxAge</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>
  })

  res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)
})

app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.<span class="hljs-title function_">clearCookie</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)
  res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)
})

app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9999</span>)
</code></pre>
<p>Interestingly, it appears that both Chrome and Firefox allow cookies
with the <code>secure</code> attribute to be set on <code>http://localhost</code>, which is
convenient to test this feature. Note that on a ‚Äúreal‚Äù domain, you
would need to use HTTPS for <code>secure</code> cookies to be accepted.</p>
<p>If you browse to <code>http://localhost:9999</code> with Chrome or Firefox, you‚Äôll
see an empty JSON object (or whatever cookies already existed on
<code>localhost</code>).</p>
<p>By going to <code>/set</code>, a cookie will be set with
<code>foo=bar; MaxAge=...; Path=/; HttpOnly; Secure; SameSite=Lax</code>, and
redirect to <code>/</code>, showing that the cookie is set.</p>
<p>By going to <code>/clear</code>, the cookie will be cleared with <code>foo=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT</code>, then redirect to <code>/</code>. We can see
there that the cookie was effectively deleted, without needing to
specify other options.</p>
<p>If we repeat the test this time with a different domain or path, we can
see that they indeed need to match with the cookie that was previously
set in order to clear it.</p>
<h2 id="the-browsers-source-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#the-browsers-source-code"><span>The browsers source code</span></a></h2>
<p>We can confirm what we experienced by looking at the source code of
Chrome and Firefox.</p>
<p>Here‚Äôs the <a href="https://github.com/julienw/mozilla-central/blob/04464210145f8f7921447380d76efe0757243610/netwerk/cookie/nsCookieService.cpp#L5167">Firefox code that identifies a cookie from its
attributes</a>:</p>
<pre><code class="hljs language-cpp"><span class="hljs-keyword">if</span> (aHost.<span class="hljs-built_in">Equals</span>(cookie-&gt;<span class="hljs-built_in">Host</span>()) &amp;&amp;
    aPath.<span class="hljs-built_in">Equals</span>(cookie-&gt;<span class="hljs-built_in">Path</span>()) &amp;&amp;
    aName.<span class="hljs-built_in">Equals</span>(cookie-&gt;<span class="hljs-built_in">Name</span>())) {
  aIter = <span class="hljs-built_in">nsListIter</span>(entry, i);
  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
}
</code></pre>
<p>As we can see, it only uses the <code>host</code>, <code>path</code> and <code>name</code> to identify a
cookie.</p>
<p>On the Chrome side, <a href="https://source.chromium.org/chromium/chromium/src/+/main:net/cookies/canonical_cookie.h;drc=379f47d8daef415d929fe269e35e2bd432e1adb4;l=226">the code to test cookie equivalence</a>:</p>
<pre><code class="hljs language-cpp"><span class="hljs-comment">// Are the cookies considered equivalent in the eyes of RFC 2965.</span>
<span class="hljs-comment">// The RFC says that name must match (case-sensitive), domain must</span>
<span class="hljs-comment">// match (case insensitive), and path must match (case sensitive).</span>
<span class="hljs-comment">// For the case insensitive domain compare, we rely on the domain</span>
<span class="hljs-comment">// having been canonicalized (in</span>
<span class="hljs-comment">// GetCookieDomainWithString-&gt;CanonicalizeHost).</span>
<span class="hljs-comment">// If partitioned cookies are enabled, then we check the cookies have the same</span>
<span class="hljs-comment">// partition key in addition to the checks in RFC 2965.</span>
<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEquivalent</span><span class="hljs-params">(<span class="hljs-type">const</span> CanonicalCookie&amp; ecc)</span> <span class="hljs-type">const</span> </span>{
  <span class="hljs-comment">// It seems like it would make sense to take secure, httponly, and samesite</span>
  <span class="hljs-comment">// into account, but the RFC doesn&#x27;t specify this.</span>
  <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> Keep this logic in-sync with TrimDuplicateCookiesForKey().</span>
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">UniqueKey</span>() == ecc.<span class="hljs-built_in">UniqueKey</span>();
}

<span class="hljs-comment">// Returns a key such that two cookies with the same UniqueKey() are</span>
<span class="hljs-comment">// guaranteed to be equivalent in the sense of IsEquivalent().</span>
<span class="hljs-comment">// The `partition_key_` field will always be nullopt when partitioned cookies</span>
<span class="hljs-comment">// are not enabled.</span>
<span class="hljs-function">UniqueCookieKey <span class="hljs-title">UniqueKey</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>{
  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_tuple</span>(partition_key_, name_, domain_, path_);
}
</code></pre>
<p>Chrome also uses the <code>host</code> (<code>domain</code>), <code>path</code> and <code>name</code> to identify a
cookie.</p>
<p>Interestingly, they mention that ‚Äúit seems like it would make sense to
take <code>secure</code>, <code>httpOnly</code>, and <code>sameSite</code> into account, but the RFC
doesn‚Äôt specify this‚Äù.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/clearing-cookies-spec-vs-browsers.html#conclusion"><span>Conclusion</span></a></h2>
<p>Cookies are identified by their <code>name</code>, <code>domain</code> and <code>path</code>. On a single
site, you can have multiple cookies with the same <code>name</code> if their
<code>domain</code> or <code>path</code> differ.</p>
<p>This means that at the time of expiring a cookie, the <code>name</code>
(obviously) as well as <code>domain</code> and <code>path</code> must be the same as when the
cookie was originally set, otherwise it will be treated as a different
cookie and won‚Äôt result in the intended cookie being cleared.</p>
<p>Other attributes like <code>secure</code>, <code>httpOnly</code> and <code>sameSite</code> are not used
to distinguish cookies. They are only <em>attributes</em> of an existing cookie
(addressed by its <code>name</code>, <code>domain</code> and <code>path</code> as we just saw) and you
don‚Äôt need to specify them when clearing a cookie (although it doesn‚Äôt
hurt to include them, but they don‚Äôt have to match either). Both Chrome
and Firefox are currently consistent in that implementation.</p>
<p>That being said, it seems that the Chrome team believes that it would
make sense to also use <code>secure</code>, <code>httpOnly</code> and <code>sameSite</code> to address
cookies, even though they don‚Äôt currently implement it that way, since
the RFC doesn‚Äôt specify this. If this was to change in the future, and
because specifying those attributes when clearing a cookie doesn‚Äôt cause
issues with the current implementation, <strong>I would advise to specify all
the attributes when clearing the cookie</strong> just to be on the safe side.</p>
<p>In my example code earlier, I would recommend to rewrite it as:</p>
<pre><code class="hljs language-js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/set&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, {
    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>,
    <span class="hljs-attr">maxAge</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>
  })

  res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)
})

app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/clear&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.<span class="hljs-title function_">clearCookie</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, {
    <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;lax&#x27;</span>
  })

  res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)
})
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1507444723631407113">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Delete ghost volume from Time Machine snapshot</title>
    <link href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html" />
    <id>https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html</id>
    <updated>2022-03-08T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This is the blog post version of
<a href="https://apple.stackexchange.com/a/438077/452681">my answer to this Stack Exchange question</a>.</p>
<h2 id="why-i-needed-to-remove-a-volume-backup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html#why-i-needed-to-remove-a-volume-backup"><span>Why I needed to remove a volume backup</span></a></h2>
<p>Recently, the external hard drive where I kept some of my video footage
<a href="https://twitter.com/valeriangalliat/status/1491106467310489604">died</a>.</p>
<p>But as I‚Äôm a good citizen and I have a backup (and restore) strategy,
all the data was also mirrored on my Time Machine drive! Yay!</p>
<p>So I proceeded to restore it to another internal drive where I had
enough room.</p>
<p>This could be the end of the story. But Time Machine kept persisting the
backups of that old external drive in all further snapshots.</p>
<p>This is a nice feature, for example if your external drive is unplugged
for a few days, you don‚Äôt want Time Machine to remove it from your
backup history. But in my case, that drive was actually <em>dead</em> and now I
restored it, I didn‚Äôt need this redundant ‚Äúphantom‚Äù backup.</p>
<p>It turns out you can‚Äôt easily delete arbitrary directories in a Time
Machine backup, and the <code>tmutil delete</code> command <a href="https://apple.stackexchange.com/q/333767/452681">doesn‚Äôt let you</a>
delete granular parts of a backup. It‚Äôs either <a href="https://apple.stackexchange.com/a/357114/452681">a whole snapshot, machine directory or backup store</a>.</p>
<p>Luckily, by messing around with the <code>tmutil</code> command, and because I
<a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#finalizing">already played a bit with it</a>,
in the past I figured a way to hack it to remove a specific ghost volume
from a backup!</p>
<h2 id="the-theory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html#the-theory"><span>The theory</span></a></h2>
<p>Time Machine has in its state a directory <code>Video</code> (in my case) in the
backup snapshots, which it associates with <code>/Volumes/Video</code>, or more
specifically, the original disk UUID behind this mount point. Because
that disk is dead, this UUID is never to be seen again. But Time Machine
can‚Äôt know that. From its perspective, it‚Äôs just like this external
drive is unplugged, and it‚Äôs a good thing that it doesn‚Äôt remove it form
backups!</p>
<p>So, if we tell Time Machine that the <code>Video</code> backup directory is now
associated with <em>another</em> disk (that actually exists), it will
effectively put the new backup in it, instead of carrying over the
backup of the dead disk.</p>
<p>And even better, if we associate a disk that is <em>excluded</em> from Time
Machine backups, it will delete the <code>Video</code> directory altogether from
new snapshots!</p>
<h2 id="removing-the-ghost-backup-directory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2022/03/delete-ghost-volume-from-time-machine-snapshot.html#removing-the-ghost-backup-directory"><span>Removing the ghost backup directory</span></a></h2>
<p>First, we need to identify a volume that‚Äôs already excluded from Time
Machine. Go in the Time Machine preferences, and in <kbd>Options‚Ä¶</kbd>, see if
you have an excluded volume. It could be an internal drive that you
explicitly excluded from backups, or an external drive that you never
explicitly included in backups.</p>
<p>If you don‚Äôt have any excluded disk (it needs to be a disk, not a
subdirectory), you can plug a random USB stick or SD card or something
similar.</p>
<p>Let‚Äôs pretend that your excluded disk is a USB stick, in <code>/Volumes/USB</code>,
and I‚Äôm trying to get rid of the <code>Video</code> directory inside my future backup
snapshots:</p>
<pre><code class="hljs language-sh">sudo tmutil associatedisk /Volumes/USB <span class="hljs-string">&quot;/Volumes/{TimeMachineDrive}/Backups.backupdb/{MachineDirectory}/Latest/Video&quot;</span>
</code></pre>
<p>Now Time Machine thinks that the <code>Video</code> directory is associated with
<code>/Volumes/USB</code>, which is excluded, and so, it will exclude it from
future backups!</p>
<p>The history of the dead <code>Video</code> drive will still be present in the older
snapshots, but Time Machine will be able to reclaim the space from it in
the future because that ‚Äúghost‚Äù volume is not being referenced anymore
in the newer backups.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1501544474081640456">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
</feed>
