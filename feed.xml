<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeJam</title>
  <subtitle>Hey, I‚Äôm Val, welcome to my blog!</subtitle>
  <link href="https://www.codejam.info/feed.xml" rel="self" />
  <link href="https://www.codejam.info/" />
  <id>https://www.codejam.info/</id>
  <updated>2023-07-27T22:22:28.041Z</updated>
  <author>
    <name>Val</name>
  </author>
  <entry>
    <title>V√∂lkl Touristick ski poles &amp; Komperdell Ice-Flex baskets</title>
    <link href="https://www.codejam.info/2023/07/volkl-touristick-komperdell-ice-flex.html" />
    <id>https://www.codejam.info/2023/07/volkl-touristick-komperdell-ice-flex.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently bought adjustable ski poles as I was getting into backcountry
skiing. I got the <a href="https://volkl.com/en-ca/p/touristick-ac-poles-adjustable-2023">V√∂lkl Touristick AC</a>.</p>
<p>The poles are great. They‚Äôre lightweight (224 g per pole), the extended
grip is super convenient, and they feel really solid.</p>
<p>However the ‚Äúpowder baskets‚Äù they came with are as tiny as they look on
the product picture. In fact, they have a diameter of 7 cm, which is
just 1 cm more than my groomer poles baskets. üòÖ</p>
<p>Here‚Äôs a comparison of the stock basket (right) with an actual, 10 cm
powder basket (left).</p>
<figure class="center">
  <img alt="" src="https://www.codejam.info/img/2023/07/poles/comparison.jpg">
</figure>
<p>This is much smaller than the competition for backcountry touring ski
poles. For example the <a href="https://www.atomic.com/en-ca/shop/product/bct-touring-aj5005732.html">Atomic BCT Touring</a>
comes with 8.5 cm baskets, and their <a href="https://www.atomic.com/en-ca/shop/product/backland-fr-aj5005314.html">Backland
Freeride</a>
model comes with 9.7 cm baskets. The <a href="https://www.blackdiamondequipment.com/en_US/product/traverse-ski-poles/">Black Diamond Traverse</a>
have 10 cm baskets, and the <a href="https://www.black-crows.com/ca/fr/p/-batons-oxus/101724-020-115.html">Black Crows
Oxus</a>
have 9 cm baskets.</p>
<p>Even a random <a href="https://amzn.to/3OyATE8">cheap powder basket you find on Amazon</a>
is 8.7 cm.</p>
<p>Those small stock baskets provide little to no flotation on deep fluffy
powder. And what do we backcountry skiers like to ski the most? Deep.
Fluffly. Powder.</p>
<figure class="grid grid-2">
  <img alt="" src="https://www.codejam.info/img/2023/07/poles/deep.jpg">
  <img alt="" src="https://www.codejam.info/img/2023/07/poles/powder.jpg">
  <figcaption>You can evaluate the performance of the stock baskets on the second image.</figcaption>
</figure>
<p>So why am I writing this instead of buying the aforementioned cheap
powder baskets on Amazon and installing it on my new poles?</p>
<h2 id="introducing-the-komperdell-ice-flex-system" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/volkl-touristick-komperdell-ice-flex.html#introducing-the-komperdell-ice-flex-system"><span>Introducing the Komperdell Ice-Flex system</span></a></h2>
<p>It turns out the Touristick poles come with a proprietary basket system
by Komperdell. It means you can‚Äôt just screw on any replacement baskets.
It‚Äôs only compatible with Komperdell Ice-Flex‚Ñ¢ baskets.</p>
<p>It‚Äôs defined as a <strong>‚Äúmoveable basket system, that adapts up to 28¬∞ to the
slope inclination‚Äù</strong>. It‚Äôs not exactly obvious what this means, so I
made a quick video to show the mechanism.</p>
<figure class="video">
  <iframe src="https://www.youtube.com/embed/hloFNTuovyo" allowfullscreen></iframe>
</figure>
<p>It doesn‚Äôt seem that this mechanism is widely adopted. I‚Äôve only found
it on Komperdell‚Äôs own poles and V√∂lkl. Depending on where you live
around the world, it may be extremely hard if not impossible to put your
hand on a wider, compatible basket.</p>
<div class="note">
<p><strong>Note:</strong> don‚Äôt confuse it with the Vario basket system (which is
defined as ‚Äúeasy and quick to change‚Äù) because the mounting mechanism is
not gonna be compatible, although it seems a bit more common.</p>
<p>Sidenote, the Ice-Flex baskets were definitely <em>not</em> easy and quick to
change. It took quite a lot of force to clip the basket to the tip, and
same to remove it. Although after a few times taking off and on the
same basket and clip piece, it gets much easier.</p>
</div>
<p>On their website you can look for baskets
<a href="https://www.komperdell.com/en/Poles/Accessories/Baskets/?order=price-desc&amp;p=1&amp;properties=0b437375a8a343b89a327d5f8d327cf0">specifically compatible with the Ice-Flex system</a>,
but they don‚Äôt ship outside Europe, and even if you do live in Europe,
paying ‚Ç¨20 for a ‚Ç¨11.95 pair of baskets is quite steep.</p>
<p>You‚Äôve got 4 options:</p>
<ul>
<li><a href="https://www.komperdell.com/en/Regular-UL-Iceflake-Basket/K9949-925-UNI">Regular UL Ice-Flex basket</a></li>
<li><a href="https://www.komperdell.com/en/Ice-Flex-Basket/K9396-925-UNI">Regular Ice-Flex basket</a></li>
<li><a href="https://www.komperdell.com/en/Large-UL-Iceflake-Basket/K9950-925-UNI">Large UL Ice-Flex basket</a></li>
<li><a href="https://www.komperdell.com/en/Ice-Flex-Winter-Basket-XL/K9385-925-UNI">Large Ice-Flex basket</a></li>
</ul>
<p>It‚Äôs not clear to me what UL means (maybe ultralight?), but it‚Äôs
basically the ‚Äúrounded hexagon‚Äù shape you can see on the right in <a href="https://www.codejam.info/img/2023/07/poles/comparison.jpg">this
picture</a>, while the other kind (not UL) is a
more standard snowflake shape.</p>
<p>They don‚Äôt list the basket diameters on the website, but my guess based
on the ones I managed to get is:</p>
<ul>
<li><strong>Regular UL Ice-Flex basket:</strong> 7 cm <small>(assuming those are the ones that came with my poles)</small></li>
<li><strong>Regular snowflake Ice-Flex basket:</strong> 8.5 cm <small>(I don‚Äôt have those, but they list 8.5 cm on <a href="https://www.tradeinn.com/trekkinn/en/komperdell-ice-flex-winter-basket/136969928/p">this site</a>)</small></li>
<li><strong>Large UL Ice-Flex basket:</strong> 9.5 cm</li>
<li><strong>Large snowflake Ice-Flex basket:</strong> 10 cm</li>
</ul>
<p>I hope you found the information you were looking for. Let me know if
you have any questions or if you want to add any extra information that
could make this post even more useful.</p>
<p>Hopefully someday Komperdell will distribute those wider baskets in
North America. Cheers!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS harvest cursor from any app üòè</title>
    <link href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html" />
    <id>https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>As a pet project I was building a <a href="https://github.com/valeriangalliat/retina-screenshot">screenshot app</a>,
and I wanted its cursors to match the ones of macOS screenshot utility:
<img class="fit-line-height" alt="Crosshair" srcset="../../img/2023/07/macos-cursors/crosshair.png 2x">
and <img class="fit-line-height" alt="Camera" srcset="../../img/2023/07/macos-cursors/camera.png 2x">.</p>
<p>This was harder than expected. I‚Äôll tell you the whole story because I
find it fun and interesting, but feel free to jump straight to <a href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#harvesting-the-cursor-programmatically">the solution</a>.</p>
<h2 id="default-system-cursors-in-nscursor" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#default-system-cursors-in-nscursor"><span>Default system cursors in <code>NSCursor</code></span></a></h2>
<p>In a Mac app, the <code>NSCursor</code> class <a href="https://developer.apple.com/documentation/appkit/nscursor">exposes a number of default cursors</a>,
like the arrow <img class="fit-line-height" alt="Arrow" srcset="../../img/2023/07/macos-cursors/nscursor/arrow.png 2x">,
I-beam <img class="fit-line-height" alt="I-beam" srcset="../../img/2023/07/macos-cursors/nscursor/i-beam.png 2x">,
pointing hand <img class="fit-line-height" alt="Pointing hand" srcset="../../img/2023/07/macos-cursors/nscursor/pointing-hand.png 2x">,
various resize cursors, and even a cute ‚Äúdisappearing item‚Äù cursor <img class="fit-line-height" alt="Disappearing item" srcset="../../img/2023/07/macos-cursors/nscursor/disappearing-item.png 2x">
(that I kinda want to name ‚Äúpoof‚Äù for some reason).</p>
<p>There is also a crosshair cursor <img class="fit-line-height" alt="Crosshair" srcset="../../img/2023/07/macos-cursors/nscursor/crosshair.png 2x">,
however it‚Äôs not the same that the system screenshot utility uses. And
the camera cursor is nowhere to be found.</p>
<p>So our last resort is to set a custom cursor from an image, e.g. for a
cursor that‚Äôs 32x32 pixels where we want the ‚Äúhot spot‚Äù to be in the
middle:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> <span class="hljs-type">NSImage</span>(named: <span class="hljs-string">&quot;cursor.png&quot;</span>)
<span class="hljs-keyword">let</span> hotSpot <span class="hljs-operator">=</span> <span class="hljs-type">NSPoint</span>(x: <span class="hljs-number">16</span>, y: <span class="hljs-number">16</span>)
<span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> <span class="hljs-type">NSCursor</span>(image: image, hotSpot: hotSpot)
</code></pre>
<p>But what image do we use here?</p>
<h2 id="macos-default-cursors-source-location" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#macos-default-cursors-source-location"><span>macOS default cursors source location?</span></a></h2>
<p>By doing a bit of digging in the <code>/System</code> directory, we find the
following path:</p>
<pre><code class="hljs">/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/Resources/cursors
</code></pre>
<p>This seems to contain all the system cursors, one directory for each,
containing a <code>cursor.pdf</code> and <code>info.plist</code>!</p>
<p>Here, we effectively have <code>screenshotselection</code> that matches the
screen capture utility‚Äôs crosshair, and <code>screenshotwindow</code> that matches
the camera cursor shown during window selection. Neat.</p>
<p>Parsing the <code>info.plist</code>, we find the hot spot coordinates:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">plutil -p /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/Resources/cursors/screenshotselection/info.plist</span>
{
  &quot;hotx&quot; =&gt; 15
  &quot;hotx-scaled&quot; =&gt; 15
  &quot;hoty&quot; =&gt; 15
  &quot;hoty-scaled&quot; =&gt; 15
}
</code></pre>
<p>We can now load those programmatically:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">loadCursor</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">name</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">NSCursor</span>? {
  <span class="hljs-keyword">let</span> root <span class="hljs-operator">=</span>
    <span class="hljs-string">&quot;/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/Resources/cursors&quot;</span>

  <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> <span class="hljs-type">FileManager</span>.default.contents(atPath: <span class="hljs-string">&quot;<span class="hljs-subst">\(root)</span>/<span class="hljs-subst">\(name)</span>/info.plist&quot;</span>)
  <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">guard</span>
    <span class="hljs-keyword">let</span> plist <span class="hljs-operator">=</span> <span class="hljs-keyword">try?</span> <span class="hljs-type">PropertyListSerialization</span>.propertyList(from: data, options: [], format: <span class="hljs-literal">nil</span>)
      <span class="hljs-keyword">as?</span> [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>]
  <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> pdfData <span class="hljs-operator">=</span> <span class="hljs-keyword">try?</span> <span class="hljs-type">Data</span>(contentsOf: <span class="hljs-type">URL</span>(fileURLWithPath: <span class="hljs-string">&quot;<span class="hljs-subst">\(root)</span>/<span class="hljs-subst">\(name)</span>/cursor.pdf&quot;</span>))
  <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> cursorImage <span class="hljs-operator">=</span> <span class="hljs-type">NSImage</span>(data: pdfData) <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
  }

  <span class="hljs-keyword">let</span> hotSpot <span class="hljs-operator">=</span> <span class="hljs-type">NSPoint</span>(
    x: plist[<span class="hljs-string">&quot;hotx&quot;</span>] <span class="hljs-keyword">as!</span> <span class="hljs-type">Int</span>? <span class="hljs-operator">??</span> <span class="hljs-type">Int</span>(cursorImage.size.width) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>,
    y: plist[<span class="hljs-string">&quot;hoty&quot;</span>] <span class="hljs-keyword">as!</span> <span class="hljs-type">Int</span>? <span class="hljs-operator">??</span> <span class="hljs-type">Int</span>(cursorImage.size.height) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>
  )

  <span class="hljs-keyword">return</span> <span class="hljs-type">NSCursor</span>(image: cursorImage, hotSpot: hotSpot)
}
</code></pre>
<p>Let‚Äôs use this function in a basic example to demonstrate it:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared

<span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> loadCursor(<span class="hljs-string">&quot;screenshotselection&quot;</span>) {
  <span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="hljs-operator">+</span> <span class="hljs-number">1</span>) {
    cursor.set()
  }
}

app.setActivationPolicy(.regular)
app.activate(ignoringOtherApps: <span class="hljs-literal">true</span>)
app.run()
</code></pre>
<div class="note">
<p><strong>Note:</strong> here we call <code>cursor.set()</code> after a delay because it
<a href="https://stackoverflow.com/a/39905020">doesn‚Äôt</a>
<a href="https://stackoverflow.com/a/13848213">always</a> work when called right
away for reasons that are not familiar to me.</p>
<p>In a real app, you probably want to subclass <code>NSView</code>, override
<code>resetCursorRects</code>, and call <code>addCursorRect</code> in it.</p>
</div>
<p>This actually looks good for the camera! But for the crosshair, it
doesn‚Äôt seem to match the original one.</p>
<p>The original crosshair size appears to be 50x50 pixels, while this one
is 46x46. More importantly, the original one has some kind of light outline
that makes it visible on darker backgrounds, that is completely missing
from that cursor PDF we just found. You can see the difference easily:</p>
<table>
  <tr>
    <th>Original</th>
    <th>Custom</th>
  </tr>
  <tr>
    <td><img alt="Original crosshair over grey background" srcset="../../img/2023/07/macos-cursors/hiservices/orig-grey.png 2x"></td>
    <td><img alt="Custom crosshair over grey background" srcset="../../img/2023/07/macos-cursors/hiservices/custom-grey.png 2x"></td>
  </tr>
  <tr>
    <td><img alt="Original crosshair over dark background" srcset="../../img/2023/07/macos-cursors/hiservices/orig-dark.png 2x"></td>
    <td><img alt="Custom crosshair over dark background" srcset="../../img/2023/07/macos-cursors/hiservices/custom-dark.png 2x"></td>
  </tr>
</table>
<p>So the screen capture utility doesn‚Äôt seem to be using this cursor from
<code>HIServices.framework</code>.</p>
<p>I tried exploring the contents of the screen capture app in
<code>/System/Library/CoreServices/screencaptureui.app</code>, especially the
<code>Contents/Resources/Assets.car</code> file, exploring it using
<a href="https://github.com/insidegui/AssetCatalogTinkerer">Asset Catalog Tinkerer</a>,
but it didn‚Äôt contain anything useful.</p>
<h2 id="harvesting-the-cursor-programmatically" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#harvesting-the-cursor-programmatically"><span>Harvesting the cursor programmatically</span></a></h2>
<p>The next idea I tried was to see if I could somehow access the cursor
data from <em>other</em> apps from my Swift app.</p>
<p>It turns out <code>NSCursor</code> exposes a <a href="https://developer.apple.com/documentation/appkit/nscursor/1533611-currentsystem"><code>currentSystem</code></a>
property, containing current system cursor (as opposed to
<code>NSCursor.current</code> that contains your own application‚Äôs current cursor).</p>
<p>This way we can easily access the image data of the <code>currentSystem</code>
cursor, as well as its <code>hotSpot</code> to be used later in our own custom
cursor.</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">let</span> cursor <span class="hljs-operator">=</span> <span class="hljs-type">NSCursor</span>.currentSystem<span class="hljs-operator">!</span>

<span class="hljs-built_in">print</span>(cursor.hotSpot)

<span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> cursor.image.cgImage(forProposedRect: <span class="hljs-literal">nil</span>, context: <span class="hljs-literal">nil</span>, hints: <span class="hljs-literal">nil</span>)<span class="hljs-operator">!</span>
<span class="hljs-keyword">let</span> bitmap <span class="hljs-operator">=</span> <span class="hljs-type">NSBitmapImageRep</span>(cgImage: image)
<span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> bitmap.representation(using: .png, properties: [:])<span class="hljs-operator">!</span>
<span class="hljs-keyword">try!</span> data.write(to: <span class="hljs-type">URL</span>(fileURLWithPath: <span class="hljs-string">&quot;cursor.png&quot;</span>))
</code></pre>
<p>We can put this code in a file <code>test.swift</code>, and run it with <code>sleep 5 &amp;&amp; swift test.swift</code>.
This gives us 5 seconds to do whatever is needed to show the cursor we
want to harvest, before our script actually runs and saves the current
system cursor to a PNG file.</p>
<p>In the case of the screen capture utility crosshair, I‚Äôve got this
(pictured over transparent, grey and dark background to show how well it
reacts to those):</p>
<table>
  <tr>
    <td><img alt="Harvested crosshair" srcset="../../img/2023/07/macos-cursors/crosshair-raw.png 2x"></td>
    <td style="background-color: #3f3f40"><img alt="Harvested crosshair over grey background" srcset="../../img/2023/07/macos-cursors/crosshair-raw.png 2x"></td>
    <td style="background-color: #111111"><img alt="Harvested crosshair over dark background" srcset="../../img/2023/07/macos-cursors/crosshair-raw.png 2x"></td>
  </tr>
</table>
<p>Perfect. üëå</p>
<p>I didn‚Äôt want to get into adding support for showing the dynamic
coordinates as part of the cursor, so as far as I‚Äôm concerned, I got rid
of those and used just the crosshair in my app.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/macos-harvest-cursor-from-any-app.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>I hope you found this post useful! Now if you want to get the cursor
data from any app, in its original transparent quality, you can use the
simple script above to do so. Enjoy!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Swift: support cut/copy/paste shortcuts in a NSOpenPanel and NSSavePanel</title>
    <link href="https://www.codejam.info/2023/07/swift-nsopenpanel-nssavepanel-edit-shortcuts.html" />
    <id>https://www.codejam.info/2023/07/swift-nsopenpanel-nssavepanel-edit-shortcuts.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Let‚Äôs consider this basic Swift app that simply shows an <code>NSSavePanel</code>:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">NSApplicationDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">applicationDidFinishLaunching</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">notification</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
    app.activate(ignoringOtherApps: <span class="hljs-literal">true</span>)

    <span class="hljs-keyword">let</span> savePanel <span class="hljs-operator">=</span> <span class="hljs-type">NSSavePanel</span>()
    savePanel.runModal()
  }
}

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">AppDelegate</span>()

app.setActivationPolicy(.regular)
app.delegate <span class="hljs-operator">=</span> delegate
app.run()
</code></pre>
<p>This shows a generic open panel as expected:</p>
<figure class="center">
  <img alt="Open panel" srcset="../../img/2023/07/open-panel.png 2x">
</figure>
<p>However we have a problem: we can‚Äôt cut, copy or paste in of the text
fields (<strong>Save As</strong>, <strong>Tags</strong>, <strong>Search</strong>). We can‚Äôt <kbd>Command</kbd>
+ <kbd>X</kbd>, <kbd>C</kbd> or <kbd>V</kbd>. All those shortcuts do is
playing an annoying <em>beep</em> noise telling us we can‚Äôt do that.</p>
<p><strong>This is because on macOS, those shortcuts are actually tied to menu
items.</strong> You can‚Äôt have <kbd>Command</kbd> + <kbd>C</kbd> work unless
you have a matching menu item, typically <strong>Edit &gt; Copy</strong>.</p>
<h2 id="adding-an-edit-menu" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/swift-nsopenpanel-nssavepanel-edit-shortcuts.html#adding-an-edit-menu"><span>Adding an edit menu</span></a></h2>
<p>To solve this, we‚Äôre gonna add an edit menu tour app with the proper
shortcuts.</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> mainMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()
app.mainMenu <span class="hljs-operator">=</span> mainMenu

<span class="hljs-keyword">let</span> appMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
mainMenu.addItem(appMenu)

<span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
mainMenu.addItem(editMenu)

<span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>)
editMenu.submenu <span class="hljs-operator">=</span> editSubmenu

editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Cut&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.cut(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;x&quot;</span>)
editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Copy&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.copy(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;c&quot;</span>)
editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Paste&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.paste(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;v&quot;</span>)

editSubmenu.addItem(
  withTitle: <span class="hljs-string">&quot;Select All&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSText</span>.selectAll(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;a&quot;</span>)
</code></pre>
<p>We now have a nice edit menu:</p>
<figure class="center">
  <img alt="Edit menu" srcset="../../img/2023/07/edit-menu.png 2x">
</figure>
<p>Here, we leverage <em>automatic menu enabling</em> in the <code>action</code> in order to map
menu items and shortcuts to the first object in the responder chain that
implements the given action, as explained in <a href="https://stackoverflow.com/a/47577869">this Stack Overflow post</a>.</p>
<p>This is pretty neat, and thanks to this feature, we now have working
cut/copy/paste in our dialog!</p>
<p>As a bonus, it would be a good practice to also add a way to quit our
app using the same method:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> appSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()
appMenusubmenu <span class="hljs-operator">=</span> appSubmenu

appSubmenu.addItem(
  withTitle: <span class="hljs-string">&quot;Quit&quot;</span>, action: <span class="hljs-keyword">#selector</span>(<span class="hljs-type">NSApplication</span>.terminate(<span class="hljs-keyword">_</span>:)), keyEquivalent: <span class="hljs-string">&quot;q&quot;</span>)
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Swift: NSMenuItem title not showing</title>
    <link href="https://www.codejam.info/2023/07/swift-nsmenuitem-title-blank.html" />
    <id>https://www.codejam.info/2023/07/swift-nsmenuitem-title-blank.html</id>
    <updated>2023-07-27T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If for some reason you‚Äôre making a Swift app and want to
programmatically define your menu items, as opposed to using Xcode‚Äôs
storyboards to create them visually, you may run into an issue where
your menu title is not showing.</p>
<p>Let‚Äôs consider the following example (e.g. put it in <code>test.swift</code> and
run it with <code>swift test.swift</code>):</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">import</span> Cocoa

<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppDelegate</span>: <span class="hljs-title class_">NSObject</span>, <span class="hljs-title class_">NSApplicationDelegate</span> {
  <span class="hljs-keyword">func</span> <span class="hljs-title function_">applicationDidFinishLaunching</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">notification</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
    app.activate(ignoringOtherApps: <span class="hljs-literal">true</span>)

    <span class="hljs-keyword">let</span> mainMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()
    app.mainMenu <span class="hljs-operator">=</span> mainMenu

    <span class="hljs-keyword">let</span> appMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
    mainMenu.addItem(appMenu)

    <span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)
    mainMenu.addItem(editMenu)

    <span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()

    editSubmenu.addItem(withTitle: <span class="hljs-string">&quot;Test&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)
    editMenu.submenu <span class="hljs-operator">=</span> editSubmenu
  }
}

<span class="hljs-keyword">let</span> app <span class="hljs-operator">=</span> <span class="hljs-type">NSApplication</span>.shared
<span class="hljs-keyword">let</span> delegate <span class="hljs-operator">=</span> <span class="hljs-type">AppDelegate</span>()

app.setActivationPolicy(.regular)
app.delegate <span class="hljs-operator">=</span> delegate
app.run()
</code></pre>
<p>When we run it, the edit menu doesn‚Äôt show. Or actually, it‚Äôs there but
its text is blank!</p>
<figure class="center">
  <img alt="Blank edit menu" srcset="../../img/2023/07/swift-edit-blank.png 2x">
</figure>
<p><strong>This is because the <code>NSMenuItem</code> title actually doesn‚Äôt matter here.</strong>
It‚Äôs the title of the <code>NSMenu</code> that we use as a submenu that matters.</p>
<p>Let‚Äôs fix it up:</p>
<pre><code class="hljs language-diff:swift"><span class="hljs-deletion">-<span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)</span>
<span class="hljs-addition">+<span class="hljs-keyword">let</span> editMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>(title: <span class="hljs-string">&quot;Doesn&#x27;t matter&quot;</span>, action: <span class="hljs-literal">nil</span>, keyEquivalent: <span class="hljs-string">&quot;&quot;</span>)</span>
 mainMenu.addItem(editMenu)

<span class="hljs-deletion">-<span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>()</span>
<span class="hljs-addition">+<span class="hljs-keyword">let</span> editSubmenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenu</span>(title: <span class="hljs-string">&quot;Edit&quot;</span>)</span>
</code></pre>
<p>And now our title shows up properly!</p>
<figure class="center">
  <img alt="Good edit menu" srcset="../../img/2023/07/swift-edit-good.png 2x">
</figure>
<h2 id="a-note-about-the-app-menu" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/07/swift-nsmenuitem-title-blank.html#a-note-about-the-app-menu"><span>A note about the app menu</span></a></h2>
<p>In the example above, note that it was also important to explicitly add
an app menu before our edit menu:</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> appMenu <span class="hljs-operator">=</span> <span class="hljs-type">NSMenuItem</span>()
mainMenu.addItem(appMenu)
</code></pre>
<p>This is important, because the first item of the main menu is gonna be
treated as the app menu. If we didn‚Äôt do that, our edit menu would
actually become the app menu, so that <strong>Test</strong> would appear under
<strong>swift-frontend</strong>, and <strong>Edit</strong> would be nowhere to be seen.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Using zx with TypeScript, ESM and top-level await</title>
    <link href="https://www.codejam.info/2023/04/zx-typescript-esm.html" />
    <id>https://www.codejam.info/2023/04/zx-typescript-esm.html</id>
    <updated>2023-04-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/google/zx"><code>zx</code></a> is a cool library by Google to
write shell-like scripts in Node.js.</p>
<p>As shown in their main example, you could have a file <code>myscript.mjs</code>:</p>
<pre><code class="hljs language-js">#!<span class="hljs-regexp">/usr/</span>bin/env zx

<span class="hljs-keyword">await</span> $<span class="hljs-string">`cat package.json | grep name`</span>
</code></pre>
<p>And run it as <code>./myscript.mjs</code>, or even put it in your <code>PATH</code> and run it
as <code>myscript.mjs</code>.</p>
<p>This works if you installed <code>zx</code> globally. If you want to keep it local,
<code>#!/usr/bin/env npx zx</code> should work with most <code>env</code> implementations.</p>
<p>They say that you <em>have</em> to use a <code>.mjs</code> extension, and if you prefer
<code>.js</code> or no extension at all, you won‚Äôt have access to top-level
<code>await</code>, and you need to wrap your code in an
<abbr title="Immediately invoked function expression">IIFE</abbr>:</p>
<pre><code class="hljs language-js">#!<span class="hljs-regexp">/usr/</span>bin/env zx

<span class="hljs-keyword">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`cat package.json | grep name`</span>
}()
</code></pre>
<p><strong>This actually doesn‚Äôt appear to be necessary!</strong> It looks like when
invoking the script via <code>zx</code>, it <em>forces</em> it to be interpreted as an
ECMAScript module, even without extension, so the original example will
work regardless of how the script is named. Sweet.</p>
<p>What if you want TypeScript though? They just document that you need to
explicitly import <code>zx</code> and use an IIFE again:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>
<span class="hljs-comment">// Or</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;zx/globals&#x27;</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`ls -la`</span>
}()
</code></pre>
<p>But they also tell you that you need to set <code>&quot;type&quot;: &quot;module&quot;</code> in your
<code>package.json</code> and <code>&quot;module&quot;: &quot;esnext&quot;</code> in <code>tsconfig.json</code>. There‚Äôs no
mention what shebang to use, nor what file extension.</p>
<p>It turns out you don‚Äôt necessarily need to do all this. Let‚Äôs dig in the
details.</p>
<h2 id="shebang-for-a-typescript-script" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#shebang-for-a-typescript-script"><span>Shebang for a TypeScript script</span></a></h2>
<p>It‚Äôs clear that <code>zx</code> doesn‚Äôt support TypeScript out of the box, so we
can ditch the <code>#!/usr/bin/env -S npx zx</code> shebang. We need something that
will parse TypeScript, and because we can‚Äôt rely on the <code>zx</code> wrapper,
we‚Äôll need to import <code>zx</code> explicitly. No problem.</p>
<p>Let‚Äôs go with <a href="https://www.npmjs.com/package/ts-node"><code>ts-node</code></a> first,
because it‚Äôs one of the most common options to do this.</p>
<p>TypeScript defaults to transpiling to CommonJS modules, so we won‚Äôt be
able to use top-level <code>await</code> out of the box. We also won‚Äôt be able to
use an <code>import</code> statement (that TypeScript translates to <code>require</code>) to
import <code>zx</code>, because <code>zx</code> is an ESM-only package. But we can use dynamic
<code>import</code> for that:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> { $ } = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;zx&#x27;</span>)
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
}()
</code></pre>
<p>You‚Äôll also need to set <code>&quot;moduleResolution&quot;: &quot;nodenext&quot;</code> in the
<code>compilerOptions</code> of your <code>tsconfig.json</code> for it to support dynamic
imports like this, but you have to be careful, because this will change
the settings for your whole app!</p>
<p>Alternatively, you could put your script in a subdirectory, and have a
dedicated <code>tsconfig.json</code> there, then you could set those settings
locally to this subdirectory without affecting the rest of your app.</p>
<p>The advantage of this method is that <strong>the extension doesn‚Äôt matter</strong>!
You can have this script in <code>myscript.ts</code> but you can as well have it
just <code>myscript</code> for being more command-looking. This a pretty good
advantage of this solution as we‚Äôll see later.</p>
<div class="note">
<p><strong>Note:</strong> keep in mind because this will run in whatever directory the
script was run from, <code>npx</code> will try to install <code>ts-node</code> globally if
you‚Äôre not running this from a directory where <code>ts-node</code> is part of the
local modules.</p>
<p>Most of the time this is fine, but if you want a script that can be
called from anywhere, you would be better off using a wrapper shell
script, like we‚Äôll see below.</p>
</div>
<h2 id="configuring-typescript-in-the-shebang" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#configuring-typescript-in-the-shebang"><span>Configuring TypeScript in the shebang</span></a></h2>
<p>Alternatively, we can pass <code>--compilerOptions</code> to <code>ts-node</code> directly in
the shebang to avoid depending on a <code>tsconfig.json</code>. The problem is
that there‚Äôs no cross-platform way to this (this is made harder by the
fact we have to pass a JSON string).</p>
<p>On macOS:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env npx ts-node --compilerOptions {&quot;moduleResolution&quot;:&quot;nodenext&quot;}</span>
</code></pre>
<p>On Linux:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;}&#x27;</span>
</code></pre>
<p>Notice how on macOS, the quotes of the JSON object were <em>not</em> escaped!
Its implementation of  <code>env</code> doesn‚Äôt try to parse quotes in the first
place, so we can (and need) to give them as is. This also means we can‚Äôt
include spaces as the JSON would be split into multiple arguments.</p>
<p>For Linux, we have to pass <code>-S</code> (makes <code>env</code> split arguments), but then
it <em>does</em> support quoting and various escape sequences, so we <em>have</em> to
add the quotes. macOS ‚Äúsupports‚Äù the <code>-S</code> option but currently it just
ignores it and treats the rest of the string as it normally does.</p>
<p>Sadly I‚Äôm not aware of a way to do this in a cross-platform way, without
having to resort to a wrapper shell script. If you have a better option,
let me know!</p>
<p>Such a script would look like:</p>
<pre><code class="hljs language-sh"><span class="hljs-meta">#!/bin/sh</span>

<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>&quot;</span>
npx ts-node --compilerOptions <span class="hljs-string">&#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;}&#x27;</span> myscript.ts
</code></pre>
<p>It would be in a <code>myscript</code> file next to <code>myscript.ts</code>, and you invoke
it with <code>./myscript</code>.</p>
<div class="note">
<p>This will not preserve the <abbr title="Current working directory">CWD</abbr>
information, because it <code>cd</code> into the script directory first. The
advantage is that now <code>npx</code> will find your local version of <code>ts-node</code>
regardless where you run the script from.</p>
</div>
<p>At that point you could even bypass <code>npx</code>, e.g. if your script is in a
<code>bin</code> directory at the root of your project, you could run
<code>../node_modules/.bin/ts-node</code> instead of <code>npx ts-node</code> and remove the
extra latency from <code>npx</code>.</p>
<p><strong>For the rest of this post I‚Äôll user the Linux version of the shebang
for simplicity. Adapt accordingly to your needs, either for macOS or
using a script wrapper for portability.</strong></p>
<h2 id="adding-esm-support" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#adding-esm-support"><span>Adding ESM support</span></a></h2>
<p><strong>If you want to import other parts of your codebase, you should
probably stick with the previous approach.</strong> I‚Äôll continue by exploring
options to make <em>this particular script</em> ESM, but keep in mind that if
you import non-ESM parts of your application, this will confuse
TypeScript (especially with default exports) and you‚Äôll likely run into
issues.</p>
<p>If you don‚Äôt though, we have a few ways to force it to be ESM, so we can
directly import <code>zx</code> and also use top-level <code>await</code>!</p>
<p><code>ts-node</code> has a <code>--esm</code> option to parse the input as ECMAScript module,
and even ships a <a href="https://github.com/TypeStrong/ts-node#esm"><code>ts-node-esm</code></a>
executable to do the same thing.</p>
<p>On top of that, we need to configure the TypeScript compiler to support
ESM, which we do by adding the following to our <code>tsconfig.json</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodenext&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>As we saw earlier, we can pass that to <code>ts-node</code> in a
<code>--compilerOptions</code> flag. This gives us:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --esm --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>We can now import <code>zx</code> directly and happily use to-level <code>await</code>, and
get rid of that IIFE!</p>
<p>One thing we notice right away though is that the <code>ts-node</code> ESM loader
doesn‚Äôt let us use any extension (or in particular, no extension). <strong>It
<em>needs</em> to be in a <code>.mts</code> file.</strong> This means no more command-looking
script. It seems to be related to <a href="https://github.com/nodejs/node/issues/34049">this issue</a>
on the Node.js side.</p>
<h2 id="making-it-faster" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#making-it-faster"><span>Making it faster</span></a></h2>
<p><code>ts-node</code> doesn‚Äôt have a reputation to be fast, actually quite the
opposite. Its excuse is that it not only transpiles TypeScript to
JavaScript, but also performs type checking.</p>
<h2 id="using-ts-node-transpile-only" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-ts-node-transpile-only"><span>Using <code>ts-node --transpile-only</code></span></a></h2>
<p>We can pass <code>--transpile-only</code> to skip the type checking part, which
does improve the performance quite a bit:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --esm --transpile-only --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>This small example takes 500 ms to run on my machine, as opposed to 1
second when it was doing type checking!</p>
<pre><code class="hljs language-console">time ./myscript.mts
1.61s user 0.13s system 152% cpu 1.137 total

time ./myscript-transpile-only.mts
0.48s user 0.09s system 96% cpu 0.587 total
</code></pre>
<p>It‚Äôs still relatively slow though, considering <a href="https://esbuild.github.io/">esbuild</a>
takes 15 ms to transpile that file:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time node_modules/.bin/esbuild myscript.mts --target=node16</span>
0.01s user 0.01s system 79% cpu 0.014 total
</code></pre>
<p>But for a fair comparison, we have to consider that <code>npx</code> adds a 200 ms
overhead:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time npx esbuild myscript.mts --target=node16</span>
0.21s user 0.04s system 111% cpu 0.227 total
</code></pre>
<h3 id="using-tsx" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-tsx"><span>Using <code>tsx</code></span></a></h3>
<p>Interestingly, there‚Äôs a cool project called <a href="https://github.com/esbuild-kit/tsx"><code>tsx</code></a>,
which is TypeScript‚Äôs analogue to <code>npx</code>. And it uses esbuild in the
background.</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx tsx</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>But we notice it‚Äôs not quite fast, it does barely better than <code>ts-node --transpile-only</code>:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time ./myscript.mts</span>
0.42s user 0.08s system 120% cpu 0.413 total
</code></pre>
<p>There‚Äôs <a href="https://github.com/esbuild-kit/tsx/issues/167">an issue open for that</a>,
and it seems that it‚Äôs because <code>tsx</code> target older Node.js versions in a
way where it transpiles all the imported <code>node_modules</code> too! And it
seems that there‚Äôs currently no way around this behavior.</p>
<p>And again, this relies on a <code>.mts</code> extension being present for ESM
support. And even if you go the CommonJS route, you‚Äôll still need a
<code>.ts</code> extension, unlike when using <code>ts-node</code>. It won‚Äôt work with
extensionless scripts.</p>
<h3 id="using-swc" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-swc"><span>Using SWC</span></a></h3>
<p><a href="https://swc.rs/">SWC</a> is a ‚ÄúRust-based platform for the web‚Äù, but
really the part I care about is that it claims to transpile TypeScript
to JavaScript <em>pretty damn fast</em>, just like esbuild.</p>
<p>They provide <a href="https://github.com/swc-project/swc-node"><code>swc-node</code></a> to
run TypeScript files with Node.js, which is exactly what we want. It‚Äôs
not directly a command we can invoke unlike <code>ts-node</code>, instead we need
to do:</p>
<pre><code class="hljs language-sh">node --require @swc-node/register script.ts <span class="hljs-comment"># CJS</span>
node --loader @swc-node/register/esm script.ts <span class="hljs-comment"># ESM</span>
</code></pre>
<p>So we can and that to our shebang!</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S node --loader @swc-node/register/esm</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>This is the fastest one so far!</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">time ./myscript.mts</span>
0.28s user 0.04s system 110% cpu 0.289 total
</code></pre>
<p>However, we have to consider that it uses <code>node --loader</code>
instead of <code>npx</code> like the previous examples, and as we saw <code>npx</code> costs
200 ms by itself.</p>
<p>Also, even with today‚Äôs latest Node.js, custom ESM loaders are
experimental, so running the script like this will show the following
warning:</p>
<pre><code class="hljs">(node:13239) ExperimentalWarning: Custom ESM Loaders is an experimental feature and might change at any time
</code></pre>
<p>Also you need to make sure your <code>tsconfig.json</code> contains <code>&quot;target&quot;: &quot;esnext&quot;</code>
in <code>compilerOptions</code> otherwise SWC will not let you use top-level
<code>await</code>. Unlike the previous options, we can‚Äôt customize this directly
in the shebang.</p>
<p>Lastly, we also need a <code>.mts</code> extension for this to work, like with all
the ESM solutions so far.</p>
<div class="note">
<p><strong>Note:</strong> I couldn‚Äôt get <code>swc-node</code> to work with a CJS file, with the
IIFE and dynamic <code>import</code>. Even with a <code>.swcrc</code>, which requires running
your code as <code>SWCRC=true ./myscript.ts</code>, it keeps transpiling the
dynamic <code>import</code> into a <code>require</code> statement, which is not supported by
<code>zx</code>.</p>
</div>
<h3 id="using-swc-with-ts-node" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#using-swc-with-ts-node"><span>Using SWC with <code>ts-node</code></span></a></h3>
<p>A cool surprised I found while writing this post is that <code>ts-node</code>
actually have <a href="https://typestrong.org/ts-node/docs/swc/">first-class support for SWC</a>!</p>
<p>All you need is install <code>@swc/core</code> or <code>@swc/wasm</code>, and then simply use
<code>ts-node --swc</code>, or set the following in your <code>tsconfig.json</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;ts-node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;swc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>In our initial example, this gives us:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> { $ } = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;zx&#x27;</span>)
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
}()
</code></pre>
<div class="note">
<p><strong>Note:</strong> we had to add <code>&quot;module&quot;: &quot;esnext&quot;</code> too, probably because
<code>ts-node</code> and SWC have different defaults when it comes to this setting.</p>
</div>
<p>And for the ESM version:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --esm --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/zx-typescript-esm.html#conclusion"><span>Conclusion</span></a></h2>
<p>All things considered, my favorite option is the <code>ts-node</code> approach we
started from but with a few tweaks that we learnt about along the way:
plain <code>ts-node</code> in the default CommonJS environment, using an IIFE and
dynamic <code>import</code>, but with the addition of <code>--compilerOptions</code> and
<code>--swc</code> (or alternatively, <code>--transpile-only</code>) in the shebang:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-built_in">void</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> { $ } = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;zx&#x27;</span>)
  <span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
}()
</code></pre>
<ul>
<li>We can configure TypeScript directly in the shebang, no need to
maintain a separate <code>tsconfig.json</code> for our executable scripts.</li>
<li>We can import any of our project TypeScript files with no CJS/ESM
interoperability issues.</li>
<li>It‚Äôs reasonably fast.</li>
</ul>
<p>The downside is that it‚Äôs not cross-platform, but we saw we can use a
wrapper script to work around that if needed.</p>
<p>And if I don‚Äôt need need to import anything local to my CommonJS
project (or if I‚Äôm in a ESM project), I add <code>--esm</code> and <code>&quot;target&quot;: &quot;esnext&quot;</code>
to benefit from top-level <code>await</code>:</p>
<pre><code class="hljs language-ts"><span class="hljs-meta">#!/usr/bin/env -S npx ts-node --swc --esm --compilerOptions &#x27;{&quot;moduleResolution&quot;:&quot;nodenext&quot;,&quot;module&quot;:&quot;esnext&quot;,&quot;target&quot;:&quot;esnext&quot;}&#x27;</span>

<span class="hljs-keyword">import</span> { $ } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zx&#x27;</span>

<span class="hljs-keyword">await</span> $<span class="hljs-string">`echo ok`</span>
</code></pre>
<p>Sweet!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS reset app window to default size and position</title>
    <link href="https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html" />
    <id>https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html</id>
    <updated>2023-04-20T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Maybe it‚Äôs because I‚Äôm a bit of a perfectionist, but I sometimes like to
reset an app‚Äôs window to its default size and position. It looks like
I‚Äôm <a href="https://superuser.com/q/1485027">definitely</a>
<a href="https://apple.stackexchange.com/q/195479/452681">not</a>
<a href="https://discussions.apple.com/thread/250618907">the</a>
<a href="https://www.reddit.com/r/MacOS/comments/hbbg7z/reset_default_window_positionsize_in_catalina/">only one</a>.</p>
<p>The summary of the above links is that the window information is usually
stored in <code>~/Library/Preferences</code> or <code>~/Library/Saved Application State</code>, and you can get away with removing the matching application
preferences files in one of those locations, or carefully editing it to
remove <em>just</em> the window position if that‚Äôs what you want.</p>
<p>This is generally true, but not all the time (as shown in the
<a href="https://apple.stackexchange.com/a/195494/452681">case of the Mail app</a>).</p>
<p>This means this solution isn‚Äôt perfect. Did I say I was a perfectionist?</p>
<h2 id="finding-every-window-position-preferences" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html#finding-every-window-position-preferences"><span>Finding <em>every</em> window position preferences</span></a></h2>
<p>From the files we could find from the earlier solution, we can see that
the window position is either in a <code>NSWindowFrame</code> key, or a key that
starts with <code>NSWindow Frame</code>, e.g. for Activity Monitor and Finder:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">plutil -p ~/Library/Preferences/com.apple.ActivityMonitor.plist | grep NSWindow | grep Frame</span>
  &quot;NSWindow Frame main window&quot; =&gt; &quot;161 208 960 640 0 0 1728 1079 &quot;
<span class="hljs-meta prompt_">
$ </span><span class="language-bash">plutil -p ~/Library/Saved\ Application\ State/com.apple.finder.savedState/windows.plist | grep NSWindow | grep Frame</span>
    &quot;NSWindowCloseButtonFrame&quot; =&gt; &quot;{{19, 876}, {14, 16}}&quot;
    &quot;NSWindowFrame&quot; =&gt; &quot;42 1193 1652 910 -87 1117 1920 1055 &quot;
    &quot;NSWindowMiniaturizeButtonFrame&quot; =&gt; &quot;{{39, 876}, {14, 16}}&quot;
    &quot;NSWindowZoomButtonFrame&quot; =&gt; &quot;{{59, 876}, {14, 16}}&quot;
</code></pre>
<p>Moreover, this setting is always stored in a <code>plist</code> file, the property
list file that macOS apps store their preferences in.</p>
<p>So we can try and find for those keys in all <code>plist</code> files in the whole
<code>~/Library</code>!</p>
<pre><code class="hljs language-sh">find ~/Library -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&#x27;*.plist&#x27;</span> -<span class="hljs-built_in">exec</span> grep -E <span class="hljs-string">&#x27;NSWindow ?Frame&#x27;</span> {} +
</code></pre>
<div class="note">
<p><strong>Note:</strong> <code>-exec command {} +</code> will execute the <code>command</code>, replacing <code>{} +</code> by all the files that <code>find</code> found! See the
<a href="https://linux.die.net/man/1/find"><code>find(1)</code></a> man page for more details.</p>
</div>
<p>Thanks to that, we uncover more locations! Here‚Äôs the exhaustive list of
where I found those window position preferences:</p>
<ul>
<li><code>~/Library/Preferences/{appId}.plist</code></li>
<li><code>~/Library/Saved Application State/{appId}.savedState/windows.plist</code></li>
<li><code>~/Library/Containers/{appId}/Data/Library/Preferences/{appId}.plist</code></li>
<li><code>~/Library/Containers/{appId}/Data/Library/Saved Application State/{appId}.savedState/windows.plist</code></li>
</ul>
<p>Where <code>appId</code> is the application ID, aka its bundle identifier, e.g.
<code>com.apple.mail</code> for Apple Mail.</p>
<h2 id="resetting-the-window-position" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-reset-app-window-size-position.html#resetting-the-window-position"><span>Resetting the window position</span></a></h2>
<p>Now you were able to locate the preferences file for your app‚Äôs window
location, you can reset it! There‚Äôs a few ways.</p>
<p>For the ones in <code>Prefererences</code>, this is typically managed (and cached)
by the <code>defaults</code> command. The cached part is important: while you can
manually edit or remove those files, your changes are more likely to be
ignored until you reboot. To avoid that, use
<a href="https://www.unix.com/man-page/osx/1/defaults/"><code>defaults(1)</code></a> to edit
them.</p>
<p>For Activity Monitor, that would be:</p>
<pre><code class="hljs language-sh">defaults delete ~/Library/Preferences/com.apple.ActivityMonitor.plist <span class="hljs-string">&#x27;NSWindow Frame main window&#x27;</span>
</code></pre>
<p>Which is equivalent to:</p>
<pre><code class="hljs language-sh">defaults delete com.apple.ActivityMonitor <span class="hljs-string">&#x27;NSWindow Frame main window&#x27;</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> this works even for containerized apps like Apple Mail:</p>
<pre><code class="hljs language-sh">defaults delete com.apple.mail
</code></pre>
<p>Because no key was passed, it‚Äôll delete all the preferences. But either
way, it‚Äôll know to target
<code>~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail.plist</code>.</p>
</div>
<p>As for the <code>Saved Application State</code> files, they don‚Äôt seem to be
cached, and they‚Äôre definitely not editable with the <code>defaults</code> command,
so feel free to remove them, or edit them with your favorite <code>plist</code>
editor!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS won‚Äôt sleep from the Apple menu</title>
    <link href="https://www.codejam.info/2023/04/macos-wont-sleep.html" />
    <id>https://www.codejam.info/2023/04/macos-wont-sleep.html</id>
    <updated>2023-04-20T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This one has been bugging me for a while now and I‚Äôm so glad I finally
found the cause.</p>
<p>It was <strong>so stupid</strong>: when I clicked <strong>Sleep</strong> in the Apple menu to
manually put my Mac to sleep, I was leaving my fingers on the trackpad
for a fraction of a second, and that ‚Äútrackpad activity‚Äù caused it to
instantly wake up! ü§¶‚Äç‚ôÄÔ∏è</p>
<p>If that was your issue as well, enjoy, you can stop reading here. In
case you‚Äôre bored though, here‚Äôs the full story.</p>
<h2 id="external-monitors-laptop-lid-and-sleep" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#external-monitors-laptop-lid-and-sleep"><span>External monitors, laptop lid, and sleep</span></a></h2>
<p>Before I got my external monitor, I was never putting my Mac to sleep
<em>explicitly</em>. I just closed the lid and that was it.</p>
<p>But with an external monitor connected, it‚Äôs another story.</p>
<p>This <a href="https://apple.stackexchange.com/q/18037/452681">goes back to 2011</a>,
with Mountain Lion. Before then, on Snow Leopard, closing the lid of
your MacBook was putting it to sleep, regardless whether or not an
external monitor was connected. Since Mountain Lion though, doing so
puts your MacBook in clamshell mode, where the external screen becomes
your primary monitor!</p>
<p>There‚Äôs essentially two groups of people when it comes to closing the
laptop with an external screen connected: the ones who want it to sleep
and the ones who want it to go in clamshell mode.</p>
<p>To be fair I could see myself leaning one way or the other depending on
what I want to do! We can‚Äôt have both at the same time, and the option
that‚Äôs not the default will have added friction.</p>
<p>When sleep was the default and you wanted to close your lid to go in
clamshell mode, you had to:</p>
<ol>
<li>Close the lid and let your laptop go to sleep.</li>
<li>Wake it up with your external mouse/keyboard.</li>
</ol>
<p>With clamshell being the default, if you want to sleep, you have to:</p>
<ol>
<li>Unplug the monitor.</li>
<li>Close the lid.</li>
<li>Plug the monitor again if you were also charging through it.</li>
</ol>
<p>Or even better:</p>
<ol>
<li>Click <strong>Sleep</strong> in the Apple menu.</li>
<li>Close the lid.</li>
</ol>
<p>That last one is acceptable to me, except at first, it didn‚Äôt seem to
work!</p>
<h2 id="waking-up-right-away-after-manually-sleeping" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#waking-up-right-away-after-manually-sleeping"><span>Waking up right away after manually sleeping</span></a></h2>
<p>After clicking <strong>Sleep</strong> in the Apple menu, both screens would turn off
for like a second, and then they would come right up!</p>
<p>Usually after trying a couple times, it would actually go to sleep, but
I could never really understand why. This exactly
<a href="https://discussions.apple.com/thread/253854954">what‚Äôs described in this Apple support thread</a>
although it got locked for inactivity before ever being resolved.
It just links to a Apple guide about <a href="https://support.apple.com/en-ca/guide/mac-help/mchlp2995/mac">diagnosing sleep issues</a>
with some generic advice but nothing useful to our case.</p>
<p>The other day though even after 10 tries, it kept waking up right away,
so I decided to dig into it.</p>
<h2 id="the-technical-symptoms" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#the-technical-symptoms"><span>The technical symptoms</span></a></h2>
<p>When we look at the Activity Monitor app, I discovered we can show
additional columns by right clicking on the columns header. In there, we
have <strong>Preventing Sleep</strong>.</p>
<figure class="center">
  <img alt="Activity Monitor column settings" srcset="../../img/2023/04/activity-monitor-sleep.png 2x">
</figure>
<p>In my case, it was <code>WindowServer</code>, aka the macOS process responsible for
managing windows, as well as <code>powerd</code>:</p>
<figure class="center">
  <img alt="Processes preventing sleep" srcset="../../img/2023/04/activity-monitor-prevent-sleep.png 2x">
</figure>
<div class="note">
<p><strong>Note:</strong> the <strong>Energy</strong> tab in Activity Monitor is also useful to
diagnose sleep issues! Not only it displays the power consumption
details of the currently running apps, <em>but also of the ones that were
previously closed</em>! And you can directly see if they‚Äôre preventing sleep
or not.</p>
<p>In our particular case though it wasn‚Äôt as useful as the <strong>CPU</strong> tab
because it doesn‚Äôt show the system processes.</p>
</div>
<p>Moreover, we can use the <code>pmset</code> command (power management settings) to
list if anything is preventing sleep (emphasis mine):</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pmset -g assertions</span>
Assertion status system-wide:
   BackgroundTask                 0
   ApplePushServiceTask           0
<strong>   UserIsActive                   1</strong>
   PreventUserIdleDisplaySleep    0
   PreventSystemSleep             0
   ExternalMedia                  0
<strong>   PreventUserIdleSystemSleep     1</strong>
   NetworkClientActive            0
Listed by owning process:
<strong>   powerd: PreventUserIdleSystemSleep named: "Powerd - Prevent sleep while display is on"
   WindowServer: UserIsActive named: "com.apple.iohideventsystem.queue.tickle service:AppleHIDKeyboardEventDriverV2 product:Apple Internal Keyboard / Trackpad eventType:3"</strong>
	Timeout will fire in 600 secs Action=TimeoutActionRelease
</code></pre>
<h2 id="researching-the-symptoms" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#researching-the-symptoms"><span>Researching the symptoms</span></a></h2>
<p>Again, we saw that <code>powerd</code> and <code>WindowServer</code> are the culprits.</p>
<ul>
<li><code>powerd</code> has an assertion <code>PreventUserIdleSystemSleep</code> ‚Äúprevent sleep
while display is on‚Äù.</li>
<li><code>WindowServer</code> has an assertion <code>UserIsActive</code> materialized by my own
activity on the keyboard/trackpad.</li>
</ul>
<p>Looking for those leads us to a thread on Apple support about
<a href="https://discussions.apple.com/thread/252520499"><code>WindowServer</code> preventing sleep mode</a>,
but without any proper resolution: the problem just seems to have gone
away for some people with an Apple update, but the messages are from a
few years ago, and in my case I‚Äôm running the latest version of macOS.</p>
<p>We also find two Reddit threads,
<a href="https://www.reddit.com/r/MacOS/comments/n525zt/windowserver_preventing_my_mbp_from_sleeping/">one for <code>WindowServer</code></a>
and <a href="https://www.reddit.com/r/macbook/comments/o6kwqp/sleep_prevented_by_powerd/">one for <code>powerd</code></a>,
again both without a clear resolution.</p>
<div class="note">
<p><strong>Note:</strong> The <code>WindowServer</code> thread has <em>unrelated</em> resolutions where
<code>sharingd</code> and <code>coreaudiod</code> were preventing sleep, which is not what
we‚Äôre looking for here. That being said if you‚Äôre currently sharing
files over the network, or you have music playing, this will prevent
your Mac to sleep, so look into this first!</p>
</div>
<p>On top of that, I‚Äôm a bit dubious that <code>powerd</code> and <code>WindowServer</code> are
the problem here. After all, ‚Äúpreventing sleep while display is on‚Äù
sounds like a very reasonable thing to do, as well as preventing sleep
when there‚Äôs activity on the keyboard/trackpad! And it would be
logical to expect that manually putting the system to sleep would bypass
those assertions anyway.</p>
<p>This is confirmed by <a href="https://www.bravolt.com/post/why-won-t-my-computer-sleep">this post</a>:</p>
<blockquote>
<p><code>PreventUserIdleSystemSleep</code>: per the docs, the system should still sleep if you close your
laptop‚Äôs lid, or sleep manually.</p>
</blockquote>
<p><a href="https://developer.apple.com/documentation/iokit/kiopmassertiontypepreventuseridlesystemsleep">The <code>PreventUserIdleSystemSleep</code> docs</a>:</p>
<blockquote>
<p>The system may still sleep for lid close, Apple menu, low battery, or
other sleep reasons.</p>
</blockquote>
<p>It looks like we‚Äôre hitting a rock wall here. No appropriate solution
out there, my only suspects turned out to be innocent, and I still can‚Äôt
reliably put my Mac to sleep from the Apple menu!</p>
<h2 id="digging-deeper" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#digging-deeper"><span>Digging deeper</span></a></h2>
<p>We already tinkered with <code>pmset</code> earlier, and that‚Äôs what we‚Äôll use to
find more about the problem. We can use <code>pmset -g assertionslog</code> to show
a log of the sleep assertions! Like <code>pmset -g assertions</code>, it‚Äôll show
the <em>current</em> assertions (whatever may be preventing sleep), but it will
keep running and print any further event related to sleep (or not
sleep)!</p>
<p>So I can run <code>pmset -g assertionslog</code>, then click the <strong>Sleep</strong> button
from the Apple menu, and see what‚Äôs in the logs when the screens light
back up right away.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pmset -g assertionslog</span>
Showing assertion changes(Press Ctrl-T to log all currently held assertions):

Action      Age       Type                          Name
======      ========  ====                          ====
Created     00:00:00  InternalPreventSleep          com.apple.powermanagement.darkwakelinger
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-login
<strong>Released    00:00:24  PreventUserIdleSystemSleep    Powerd - Prevent sleep while display is on</strong>
Created     00:00:00  NoIdleSleepAssertion          com.apple.timed.ntp
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-lastpowerassertionlinger
Released    00:00:00  InteractivePushServiceTask    com.apple.apsd-login
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-keepalive-push.apple.com
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-datareceived-push.apple.com
Released    00:00:00  InteractivePushServiceTask    com.apple.apsd-keepalive-push.apple.com
Released    00:00:00  NoIdleSleepAssertion          com.apple.timed.ntp
<strong>TurnedOn    00:00:00  UserIsActive                  com.apple.iohideventsystem.queue.tickle service:AppleMultitouchDevice product:Apple Internal Keyboard / Trackpad eventType:11</strong>
Created     00:00:00  InteractivePushServiceTask    com.apple.apsd-login
Created     00:00:00  PreventUserIdleSystemSleep    Powerd - Prevent sleep while display is on
Created     00:00:00  NoIdleSleepAssertion          com.apple.timed.ntp
</code></pre>
<p>I highlighted the parts that were relevant in our case. First, we can
see that when we explicitly sleep, <code>powerd</code> do release its ‚Äúprevent
sleep while display is on‚Äù assertion, so it effectively doesn‚Äôt prevent
sleep anymore!</p>
<p><strong>However we see just after that <code>UserUsActive</code> was turned on, by
‚Äútickling‚Äù the trackpad. What?</strong></p>
<h2 id="the-moment-it-clicked" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-wont-sleep.html#the-moment-it-clicked"><span>The moment it clicked ü§Ø</span></a></h2>
<p>Then it occurred to me: when I click the <strong>Sleep</strong> button, my hand is,
well, on the trackpad, and it stays there for a fraction of a second
after I click. That‚Äôs a fraction of a second too long, because the mere
fact of me removing my finger from the trackpad triggers an
<code>UserIsActive</code> event which wakes the system right back up!</p>
<p>So the solution is simple: I need to remove my finger from the trackpad
<em>immediately</em> after I click the <strong>Sleep</strong> button!</p>
<p>I couldn‚Äôt believe I spent hours to figure this out. I played around
with it and it‚Äôs 100% that. The <strong>Sleep</strong> button actually works great,
regardless whether or not I have an external display connected, as long
as I don‚Äôt keep my finger on the damn trackpad for even a fraction of a
second after clicking it. The gentlest touch will wake everything up
right away, even if it happens half a second after clicking that button.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1649122170780491776">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>macOS screenshot: capture selected window but for dialogs</title>
    <link href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html" />
    <id>https://www.codejam.info/2023/04/macos-screenshot-dialog.html</id>
    <updated>2023-04-13T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>On macOS, you can take a screenshot of a specific window, by pressing
<kbd>Command</kbd> + <kbd>Shfit</kbd> + <kbd>5</kbd> and selecting
<strong>Capture Selected Window</strong> as explained <a href="https://support.apple.com/en-ca/guide/mac-help/mh26782/mac">here</a>.</p>
<p>Alternatively, you can use <kbd>Command</kbd> + <kbd>Shfit</kbd> +
<kbd>4</kbd> to bring the free selection tool, and press
<kbd>Space</kbd> to go in window selection mode.</p>
<p>This is neat, because it captures the window with a nice shadow over a
transparent background, so when embedded, it looks like this:</p>
<figure class="center">
  <img alt="A blank terminal window" srcset="../../img/2023/04/dialog/window.png 2x">
</figure>
<p>This is great, but sometimes you want to select just a <em>dialog</em> inside a
window. For example, if I was to try to close this terminal:</p>
<figure class="center">
  <img alt="A dialog to confirm whether to close all tabs" srcset="../../img/2023/04/dialog/window-dialog.png 2x">
</figure>
<p>Here, the screenshot tool only lets me capture the whole window, but I
can‚Äôt have it capture <em>just</em> the dialog in the middle, and do so with
the nice shadow.</p>
<p>In this case it‚Äôs not too bad because the parent window was small, but
what if you‚Äôre capturing a small dialog inside a very large window?</p>
<p>You can always do a free selection or crop it yourself, but then you
still won‚Äôt have the nice shadow with transparency:</p>
<figure class="center">
  <img alt="Cropped dialog" srcset="../../img/2023/04/dialog/dialog-crop.png 2x">
</figure>
<p>Wouldn‚Äôt it be great if we could have the following instead?</p>
<figure class="center">
  <img alt="Nice dialog with shadow" srcset="../../img/2023/04/dialog/dialog-shadow.png 2x">
</figure>
<h2 id="introducing-windowify" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html#introducing-windowify"><span>Introducing Windowify</span></a></h2>
<p><a href="https://github.com/valeriangalliat/windowify">Windowify</a> is a small
tool that I made to solve this issue. I‚Äôll start with how to use it for
that use case, then I‚Äôll jump in the <a href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html#technical-details">technical details</a>.</p>
<p>Once installed, you can give it an image of your choice, and all it does
is display it in a native macOS window, exposing to you the various
styling options that macOS offers.</p>
<p>By default, if we gave it the earlier crop, it would display the following:</p>
<figure class="center">
  <img alt="Dialog with a title bar" srcset="../../img/2023/04/dialog/dialog-title.png 2x">
</figure>
<p>In our case, we need to use <code>windowify --minimal</code>, which is really a
shortcut for <code>windowify -closable -miniaturizable -resizable +fullSizeContentView +titlebarAppearsTransparent +titleHidden</code>. It will
show our image in a window with rounded corners but without any UI
element otherwise (like the title bar and close button).</p>
<p>We can now take a screenshot of this new window, this time using the
native window selection, so we get the shadow and transparency!</p>
<figure class="center">
  <img alt="Nice dialog with shadow" srcset="../../img/2023/04/dialog/dialog-shadow.png 2x">
</figure>
<h2 id="technical-details" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-screenshot-dialog.html#technical-details"><span>Technical details</span></a></h2>
<p>To whoever may be interested, I‚Äôll give some technical details on how
this works.</p>
<p>Windowify is a Swift program, and uses it as a dynamic interpreter,
simply by using <code>#!/usr/bin/env swift</code> as a shebang, which I had no clue
was possible prior to this.</p>
<p>While most Swift windowed apps are expected to be created as part of an
Xcode project, it turns out the library <a href="https://stackoverflow.com/questions/30763229/display-window-on-osx-using-swift-without-xcode-or-nib">is flexible enough</a>
to allow easily creating windows without a complex app boilerplate and
an explicit compilation process!</p>
<p>This is made particularly easy using
<a href="https://developer.apple.com/documentation/appkit/nsapplication/1428360-shared"><code>NSApplication.shared</code></a>
which automatically creates the application instance if it doesn‚Äôt
exist.</p>
<p>The script looks at <code>CommandLine.arguments</code> to parse the CLI arguments,
and uses a <code>NSImage</code> and <code>NSImageView</code> to display the image in a
<code>NSWindow</code>.</p>
<p>The main logic is to translate the CLI arguments into the matching
<code>styleMask</code> and other properties of <code>NSWindow</code>, to make the appearance
customizable by the user.</p>
<p>In the first place I had it working without even using a custom
<code>NSApplicationDelegate</code>, but the main application loop was then blocking
the thread and made the menu unresponsive (I use a menu to handle
<kbD>Command</kbd> + <kbd>W</kbd> to close the window). Moving the logic
inside an application delegate resolved that.</p>
<p>Take a look at <a href="https://github.com/valeriangalliat/windowify/blob/main/windowify">the code</a>
if you want to know in more details how this all works!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Changing default mail client on macOS without signing in to the Mail app</title>
    <link href="https://www.codejam.info/2023/04/macos-default-mail-client.html" />
    <id>https://www.codejam.info/2023/04/macos-default-mail-client.html</id>
    <updated>2023-04-13T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>The things we have to do sometimes‚Ä¶ üôà</p>
<p>Maybe you use another mail client than the Mail app on macOS, and you
want to make it the default, so that when you click <code>mailto:</code> links, it
actually opens the app you want.</p>
<p>Apple documents how to do that in <a href="https://support.apple.com/en-ca/HT201607">change the default email app</a>:</p>
<blockquote>
<ol>
<li>Open the Mail app.</li>
<li>From the menu bar, choose <strong>Mail &gt; Settings</strong>.</li>
<li>Click <strong>General</strong>.</li>
<li>Choose an email app from the <strong>Default email reader</strong> menu.</li>
</ol>
</blockquote>
<p>That‚Äôs great, except it doesn‚Äôt work. If you never used the Mail app,
which you probably didn‚Äôt if you use another mail client, you can‚Äôt
access the settings! You‚Äôre greeted with this screen:</p>
<figure class="center">
  <img alt="A dialog prompting you to set up a mail account" srcset="../../img/2023/04/mail/01-blocking-dialog.png 2x">
</figure>
<p>And the settings are greyed out!</p>
<figure class="center">
  <img alt="Greyed out settings menu" srcset="../../img/2023/04/mail/02-disabled-settings.png 2x">
</figure>
<p>What to do then? There‚Äôs <a href="https://apple.stackexchange.com/q/261881/452681">a number of solutions</a>:</p>
<ul>
<li>Connect your mail account to the Mail app to go through this dialog
and finally access the settings.</li>
<li>Use a number of different third-party apps that can change default
associations.</li>
<li>Write a script to mess with the <code>LaunchServices</code> API.</li>
</ul>
<p>But <a href="https://apple.stackexchange.com/a/422772/452681">my</a>
<a href="https://osxdaily.com/2014/05/06/change-default-mail-app-mac/#comment-745047">favorite</a>,
that doesn‚Äôt require any third-party app, consists in selecting <strong>Other
Mail Account</strong>, putting garbage in the fields, and let it fail a few
times until it works!</p>
<figure class="center">
  <img alt="Mail account settings" srcset="../../img/2023/04/mail/03-add-account.png 2x">
</figure>
<p>This will obviously fail, and prompt you for more information:</p>
<figure class="center">
  <img alt="Advanced account settings" srcset="../../img/2023/04/mail/04-add-account-error.png 2x">
</figure>
<p>Just keep hitting the <strong>Sign In</strong> button until it gives up and lets you
through! You now have access to the settings menu.</p>
<figure class="center">
  <img alt="Active settings menu" srcset="../../img/2023/04/mail/05-settings-menu.png 2x">
</figure>
<p>From there, you can set your <strong>Default email reader</strong> to your favorite
app.</p>
<figure class="center">
  <img alt="Default email reader settings" srcset="../../img/2023/04/mail/06-settings.png 2x">
</figure>
<h2 id="using-gmail-inside-firefox-as-default-email-reader-on-macos" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/macos-default-mail-client.html#using-gmail-inside-firefox-as-default-email-reader-on-macos"><span>Using Gmail inside Firefox as default email reader on macOS</span></a></h2>
<p>In my case, I selected the Firefox app in the previous step, because I
want to use Gmail inside Firefox as my default email reader.</p>
<p>With that, the next time you open a <code>mailto:</code> link from anywhere on your
system, it‚Äôs going to open Firefox, and Firefox will then need to know
you want to use Gmail for this. Normally it‚Äôll prompt you the first
time, but you can also configure it in the <strong>Applications</strong> settings:</p>
<figure class="center">
  <img alt="Firefox settings" srcset="../../img/2023/04/mail/07-firefox-settings.png 2x">
</figure>
<p>I hope this helps!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Configuring a GCP Pub/Sub dead letter queue with Pulumi</title>
    <link href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html" />
    <id>https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html</id>
    <updated>2023-04-09T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I‚Äôve been playing a bit with <a href="https://www.pulumi.com/">Pulumi</a> lately,
and it quickly became one of my favorite infrastructure as code tools.
It feels like the power of <a href="https://aws.amazon.com/cdk/">AWS CDK</a> which
lets you code your infrastructure in a full-fledged scripting language,
but without being limited to AWS!</p>
<p>I like coding my infrastructure in TypeScript because the typing,
autocomplete and IDE integrations makes it particularly nice to discover
the SDK on the fly as you‚Äôre creating your infrastructure, so that‚Äôs
what I‚Äôll use in the examples.</p>
<p>Today, we‚Äôre gonna see how to programmatically create a Pub/Sub topic
and subscription on GCP, with a matching dead letter queue. Finally,
we‚Äôll add a monitoring alert policy to warn us when our
<abbr title="Dead letter queue">DLQ</abbr> is not empty.</p>
<h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#getting-started"><span>Getting started</span></a></h2>
<p>If you already have Pulumi installed, and an existing project, you can
skip this. In order to install Pulumi on macOS, run:</p>
<pre><code class="hljs language-sh">brew install pulumi
</code></pre>
<p>Create an account on Pulumi if you don‚Äôt have one already, then create a
new directory for your project, and inside it, run:</p>
<pre><code class="hljs language-sh">pulumi new gcp-typescript
</code></pre>
<p>Follow the instructions to initialize your project and connect it to
your GCP account.</p>
<p>Finally, you can remove the default code from <code>index.ts</code> that creates a
test bucket.</p>
<h2 id="creating-a-topic-and-a-subscription" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#creating-a-topic-and-a-subscription"><span>Creating a topic and a subscription</span></a></h2>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> gcp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@pulumi/gcp&#x27;</span>

<span class="hljs-keyword">const</span> topic = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Topic</span>(<span class="hljs-string">&#x27;hello-world-topic&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span> })

<span class="hljs-keyword">const</span> subscription = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-subscription&#x27;</span>, {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span>,
  <span class="hljs-attr">topic</span>: topic.<span class="hljs-property">id</span>
})
</code></pre>
<p>This will create a topic and a basic pull subscription, that you can‚Ä¶
subscribe to using the Google Cloud SDK in your favorite language.</p>
<h2 id="adding-the-dead-letter-queue" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#adding-the-dead-letter-queue"><span>Adding the dead letter queue</span></a></h2>
<p>On GCP, a dead letter queue consists in configuring an existing
subscription to send messages that failed a number of times to another
topic. Having a subscription on that dead letter topic, even if it has
no consumer, lets us store those messages for a period of time, so we
can eventually do something with them.</p>
<p>Here‚Äôs our DLQ:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> dlqTopic = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Topic</span>(<span class="hljs-string">&#x27;hello-world-dl-topic&#x27;</span>, { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;helo-world-dl&#x27;</span> })

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-dl-subscription&#x27;</span>, {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world-dl&#x27;</span>,
  <span class="hljs-attr">topic</span>: dlqTopic.<span class="hljs-property">id</span>
})
</code></pre>
<p>Then we can add the dead letter policy to our existing subscription:</p>
<pre><code class="hljs language-diff:ts"> <span class="hljs-keyword">const</span> subscription = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-subscription&#x27;</span>, {
   <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span>,
   <span class="hljs-attr">topic</span>: topic.<span class="hljs-property">name</span>,
<span class="hljs-addition">+  <span class="hljs-attr">deadLetterPolicy</span>: {</span>
<span class="hljs-addition">+    <span class="hljs-attr">deadLetterTopic</span>: dlqTopic.<span class="hljs-property">id</span>,</span>
<span class="hljs-addition">+    <span class="hljs-attr">maxDeliveryAttempts</span>: <span class="hljs-number">5</span></span>
<span class="hljs-addition">+  }</span>
 })
</code></pre>
<p><code>maxDepliveryAttempts</code> is optional and defaults to 5. When a messaged
failed to be delivered that many times, it‚Äôll be sent to the DLQ.</p>
<p>You may also like to tweak your subscription‚Äôs retry policy at that
point. By default, it retries a failed message immediately, but you can
configure an exponential backoff instead:</p>
<pre><code class="hljs language-diff:ts"> <span class="hljs-keyword">const</span> subscription = <span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">Subscription</span>(<span class="hljs-string">&#x27;hello-world-subscription&#x27;</span>, {
   <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello-world&#x27;</span>,
   <span class="hljs-attr">topic</span>: topic.<span class="hljs-property">id</span>,
<span class="hljs-addition">+  <span class="hljs-attr">retryPolicy</span>: {</span>
<span class="hljs-addition">+    <span class="hljs-attr">minimumBackoff</span>: <span class="hljs-string">&#x27;10s&#x27;</span>,</span>
<span class="hljs-addition">+    <span class="hljs-attr">maximumBackoff</span>: <span class="hljs-string">&#x27;600s&#x27;</span></span>
<span class="hljs-addition">+  },</span>
   <span class="hljs-attr">deadLetterPolicy</span>: {
     <span class="hljs-attr">deadLetterTopic</span>: dlqTopic.<span class="hljs-property">id</span>,
     <span class="hljs-attr">maxDeliveryAttempts</span>: <span class="hljs-number">5</span>
   }
 })
</code></pre>
<p>While you don‚Äôt have precise control over the exponential backoff
behavior, you can tweak the minimum and maximum duration that Pub/Sub
will wait before retrying a message. Anything in between is out of your
control.</p>
<h2 id="handling-permissions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#handling-permissions"><span>Handling permissions</span></a></h2>
<p>But we‚Äôre not done yet! If you go to your subscription page, you‚Äôll
notice the following issues warnings:</p>
<figure class="center">
  <img alt="Permission issues with dead letter queue" srcset="../../img/2023/04/pubsub-dlq-warning.png 2x">
</figure>
<blockquote>
<p>‚ùóÔ∏è <strong>Assign Publisher role</strong></p>
<p>The Cloud Pub/Sub service account for this project needs the publisher
role to publish dead-lettered messages to the dead letter topic.</p>
<p>‚ùóÔ∏è <strong>Assign Subscriber role</strong></p>
<p>The Cloud Pub/Sub service account for this project needs the subscriber
role to forward messages from this subscription to the dead letter topic.</p>
</blockquote>
<p>You can identify the Pub/Sub service account in your IAM principals
list, by ticking ‚Äúinclude Google-provided role grants‚Äù. It‚Äôs always
under the form <code>service-{projectId}@gcp-sa-pubsub.iam.gserviceaccount.com</code>.</p>
<p>We can fix that in our Pulumi code by adding the following:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> pulumi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@pulumi/pulumi&#x27;</span>

<span class="hljs-keyword">const</span> project = gcp.<span class="hljs-property">organizations</span>.<span class="hljs-title function_">getProjectOutput</span>()

<span class="hljs-keyword">const</span> pubSubServiceAccountPublisherPolicy =
  gcp.<span class="hljs-property">organizations</span>.<span class="hljs-title function_">getIAMPolicyOutput</span>({
    <span class="hljs-attr">bindings</span>: [
      {
        <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;roles/pubsub.publisher&#x27;</span>,
        <span class="hljs-attr">members</span>: [
          pulumi.<span class="hljs-property">interpolate</span><span class="hljs-string">`serviceAccount:service-<span class="hljs-subst">${project.<span class="hljs-built_in">number</span>}</span>@gcp-sa-pubsub.iam.gserviceaccount.com`</span>
        ]
      }
    ]
  })

<span class="hljs-keyword">const</span> pubSubServiceAccountSubscriberPolicy =
  gcp.<span class="hljs-property">organizations</span>.<span class="hljs-title function_">getIAMPolicyOutput</span>({
    <span class="hljs-attr">bindings</span>: [
      {
        <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;roles/pubsub.subscriber&#x27;</span>,
        <span class="hljs-attr">members</span>: [
          pulumi.<span class="hljs-property">interpolate</span><span class="hljs-string">`serviceAccount:service-<span class="hljs-subst">${project.<span class="hljs-built_in">number</span>}</span>@gcp-sa-pubsub.iam.gserviceaccount.com`</span>
        ]
      }
    ]
  })

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">TopicIAMPolicy</span>(<span class="hljs-string">&#x27;hello-world-dl-topic-policy&#x27;</span>, {
  <span class="hljs-attr">topic</span>: dlqTopic.<span class="hljs-property">name</span>,
  <span class="hljs-attr">policyData</span>: pubSubServiceAccountPublisherPolicy.<span class="hljs-property">policyData</span>
})

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">pubsub</span>.<span class="hljs-title class_">SubscriptionIAMPolicy</span>(<span class="hljs-string">&#x27;hello-world-subscription-policy&#x27;</span>, {
  <span class="hljs-attr">subscription</span>: subscription.<span class="hljs-property">name</span>,
  <span class="hljs-attr">policyData</span>: pubSubServiceAccountSubscriberPolicy.<span class="hljs-property">policyData</span>
})
</code></pre>
<p>Now our Pub/Sub DLQ page should be all green!</p>
<h2 id="getting-alerted-for-new-messages-in-the-dlq" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/gcp-pubsub-dlq-pulumi.html#getting-alerted-for-new-messages-in-the-dlq"><span>Getting alerted for new messages in the DLQ</span></a></h2>
<p>The first thing you usually do when you create a DLQ is add a mechanism
to <em>know</em> when messages hit the DLQ, so that you can act on them.</p>
<p>When it comes to alert policies, I typically create them in the GCP
console, then I use the ‚Äúdownload as JSON‚Äù button in the policy details.
I can use this verbatim inside Pulumi‚Äôs <code>gcp.monitoring.AlertPolicy</code>
constructor!</p>
<p>Here‚Äôs what I‚Äôve got when I made an alert policy to get notified when
any of my subscriptions whose name ends with <code>-dl</code> has undelivered
messages.</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">const</span> notificationChannels = [
  <span class="hljs-string">&#x27;projects/{projectId}/notificationChannels/{channelId}&#x27;</span>
]

<span class="hljs-keyword">new</span> gcp.<span class="hljs-property">monitoring</span>.<span class="hljs-title class_">AlertPolicy</span>(<span class="hljs-string">&#x27;alert-policy-pubsub-dl&#x27;</span>, {
  <span class="hljs-attr">alertStrategy</span>: {
    <span class="hljs-attr">autoClose</span>: <span class="hljs-string">&#x27;604800s&#x27;</span>
  },
  <span class="hljs-attr">combiner</span>: <span class="hljs-string">&#x27;OR&#x27;</span>,
  <span class="hljs-attr">conditions</span>: [
    {
      <span class="hljs-attr">conditionThreshold</span>: {
        <span class="hljs-attr">aggregations</span>: [
          {
            <span class="hljs-attr">alignmentPeriod</span>: <span class="hljs-string">&#x27;300s&#x27;</span>,
            <span class="hljs-attr">perSeriesAligner</span>: <span class="hljs-string">&#x27;ALIGN_MEAN&#x27;</span>
          }
        ],
        <span class="hljs-attr">comparison</span>: <span class="hljs-string">&#x27;COMPARISON_GT&#x27;</span>,
        <span class="hljs-attr">duration</span>: <span class="hljs-string">&#x27;0s&#x27;</span>,
        <span class="hljs-attr">filter</span>: <span class="hljs-string">`
              resource.type = &quot;pubsub_subscription&quot;
          AND metric.type = &quot;pubsub.googleapis.com/subscription/num_undelivered_messages&quot;
          AND resource.labels.subscription_id = ends_with(&quot;-dl&quot;)
        `</span>,
        <span class="hljs-attr">thresholdValue</span>: <span class="hljs-number">0</span>,
        <span class="hljs-attr">trigger</span>: {
          <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>
        }
      },
      <span class="hljs-attr">displayName</span>: <span class="hljs-string">&#x27;Cloud Pub/Sub Subscription - Unacked messages&#x27;</span>
    }
  ],
  notificationChannels,
  <span class="hljs-attr">displayName</span>: <span class="hljs-string">&#x27;Pub/Sub messages in dead letter&#x27;</span>
})
</code></pre>
<p>Just put the ID of your notification channel in the array on top. To
find it, you can use the following command that will list all your
notification channels including their full ID:</p>
<pre><code class="hljs language-sh">gcloud alpha monitoring channels list
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Firebase functions in a monorepo? A challenging pile of hacks</title>
    <link href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html" />
    <id>https://www.codejam.info/2023/04/firebase-functions-monorepo.html</id>
    <updated>2023-04-07T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently went through the trouble of migrating a Firebase app to a
monorepo, in particular the Cloud Functions part. While doing so, I went
through a total of 3 different ‚Äúmethods‚Äù, all of which were full of
surprises that I discovered along the way.</p>
<p>In this blog post I‚Äôll go through those 3 options, and highlight their
tradeoffs, in order to help you pick the one that‚Äôs the most appropriate
to your workflow. It‚Äôs a long post, so feel free to jump to the
<a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#comparison">comparison</a> directly, and then cherry pick what to read
from there. üòÑ</p>
<p>Here, I assume that your monorepo uses something like npm or Yarn
workspaces. It may be applicable to pnpm but I didn‚Äôt try it.</p>
<h2 id="the-common-ground" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-common-ground"><span>The common ground</span></a></h2>
<p>Before we get started with the 3 options, they all share a common
ground. And for the sake of this blog post, I‚Äôll start with an
hypothetical base monorepo structure which I‚Äôll lay down below.</p>
<h3 id="the-base-monorepo" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-base-monorepo"><span>The base monorepo</span></a></h3>
<p>This is a basic monorepo with two websites and a shared package, e.g.
for helper functions, types or any other common code.</p>
<pre><code class="hljs">monorepo
‚îú‚îÄ‚îÄ apps
‚îÇ   ‚îú‚îÄ‚îÄ website1
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ website2
‚îÇ       ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ packages
‚îÇ   ‚îî‚îÄ‚îÄ shared
‚îÇ       ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ package-lock.json
‚îî‚îÄ‚îÄ package.json
</code></pre>
<p>The top-level <code>package.json</code> contains:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;workspaces&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;apps/*&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;packages/*&quot;</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 id="the-firebase-functions-in-its-own-repo" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-firebase-functions-in-its-own-repo"><span>The Firebase functions in its own repo</span></a></h3>
<p>In another repo, you have a Firebase app with functions:</p>
<pre><code class="hljs">firebase
‚îú‚îÄ‚îÄ functions
‚îÇ   ‚îú‚îÄ‚îÄ src
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ   ‚îú‚îÄ‚îÄ package-lock.json
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ firebase.json
</code></pre>
<p>Where your <code>firebase.json</code> contains:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;functions&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 id="merging-them-together" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#merging-them-together"><span>Merging them together</span></a></h3>
<p>Since in a Firebase repo, <code>functions</code> is already its own subdirectory
with its own <code>package.json</code>, it feels pretty natural to just ‚Äúmerge‚Äù
both repos together, maybe  renaming <code>functions</code> into <code>apps/functions</code>
to match our initial structure better, but no more than that:</p>
<pre><code class="hljs language-diff"> monorepo
 ‚îú‚îÄ‚îÄ apps
 ‚îÇ   ‚îú‚îÄ‚îÄ website1
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json
 ‚îÇ   ‚îú‚îÄ‚îÄ website2
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json
<span class="hljs-addition">+‚îÇ   ‚îî‚îÄ‚îÄ functions</span>
<span class="hljs-addition">+‚îÇ       ‚îú‚îÄ‚îÄ src</span>
<span class="hljs-addition">+‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.js</span>
<span class="hljs-addition">+‚îÇ       ‚îî‚îÄ‚îÄ package.json</span>
 ‚îú‚îÄ‚îÄ packages
 ‚îÇ   ‚îî‚îÄ‚îÄ shared
 ‚îÇ       ‚îî‚îÄ‚îÄ package.json
<span class="hljs-addition">+‚îú‚îÄ‚îÄ firebase.json</span>
 ‚îú‚îÄ‚îÄ package-lock.json
 ‚îî‚îÄ‚îÄ package.json
</code></pre>
<p>In <code>firebase.json</code>, we just update the <code>source</code> to be <code>apps/functions</code>,
and we remove the <code>functions/package-lock.json</code> to let npm merge the
functions dependencies in the top-level <code>package-lock.json</code>. This way,
we only need to run <code>npm install</code> at the root of the monorepo, instead
of having to go inside <code>apps/functions</code> and run <code>npm install</code> there
again. After all, that‚Äôs part of the point of a monorepo.</p>
<p>Great, so we‚Äôre done? That was easy.</p>
<h2 id="why-this-works-but-not-really" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#why-this-works-but-not-really"><span>Why this works, but not really</span></a></h2>
<p>Not so fast. This will seemingly work, but it will do so kind of by
chance, as a somewhat lucky accident.</p>
<h3 id="how-firebase-deploy-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#how-firebase-deploy-works"><span>How <code>firebase deploy</code> works</span></a></h3>
<p>See, when <code>firebase deploy</code> deploys the functions, it will make a ZIP
archive of the functions source directory (as defined in <code>firebase.json</code>).</p>
<p>Then, it will deploy the function from that ZIP. The Cloud Functions
deploy process will send that ZIP to Cloud Build, which will:</p>
<ol>
<li>Run some variant of <code>npm install</code> or <code>yarn install</code>.</li>
<li>Run the <code>gcp-build</code> script if defined in <code>package.json</code>.</li>
<li>Prune development dependencies from <code>node_modules</code> if needed.</li>
<li>Use the output of that process as the source for the function
runtime.</li>
</ol>
<p>This is defined in GCP buildpacks, e.g. <a href="https://github.com/GoogleCloudPlatform/buildpacks/blob/99553d0a2051834324d621f20ad5355453f675a1/cmd/nodejs/npm/main.go">for npm</a>
and <a href="https://github.com/GoogleCloudPlatform/buildpacks/blob/99553d0a2051834324d621f20ad5355453f675a1/cmd/nodejs/yarn/main.go">for Yarn</a>.</p>
<p>We can already see a bit of a problem. Because we‚Äôre sending only the
<code>apps/functions</code> context to Cloud Build, it doesn‚Äôt have access to the
top-level <code>package-lock.json</code>, which means the install output will be
nondeterministic, and each deploy is subject to using different versions
of different packages and potentially break your code without you
knowing.</p>
<p><strong>This can introduce a whole range of sneaky errors that will be a pain to
debug!</strong></p>
<h3 id="using-shared-packages" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#using-shared-packages"><span>Using shared packages</span></a></h3>
<p>Moreover, we now understand that this will not allow using <em>shared
packages</em> inside the monorepo!</p>
<p>If we wanted to use <code>packages/shared</code> inside <code>apps/functions</code>, by adding
<code>&quot;shared&quot;: &quot;*&quot;</code> in our <code>dependencies</code>, letting npm or Yarn resolve it to
the local workspace version, it wouldn‚Äôt actually work.</p>
<p>Or actually, it will work in development, because we have the whole
monorepo there. And in our particular example, even the Firebase
deployment will surprisingly succeed, <strong>but only as an accident because
<a href="https://www.npmjs.com/package/shared"><code>shared</code></a> is a valid npm
package</strong>! It will break at runtime when you try to use a package that
doesn‚Äôt contain the code you expect at all.</p>
<p>Other names for common monorepo shared packages that are also valid npm
packages would be <a href="https://www.npmjs.com/package/eslint-config"><code>eslint-config</code></a>
and <a href="https://www.npmjs.com/package/tsconfig"><code>tsconfig</code></a>, so they would
also result in this kind of collision.</p>
<div class="note">
<p><strong>Note:</strong> if you use Yarn, you can prevent those collisions by prefixing
your version specifier for your shared dependencies with <code>workspace:</code>,
e.g. <code>&quot;shared&quot;: &quot;workspace:*&quot;</code> to use any version. This will ensure the
dependency is <em>always</em> installed from the local workspace and not from
the registry.</p>
<p>npm doesn‚Äôt support that, but you can still add a layer of safety by
making sure all your shared package names don‚Äôt conflict with anything
on npm, for example by prefixing them with <code>@myorg</code> such as
<code>@myorg/shared</code>, <code>@myorg/eslint-config</code>, <code>@myorg/tsconfig</code> and so on.</p>
<p>Or as an abundance of caution if you use Yarn, maybe do both. üò¨</p>
</div>
<h2 id="the-good-enough-for-me-approach" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach"><span>The ‚Äúgood enough for me‚Äù approach</span></a></h2>
<p>We‚Äôre now in a situation where 1. the top-level <code>package-lock.json</code> is
not respected when deploying Cloud Functions, and 2. we cannot use any
workspace shared package in our functions.</p>
<p>You may actually be fine with that. Maybe you don‚Äôt care that your
production functions have an unpredictable dependency tree every time
you deploy, and maybe you don‚Äôt want to use shared packages in your
functions anyway!</p>
<div class="note">
<p><strong>Note:</strong> you can even use shared packages in your <code>devDependencies</code>
with that setup, as long as you don‚Äôt have a <code>gcp-build</code> script that
depends on them!</p>
<p>At least if you use npm. Because there‚Äôs currently a bug with the Yarn
Cloud Build buildpack that makes it install <code>devDependencies</code> before
pruning them right after, even when no build script is present. üòÖ</p>
<p>This would fail your build if the shared package from your
<code>devDependencies</code> don‚Äôt exist on npm. It‚Äôs one of those cases where
having a shared package name that collisions with a npm package would
help, although I wouldn‚Äôt really recommend this as a fix.</p>
</div>
<p>If that works for you, congratulations, your job here is done.
Otherwise, let‚Äôs dig in the two other options. üëá</p>
<h2 id="the-full-context-approach" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-full-context-approach"><span>The full context approach</span></a></h2>
<p>There‚Äôs a <a href="https://github.com/firebase/firebase-tools/issues/653">long thread</a>
in the <code>firebase-tools</code> repo about monorepo support. The majority of the
solutions described there are some variation of a deploy script that
packs your shared dependencies into <code>.tgz</code> files, and patch the
<code>functions/package.json</code> file to reference them with <code>file:</code> for the
time of the deployment. We‚Äôll explore this in details in the last solution: <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach">the hybrid approach</a>.</p>
<p>However, there‚Äôs <a href="https://github.com/firebase/firebase-tools/issues/653#issuecomment-1371306331">a particular comment</a>
in that thread that describes something very different, and caught my
attention despite not being given very much interest there.</p>
<figure class="center">
  <img alt="A comment suggesting to put the monorepo root as the functions source" srcset="../../img/2023/04/firebase-monorepo-comment.png 2x">
</figure>
<p>This comment suggests that we put the monorepo root as the functions
source in <code>firebase.json</code> (ignoring unnecessary files as needed), to
ensure we send the whole relevant monorepo context to Cloud Build!</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;ignore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">&quot;firebase.json&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">&quot;**/.*&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">&quot;**/node_modules/**&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">&quot;**/packages/@(web|mobile)/**&quot;</span>
    <span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Then, adding the functions entrypoint in the top-level <code>package.json</code>,
because Cloud Functions still don‚Äôt know about monorepos, and expects the
functions <code>package.json</code> to be at the root.</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./packages/functions/dist/index.js&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> if you use <code>.env</code> files in your functions, e.g. <code>.env</code>,
<code>.env.production</code>, <code>.env.staging</code>, and any other project aliases you may
have, which is becoming more and more common <a href="https://firebase.google.com/docs/functions/config-env#environment_configuration">now Firebase deprecated
<code>functions.config()</code></a>,
you also need to put them at the root of your monorepo with this
solution, otherwise they will be ignored during deploy!</p>
</div>
<p>To me, this sounds <em>much more elegant</em> than the hacks with deploy
scripts and <code>file:</code> references! But after using this approach in
production for a few weeks, I decided to rollback, because there was too
many downsides for my use case.</p>
<h3 id="the-ignore-list-is-quirky" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-ignore-list-is-quirky"><span>The ignore list is quirky</span></a></h3>
<p>The ignore list is not exactly intuitive to work with. And if you forget
to ignore anything somewhat large, <a href="https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html">your functions will fail to deploy</a>.
It struggled so much to figure out the precise rules of this ignore list
that I had to go in the <code>firebase-tools</code> source code in order to
understand it, and I wrote <a href="https://www.codejam.info/2023/04/firebase-functions-ignore.html">another blog post</a>
to explain how it really works, and how to test your ignore patterns!</p>
<p>The main caveat is that you <a href="https://github.com/firebase/firebase-tools/issues/2677">can‚Äôt use negative ignore rules</a>
like you could in <code>.gitignore</code> and most ignore systems, e.g.:</p>
<pre><code class="hljs language-gitignore">/apps/website1/*
!/apps/website1/package.json
/apps/website2/*
!/apps/website2/package.json
</code></pre>
<p>In a <code>.gitignore</code>, this would ignore everything in <code>apps/website1</code> and
<code>apps/website2</code> except for their <code>package.json</code>. If you use ‚Äúa modern
version of Yarn‚Äù (not 1.x), this is something you would need to do, because
<code>yarn install --immutable</code> will fail if the workspaces identified in
your <code>yarn.lock</code> don‚Äôt actually point to directories with a
<code>package.json</code> in them!</p>
<p>If you use npm or Yarn 1.x though, <code>npm ci</code> and <code>yarn install --frozen-lockfile</code> won‚Äôt care, so you‚Äôre good to go.</p>
<div class="note">
<p><strong>Note:</strong> just keep in mind that Yarn 1.x doesn‚Äôt let you install
dependencies for a single workspace, you systematically have to install
all dependencies for the whole monorepo, which can be a pretty bad hit
for any pipeline that works only on a small subset of the monorepo.</p>
<p>While you can <a href="https://classic.yarnpkg.com/en/docs/cli/install#toc-yarn-install-focus"><code>yarn install --focus</code></a>
with 1.x, which kind of sounds like this, it doesn‚Äôt work with
dependencies that are local to the monorepo, they <em>need</em> to be fetched
from a registry.</p>
</div>
<p>But on new Yarn versions, this is a pretty big deal because you can‚Äôt
ignore a whole workspace from your functions deploy, and because there‚Äôs
no negative patterns to ignore everything but the <code>package.json</code> in a
given workspace, you‚Äôre stuck with having to <em>explicitly</em> ignore
everything but the <code>package.json</code> in each of the workspaces you want to
exclude. And it‚Äôs a list you‚Äôll now have to maintain forever every time
you add new things to your monorepo.</p>
<p>This is even more of a problem because if you have any kind of secret in
your repo, and you fail to add them to your <code>functions.ignore</code> list,
they‚Äôll be packaged in your functions source and you won‚Äôt notice. Your
functions source is private to your Google Cloud account by default, but
this is silently waiting to make a future security issue much worse.</p>
<h3 id="all-the-other-workspace-dependencies-are-installed" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#all-the-other-workspace-dependencies-are-installed"><span>All the other workspace dependencies are installed</span></a></h3>
<p>This is the one that made me give up this solution. I could deal with
the ignore list issues, but this was another level.</p>
<p>As we saw earlier, Cloud Functions use Cloud Build to install your
dependencies. The whole thing is not designed for monorepos, which is
why we had to put our <code>main</code> entrypoint in the root <code>package.json</code>. A
more concerning effect of that though, is that Cloud Build will run <code>npm install</code>
at the top level of the monorepo.</p>
<p>This means installing all the dependencies of all your apps and
packages. This is big problem if you have a lot of unrelated
dependencies across your different workspaces.</p>
<p>Firebase doesn‚Äôt let you configure the install command either, to run
e.g. <code>npm install --workspace functions</code> or <code>yarn workspace function workspaces focus</code>
(I know, awkward command), which would install only the functions
dependencies. <em>This can speed up your install times drastically</em> in
remote build environments, but here it‚Äôs not an option.</p>
<p>For us, the difference was 10 minutes to deploy Firebase functions vs. 2
minutes, if we could install the dependencies of the functions only.</p>
<p>This was to much, which is why I ended up with the last approach.</p>
<div class="note">
<p><strong>Note:</strong> the build time issue was heavily magnified in my case by the
fact Cloud Build <a href="https://github.com/GoogleCloudPlatform/buildpacks/issues/203">doesn‚Äôt do any caching for Yarn 2.x and greater</a>
if it‚Äôs not used in <a href="https://yarnpkg.com/features/pnp">PnP mode</a>.
Proper caching may help a bit with npm and Yarn 1.x, even though it‚Äôs
still not ideal.</p>
<p>There may be a way though, for example by replacing the top-level
<code>package.json</code> and <code>package-lock.json</code> by dummy ones during <code>firebase deploy</code> so that from Cloud Build‚Äôs perspective it looks like you have no
dependencies, and then hijacking the <code>gcp-build</code> script to <em>actually</em>
install your dependencies yourself using the appropriate command that
doesn‚Äôt install the whole world at the same time. ü•π</p>
<p>I haven‚Äôt tested this but it may work. However, if you‚Äôre gonna get that
hacky, you might as well embrace the third solution.</p>
</div>
<h2 id="the-hybrid-approach" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach"><span>The hybrid approach</span></a></h2>
<p>This is an improved version of <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach">the first ‚Äúgood enough for me‚Äù solution</a>,
where in our development environment, we work with a full-fledged
monorepo, with shared packages and everything, but when we deploy the
Firebase functions, we narrow it down to its own independent-repo-like
entity, but in a way that will actually work with our
<code>package-lock.json</code> and shared packages!</p>
<p>This will take a bit of code though, in the form of a <code>predeploy</code> and
<code>postdeploy</code> script for our functions. The <code>predeploy</code> script needs to:</p>
<ol>
<li>Do anything you were already doing in a <code>predeploy</code> script like
linting and building your app.</li>
<li>Copy all the shared packages you depend on in your functions
directory, either through <code>.tgz</code> files from using <code>npm pack</code> or <code>yarn pack</code>, or the directories themselves (see below for the difference).</li>
<li>Patch your functions <code>package.json</code> to reference the internal
dependencies using <code>file:</code> references to the <code>.tgz</code> files or
directories you just created.</li>
<li><strong>Do so recursively for your whole graph of internal dependencies.</strong>
Hopefully it‚Äôs small enough to be manageable, but I can see this
turning into a living hell in complex monorepos.</li>
<li>Copy the top-level lock file in the functions directory. If you use
Yarn 2.x and greater, you‚Äôll need to do a bit more than that, see
below.</li>
</ol>
<p>As for the <code>postdeploy</code> script, it needs to undo everything that
<code>predeploy</code> did.</p>
<p>Of course, your repo will be in an inconsistent state for the duration
of <code>firebase deploy</code>, so maybe run that from another copy of your
monorepo that you don‚Äôt work from, or make sure to not mess with your
dependencies during the deploy, or things will fall apart!</p>
<p>You‚Äôll find a number of examples of those <code>predeploy</code> and <code>postdeploy</code>
scripts in the issue thread I linked earlier. Here‚Äôs
<a href="https://github.com/firebase/firebase-tools/issues/653#issuecomment-1464911379">one of the most recent ones</a>
that you can take inspiration from.</p>
<p>For the part where you replace the versions of your internal packages in
your <code>package.json</code>, you can use <a href="https://docs.npmjs.com/cli/v7/commands/npm-pkg"><code>npm pkg set</code></a></p>
<pre><code class="hljs language-sh">npm pkg <span class="hljs-built_in">set</span> <span class="hljs-string">&#x27;dependencies.@myorg/shared=file:shared.tgz&#x27;</span> <span class="hljs-string">&#x27;dependencies.@myorg/tsconfig=file:tsconfig.tgz&#x27;</span>
</code></pre>
<p>Just make a backup of your original <code>package.json</code> so you can restore it
in the <code>postdeploy</code> script. Feel free to use it with Yarn as well since
this really just edits your <code>package.json</code> from the command line.</p>
<p>Now, about the downsides.</p>
<h3 id="you-have-to-recursively-package-your-internal-dependencies" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#you-have-to-recursively-package-your-internal-dependencies"><span>You have to recursively package your internal dependencies</span></a></h3>
<p>And to do so, you have to patch your <code>package.json</code> files all the way
down the internal dependency graph for your functions. Nasty.</p>
<p>As for using <code>.tgz</code> files from <code>npm pack</code> or <code>yarn pack</code> vs. copying the
directories directly, it comes down to personal preference with npm, but
if you use Yarn and you have nested internal dependencies, you‚Äôre much
better off going with the directory approach.</p>
<p>That‚Äôs because npm can resolve <code>file:</code> references to <code>.tgz</code> files
relative to <em>where <code>npm install</code> is ran from</em>, but Yarn only looks for
the <code>.tgz</code> files relative to the <code>package.json</code> referencing it.</p>
<p>You can see how this becomes a problem with more than one level of
dependency, because you would have to embed the archive of the same
packages in all the packages that reference it, and do so recursively,
which can get exponentially heavy and inefficient! Not to mention that
you‚Äôd end up with a lot of duplicated dependencies, which can cause a
whole lot of other problems on its own.</p>
<p>It will work with the directory approach though:</p>
<ol>
<li>You make your functions depend on <code>&quot;@myorg/shared&quot;: &quot;file:shared&quot;</code>.</li>
<li>You make <code>shared/package.json</code> depends on <code>&quot;@myorg/tsconfig&quot;: &quot;file:../tsconfig&quot;</code>.</li>
<li>You copy both <code>shared</code> and <code>tsconfig</code> under your functions directory
and you‚Äôre god to go.</li>
</ol>
<h3 id="you-need-to-mirror-some-top-level-logic" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#you-need-to-mirror-some-top-level-logic"><span>You need to mirror some top-level logic</span></a></h3>
<p>In the previous solution, we saw how we had to copy some functions logic
at the top level (<code>main</code> inside <code>package.json</code> as well as <code>.env</code> files).
Here, we have the opposite problem.</p>
<p>Because we‚Äôre shipping only the functions directory to Cloud Functions,
it‚Äôs missing your <code>package-lock.json</code> or <code>yarn.lock</code> from the top
level (and maybe a number of other files you may need without knowing it).</p>
<p>For example, if you use ‚Äúa modern version of Yarn‚Äù aka not Yarn 1.x, it
also needs its <code>.yarnrc.yml</code> as well as <code>.yarn/releases</code> and
<code>.yarn/plugins</code> directories in order to function!</p>
<p>If you forget to copy any of those inside your functions directory,
Cloud Build will either use the wrong package manager or the wrong
version of your package manager, which may result in the best case in a
broken deploy, or worst, resolving and linking dependencies differently
than in your local environment, which can lead to a number of sneaky
issues.</p>
<p>This is not something that‚Äôs accounted for in any of the solutions from
<a href="https://github.com/firebase/firebase-tools/issues/653">the thread</a>
I linked earlier. <strong>They all ship a lonely <code>functions/package.json</code> that
will end up installing unpredictable dependency versions in their
production environment.</strong></p>
<p>Luckily, this is easy to fix! Just copy your top-level
<code>package-lock.json</code> or <code>yarn.lock</code> in the functions directory as part of
your <code>predeploy</code> script.</p>
<p>npm and Yarn 1.x are resilient enough to do the right thing from a
<em>superset</em> of the lock file. More recent versions of Yarn though, are
pretty strict and will refuse to install if it finds anything
<em>superfluous</em> in <code>yarn.lock</code> (from its partial perspective).</p>
<p>There‚Äôs a whole bunch of ways to addresses this, tracked in
<a href="https://github.com/yarnpkg/yarn/issues/5428">those</a> <a href="https://github.com/yarnpkg/berry/issues/1223">issues</a>,
with the emerging of various experimental Yarn plugins to fix it like
<a href="https://github.com/andreialecu/yarn-plugin-workspace-lockfile">yarn-plugin-workspace-lockfile</a>
(<a href="https://github.com/bertho-zero/yarn-plugin-workspace-lockfile">and</a>
<a href="https://github.com/milesforks/yarn-plugin-workspace-lockfile">its</a>
<a href="https://github.com/jakebailey/yarn-plugin-workspace-lockfile">forks</a>)
or <a href="https://github.com/JanVoracek/yarn-plugin-entrypoint-lockfiles">yarn-plugin-entrypoint-lockfiles</a>
that maintains individual lock files for each workspaces (or
‚Äúentrypoint‚Äù) at the cost of slightly slower installs when you add or
remove dependencies.</p>
<p>I initially used some version of this, but while writing this blog post,
I stumbled upon <a href="https://stackoverflow.com/a/73118909/4324668">this StackOverflow comment</a>
that mentions <code>yarn install --mode update-lockfile</code>. This is <em>exactly
what we want</em>! So as of Yarn 3.x, we can just do the following:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">cp</span> yarn.lock apps/functions
<span class="hljs-built_in">cd</span> apps/functions
yarn install --mode update-lockfile
</code></pre>
<p>This will updates <code>apps/functions/yarn.lock</code> to contain <em>only</em> the
entries <em>necessary</em> for your functions, while keeping the versions that
were pinned in the original lock file. This will happily work when Cloud
Build runs <code>yarn install --immutable</code> later on. üòç</p>
<p>Again, this is something you need to do in your <code>predeploy</code> script, and
undo in your <code>postdeploy</code>.</p>
<h2 id="comparison" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#comparison"><span>Comparison</span></a></h2>
<p>Let‚Äôs compare the pros and cons of those 3 options.</p>
<p><strong><a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach">Good enough</a></strong></p>
<ul>
<li>üü¢ Easy AF.</li>
<li>üü°  Doesn‚Äôt use your lock file, you‚Äôre installing nondeterministic
versions of your dependencies in production (easily fixable by taking
that specific part of the hybrid approach though).</li>
<li>üî¥ Can‚Äôt use workspace shared packages.</li>
</ul>
<p><strong><a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-full-context-approach">Full context</a></strong></p>
<ul>
<li>üü¢ Supports your lock file and any other monorepo-wide config
(Yarn version, etc.) by design and out of the box.</li>
<li>üü¢ Supports shared workspaces packages by design and out of the box.</li>
<li>üü° Need to proxy the functions <code>main</code> entrypoint in the top-level <code>package.json</code>,
as well as other things like functions <code>.env</code> files.</li>
<li>üü† Need to maintain the <code>functions.ignore</code> list which is clunky,
and gets significantly worst when using modern Yarn versions.</li>
<li>üî¥ It installs your whole monorepo dependencies instead of just your
functions dependencies.</li>
</ul>
<p><strong><a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach">Hybrid</a></strong></p>
<ul>
<li>üü¢ None of the downsides of the previous approach.</li>
<li>üü° You have to copy your lock file and maybe other global requirements
like your <code>.yarnrc.yml</code>, <code>.yarn</code> folder and alike inside your
functions directory.</li>
<li>üî¥ Needs a <code>predeploy</code> and <code>postdeploy</code> script to package workspace
dependencies inside the functions directories, and recursively patch
their <code>package.json</code> to reference them with <code>file:</code>.</li>
</ul>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#conclusion"><span>Conclusion</span></a></h2>
<p>Today, we went through 3 methods to make Firebase functions <em>somewhat</em>
work with a monorepo: <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-good-enough-for-me-approach">the ‚Äúgood enough for me‚Äù approach</a>,
<a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-full-context-approach">the full context approach</a>
and <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#the-hybrid-approach">the hybrid approach</a>. Finally, we
<a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html#comparison">compared their pros and cons</a>.</p>
<p>By now, you should have everything you need in order to make an educated
decision about which method to pick.</p>
<p>And if you find any other cool trick to make working with Firebase
functions in a monorepo easier, don‚Äôt hesitate to <a href="https://www.codejam.info/val.html#contact">let me know</a>!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1644495294803898369">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How Firebase functions.ignore really works</title>
    <link href="https://www.codejam.info/2023/04/firebase-functions-ignore.html" />
    <id>https://www.codejam.info/2023/04/firebase-functions-ignore.html</id>
    <updated>2023-04-07T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Maybe you ran into <a href="https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html">Firebase functions space issues</a>,
which is not uncommon if you‚Äôre <a href="https://www.codejam.info/2023/04/firebase-functions-monorepo.html">moving Firebase functions inside a monorepo</a>.
Anyhow, you‚Äôre now playing with the <code>functions.ignore</code> list in your
<code>firebase.json</code>.</p>
<p>The ignore list is not well documented, nor is the whole
<code>firebase.json</code> really, but there is <a href="https://firebase.google.com/docs/cli/#the_firebasejson_file">a section on it</a>
in the Firebase CLI reference. I always struggle to find this page, and
I systematically find it through <a href="https://github.com/firebase/firebase-tools/issues/1409">this GitHub issue</a>
about documenting it.</p>
<p>It says the following <a href="https://firebase.google.com/docs/cli/#functions-ignored-files">about the ignore list</a>:</p>
<blockquote>
<p>The list of files ignored by default, shown in JSON format, is:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;ignore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;.git&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;.runtimeconfig.json&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;firebase-debug.log&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;firebase-debug.*.log&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;node_modules&quot;</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>If you add your own custom values for ignore in <code>firebase.json</code>, make
sure that you keep (or add, if it is missing) the list of files shown
above.</p>
</blockquote>
<p>Let‚Äôs dig into it in a bit more details.</p>
<h2 id="if-you-set-an-ignore-list-it-overrides-the-defaults" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-ignore.html#if-you-set-an-ignore-list-it-overrides-the-defaults"><span>If you set an ignore list, it overrides the defaults!</span></a></h2>
<p>That‚Äôs the only thing the docs say about the ignore list. It‚Äôs important
to note because otherwise, you may notice that setting <code>&quot;ignore&quot;: []</code>
ends up including <em>much more stuff</em> than not setting it, and
<a href="https://github.com/firebase/firebase-tools/issues/1602">this can be surprising</a>.</p>
<p>This is actually partially true (but mostly true to be fair).</p>
<p>We can see <a href="https://github.com/firebase/firebase-tools/blob/8976456eebf75ab9ab2a1299c0d6561f324db7f8/src/deploy/functions/prepareFunctionsUpload.ts#L75-L80">in the source code</a>
the following:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> ignore = config.<span class="hljs-property">ignore</span> || [<span class="hljs-string">&#x27;node_modules&#x27;</span>, <span class="hljs-string">&#x27;.git&#x27;</span>]

ignore.<span class="hljs-title function_">push</span>(
  <span class="hljs-string">&#x27;firebase-debug.log&#x27;</span>,
  <span class="hljs-string">&#x27;firebase-debug.*.log&#x27;</span>,
  <span class="hljs-string">&#x27;.runtimeconfig.json&#x27;</span>
)
</code></pre>
<p>This means that regardless if you customize or not <code>functions.ignore</code>,
the debug logs and runtime config will always be ignored. But it‚Äôs also
true that if you explicitly set <code>functions.ignore</code> and forget to add
<code>node_modules</code> and <code>.git</code>, those will indeed be included. Now you know.</p>
<h2 id="you-can-t-use-to-refer-to-the-functions-root" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-ignore.html#you-can-t-use-to-refer-to-the-functions-root"><span>You can‚Äôt use <code>/</code> to refer to the functions root</span></a></h2>
<p>In <code>.gitignore</code> and any sane ignore format, you can use <code>/</code> to refer to
the project root. E.g. ignoring <code>/bar</code> will ignore <code>bar</code> at the top
level, but will still include <code>foo/bar</code>.</p>
<p>This is pretty handy in a number of situations, and just a good practice
in general to be more intentional about what you <em>mean</em> to exclude. If
you have a <code>data</code> directory that you want to ignore, but you just put
<code>data</code> in your ignore file, and later on you add <code>src/api/data/load.js</code>,
guess what, <code>src/api/data</code> will be ignored and you‚Äôll be confused until
you figure out the sneaky ignore pattern. You really should be ignoring
<code>/data</code> in that case.</p>
<p>So again, we can‚Äôt do that in <code>functions.ignore</code>. Why? Ultimately, this
is because Firebase uses <a href="https://github.com/isaacs/minimatch">minimatch</a>
for this <a href="https://github.com/firebase/firebase-tools/blob/8976456eebf75ab9ab2a1299c0d6561f324db7f8/src/fsAsync.ts#L53">here</a>,
but they pass the system-wide absolute path as the first argument! So
that‚Äôs what ends up happening when using a <code>/</code> pattern (using
<code>matchBase</code> and <code>dot</code> to mimic how Firebase uses it):</p>
<pre><code class="hljs language-js">&gt; <span class="hljs-title function_">minimatch</span>(<span class="hljs-string">&#x27;/path/to/functions/foo&#x27;</span>, <span class="hljs-string">&#x27;/foo&#x27;</span>, { <span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">dot</span>: <span class="hljs-literal">true</span> })
<span class="hljs-literal">false</span>
</code></pre>
<p>What would be great is if the first argument was ‚Äúscoped‚Äù to the
functions root. Then we would have nice things:</p>
<pre><code class="hljs language-js">&gt; <span class="hljs-title function_">minimatch</span>(<span class="hljs-string">&#x27;/foo&#x27;</span>, <span class="hljs-string">&#x27;/foo&#x27;</span>, { <span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">dot</span>: <span class="hljs-literal">true</span> })
<span class="hljs-literal">true</span>
</code></pre>
<p>But because we can‚Äôt have nice things, we have to resort to using a
wider pattern (without the <code>/</code>):</p>
<pre><code class="hljs language-js">&gt; <span class="hljs-title function_">minimatch</span>(<span class="hljs-string">&#x27;/path/to/functions/foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, { <span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">dot</span>: <span class="hljs-literal">true</span> })
<span class="hljs-literal">true</span>
</code></pre>
<p>This is a problem though because as we saw earlier, it‚Äôs <em>too</em> wide:</p>
<pre><code class="hljs language-js">&gt; <span class="hljs-title function_">minimatch</span>(<span class="hljs-string">&#x27;/path/to/functions/src/foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, { <span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">dot</span>: <span class="hljs-literal">true</span> })
<span class="hljs-literal">true</span>
</code></pre>
<h2 id="can-t-use-in-base-patterns" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-ignore.html#can-t-use-in-base-patterns"><span>Can‚Äôt use <code>/</code> in base patterns</span></a></h2>
<p>The last example works only because <code>matchBase</code> is enabled, but if you
look at the <a href="https://github.com/isaacs/minimatch#matchbase"><code>matchBase</code> documentation</a>,
you see that it breaks down as soon as our pattern includes a <code>/</code>:</p>
<pre><code class="hljs language-js">&gt; <span class="hljs-title function_">minimatch</span>(<span class="hljs-string">&#x27;/path/to/functions/foo/bar&#x27;</span>, <span class="hljs-string">&#x27;foo/bar&#x27;</span>, { <span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">dot</span>: <span class="hljs-literal">true</span> })
<span class="hljs-literal">false</span>
</code></pre>
<p>But since root patterns don‚Äôt work <em>anyway</em> as we just saw, we can get
around this by using wildcards:</p>
<pre><code class="hljs language-js">&gt; <span class="hljs-title function_">minimatch</span>(<span class="hljs-string">&#x27;/path/to/functions/foo/bar&#x27;</span>, <span class="hljs-string">&#x27;**/foo/bar&#x27;</span>, { <span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">dot</span>: <span class="hljs-literal">true</span> })
<span class="hljs-literal">true</span>
</code></pre>
<h2 id="there-s-no-pattern-negation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-ignore.html#there-s-no-pattern-negation"><span>There‚Äôs no pattern negation</span></a></h2>
<p>Pattern negation is what allows you do do something like this in a
<code>.gitignore</code>:</p>
<pre><code class="hljs language-gitignore">/dist/*
!/dist/package.json
</code></pre>
<p>This would ignore everything in the <code>dist</code> directory except for
<code>dist/package.json</code>.</p>
<p>This is particularly handy in a number of situations, especially when
you consider the alternative which is to <em>explicitly ignore every single
file or directory you have in <code>dist</code></em>. And obviously, remembering to add
any <em>new</em> file to your ignore list when you create them, or when tools
you use create other random files you don‚Äôt even know exist.</p>
<p>All that to say, you guessed it, that Firebase <code>functions.ignore</code>
<a href="https://github.com/firebase/firebase-tools/issues/2677">doesn‚Äôt support this</a>.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-ignore.html#conclusion"><span>Conclusion</span></a></h2>
<p>That‚Äôs all I have for today. If you‚Äôre working with Firebase
<code>functions.ignore</code> right now and noticed a few quirks, I hope this made
it easier for you to understand what‚Äôs going on.</p>
<p>And if you‚Äôre trying to fix a Firebase functions source being too large
to be deployed, I also <a href="https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html">wrote a post</a>
with tips to troubleshoot it.</p>
<p>Peace. ‚úåÔ∏è</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Firebase functions: debugging upload error EntityTooLarge</title>
    <link href="https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html" />
    <id>https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html</id>
    <updated>2023-04-07T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>So during a <code>firebase deploy</code>, you ran into the following error:</p>
<pre><code class="hljs">Upload Error: HTTP Error: 400
</code></pre>
<pre><code class="hljs language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">Error</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Code</span>&gt;</span>EntityTooLarge<span class="hljs-tag">&lt;/<span class="hljs-name">Code</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Message</span>&gt;</span>Your proposed upload is larger than the maximum object size specified in your Policy Document.<span class="hljs-tag">&lt;/<span class="hljs-name">Message</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Details</span>&gt;</span>Content-length exceeds upper bound on range<span class="hljs-tag">&lt;/<span class="hljs-name">Details</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">Error</span>&gt;</span>
</code></pre>
<p>What to do from there?</p>
<p>This happens because your functions source was too large: over 100 MB
for the compressed source, or 500 MB for the uncompressed source and its
dependencies, as documented in <a href="https://cloud.google.com/functions/quotas#resource_limits">resource limits</a>.</p>
<p>Now, there may be ways you can reduce that, particularly using the
<a href="https://firebase.google.com/docs/cli/#functions-ignored-files"><code>functions.ignore</code></a>
list in <code>firebase.json</code> to ignore unnecessary (and possibly heavy)
files.</p>
<p>But it‚Äôs not necessarily easy to write this list. The ignore patterns
are not well documented and can be quirky, enough that I <a href="https://www.codejam.info/2023/04/firebase-functions-ignore.html">wrote another
blog post</a> to demistify them. You can
easily end up in a loop of trial and error until you get the patterns
right, and some guesswork to find what files and directories can be
exceeding the size limit.</p>
<p>Firebase doesn‚Äôt give us any way to inspect the functions packed source
to diagnose what failed to be ignored and is taking all that space.
Luckily, it‚Äôs pretty easy to hack that around.</p>
<h2 id="catching-the-temporary-zip-as-it-s-generated" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html#catching-the-temporary-zip-as-it-s-generated"><span>Catching the temporary ZIP as it‚Äôs generated</span></a></h2>
<p>By looking at the source code of Firebase, we can see they
<a href="https://github.com/firebase/firebase-tools/blob/b0798fb1fe96499e1404d6fea6c181735e3a8f11/src/deploy/functions/prepareFunctionsUpload.ts#L63">use the <code>tmp</code> module</a>
in order to generate the ZIP archive for Cloud Functions.</p>
<p>Let‚Äôs see where <code>tmp</code> creates the files. On macOS, that‚Äôs what I got:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">node -p <span class="hljs-string">&quot;require(&#x27;tmp&#x27;).fileSync({ prefix: &#x27;firebase-functions-&#x27;, postfix: &#x27;.zip&#x27; }).name&quot;</span></span>
/var/folders/8g/6ch743rn6p990xxbsd757yfm0000gn/T/firebase-functions--35549-LDS1bLg78ajZ.zip
</code></pre>
<p>Sweet. So we can look for <code>firebase-functions-*.zip</code> inside
<code>/var/folders</code> to find the archive that‚Äôs being uploaded!</p>
<p>Now, we just have to watch for those logs during the deploy:</p>
<pre><code class="hljs">i  functions: preparing . directory for uploading...
i  functions: packaged /path/to/repo (123.45 MB) for uploading
</code></pre>
<p>This tells us that the archive is ready. Be quick (or cancel the
deploy), because Firebase will clean it up pretty fast!</p>
<p>You can use a command like this to show the creation time of the files
that matched. Then just pick the most recent one.</p>
<pre><code class="hljs language-sh">find /var/folders -name <span class="hljs-string">&#x27;firebase-functions-*.zip&#x27;</span> -<span class="hljs-built_in">ls</span> 2&gt; /dev/null
</code></pre>
<p>The <code>2&gt; /dev/null</code> part is to ignore the error stream since a lot of
stuff in <code>/var/folders</code> will get permission denied errors.</p>
<p>Now you have the source ZIP file, you can uncompress it and see what
failed to be ignored, or what‚Äôs left in there that is too heavy and
needs to be added to the ignore list!</p>
<div class="note">
<p><strong>Note:</strong> while trying to find leftover files that are too large,
<a href="https://dev.yorhel.nl/ncdu">ncdu</a> is really useful. It‚Äôs a small CLI
tool that allows to browse a directory, showing the largest files and
folders on top, with their size. I can only highly recommend it when you
need to identify large files.</p>
<p>You may install it with one of the following commands, depending on your
system:</p>
<pre><code class="hljs language-sh">apt install ncdu
pacman -S ncdu
brew install ncdu
</code></pre>
</div>
<h2 id="an-even-better-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/firebase-functions-entity-too-large.html#an-even-better-solution"><span>An even better solution</span></a></h2>
<p>While this first solution worked, I didn‚Äôt like having to catch the ZIP
files fast before Firebase removes it. I kept digging through the code,
and I found a way to call the Firebase archiving code directly,
instead of running <code>firebasde deploy</code>!</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;firebase-tools/lib/deploy/functions/prepareFunctionsUpload&#x27;</span>).<span class="hljs-title function_">prepareFunctionsUpload</span>(
  process.<span class="hljs-title function_">cwd</span>(),
  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./firebase.json&#x27;</span>).<span class="hljs-property">functions</span>
).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x.<span class="hljs-property">pathToSource</span>))
</code></pre>
<p>Running this from our Firebase root directory (the one where
<code>firebase.json</code> is in), it will generate the ZIP archive and output its
temporary path!</p>
<p>You can then decompress it and analyze it as we just saw.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Vercel: custom preview domain for free?</title>
    <link href="https://www.codejam.info/2023/04/vercel-custom-preview-domain.html" />
    <id>https://www.codejam.info/2023/04/vercel-custom-preview-domain.html</id>
    <updated>2023-04-06T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If you host your app on Vercel, you must be familiar with how preview
deployments are a first-class citizen, and each pull request you make gets
a preview deployment.</p>
<p>Those preview deployments default to be hosted on <code>vercel.app</code>, and
Vercel provisions two preview domains for it, with the following
patterns:</p>
<ul>
<li><code>{app}-{id}-{org}.vercel.app</code></li>
<li><code>{app}-git-{branch}-{org}.vercel.app</code></li>
</ul>
<p>So if you make a PR on an app called <code>my-app</code> in an organization
<code>my-org</code>, on a branch called <code>hello-world</code>, and the deployment ID for
this commit was <code>lkj8trp27</code>, your URLs would be:</p>
<ul>
<li><code>https://my-app-lkj8trp27-my-org.vercel.app/</code></li>
<li><code>https://my-app-git-hello-world-my-org.vercel.app/</code></li>
</ul>
<p>But what if you want, for example, to allow OAuth on your preview
domains? Whitelisting <code>vercel.app</code> is out of the question since it would
allow <em>any</em> Vercel website (including an attacker‚Äôs website) to be a
valid redirect URI for our OAuth provider!</p>
<p>And we can‚Äôt typically whitelist a domain pattern like <code>*-my-org.vercel.app</code>,
not that this would be a good idea anyway because <strong>this pattern is
<em>not</em> private to your organization</strong>. Any random Vercel user can use
it in their own app!</p>
<p>Then, it would be useful to use your own domain instead of <code>vercel.app</code>.
Turns out Vercel supports this, and <a href="https://vercel.com/docs/concepts/deployments/generated-urls#preview-deployment-suffix">charges $100/month</a>
for it! Steep.</p>
<p>Steep, but if you‚Äôre looking for a turnkey solution, it‚Äôs definitely
worth it. Otherwise, keep reading.</p>
<h2 id="using-the-vercel-cli" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/vercel-custom-preview-domain.html#using-the-vercel-cli"><span>Using the Vercel CLI</span></a></h2>
<p>An interesting thing in the Vercel CLI is that it lets us manually
associate a custom domain to a given deployment using
<a href="https://vercel.com/docs/cli/alias"><code>vercel alias</code></a>. üòè</p>
<p>Let‚Äôs say <code>codejam.info</code> is part of my Vercel-managed domains:</p>
<pre><code class="hljs language-sh">vercel <span class="hljs-built_in">alias</span> <span class="hljs-built_in">set</span> my-app-lkj8trp27-my-org.vercel.app hello-world.preview.codejam.info
</code></pre>
<p>This will associate the deployment example from earlier to my custom
domain!</p>
<p>We can literally put anything we want under <code>codejam.info</code> there, and it
will happily generate a SSL certificate for that arbitrary subdomain,
and associate it to our deployment.</p>
<p>This will work as long you associated a wildcard subdomain on your DNS
to Vercel, like <code>*.preview.codejam.info</code> in our example.</p>
<p>This is a good start, but it doesn‚Äôt scale!</p>
<h2 id="using-the-vercel-api" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/vercel-custom-preview-domain.html#using-the-vercel-api"><span>Using the Vercel API</span></a></h2>
<p>Luckily, the Vercel API exposes an endpoint to do just the same thing:
<a href="https://vercel.com/docs/rest-api/endpoints#assign-an-alias"><code>POST /v2/deployments/{id}/aliases</code></a>.
In our example, we can call it with:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hello-world.preview.codejam.info&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>How do we find the deployment ID though? We need the full deployment ID,
something looking like <code>dpl_hgLKkCqMExSzNpTtA3Dy6sVfWuYj</code>.</p>
<p>Vercel gives us a handy <a href="https://vercel.com/docs/rest-api/endpoints#get-a-deployment-by-id-or-url"><code>GET /v13/deployments/{idOrUrl}</code></a>
endpoint for this, where we can pass our deployment URL and get the
deployment object back, including its full <code>id</code>.</p>
<p>By combining those two endpoints, we can dynamically associate our
custom domain to any Vercel preview deployment. üôè</p>
<h2 id="getting-an-api-token" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/vercel-custom-preview-domain.html#getting-an-api-token"><span>Getting an API token</span></a></h2>
<p>In order to call the API, we need to pass a bearer token in the
<code>Authorization</code> header. You can create a token from your
<a href="https://vercel.com/account/tokens">Vercel account settings</a>.</p>
<p>Then, you can put it in your app‚Äôs environment variables, e.g. as
<code>VERCEL_TOKEN</code>, so it‚Äôs available in your server-side code environment.</p>
<h2 id="associating-the-domain-on-the-fly" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/vercel-custom-preview-domain.html#associating-the-domain-on-the-fly"><span>Associating the domain on the fly</span></a></h2>
<p>From there, we can detect when we‚Äôre running under a <code>vercel.app</code>
preview domain, call the API to associate our own custom domain, and
finally redirect to it. This will add a bit of delay when loading our
preview deployments from the <code>vercel.app</code> domains, but no big deal.</p>
<p>Where you hook in order to do that is up to you. <code>_app.jsx</code> may be a
good start, or maybe some component that‚Äôs included in all of your
pages, maybe just the home page if you don‚Äôt expect any deep link on
your <code>vercel.app</code> preview domains, or maybe even somewhere in
<code>getServerSideProps</code>?</p>
<p>If you do this client-side, you‚Äôll want to add an API route or go
through a SSR page that will be doing the call to the Vercel API (you
don‚Äôt want to expose your Vercel API token client-side), but if you‚Äôre
hooking directly in <code>getServerSideProps</code>, you can skip that step.</p>
<p>On the client, you could do something like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()

<span class="hljs-keyword">if</span> (location.<span class="hljs-property">host</span>.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;-my-org.vercel.app&#x27;</span>)) {
  <span class="hljs-comment">// Preview env</span>
  router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/preview-redirect&#x27;</span>)
}
</code></pre>
<p>Then, implement a <code>preview-redirect</code> page to associate your custom
domain to the current preview environment, then redirect to it.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getServerSideProps</span> (context) {
  <span class="hljs-keyword">const</span> deployment = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getDeployment</span>(context.<span class="hljs-property">req</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">host</span>)

  <span class="hljs-keyword">const</span> domain = <span class="hljs-string">`pr-<span class="hljs-subst">${deployment.gitSource.prId}</span>.preview.codejam.info`</span>

  <span class="hljs-keyword">await</span> <span class="hljs-title function_">associateDomainToDeployment</span>(deployment.<span class="hljs-property">id</span>, domain)

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">redirect</span>: {
      <span class="hljs-attr">destination</span>: <span class="hljs-string">`https://<span class="hljs-subst">${domain}</span>`</span>
    }
  }
}
</code></pre>
<p>Where <code>getDeployment</code> is a wrapper to <a href="https://vercel.com/docs/rest-api/endpoints#get-a-deployment-by-id-or-url"><code>GET /v13/deployments/{idOrUrl}</code></a>,
and <code>associateDomainToDeployment</code> wraps <a href="https://vercel.com/docs/rest-api/endpoints#assign-an-alias"><code>POST /v2/deployments/{id}/aliases</code></a>
(writing those is left as an exercise to the reader).</p>
<p>Here, I chose to prefix the domain with <code>pr-</code> and the PR number, but
you‚Äôre free to construct your preview domains however you want.</p>
<p>You‚Äôll notice this works the first time, but obviously if you open again
the <code>vercel.app</code> preview URL, it will fail because the domain was
already assigned! To cover that, you need to call <a href="https://vercel.com/docs/rest-api/endpoints#list-deployment-aliases"><code>/v2/deployments/{id}/aliases</code></a>
and redirecting to the existing domain if you already associated it
before.</p>
<p>We can add something like this in the beginning of our previous
function:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> aliases = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getDeploymentAliases</span>(deployment.<span class="hljs-property">id</span>)

<span class="hljs-keyword">const</span> existingDomain = aliases.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">alias</span> =&gt;</span>
  alias.<span class="hljs-property">alias</span>.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;.preview.codejam.info&#x27;</span>)
)

<span class="hljs-keyword">if</span> (existingDomain) {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">redirect</span>: {
      <span class="hljs-attr">destination</span>: <span class="hljs-string">`https://<span class="hljs-subst">${existingDomain.alias}</span>`</span>
    }
  }
}
</code></pre>
<p>After this, you should have your free custom preview domains working,
congrats!</p>
<h2 id="about-vercel-certificates" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/vercel-custom-preview-domain.html#about-vercel-certificates"><span>About Vercel certificates</span></a></h2>
<p>However, you may realize this is bloating your domain‚Äôs SSL certificates
list on Vercel. Every single preview deployment will add a new entry in
your SSL certificates list, and because the Vercel UI for this doesn‚Äôt
really expect an infinitely growing list of certificates, it‚Äôll make it
a pain for you to manage your ‚Äúactual‚Äù certificates!</p>
<p>To prevent this, you need to manually create a wildcard certificate for
the domain you use for your preview deployments. In the example featured
in this post, that would be <code>*.preview.codejam.info</code>.</p>
<p>Vercel is smart enough to notice when we associate a new domain to a
deployment, that a wildcard certificate covering it already exists, and
so doesn‚Äôt create an <em>individual</em> certificate for <em>that</em> particular
preview. This will keep your certificates list clean and tidy!</p>
<p>You can‚Äôt create the wildcard certificate from the dashboard directly,
but you can do so with the CLI using <a href="https://vercel.com/docs/cli/certs#extended-usage"><code>vercel certs issue</code></a>.</p>
<pre><code class="hljs language-sh">vercel certs issue <span class="hljs-string">&#x27;*.preview.codejam.info&#x27;</span>
</code></pre>
<p>Note that this will only work if you use Vercel‚Äôs nameservers. This
means the following won‚Äôt work (e.g. in the <code>codejam.info</code> DNS zone):</p>
<pre><code class="hljs">*.preview CNAME cname.vercel-dns.com
</code></pre>
<p>But the following will work:</p>
<pre><code class="hljs">preview NS ns1.vercel-dns.com
preview NS ns2.vercel-dns.com
</code></pre>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/vercel-custom-preview-domain.html#conclusion"><span>Conclusion</span></a></h2>
<p>If you made it here, congrats! You now have everything you need in order
to implement your own custom preview domains, without paying Vercel big
money for it.</p>
<p>Is going through all of this worth saving $100/month? That‚Äôs up to you.
But as far as I‚Äôm concerned, the joy of putting together this little
system was well worth the savings. üòú</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1644037565907890180">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Recovering Kobo eReader highlights after an accidental factory reset!</title>
    <link href="https://www.codejam.info/2023/04/kobo-highlights-recover.html" />
    <id>https://www.codejam.info/2023/04/kobo-highlights-recover.html</id>
    <updated>2023-04-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>The other day my Kobo eReader had some issues where it was instantly
dying when not plugged in, despite showing a full battery! This happened
after I let it charge overnight on an external battery. üò¨</p>
<p>I restarted it a few times, hoping this would fix the issue, but without
luck. Until‚Ä¶ the last restart was a bit different: <strong>it asked me to
chose a language</strong>.</p>
<p>At this very moment, I knew I fucked up.</p>
<p>I somehow managed to accidentally factory reset my eReader!</p>
<h2 id="limiting-the-damage-make-a-disk-image" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#limiting-the-damage-make-a-disk-image"><span>Limiting the damage: make a disk image</span></a></h2>
<p>Because I was in denial, I didn‚Äôt instantly accept that a factory reset
had happened. So I went on, picked my language and connected it again to
my Wi-Fi, so I could access the main screen.</p>
<p>Indeed, all my books were gone. Not a big deal because I have a copy on
my computer. More problematic though, my highlights and notes were
gone too!</p>
<p>I do back them up once in a while, but I‚Äôve been neglecting that, so my
last backup was over 4 months old! I‚Äôve read a bunch of books since
then, and highlighted quite some stuff I would have been happy to go
through again in the future. Bummer.</p>
<p>To prevent further damage, once I realized my data was gone, I stopped
doing anything with the device that could write to the storage.</p>
<p>As any good data recovery starts, I plugged it to my laptop and cloned
the entire storage to an image file:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/sdb of=kobo-raw-disk bs=1M
</code></pre>
<div class="note">
<p><strong>Note:</strong> I used <code>dd</code> because the storage of the eReader was presumably
healthy, if not for the fact that a factory reset had happened.</p>
<p>If I had actual corruption issues with the disk, it would have been good
to use <a href="https://www.gnu.org/software/ddrescue/"><code>ddrescue</code></a>.</p>
</div>
<h2 id="testdisk-trying-to-recover-the-original-partition" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#testdisk-trying-to-recover-the-original-partition"><span>TestDisk: trying to recover the original partition</span></a></h2>
<p>The first thing I tried was to use <a href="https://www.cgsecurity.org/wiki/TestDisk">TestDisk</a>
to recover the partition table from before the factory reset, but this
wasn‚Äôt successful.</p>
<p>I think it would have been a more appropriate tool to recover specific
partitions that were deleted without being written over, or if only the
partition table was corrupted or lost.</p>
<p>Here though, I think the factory reset process overwrote too much data
to make TestDisk successful. It didn‚Äôt hurt to try though!</p>
<h2 id="photorec-extract-recognizable-file-formats-from-raw-disk" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#photorec-extract-recognizable-file-formats-from-raw-disk"><span>PhotoRec: extract recognizable file formats from raw disk</span></a></h2>
<p>Had I been successful with TestDisk, I would have recovered the original
partition and filesystem, with the entire directory structure and
filenames.</p>
<p>As a fallback though, I decided to use
<a href="https://www.cgsecurity.org/wiki/PhotoRec">PhotoRec</a>
(another tool by the same creators as TestDisk), to try and identify
well-known file formats from the raw disk image.</p>
<p>The inconvenient of that is that we lose all the filenames and their
arborescence, but I can live with that.</p>
<p>The output of PhotoRec was 7304 files, split in directories containing
500 files each, going from <code>recup_dir.1</code> to <code>recup_dir.15</code>.</p>
<p>Each file is named after the logical sector it was found at, which is
not very useful to me here, and has the extension of the filetype that
was identified.</p>
<p>Here‚Äôs all the extensions it was able to find, along with the number of
files for that extension:</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">find photorec-out -<span class="hljs-built_in">type</span> f | sed <span class="hljs-string">&#x27;s/.*\.//&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c</span>
      5 c
      1 csv
      2 elf
     77 epub
      5 f
     11 gz
     18 h
     18 html
      1 ico
   1493 ini
    154 java
   3964 jpg
      4 pdf
      3 plist
    161 png
     27 py
      6 sqlite
      1 sxw
      1 tar
   1343 txt
      1 xml
      8 zip
</code></pre>
<h2 id="trying-to-recover-the-sqlite-databases" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#trying-to-recover-the-sqlite-databases"><span>Trying to recover the SQLite databases</span></a></h2>
<p>I knew that Kobo stores the highlights in a SQLite database, located in
<code>.kobo/KoboReader.sqlite</code>. If this was intact, I had all my highlights
back!</p>
<p>I tried to open the 6 identified SQLite databases, but sadly, the few
that weren‚Äôt corrupted didn‚Äôt have the tables I was looking for, and the
only one that was about as large as what I would expect for my
<code>KoboReader.sqlite</code> (a bit bigger than the one of my last backup) was
corrupted.</p>
<p>I tried using the <a href="https://www.sqlite.org/recovery.html"><code>.recover</code></a>
SQLite command, but that didn‚Äôt work either:</p>
<pre><code class="hljs language-sh">sqlite3 corrupt.db .recover &gt; data.sql
</code></pre>
<p>I tried <a href="https://www.nucleustechnologies.com/blog/best-6-sqlite-database-recovery-tools/">a whole bunch</a>
of different proprietary tools to recover corrupted SQLite databases,
but none of them was able to do anything.</p>
<p>When I was looking at the raw contents of the SQLite database though,
e.g. using <code>less</code> directly on the binary file, or using <code>xxd</code> or
<code>strings</code>, I could see some highlights data, but definitely not as much
as I expected.</p>
<h2 id="looking-at-the-raw-disk-directly" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#looking-at-the-raw-disk-directly"><span>Looking at the raw disk directly</span></a></h2>
<p>I tried pretty hard for that SQLite database, but I had to come to the
fact it wasn‚Äôt gonna be my savior here. However there was something I
liked about this idea of looking at the raw binary data directly.</p>
<p>I had a light of hope when I decided to <code>grep</code> into the corrupted SQLite
database, as well as the raw disk image, for fragments of sentences I
definitely remembered having highlighted. The binary files, in fact,
matched! There was after all a chance that at least some of my
highlights were there, but it wasn‚Äôt exactly clear where, how many, and
under what form.</p>
<p>Since I couldn‚Äôt do anything with the database, I decided to focus on
the raw disk image. Using <code>less</code> and <code>xxd</code> to visualize it wasn‚Äôt very
successful (it took too long to go through the huge amounts of
unreadable data to notice anything actually usable). However, <code>strings</code>,
that only outputs printable data, made it much easier for me to filter
through its contents.</p>
<p>When I looked up in the <code>strings</code> output for some sentence I remembered
highlighting, it was, in fact, part of a fairly large XML string! What?</p>
<h2 id="looking-at-the-recovered-xml-files" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#looking-at-the-recovered-xml-files"><span>Looking at the recovered XML files</span></a></h2>
<p>It turned out that whole time, the Kobo eReader was storing annotations
not only in a database, but also in XML files!</p>
<p>For some reason PhotoRec identified them all as <code>txt</code> instead of <code>xml</code>,
but it was pretty easy to extract them. All the annotations XML started
with <code>&lt;annotationSet</code>.</p>
<pre><code class="hljs language-sh">grep -R --files-with-match <span class="hljs-string">&#x27;&lt;annotationSet&#x27;</span> photorec-out/**/*.txt
</code></pre>
<p>With <code>-R</code> for recursive, and <code>--files-with-match</code>, this command printed
the filenames of all the files that contained <code>&lt;annotationSet</code>.</p>
<p>I copied them to a separate directory for analysis.</p>
<p>I quickly identified a pattern: each XML file contained all the
annotations for a given book, but I had many different XML files for the
same books, with more or less annotations in them. It was like I had the
history of every single time each file was written to as I added new
highlights!</p>
<p>I wrote a quick script to validate this theory, and surely, the XML with
the most annotations for each book systematically contained all of the
annotations of the other, smaller XML files for that same book. This
allowed me to filter quite a lot amongst those files.</p>
<h2 id="integrity-check-comparing-with-my-backup-database" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#integrity-check-comparing-with-my-backup-database"><span>Integrity check: comparing with my backup database</span></a></h2>
<p>Remember, I still had that copy of the database from a few months ago. I
decided to check the integrity of the XMLs I recovered against what was
in my backup, so I wrote a quick script to compare them.</p>
<p>I wasn‚Äôt happy with what I found though. For the books for which I did
have a backup, this showed that I recovered <em>most</em> of the highlights in
the XML files, but not <em>all</em>. This means that for the ones where I
didn‚Äôt have a backup, I couldn‚Äôt hope to have recovered <em>everything</em>.</p>
<p>This was better than nothing, but I was pretty uncomfortable with that
state of having recovered <em>some</em> data but not knowing what data I had
actually lost. üòÖ</p>
<p>I scratched my head a bit, and surely enough, I was able to recall a few
words for a sentence that I definitely remembered highlighting recently,
and that was not part of the XMLs that PhotoRec recovered.</p>
<p>What was exciting though, is that I could successfully <code>grep</code> for this
sentence in the binary disk image! Did PhotoRec miss some XML files
somehow?</p>
<h2 id="grepping-for-xml-files-on-the-raw-disk-directly" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#grepping-for-xml-files-on-the-raw-disk-directly"><span>Grepping for XML files on the raw disk directly!</span></a></h2>
<p>Only one way to know. Since I knew exactly the patterns to look for at
the start and end of the annotations XML, I could find them in the raw
disk image, extract the byte offset, and then <code>dd</code> everything
in between each start and end offset!</p>
<p>Using <code>grep</code> with <code>--text</code> to force it to treat the disk binary data as text,
and <code>--byte-offset</code> to get the byte offset of the matches, I was able to
extract the position of the markers:</p>
<pre><code class="hljs language-sh">grep --byte-offset --text -o <span class="hljs-string">&#x27;&lt;annotationSet&#x27;</span> kobo-raw-disk &gt; xml-start-markers-offsets
grep --byte-offset --text -o <span class="hljs-string">&#x27;&lt;/annotationSet&gt;&#x27;</span> kobo-raw-disk &gt; xml-end-markers-offsets
</code></pre>
<p>Each file looked like this:</p>
<pre><code class="hljs">199089105:&lt;annotationSet
222029926:&lt;annotationSet
799936271:&lt;annotationSet
830499395:&lt;annotationSet
839015506:&lt;annotationSet
</code></pre>
<p>From there, I used the <code>paste</code> command to merge both files side by side
(using a <code>cut</code> subshell in order to keep only the offset before the
<code>:</code>):</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">paste</span> &lt;(<span class="hljs-built_in">cut</span> -d: -f1 xml-start-markers-offsets) &lt;(<span class="hljs-built_in">cut</span> -d: -f1 xml-end-markers-offsets)
</code></pre>
<p>Which gave me something like:</p>
<pre><code class="hljs">199089105	199091941
222029926	222031623
799936271	799937945
830499395	830499742
839015506	839016589
</code></pre>
<p>I could then use <code>dd</code> to extract the bytes from the raw disk image
in between those offsets:</p>
<pre><code class="hljs language-sh">start=199089105
end=199091941
<span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=kobo-raw-disk of=raw-xml-dump/<span class="hljs-variable">$start</span>.xml bs=1 skip=<span class="hljs-variable">$start</span> count=$((end - start + <span class="hljs-number">16</span>))
</code></pre>
<p>What‚Äôs the 16 in that command? It‚Äôs the length of the end marker
<code>&lt;/annotationSet&gt;</code>! Because <code>grep</code> gave us the offset of the <em>start</em> of
the search.</p>
<p>So I piped both of those commands together through a <code>while</code> loop to
extract all the XMLs:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">paste</span> &lt;(<span class="hljs-built_in">cut</span> -d: -f1 xml-start-markers-offsets) &lt;(<span class="hljs-built_in">cut</span> -d: -f1 xml-end-markers-offsets) \
   | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> start end; <span class="hljs-keyword">do</span>
      <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=kobo-raw-disk of=raw-xml-dump/<span class="hljs-variable">$start</span>.xml bs=1 skip=<span class="hljs-variable">$start</span> count=$((end - start + <span class="hljs-number">16</span>))
   <span class="hljs-keyword">done</span>
</code></pre>
<p>With that method, I was able to find 287 XMLs, where PhotoRec only
recovered 234!</p>
<p>I ran my integrity check script against this new output, and was
astonished: <em>it was a perfect match</em>!</p>
<p>Every single highlight I had i my backup were found in those XMLs, which
gave me confidence that the ones that were <em>not</em> in my backup were most
likely there too.</p>
<h2 id="confidence-checking" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#confidence-checking"><span>Confidence checking</span></a></h2>
<p>In order to be even more sure about this, I checked the last recovered
highlight for all of the books I‚Äôve read since my last backup. Each
highlight contains a <code>progress</code> attribute, between 0 and 1, representing
how far in the book it‚Äôs situated.</p>
<p>For all of the books I finished, the last highlight was pretty close to
the end of the book, and since we saw earlier that the file with the
most highlights always contained the highlights of the previous versions
of that file, I was pretty confident I‚Äôve recovered all of my data at
that point! üéâ</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/kobo-highlights-recover.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>This was a rollercoaster of emotions! Between losing all my highlights,
recovering a database that turned out to be unusable, finding the XMLs
with PhotoRec but noticing they were incomplete, and finally using
<code>grep</code> and <code>dd</code> to extract the XML files myself directly from the raw
disk. Luckily, I was able to recover everything I was looking for thanks
to the last method!</p>
<p>But really, the morale of this story is that, <strong>if you care about some
data, you better make sure that you back it up</strong>, and that you do so
rigorously and frequently (or even better, automatically).</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1643793553032617986">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Postgres casting to bit vs. varbit vs. &quot;bit&quot; (with quotes)</title>
    <link href="https://www.codejam.info/2023/04/postgres-bit-varbit.html" />
    <id>https://www.codejam.info/2023/04/postgres-bit-varbit.html</id>
    <updated>2023-04-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Here‚Äôs a few things to know if you‚Äôre working with bit strings in
Postgres.</p>
<h2 id="bit-means-bit-1" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/postgres-bit-varbit.html#bit-means-bit-1"><span><code>bit</code> means <code>bit(1)</code></span></a></h2>
<p>As documented <a href="https://www.postgresql.org/docs/8.0/functions-bitstring.html">here</a>,
<code>bit</code> is an alias for <code>bit(1)</code>, so it will only keep the least
significant bit.</p>
<pre><code class="hljs">42::bit(10)  0000101010
42::bit(1)            0
42::bit               0

43::bit(10)  0000101011
43::bit(1)            1
43::bit               1
</code></pre>
<h2 id="define-bit-strings-with-b-101010" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/postgres-bit-varbit.html#define-bit-strings-with-b-101010"><span>Define bit strings with <code>B'101010'</code></span></a></h2>
<p>You can define bit strings with the <code>B</code> prefix:</p>
<pre><code class="hljs">B&#x27;101010&#x27;             101010
B&#x27;101010&#x27;::int        42
pg_typeof(B&#x27;101010&#x27;)  bit
</code></pre>
<h2 id="cast-a-string-to-bit" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/postgres-bit-varbit.html#cast-a-string-to-bit"><span>Cast a string to <code>bit</code></span></a></h2>
<p>If you have a string made of only 0s and 1s, you can cast it to a bit
string too! Useful for dynamically generating bit sequences.</p>
<pre><code class="hljs">&#x27;101010&#x27;::bit(10)  1010100000
</code></pre>
<p>But we instantly notice an interesting difference: when casting from an
integer as we did earlier, the truncation (or padding otherwise) was
right-aligned, while when casting from a string, it‚Äôs left-aligned.</p>
<pre><code class="hljs">12::bit(4)       1100
12::bit(2)         00
&#x27;1100&#x27;::bit(4)   1100
&#x27;1100&#x27;::bit(2)   11
B&#x27;1100&#x27;::bit(2)  11
</code></pre>
<h2 id="dynamic-length-bit-strings" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/postgres-bit-varbit.html#dynamic-length-bit-strings"><span>Dynamic length bit strings</span></a></h2>
<p>What if you‚Äôre generating a bit string from‚Ä¶ an actual string, but you
don‚Äôt know its length in advance? You can always use a fixed length
that‚Äôs larger than what you think you‚Äôll need, but that may not be very
efficient.</p>
<p>Instead, you can use the <code>bit varying</code> type, also known as <code>varbit</code>!</p>
<pre><code class="hljs">&#x27;101010&#x27;::bit varying             101010
&#x27;101010&#x27;::varbit                  101010
pg_typeof(&#x27;101010&#x27;::bit varying)  bit varying
pg_typeof(&#x27;101010&#x27;::varbit)       bit varying
</code></pre>
<p>Alternatively, there‚Äôs an <a href="https://dba.stackexchange.com/a/204838/240451">internal, undocumented <code>&quot;bit&quot;</code> type</a>
(to not be mistaken with <code>bit</code> without the quotes), which will
automatically cast to a static-sized <code>bit</code>, <em>but inferring the size form
the input</em>!</p>
<pre><code class="hljs">&#x27;101010&#x27;::bit                1
&#x27;101010&#x27;::varbit             101010
pg_typeof(&#x27;101010&#x27;::varbit)  bit varying
&#x27;101010&#x27;::&quot;bit&quot;              101010
pg_typeof(&#x27;101010&#x27;::&quot;bit&quot;)   bit
</code></pre>
<div class="note">
<p><strong>Note:</strong> there‚Äôs probably very little situations where you‚Äôd need
<code>&quot;bit&quot;</code> instead of <code>varbit</code>, but at least now you know it exists. I
wouldn‚Äôt recommend relying on a type that‚Äôs internal to Postgres and
undocumented though!</p>
</div>
<p>The <code>&quot;bit&quot;</code> magic is not transparent to <a href="https://www.postgresql.org/docs/current/app-psql.html"><code>\gdesc</code></a>
though:</p>
<pre><code class="hljs">&#x27;101010&#x27;::bit     1       bit(1)
&#x27;101010&#x27;::bit(6)  101010  bit(6)
&#x27;101010&#x27;::varbit  101010  bit varying
&#x27;101010&#x27;::&quot;bit&quot;   101010  &quot;bit&quot;
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Archiving Google Photos offline to free up space</title>
    <link href="https://www.codejam.info/2023/04/archiving-google-photos.html" />
    <id>https://www.codejam.info/2023/04/archiving-google-photos.html</id>
    <updated>2023-04-02T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If you backup your phone photos to Google Photos automatically, and you
don‚Äôt pay for some kind of Google One subscription, you‚Äôll run sooner or
later into the 15 GB storage limit of your Google account.</p>
<p>15 GB is not a lot, especially when you consider than my Pixel 6a takes
pictures that are easily 3 to 5 MB each. üò¨</p>
<p>To be fair, if you want convenience and you value your time, Google
One‚Äôs $20/year for 100 GB is a pretty damn good deal. Same goes for the
higher options with more storage if you need.</p>
<p>But if you don‚Äôt like recurring bills like me, and you find it overkill
to keep that many old photos in the cloud, read on.</p>
<h2 id="my-protocol-for-archiving-photos-away-from-google" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#my-protocol-for-archiving-photos-away-from-google"><span>My protocol for archiving photos away from Google</span></a></h2>
<p>In order to save space, I‚Äôll periodically archive my old photos outside
of Google Photos.</p>
<p>This protocol is designed to archive photos <em>from the phone</em> that are
<em>backed up</em> to Google Photos, but preserving the phone‚Äôs original
arborescence. Google Photos doesn‚Äôt have the path information, only the
filename, so backing up <em>from Google Photos</em> directly would not work for
this use case.</p>
<p>The downside is that this doesn‚Äôt cover the case where you have photos
in Google Photos that are <em>not</em> on your phone.</p>
<p>Also it‚Äôs designed for a single phone backing up to a Google Photos
account that‚Äôs used <em>solely</em> for that device. Multiple devices sharing
the same Google Photos is not supported.</p>
<p>With that said, here‚Äôs how I do it.</p>
<h3 id="1-sync-phone-to-computer" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#1-sync-phone-to-computer"><span>1. Sync phone to computer</span></a></h3>
<p>First, I use <a href="https://syncthing.net/">Syncthing</a> to sync the contents of
my phone to a hard drive connected to my computer.</p>
<p>I configure Syncthing as ‚Äúsend only‚Äù on my phone, and ‚Äúreceive only‚Äù on
my computer, and I configure it to sync the root directory of my phone
(which can be tricky, <a href="https://www.codejam.info/2023/04/syncthing-root-directory.html">but possible</a>).</p>
<p><strong>After the sync is complete, I turn off Syncthing from my computer, to
make sure no incremental updates will happen during the archive
process.</strong></p>
<h3 id="2-copy-synced-folder-to-archive" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#2-copy-synced-folder-to-archive"><span>2. Copy synced folder to archive</span></a></h3>
<p>For this example, let‚Äôs assume I synced my phone to a
<code>/Volumes/Syncthing/Phone</code> directory, and I want to archive my old
photos in <code>/Volumes/Archive/Phone</code>.</p>
<p>I‚Äôll run the following command to copy the phone contents to my archive
directory:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">cp</span> -a /Volumes/Syncthing/Phone/ /Volumes/Archive/Phone/
</code></pre>
<div class="note">
<p><strong>Note:</strong> the reason I copy the whole phone contents is because I want
to catch <em>all</em> photos and videos that are backed up to Google Photos.
Typically, apps like Messenger, Whats App, Signal, etc. all store photos
in different directories, so syncing only <code>DCIM/Camera</code> would not be
enough.</p>
</div>
<p>If the target directory already exists, this will append new files to it
(and overwrite them if a file already exists there)!</p>
<p>Also if the directory already exists, the trailing slashes are
important.</p>
<div class="note">
<p><strong>Note:</strong> if both directories are on the same filesystem, and you‚Äôre not
appending to an existing archive, you may use <code>mv</code> instead, but then
make sure to recreate the Syncthing directory and put back its
<code>.stfolder</code> (required for Syncthing to recognize it) and <code>.stignore</code> if
you have one!</p>
</div>
<h3 id="3-delete-everything-from-google-photos" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#3-delete-everything-from-google-photos"><span>3. Delete everything from Google Photos</span></a></h3>
<p>Not necessarily everything, but well, everything you want to delete to
free up space.</p>
<p>You can do it from your phone, or from Google Photos on your computer,
or on the web.</p>
<div class="note">
<p><strong>Note:</strong> be careful! If you have photos that are <em>only</em> on Google
Photos but not stored on your phone storage, the previous step didn‚Äôt
archive them. You need to make sure to download them from Google Photos
in the first place. Doing that in an automated way is not covered in
this post.</p>
</div>
<p>As an abundance of caution, you may want to double check that the number
of photos/videos you have on Google Photos matches exactly with the
number of photos/videos you have on your phone before doing that.</p>
<p>If there‚Äôs any mismatch, try to find where the difference it to make
sure you‚Äôre not accidentally losing any photo.</p>
<p>Alternatively, you can <a href="https://www.codejam.info/2023/04/archiving-google-photos.html#bonus-script-to-list-all-your-google-photos-using-the-api">use the Google Photos API</a>
to list all the filenames on Google Photos, and ensure you have a match
in your archive prior to deleting. Otherwise, you‚Äôll know the names of
the missing ones that you have to download.</p>
<div class="note">
<p><strong>Note:</strong> if you deleted the photos from the web or desktop app, make
sure to wait that the deletion is propagated to your phone before you
continue!</p>
</div>
<h3 id="4-sync-phone-to-computer-again" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#4-sync-phone-to-computer-again"><span>4. Sync phone to computer again</span></a></h3>
<p>Again with Syncthing in my case, I do a sync following the deletion.</p>
<div class="note">
<p><strong>Note:</strong> you may want to exclude <code>.trashed-*</code> files in your
<code>.stignore</code>, otherwise the photos you deleted will still be synced while
they‚Äôre in the trash.</p>
</div>
<p>Now in our example, <code>/Volumes/Syncthing/Phone</code> contains just the
photos we decided to keep around in Google Photos, while
<code>/Volumes/Archive/Phone</code> contains <em>all</em> the photos (also including the
ones we kept around).</p>
<p>On top of that, both directories contains <em>all other files</em> from the
phone, that are not managed by Google Photos.</p>
<div class="note">
<p><strong>Note:</strong> this process is not very efficient if you have a lot of files
that are not photos and videos, e.g. music and downloads. You may want
to ignore those directories in the earlier steps to avoid copying them
around unnecessarily!</p>
</div>
<h3 id="5-remove-the-overlap" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#5-remove-the-overlap"><span>5. Remove the overlap</span></a></h3>
<p>To avoid that duplication, we can remove all files from the archive that
are still in the Syncthing directory. That is, all the photos/videos we
kept, as well as all the files in the phone storage that are not managed
by Google Photos.</p>
<pre><code class="hljs language-sh">(<span class="hljs-built_in">cd</span> /Volumes/Syncthing/Phone &amp;&amp; find . -<span class="hljs-built_in">type</span> f) | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> f; <span class="hljs-keyword">do</span> <span class="hljs-built_in">rm</span> -v <span class="hljs-string">&quot;/Volumes/Archive/Phone/<span class="hljs-variable">$f</span>&quot;</span>; <span class="hljs-keyword">done</span>
</code></pre>
<p>Now, the archive directory only contains what we removed from Google
Photos (and from the phone), but there‚Äôs no duplicates!</p>
<h3 id="6-profit" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#6-profit"><span>6. Profit!</span></a></h3>
<p>You can now enjoy all the space you freed up by archiving your photos
and videos away from Google Photos!</p>
<p>Repeat every time you‚Äôre close to running out of storage. üòâ</p>
<h2 id="about-the-google-photos-app-home-page" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#about-the-google-photos-app-home-page"><span>About the Google Photos app ‚Äúhome page‚Äù</span></a></h2>
<p>I think there may be some display bugs when deleting <em>a lot</em> of photos
from Google Photos at once. For some reason the main photos list of my
Google Photos still shows a few of the photos I deleted! They‚Äôre in a
weird state where the UI offers me download them to my device (as if
they‚Äôre not on the device already), but also shows me a local path to
the file as if it was on device (but the photo is not actually there).</p>
<p>I‚Äôm thinking this issue will be gone when the photos in the trash are
permanently deleted, so this doesn‚Äôt concern me too much. What‚Äôs visible
in Google Photos on the web (and in their API) is consistent with the
state I want, and what‚Äôs on my phone‚Äôs raw storage is consistent too.</p>
<h2 id="what-about-motion-photos" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#what-about-motion-photos"><span>What about motion photos?</span></a></h2>
<p>Google‚Äôs motion photos are the equivalent of Apple‚Äôs live photos: a
photo that also contains a short video of the ‚Äúmoment‚Äù it was captured.</p>
<p>What happens to those during our archival process? Well, it‚Äôs
complicated.</p>
<p>In short, don‚Äôt worry, they‚Äôre backed up and the little video that goes
with the motion photo is not going to be lost, but you won‚Äôt be able to
watch the ‚Äúlive‚Äù part anymore, you‚Äôll only see the still picture.</p>
<p>The reason is that Google stores the MP4 video part at the end of the JPEG
file. This doesn‚Äôt prevent displaying the image, but there‚Äôs currently
no photo viewer other than Google Photos that knows to extract that MP4
section following the JPEG data, and display it properly.</p>
<p>So if you want to see the live part of a motion photo, you‚Äôll have to
re-import it to Google Photos.</p>
<p>Alternatively, you can extract the MP4 part of the motion photo to a
different file, which you can do by using a script like
<a href="https://mjanja.ch/2021/10/stripping-embedded-mp4s-out-of-android-12-motion-photos/">detailed in this post</a>.</p>
<div class="note">
<p><strong>Note:</strong> if you use the script from the above post on macOS, you‚Äôll
need GNU <code>grep</code> in order find the byte offset of the MP4 header.</p>
<p>This means you‚Äôll have to <code>brew install coreutils</code> and replace <code>grep</code> by
<code>ggrep</code> in the script for it to work.</p>
</div>
<h2 id="bonus-script-to-list-all-your-google-photos-using-the-api" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#bonus-script-to-list-all-your-google-photos-using-the-api"><span>Bonus: script to list all your Google Photos using the API</span></a></h2>
<p>In the previous section, we saw it can be useful to list all the photos
from Google Photos (not necessarily on any of your devices) prior to
running the archiving process, to make sure you can catch the ones that
are not backed up anywhere.</p>
<p>You can put this script in <code>photos.mjs</code> and run as <code>node photos.mjs</code>.
You‚Äôll need to put a Google OAuth access token with access to your
Google Photos for this to work.</p>
<p>If you want to generate one from the CLI, check out my
<a href="https://www.codejam.info/2021/02/google-oauth-from-cli-application.html#update-local-server-redirect">article on the subject</a>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:fs/promises&#x27;</span>

<span class="hljs-keyword">const</span> accessToken = <span class="hljs-string">&#x27;YOUR_ACCESS_TOKEN&#x27;</span>

<span class="hljs-keyword">let</span> pageToken = <span class="hljs-string">&#x27;&#x27;</span>
<span class="hljs-keyword">let</span> pages = []

<span class="hljs-keyword">do</span> {
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://photoslibrary.googleapis.com/v1/mediaItems?pageSize=100&amp;pageToken=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(pageToken)

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(url)

  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, {
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${accessToken}</span>`</span>
    }
  })

  <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()

  pages.<span class="hljs-title function_">push</span>(json)

  pageToken = json.<span class="hljs-property">nextPageToken</span>
} <span class="hljs-keyword">while</span> (pageToken)

<span class="hljs-keyword">await</span> fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;pages.json&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(pages, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>))
</code></pre>
<p>This will fetch all pages from the Google Photos API and dump them in a
<code>pages.json</code> file. You can then iterate through it to do whatever
operations you need to, e.g. making sure you don‚Äôt leave any photo
around before deleting them from Google.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/archiving-google-photos.html#conclusion"><span>Conclusion</span></a></h2>
<p>Archiving photos away from Google Photos is not trivial, but possible.</p>
<p>If you care about not losing any of your photos, I recommend double
checking at every step that you‚Äôre not accidentally forgetting any file.</p>
<p>When done well, this allows to periodically free up some space from your
Google account without actually having to get rid of your photos and
videos! They‚Äôll still be available on your archive hard drive if you
want to. Your old photos are not as handy as if they were in the cloud,
but you know you can access them if needed.</p>
<p>Overall, you‚Äôre probably better off just paying Google to increase your
storage, but if you‚Äôre really motivated, I hope you can find inspiration
in the process I described in this post.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Syncthing: sync phone root directory (all internal storage)</title>
    <link href="https://www.codejam.info/2023/04/syncthing-root-directory.html" />
    <id>https://www.codejam.info/2023/04/syncthing-root-directory.html</id>
    <updated>2023-04-02T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If you use Syncthing on your phone, it may not let you select the
phone‚Äôs root directory as a shared folder source! At least that‚Äôs the
case on my phone running Android 13.</p>
<figure class="center">
  <img alt="Syncthing web GUI showing root directory path as text" srcset="../../img/2023/04/syncthing-forbidden.png 3x">
</figure>
<p>As you can see, ‚Äúuse this folder‚Äù is greyed out and there‚Äôs a warning
the folder can‚Äôt be used for privacy reasons.</p>
<p>But I own that phone and I don‚Äôt like being told what to do. In our
case, I want to be able to sync <strong>all</strong> of my phone‚Äôs storage to my
computer, as a backup system.</p>
<p>So how to circumvent that?</p>
<p>Turns out we can do that through Syncthing‚Äôs lesser known ‚Äúweb GUI‚Äù!</p>
<p>You can find it in the left menu (where you also exit Syncthing from).
It will open the web version of Syncthing. From there, instead of
selecting the directory to sync from your phone‚Äôs native folder picker
(which may prevent you to use the root directory), you can just <em>input a
path</em> as plain text.</p>
<figure class="center">
  <img alt="Syncthing web GUI showing root directory path as text" srcset="../../img/2023/04/syncthing-web-gui.png 3x">
</figure>
<p>Enter <code>/storage/emuilated/0</code> (or simply <code>~</code>), and there you go, you have
a Syncthing folder that syncs all of your phone‚Äôs internal storage! üôè</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Getting rid of ghost login items in macOS Ventura</title>
    <link href="https://www.codejam.info/2023/04/ghost-login-items-macos-ventura.html" />
    <id>https://www.codejam.info/2023/04/ghost-login-items-macos-ventura.html</id>
    <updated>2023-04-02T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Let‚Äôs say you uninstalled an app on macOS Ventura, and you see some
leftovers from that app in <strong>System Settings &gt; General &gt; Login Items</strong>:</p>
<figure class="center">
  <img alt="macOS login items with leftover app that shouldn‚Äôt be there" srcset="../../img/2023/04/login-items-dirty.png 2x">
</figure>
<p>Here‚Äôs a few tips to solve it.</p>
<h2 id="reboot" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/ghost-login-items-macos-ventura.html#reboot"><span>Reboot</span></a></h2>
<p>More often than not, it seems that after removing login items and/or the
app behind then, it takes a reboot of macOS Ventura until they‚Äôre
‚Äúgarbage collected‚Äù from system settings. That‚Äôs the first thing you
should try.</p>
<h2 id="check-your-trash" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/ghost-login-items-macos-ventura.html#check-your-trash"><span>Check your trash!</span></a></h2>
<p>If you moved the app to the trash but didn‚Äôt empty the trash, its login
items are still referenced from the trash! They won‚Äôt go away until you
permanently delete the app (and reboot).</p>
<h2 id="check-leftover-launch-agents-and-daemons" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/ghost-login-items-macos-ventura.html#check-leftover-launch-agents-and-daemons"><span>Check leftover launch agents and daemons</span></a></h2>
<p>There‚Äôs a few places macOS looks for ‚Äúlogin items‚Äù on your filesystem:</p>
<ul>
<li><code>/Library/LaunchAgents</code></li>
<li><code>/Library/LaunchDaemons</code></li>
<li><code>~/Library/LaunchAgents</code></li>
<li><code>~/Library/LaunchDaemons</code></li>
</ul>
<p>Also, same thing under <code>/System/Library</code> but that‚Äôs for macOS own login
items and you have no control over them.</p>
<p>Check the 4 directories above for leftover <code>plist</code> files from the
applications you removed. You may need to do some cleanup. After that,
don‚Äôt forget to reboot!</p>
<h2 id="inspect-backgrounditems-v4-btm" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/ghost-login-items-macos-ventura.html#inspect-backgrounditems-v4-btm"><span>Inspect <code>BackgroundItems-v4.btm</code></span></a></h2>
<p>As shown in <a href="https://www.reddit.com/r/MacOSBeta/comments/w2we6q/cleaning_up_venturas_login_items/">this Reddit post</a>,
the list of login items in Ventura is managed in <code>/private/var/db/com.apple.backgroundtaskmanagement</code>. In my case, in a <code>BackgroundItems-v8.btm</code> file.</p>
<pre><code class="hljs language-console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">file /private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v8.btm</span>
Apple binary property list
</code></pre>
<p>As <code>file(1)</code> tells us, this is a binary property list file. We can
inspect it with <code>plutil</code>:</p>
<pre><code class="hljs language-sh">plutil -p /private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v8.btm
</code></pre>
<p>This will print the whole structure behind that file. From inspecting
its output, you should be able to determine what‚Äôs behind the ‚Äúghost items‚Äù
that you identified in the system settings. More often than not, it‚Äôll
point to some file or app that you forgot to get rid of, and cleaning
that up will fix your problem (again, after a reboot).</p>
<div class="note">
<p><strong>Note:</strong> if when accessing <code>/private/var/db</code> you get a permission
denied error, even as <code>root</code>, make sure to grant ‚Äúfull disk access‚Äù
permission to your terminal app!</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Embedding high DPI screenshots at normal size in HTML</title>
    <link href="https://www.codejam.info/2023/04/high-dpi-screenshot-size-html.html" />
    <id>https://www.codejam.info/2023/04/high-dpi-screenshot-size-html.html</id>
    <updated>2023-04-02T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Since I moved to a Retina display, the screenshots I take are twice as
big as before!</p>
<p>This is a problem because, when embedded in an HTML page, they look
ginormous.</p>
<p>Let‚Äôs take a dummy example of some UI element screenshot:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Save as popup&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;save-as-example.png&quot;</span>&gt;</span>
</code></pre>
<figure class="center">
  <img alt="Save as popup" src="https://www.codejam.info/img/2023/04/save-as-example.png">
</figure>
<p>This is huge. Crazy huge. It disturbs the reading flow and you only see
that oversized, slightly blurry image. Just bad.</p>
<p>How to fix it then?</p>
<h2 id="downsize-the-image" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/high-dpi-screenshot-size-html.html#downsize-the-image"><span>Downsize the image</span></a></h2>
<p>We can resize the image by 50% before embedding it. For example using
ImageMagick:</p>
<pre><code class="hljs language-sh">convert save-as-example.png -resize 50% save-as-example-small.png
</code></pre>
<p>This will work, but we introduce a loss in quality from the downscaling
operation. It‚Äôs not gonna be as ‚Äúsharp‚Äù as if the UI element was
rendered at the lower resolution in the first place, without being
downsized at the pixel level later on.</p>
<p>On top of that, when viewed on a high DPI screen, the image will not be
as crisp as what you saw when you took the screenshot, because half the
pixels got lost.</p>
<h2 id="take-the-screenshot-on-a-low-dpi-screen" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/high-dpi-screenshot-size-html.html#take-the-screenshot-on-a-low-dpi-screen"><span>Take the screenshot on a low DPI screen</span></a></h2>
<p>On macOS, if you have an external screen that has a low DPI, you can
take the screenshot on that screen. Then the screenshot will be taken at
a normal-looking native resolution, because there‚Äôs no scaling factor.</p>
<p>The downside is that you need a low DPI screen handy, and to plug it.
Not always applicable.</p>
<p>And on top of that, like the previous method, it won‚Äôt look as good when
viewed on a high DPI screen.</p>
<h2 id="use-srcset-with-a-2x-factor" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2023/04/high-dpi-screenshot-size-html.html#use-srcset-with-a-2x-factor"><span>Use <code>srcset</code> with a <code>2x</code> factor!</span></a></h2>
<p>If you want to go the lazy and easy way, <code>srcset</code> is the way.</p>
<p>It allows to specify a <em>pixel density descriptor</em> for the image being
referenced. In our case, because the screenshot was rendered at double
the size for the Retina display, we can specify <code>2x</code>.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Save as popup&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;save-as-example.png 2x&quot;</span>&gt;</span>
</code></pre>
<figure class="center">
  <img alt="Save as popup" srcset="../../img/2023/04/save-as-example.png 2x">
</figure>
<p>This looks perfect! On a high DPI screen, we get the exact original
quality of the screenshot, as crisp as can be. On a low DPI screen, the
browser knows how to adapt the size of the screenshot to make it look
just right.</p>
<p>The only downside is that for low DPI screens, we‚Äôll still send the
heavier image with twice as much pixels, even if we don‚Äôt need it. If
that‚Äôs a problem for you, then you can use one of the earlier solutions
to generate a <code>1x</code> version of the screenshot, and use it as part of the
<code>srcset</code>.</p>
<div class="note">
<p><strong>Note:</strong> I also use this technique from phone screenshots! Phones
typically have high DPI screens too, and they generate pretty large
screenshots. <code>2x</code> might not be enough to make it look reasonable on a
web page, so feel free to go <code>3x</code> or <code>4x</code> if you want to reduce the size
of the image without altering the original and compromising its quality!</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1642615952305954818">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
</feed>
