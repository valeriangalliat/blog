<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeJam</title>
  <subtitle>Hey, I‚Äôm Val, welcome to my blog!</subtitle>
  <link href="https://www.codejam.info/feed.xml" rel="self" />
  <link href="https://www.codejam.info/" />
  <id>https://www.codejam.info/</id>
  <updated>2025-04-24T02:06:17.512Z</updated>
  <author>
    <name>Val</name>
  </author>
  <entry>
    <title>Firestore Algolia full index operation error 400 or 403</title>
    <link href="https://www.codejam.info/2025/04/firestore-algolia-full-index-error.html" />
    <id>https://www.codejam.info/2025/04/firestore-algolia-full-index-error.html</id>
    <updated>2025-04-23T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I was testing a change to the Algolia setup in a staging environment and
needed to perform a full index.</p>
<h2 id="triggering-a-full-index" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2025/04/firestore-algolia-full-index-error.html#triggering-a-full-index"><span>Triggering a full index</span></a></h2>
<p>BTW to trigger a full index, either change the Algolia extension config
from the Firebase console, and make sure that the <strong>Full Index existing
documents</strong> field is set to true.</p>
<p>If it‚Äôs already on true (so that won‚Äôt trigger an actual config change)
and you don‚Äôt want to change anything else in the config, you can set it
to false, wait 5 minutes for it to deploy, then set it to true again
(lol). Or, better, go in Google Cloud Console, in Cloud Task, and for
the <code>ext-firestore-algolia-search-executeFullIndexOperation</code> task queue,
select <strong>Actions &gt; Force a task run</strong>.</p>
<h2 id="errors-during-full-index" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2025/04/firestore-algolia-full-index-error.html#errors-during-full-index"><span>Errors during full index</span></a></h2>
<p>I was looking at the
<code>ext-firestore-algolia-search-executeFullIndexOperation</code> Cloud Function
logs to monitor the index operation, and after a few minutes it choked
with a 400 error (but I‚Äôve also seen 403).</p>
<p>The logs are really unhelpful because the request body gets logged
entirely first, but in my case it‚Äôs too big truncates the log line, and
so if this function logs the response body (which I‚Äôm not even sure),
it‚Äôs not accessible because the line got truncated in the request part.</p>
<p>It took me longer than I‚Äôm willing to admit to figure that, but I found
out that there‚Äôs a <strong>API Monitoring</strong> section on Algolia where we can
<strong>Search API Logs</strong> and I could see the 400 and 403 errors there!</p>
<p>In my case the errors were:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Record at the position ... objectID=... is too big size=.../10000 bytes. Please have a look at https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/in-depth/index-and-records-size-and-usage-limitations/#record-size-limits&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;You have exceeded your Record quota. You‚Äôll need to change your plan for more capacity, or delete records. See more details at https://www.algolia.com/account/billing/details?applicationId=...&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">403</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>That‚Äôs much more useful.</p>
<p>Turns out my staging env had too many records already for its plan (free
plan) so I couldn‚Äôt sync more during the full index, and in another case
the record I was trying to write was too big for the free plan max
record size.</p>
<p>I wasn‚Äôt having the error in prod because we use a paid plan there.</p>
<p>So the solution was simple. Upgrade staging to a paid plan so I can do
my testing!</p>
<p>After that I triggered a full index again and it worked just fine. üôè</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How to sign and notarize an Electron app for macOS</title>
    <link href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html" />
    <id>https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html</id>
    <updated>2024-05-15T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>So you made a macOS app, shared it with your friends, and they
encountered one of those dreaded popups:</p>
<figure class="grid">
  <img alt="App cannot be opened because it is from an unidentified developer" srcset="../../img/2024/05/electron-signature/unidentified-developer.png 2x">
  <img alt="App can‚Äôt be opened because Apple cannot check it for malicious software" srcset="../../img/2024/05/electron-signature/cannot-check.png 2x">
</figure>
<p>Then you need to sign (left) and notarize (right) your app!</p>
<div class="note">
<p><strong>Note:</strong> in the meantime, the app
<a href="https://support.apple.com/en-ca/guide/mac-help/mh40616/mac">can still</a>
<a href="https://support.apple.com/en-ca/guide/mac-help/mchleab3a043/mac">be opened</a>
by right clicking on it and clicking <strong>Open</strong> from the context menu.</p>
</div>
<p>Signing consists in buying a developer membership with Apple, which will
let you create a key that you can use to <code>codesign</code> your app with.</p>
<p>Notarizing consists in uploading your app to an Apple service that scans
it for malware. If it passes the process, your app gets a ‚Äústamp of
approval‚Äù that is <a href="https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution">bundled with your app and also mirrored</a>
on Apple‚Äôs Gatekeeper servers.</p>
<p>In the case of Electron, here‚Äôs some relevant docs this article is based
on:</p>
<ul>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/code-signing#signing--notarizing-macos-builds">Electron: Signing &amp; notarizing macOS builds</a></li>
<li><a href="https://www.electronforge.io/guides/code-signing/code-signing-macos">Electron Forge: Signing a macOS app</a></li>
</ul>
<h2 id="get-a-signing-certificate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html#get-a-signing-certificate"><span>Get a signing certificate</span></a></h2>
<p>The first step is to generate a signing keypair, and get a signing
certificate from Apple, which requires you to subscribe to
<a href="https://developer.apple.com/">Apple‚Äôs developer program</a>.</p>
<p>Then, follow <a href="https://developer.apple.com/help/account/create-certificates/create-a-certificate-signing-request">create a certificate signing request</a>.</p>
<p>In my experience, it doesn‚Äôt seem that the <strong>User Email Address</strong> you
input matters.</p>
<p>As for <strong>Common Name</strong>, it seems to only affect how the private and
public key are named in Keychain Access.</p>
<p>By saving the request to disk, you will get a
<code>CertificateSigningRequest.certSigningRequest</code> file.</p>
<p>This will also create a <code>Common Name.p12</code> and <code>Common Name.pem</code> entry in
your Keychain Access. The <code>.p12</code> is the private key, and the <code>.pem</code> is
the public key, that are going to be associated with the certificate
you‚Äôre requesting.</p>
<p>You should now upload the <code>.certSigningRequest</code> file to your Apple
Developer account, in <strong>Certificates, IDs &amp; Profiles</strong>. Choose the
<strong>Developer ID Application</strong> certificate type.</p>
<p>This will give you a certificate <code>developerID_application.cer</code> that you
need to import in Keychain Access (by simply opening it).</p>
<h2 id="get-the-intermediate-certificates" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html#get-the-intermediate-certificates"><span>Get the intermediate certificates</span></a></h2>
<p>I don‚Äôt fully understand this part, but the above is not enough to sign
your app. You also need some extra root and/or intermediate certificates
to be present in your Keychain Access, but it‚Äôs not exactly clear which
ones or where to get them.</p>
<p>What I know is that by using Xcode and messing with their certificate
management settings, it downloads the extra stuff that is needed for
code signing to work.</p>
<p>So:</p>
<ol>
<li>Install Xcode.</li>
<li>In <strong>Xcode &gt; Settings‚Ä¶ &gt; Accounts</strong>, add your Apple account.</li>
<li>Click <strong>Download Manual Profiles</strong>.</li>
<li>Click <strong>Manage Certificates</strong> and request a new <strong>Apple Development</strong>
certificate that you can delete right after.</li>
</ol>
<p>Executing part or all of those steps may download the extra certificates
you need in Keychain Access. It‚Äôs not 100% clear to me what did it for
me. üòÖ Don‚Äôt hesitate to <a href="https://www.codejam.info/val.html#contact">let me know</a> if you have more
details on this!</p>
<h2 id="manually-sign-your-app" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html#manually-sign-your-app"><span>Manually sign your app</span></a></h2>
<p>You‚Äôre now in a place where you can manually sign your app:</p>
<pre><code class="hljs language-sh">codesign --sign <span class="hljs-string">&#x27;Developer ID Application: MyApp (ID)&#x27;</span> MyApp.app
</code></pre>
<p>To find the identify to pass to <code>--sign</code>:</p>
<pre><code class="hljs language-sh">security find-identity -v -p codesigning
</code></pre>
<p><code>-v</code> will show only valid identities. <code>-p</code> is for selecting a specific
policy, here we care about <code>codesigning</code>.</p>
<h2 id="signing-your-app-with-electron-forge" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html#signing-your-app-with-electron-forge"><span>Signing your app with Electron Forge</span></a></h2>
<p>Add <code>osxSign</code> to your <code>forge.config.js</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">packagerConfig</span>: {
    <span class="hljs-attr">osxSign</span>: {
      <span class="hljs-attr">identity</span>: <span class="hljs-string">&#x27;Developer ID Application: MyApp (ID)&#x27;</span>
    }
  }
}
</code></pre>
<p>If you only have one valid code signing identity configured on your Mac,
you can omit the <code>identity</code> parameter. You still need to pass an empty
object <code>osxSign: {}</code>.</p>
<h2 id="notarizing-your-app-with-electron-forge" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html#notarizing-your-app-with-electron-forge"><span>Notarizing your app with Electron Forge</span></a></h2>
<p>Add <code>osxNotarize</code> to your <code>forge.config.js</code>. There‚Äôs a few ways to
configure it <a href="https://www.electronforge.io/guides/code-signing/code-signing-macos#osxnotarize-options">documented here</a>.</p>
<p>The documentation is pretty clear and complete so I won‚Äôt bother
repeating anything here. üôÇ</p>
<h2 id="debugging-osxsign-and-osxnotarize" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html#debugging-osxsign-and-osxnotarize"><span>Debugging <code>osxSign</code> and <code>osxNotarize</code></span></a></h2>
<p>If you encounter issues where Electron is not properly signing or
notarizing your app, you can debug the signing and notarizing process
that way:</p>
<pre><code class="hljs language-sh">DEBUG=electron-osx-sign,electron-notarize* npx electron-forge package
</code></pre>
<p>This will output detailed logs that should help you identify the
culprit.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html#conclusion"><span>Conclusion</span></a></h2>
<p>That should be all you need to have your app approved by Apple so that
you can share it with the world. üåé</p>
<p>Happy building! üöÄ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1790906279852204042">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How to use Electron auto updater ‚öõÔ∏è</title>
    <link href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html" />
    <id>https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html</id>
    <updated>2024-05-15T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I‚Äôm <a href="https://www.arcade.software/download">writing an Electron app for the first time</a>,
and I was wondering how to make it auto update. Turns out it‚Äôs
relatively easy, but I found a ton of conflicting documentations about
it and was quite confused for a while, which is why I‚Äôm writing this
post.</p>
<p>In this post, I‚Äôm gonna focus on a macOS app. I‚Äôm not sure how much of
this applies to Windows. I‚Äôll update this post when we eventually port
the app to Windows!</p>
<h2 id="how-does-the-auto-updater-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#how-does-the-auto-updater-works"><span>How does the auto updater works?</span></a></h2>
<p>On macOS, Electron auto updater uses the <a href="https://github.com/Squirrel/Squirrel.Mac">Squirrel.Mac</a>
framework, a ‚ÄúCocoa framework for updating macOS apps‚Äù.</p>
<p>So ultimately, when it comes to the distribution of auto updates, your
source of truth is gonna be Squirrel.</p>
<p>Electron has a <a href="https://www.electronjs.org/docs/latest/api/auto-updater">built-in <code>autoUpdater</code> API</a>
that lets you <a href="https://www.electronjs.org/docs/latest/api/auto-updater#autoupdatersetfeedurloptions"><code>setFeedURL</code></a>,
<a href="https://www.electronjs.org/docs/latest/api/auto-updater#autoupdatercheckforupdates"><code>checkForUpdates</code></a>,
and <a href="https://www.electronjs.org/docs/latest/api/auto-updater#autoupdaterquitandinstall"><code>quitAndInstall</code></a>.</p>
<p>On boot, you configure the auto updater with a mysterious, undocumented
‚Äúfeed URL‚Äù, and then you check for updates periodically, and when an
update is found, you can prompt the user to install the update.</p>
<div class="note">
<p><strong>Note:</strong> for auto updates to work, your releases must be
<a href="https://www.codejam.info/2024/05/sign-notarize-electron-app-macos.html">signed</a>.</p>
</div>
<h2 id="what-about-update-electron-app" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#what-about-update-electron-app"><span>What about <code>update-electron-app</code>?</span></a></h2>
<p>If you read the <a href="https://www.electronjs.org/docs/latest/tutorial/updates">Electron reference on updating applications</a>,
they mention a <a href="https://github.com/electron/update-electron-app"><code>update-electron-app</code></a>
package, that identifies as ‚Äúa drop-in module that adds auto updating
capabilities to Electron apps‚Äù.</p>
<p>This module implements the logic described in the previous section for
you, so you just have to call one function on boot and let it deal with
periodic checking, and prompting the user to install the update. Cool.</p>
<p>However it‚Äôs only meant to <a href="https://github.com/electron/update-electron-app?tab=readme-ov-file#with-updateelectronjsorg">work with Electron‚Äôs public update service</a>,
or static file storage that <a href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#static-updates-format">we‚Äôll talk about later</a></p>
<p>The typical usage looks like this when using Electron‚Äôs public update
service:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { updateElectronApp, <span class="hljs-title class_">UpdateSourceType</span> } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;update-electron-app&#x27;</span>)

<span class="hljs-title function_">updateElectronApp</span>({
  <span class="hljs-attr">updateSource</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">UpdateSourceType</span>.<span class="hljs-property">ElectronPublicUpdateService</span>,
    <span class="hljs-attr">repo</span>: <span class="hljs-string">&#x27;github-user/repo&#x27;</span>
  }
})
</code></pre>
<h2 id="using-update-electronjs-org" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#using-update-electronjs-org"><span>Using <code>update.electronjs.org</code>?</span></a></h2>
<p>That public update service is hosted by Electron and serves the obscure
‚Äúfeed URL‚Äù that we encountered earlier.</p>
<p>In order to use it, you need to point it to a public GitHub repository
where you publish <a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository">releases</a>
of your app.</p>
<p>Their service can then respond to auto update requests by checking if
there‚Äôs a newer release. The app binary is downloaded directly from
GitHub releases.</p>
<p>You can also <a href="https://www.electronjs.org/docs/latest/tutorial/updates#step-1-deploying-an-update-server">host your own update server</a>.
There‚Äôs actually a few options you can chose from, and they all comply
to this undocumented feed format we still know nothing about.</p>
<p>When using the <code>autoUpdater</code> module, you can configure it like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { autoUpdater } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)

autoUpdater.<span class="hljs-title function_">setFeedURL</span>({
  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://server/path/to/feed&#x27;</span>
})
</code></pre>
<p>That URL seems arbitrary and typically contains the <code>process.platform</code>,
maybe <code>process.arch</code>, and your program‚Äôs version.</p>
<p>As we saw before, a custom dynamic server won‚Äôt work with
<code>update-electron-app</code> so you‚Äôll have to implement the logic yourself.
Luckily, <a href="https://github.com/electron/update-electron-app/blob/515ab245a429a4790b9209f8d2073edddb980717/src/index.ts">it‚Äôs not very complicated</a>.</p>
<h2 id="what-s-behind-this-feed-url-and-format" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#what-s-behind-this-feed-url-and-format"><span>What‚Äôs behind this feed URL and format?</span></a></h2>
<p>This format is actually <a href="https://github.com/Squirrel/Squirrel.Mac?tab=readme-ov-file#update-requests">defined by the Squirrel framework</a>.</p>
<p>In case of a dynamic server like in the previous section, the request is
as an arbitrary <code>GET</code> request to the URL you configured. It‚Äôs important
for that URL to include the current app version because your server is
expected to respond based on whether or not a new version is available
for the given version.</p>
<p>In case no update is available, you <a href="https://github.com/Squirrel/Squirrel.Mac?tab=readme-ov-file#server-support">should return</a>
a <code>204 No Content</code>.</p>
<p>If an update is available, you should return a <code>200 OK</code> with the
<a href="https://github.com/Squirrel/Squirrel.Mac?tab=readme-ov-file#update-server-json-format">following</a>
JSON response:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://server/path/to/release.zip&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional Release Name&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;notes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional release notes&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;pub_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-05-03T12:34:56Z&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Now this makes a bit more sense. You can easily make your own server
that implements this protocol. Actually, you can probably get away with
adding just another endpoint to your existing app. üòé No need to depend
on a third-party service or to self-host and maintain another app. üòÖ</p>
<h2 id="static-updates-format" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#static-updates-format"><span>Static updates format</span></a></h2>
<p>What‚Äôs a bit lesser known is that you don‚Äôt even need a dynamic server
at all. You can implement auto updates with static files only. ü™∂</p>
<p>There‚Äôs hints of that in <code>update-electron-app</code> that has a
<a href="https://github.com/electron/update-electron-app/tree/main?tab=readme-ov-file#with-static-file-storage">static storage option</a>,
as well as Squirrel‚Äôs docs that mention a <a href="https://github.com/Squirrel/Squirrel.Mac?tab=readme-ov-file#update-file-json-format">static JSON format</a>.</p>
<p>With <code>update-electron-app</code>, it would look like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { updateElectronApp, <span class="hljs-title class_">UpdateSourceType</span> } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;update-electron-app&#x27;</span>)

<span class="hljs-title function_">updateElectronApp</span>({
  <span class="hljs-attr">updateSource</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">UpdateSourceType</span>.<span class="hljs-property">StaticStorage</span>,
    <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;https://server/path/to/feed&#x27;</span>
  }
})
</code></pre>
<div class="note">
<p><strong>Note:</strong> when using <code>update-electron-app</code>, on macOS, it will
<a href="https://github.com/electron/update-electron-app/blob/515ab245a429a4790b9209f8d2073edddb980717/src/index.ts#L121">append</a>
<code>/RELEASES.json</code> to the <code>baseUrl</code> URL that you give when in
<code>StaticStorage</code> mode, meaning in the above example, the final URL would
be <code>https://server/path/to/feed/RELEASES.json</code>.</p>
<p>There‚Äôs no way to opt out of that, so if you‚Äôre gonna use this module,
that‚Äôs something to know when you create the layout of your static file
storage. Luckily the <a href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#auto-generating-the-static-update-files">automated way to provision static updates with Electron Forge</a>
generates a <code>RELEASES.json</code> file by default so it should work out of the
box.</p>
</div>
<p>As for the native <code>autoUpdater</code>, you need to pass the
<a href="https://www.electronjs.org/docs/latest/api/auto-updater#autoupdatersetfeedurloptions">little documented <code>serverType: 'json'</code></a>:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { autoUpdater } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)

autoUpdater.<span class="hljs-title function_">setFeedURL</span>({
  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://server/path/to/feed.json&#x27;</span>,
  <span class="hljs-attr">serverType</span>: <span class="hljs-string">&#x27;json&#x27;</span>
})
</code></pre>
<p>In both cases, the feed URL typically contains <code>process.platofrm</code> and maybe <code>process.arch</code> again, but that seems to be really up to you.</p>
<p>It is supposed to respond with the following <a href="https://github.com/Squirrel/Squirrel.Mac?tab=readme-ov-file#update-file-json-format">schema</a>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;currentRelease&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.3&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;releases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.1&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;updateTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.1&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://server/path/to/1.2.1.zip&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional Release Name&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;notes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional release notes&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;pub_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-05-02T12:34:56Z&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.3&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;updateTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.3&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://server/path/to/1.2.3.zip&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional Release Name&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;notes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional release notes&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;pub_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-05-03T12:34:56Z&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>From this static response, Squirrel is able to determine whether it
needs to update, and where to fetch the update from.</p>
<p>Don‚Äôt get confused by the <code>updateTo</code> naming. <code>releases</code> contains all the
releases of your software, and <code>updateTo</code> just contains some metadata
about that release, with the <code>url</code> being the only really important part.</p>
<p>I haven‚Äôt tested this, but my guess is that all you really need is the
entry containing the <code>currentRelease</code>, e.g.:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;currentRelease&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.3&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;releases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.3&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;updateTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.3&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://server/path/to/1.2.3.zip&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional Release Name&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;notes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Optional release notes&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;pub_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-05-03T12:34:56Z&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>That should be enough for Squirrel to know there‚Äôs an update available.
I‚Äôm not sure keeping the entire history of older releases adds any value.</p>
<h2 id="auto-generating-the-static-update-files" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#auto-generating-the-static-update-files"><span>Auto generating the static update files</span></a></h2>
<p>From the above section, you should have everything you need to manually
craft that updates feed and push it on your static file server with your
ZIP updates.</p>
<p>However, if you use <a href="https://www.electronforge.io/">Electron Forge</a>,
there‚Äôs (again little documented) ways to generate this static structure
automatically!</p>
<p><code>update-electron-app</code> <a href="https://github.com/electron/update-electron-app/tree/main?tab=readme-ov-file#requirements">hints</a>
at <a href="https://www.electronforge.io/config/publishers/s3"><code>@electron-forge/publisher-s3</code></a>,
but there‚Äôs also <a href="https://www.electronforge.io/config/publishers/gcs"><code>@electron-forge/publisher-gcs</code></a>,
allowing you to generate and upload that static update structure
respectively to AWS S3 or Google Cloud Storage.</p>
<p>They both work the same but the documentation of the S3 plugin is more
complete when it comes to <a href="https://www.electronforge.io/config/publishers/s3#auto-updating-from-s3">auto updating</a>.</p>
<p>You need not only to add the S3 or GCS publisher, but also configure
<a href="https://www.electronforge.io/config/makers/zip"><code>@electron-forge/maker-zip</code></a>
with the undocumented option <code>macUpdateManifestBaseUrl</code>.</p>
<p>During the ‚Äúmake‚Äù step, Electron will build the ZIP file for the
release, but with that option, it will also fetch your current static
‚Äúupdate feed‚Äù, update the <code>currentRelease</code>, and add a new release entry
to the <code>releases</code> array, then output that updated <code>RELEASES.json</code> file
next to your ZIP files.</p>
<p>Then the S3 or GCS publisher will know to put that new update feed in
the right place in your bucket.</p>
<p>In <code>forge.config.js</code>, it looks like this:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">makers</span>: [
    {
      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;@electron-forge/maker-zip&#x27;</span>,
      <span class="hljs-attr">config</span>: <span class="hljs-function"><span class="hljs-params">arch</span> =&gt;</span> ({
        <span class="hljs-attr">macUpdateManifestBaseUrl</span>: <span class="hljs-string">`https://my-bucket.s3.amazonaws.com/custom/folder/darwin/<span class="hljs-subst">${arch}</span>`</span>
      })
    }
  ],
  <span class="hljs-attr">publishers</span>: [
    {
      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;@electron-forge/publisher-s3&#x27;</span>,
      <span class="hljs-attr">config</span>: {
        <span class="hljs-attr">bucket</span>: <span class="hljs-string">&#x27;my-bucket&#x27;</span>,
        <span class="hljs-attr">folder</span>: <span class="hljs-string">&#x27;custom/folder&#x27;</span>,
        <span class="hljs-attr">public</span>: <span class="hljs-literal">true</span>
      }
    }
    <span class="hljs-comment">// {</span>
    <span class="hljs-comment">//   name: &#x27;@electron-forge/publisher-gcs&#x27;,</span>
    <span class="hljs-comment">//   config: {</span>
    <span class="hljs-comment">//     bucket: &#x27;my-bucket&#x27;,</span>
    <span class="hljs-comment">//     folder: &#x27;custom/folder&#x27;,</span>
    <span class="hljs-comment">//     public: true</span>
    <span class="hljs-comment">//   }</span>
    <span class="hljs-comment">// }</span>
  ]
}
</code></pre>
<p>In the case of <code>macUpdateManifestBaseUrl</code>, like for
<code>update-electron-app</code> in JSON mode, it will <a href="https://github.com/electron/forge/blob/ce2b03934ecf600525366a252e5bcb5491708a27/packages/maker/zip/src/MakerZIP.ts#L50">automatically append</a>
<code>/RELEASES.json</code>, so in the above example, if <code>arch</code> is <code>arm64</code>, the
complete feed URL would be <code>https://my-bucket.s3.amazonaws.com/custom/folder/darwin/arm64/RELEASES.json</code>.</p>
<div class="note">
<p><strong>Note:</strong> if you‚Äôre doing universal builds by running <code>electron-forge package --arch universal</code>, then the <code>arch</code> path component will be
<code>universal</code>, so in the above example, you would need to configure
<code>@electron-forge/maker-zip</code> like this:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">makers</span>: [
    {
      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;@electron-forge/maker-zip&#x27;</span>,
      <span class="hljs-attr">config</span>: <span class="hljs-function">() =&gt;</span> ({
        <span class="hljs-attr">macUpdateManifestBaseUrl</span>: <span class="hljs-string">&#x27;https://my-bucket.s3.amazonaws.com/custom/folder/darwin/universal&#x27;</span>
      })
    }
  ]
}
</code></pre>
</div>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/how-to-use-electron-auto-updater.html#conclusion"><span>Conclusion</span></a></h2>
<p>Will you use Electron‚Äôs hosted update service? Or self-host an
open-source update server? Or instead implement your own dynamic
endpoint? Or maybe you‚Äôll just push static updates on S3, GCS, or your
own file server?</p>
<p>Regardless what you chose, you should now have all the elements you need
to implement auto updates in your Electron app on macOS the way that
suits you best! Cheers. ‚úåÔ∏è</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1790906278086386079">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Invoking a Firebase callable function from the Firebase Admin SDK</title>
    <link href="https://www.codejam.info/2024/05/firebase-callable-admin-sdk.html" />
    <id>https://www.codejam.info/2024/05/firebase-callable-admin-sdk.html</id>
    <updated>2024-05-15T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/a/65061421/4324668">LOL you can‚Äôt</a>.</p>
<p>What you <a href="https://stackoverflow.com/a/65062301/4324668"><em>can</em></a> do
however is using the Firebase Admin SDK to create a custom token for the
client SDK, and use the client SDK to make the call. üôÉ</p>
<p>What does this looks like?</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> admin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;firebase-admin&#x27;</span>)
<span class="hljs-keyword">const</span> { initializeApp } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;firebase/app&#x27;</span>)
<span class="hljs-keyword">const</span> { getAuth, signInWithCustomToken } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;firebase/auth&#x27;</span>)
<span class="hljs-keyword">const</span> { getFunctions, httpsCallable } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;firebase/auth&#x27;</span>)

admin.<span class="hljs-title function_">initializeApp</span>({
  <span class="hljs-comment">// Your admin config</span>
})

<span class="hljs-title function_">initializeApp</span>({
  <span class="hljs-comment">// Your client config</span>
})

<span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> admin.<span class="hljs-title function_">auth</span>().<span class="hljs-title function_">createCustomToken</span>(<span class="hljs-string">&#x27;admin&#x27;</span>)

<span class="hljs-keyword">await</span> <span class="hljs-title function_">signInWithCustomToken</span>(<span class="hljs-title function_">getAuth</span>(), token)

<span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">httpsCallable</span>(<span class="hljs-title function_">getFunctions</span>(), <span class="hljs-string">&#x27;myCallableFunction&#x27;</span>).<span class="hljs-title function_">call</span>({})
</code></pre>
<p>Here we created a custom token for a virtual user with UID <code>admin</code> (it
doesn‚Äôt need to exist in Firebase Auth). We can verify that in the
function:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> functions = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;firebase-functions&#x27;</span>)

<span class="hljs-built_in">exports</span>.<span class="hljs-property">myCallableFunction</span> = functions.<span class="hljs-property">https</span>.<span class="hljs-title function_">onCall</span>(<span class="hljs-keyword">async</span> (data, context) =&gt; {
  <span class="hljs-keyword">if</span> (!context.<span class="hljs-property">auth</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> functions.<span class="hljs-property">https</span>.<span class="hljs-title class_">HttpsError</span>(
      <span class="hljs-string">&#x27;unauthenticated&#x27;</span>,
      <span class="hljs-string">&#x27;User is not authenticated&#x27;</span>
    )
  }

  <span class="hljs-keyword">if</span> (context.<span class="hljs-property">auth</span>.<span class="hljs-property">uid</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> functions.<span class="hljs-property">https</span>.<span class="hljs-title class_">HttpsError</span>(
      <span class="hljs-string">&#x27;permission-denied&#x27;</span>,
      <span class="hljs-string">&#x27;User is not authorized&#x27;</span>
    )
  }
})
</code></pre>
<h2 id="why-callable-instead-of-http-function" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/firebase-callable-admin-sdk.html#why-callable-instead-of-http-function"><span>Why callable instead of HTTP function?</span></a></h2>
<p>With a <a href="https://firebase.google.com/docs/functions/http-events">HTTP function</a>,
we could have made a simple <code>fetch</code> request to the endpoint.</p>
<p>Why use a <a href="https://firebase.google.com/docs/functions/callable">callable function</a>
then?</p>
<p>In my case, it was because callable functions have auth built-in,
whereas you‚Äôre responsible to implement your own auth for HTTP
functions. I found that using a <code>https.onCall</code> function with a custom
Firebase token was more elegant than configuring some kind of internal
‚ÄúAPI key‚Äù.</p>
<h2 id="invoking-the-callable-function-manually" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/firebase-callable-admin-sdk.html#invoking-the-callable-function-manually"><span>Invoking the callable function manually</span></a></h2>
<p>It turns out it‚Äôs also quite easy to invoke a callable function without
the Firebase SDK, via a <a href="https://firebase.google.com/docs/functions/callable-reference">plain HTTP call</a>.</p>
<p>With cURL, calling a function that doesn‚Äôt have token authentication is
as simple as:</p>
<pre><code class="hljs language-sh">curl \
    -X POST \
    -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \
    <span class="hljs-string">&#x27;https://region-project.cloudfunctions.net/myCallableFunction&#x27;</span> \
    --data <span class="hljs-string">&#x27;{&quot;data&quot;: {}}&#x27;</span>
</code></pre>
<p>For the authentication, we need an <code>Authorization: Bearer</code> header, but
we can‚Äôt directly use the custom token we generated above. We need to
<a href="https://stackoverflow.com/a/51346783/4324668">exchange</a> it for an ID
token first (this happened transparently in the previous example).</p>
<p>We could use the client SDK to do that for us but at that point we might
as well use the client SDK to call the function as well. üòÖ</p>
<p>Just for educational purpose, and building off the earlier example, it
would look like:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { getAuth, signInWithCustomToken, getIdToken } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;firebase/auth&#x27;</span>)

<span class="hljs-keyword">await</span> <span class="hljs-title function_">signInWithCustomToken</span>(<span class="hljs-title function_">getAuth</span>(), token)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">getIdToken</span>(<span class="hljs-title function_">getAuth</span>().<span class="hljs-property">currentUser</span>))
</code></pre>
<p>We could then use that token in the cURL request:</p>
<pre><code class="hljs language-sh">curl \
    -X POST \
    -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \
    -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$token</span>&quot;</span> \
    <span class="hljs-string">&#x27;https://region-project.cloudfunctions.net/myCallableFunction&#x27;</span> \
    --data <span class="hljs-string">&#x27;{&quot;data&quot;: {}}&#x27;</span>
</code></pre>
<p>But if we‚Äôre calling the function via <code>fetch</code>, it‚Äôs probably that we
don‚Äôt want to use the client SDK. Then, exchanging the token would
look like <a href="https://cloud.google.com/identity-platform/docs/use-rest-api#section-verify-custom-token">this</a>:</p>
<pre><code class="hljs language-sh">curl \
    -X POST \
    -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \
    <span class="hljs-string">&quot;https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=<span class="hljs-variable">$firebaseApiKey</span>&quot;</span> \
    --data <span class="hljs-string">&quot;{\&quot;token\&quot;: \&quot;<span class="hljs-variable">$customToken</span>\&quot;, \&quot;returnSecureToken\&quot;: true}&quot;</span>
</code></pre>
<p>This returns an <code>idToken</code> that we can use as <code>Authorization: Bearer</code> in
the invocation of the callable function as seen above.</p>
<div class="note">
<p><strong>Note:</strong> if you‚Äôre wondering about <code>returnSecureToken</code>, it‚Äôs
<a href="https://cloud.google.com/identity-platform/docs/use-rest-api#section-verify-custom-token">documented</a>
as ‚Äúshould always be true‚Äù.</p>
<p>Without it, the endpoint returns only an <code>idToken</code> with no <code>expiresIn</code>
nor <code>refreshToken</code>, so my guess is that it‚Äôs a token that‚Ä¶ doesn‚Äôt
expire? Which is considered insecure.</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Jest and Firestore: could not reach Cloud Firestore backend</title>
    <link href="https://www.codejam.info/2024/05/jest-firestore-could-not-reach-firestore-backend.html" />
    <id>https://www.codejam.info/2024/05/jest-firestore-could-not-reach-firestore-backend.html</id>
    <updated>2024-05-08T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>So you‚Äôre using Jest to do some unit tests that involve testing
Firebase-related stuff like Firestore, maybe Firestore rules with
<a href="https://firebase.google.com/docs/rules/unit-tests"><code>@firebase/rules-unit-testing</code></a>?</p>
<p>But your test just times out:</p>
<pre><code class="hljs">thrown: &quot;Exceeded timeout of 5000 ms for a test.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
</code></pre>
<p>So you go on and add a longer timeout value to the test, but then you
hit another level of timeout:</p>
<pre><code class="hljs">@firebase/firestore: Firestore: Could not reach Cloud Firestore backend. Backend didn&#x27;t respond within 10 seconds.
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.
</code></pre>
<p>By any chance, are you using <a href="https://jestjs.io/docs/next/tutorial-jquery"><code>jest-environment-jsdom</code></a>?
Something like this in your <code>jest.config.js</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">testEnvironment</span>: <span class="hljs-string">&#x27;jsdom&#x27;</span>
  <span class="hljs-comment">// testEnvironment: &#x27;jest-environment-jsdom&#x27;</span>
}
</code></pre>
<p>If so, look no further. Firestore doesn‚Äôt like what
<code>jest-environment-jsdom</code> does to the global object and makes it hang
forever.</p>
<p>It took me long enough to figure <em>that</em> out, so I didn‚Äôt manage to
figure out <em>why</em> exactly it‚Äôs the case. So far my understanding is that
it‚Äôs related to the <code>fetch</code> API <em>somehow</em>, because if you set the
undocumented <code>useFetchStreams</code> option to <code>false</code> in the Firebase client,
then it falls back to <code>XMLHttpRequest</code> (which jsdom implements) and
things work again.</p>
<pre><code class="hljs language-js">user.<span class="hljs-title function_">firestore</span>({ <span class="hljs-attr">useFetchStreams</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">merge</span>: <span class="hljs-literal">true</span> })
</code></pre>
<p>My advice would be to run the Firestore tests in the default Node.js
environment instead of the jsdom environment. This may be by using a
dedicated <code>jest.config.js</code>, or simply running your Firestore tests
separately from the rest of your frontend test suite and passing <code>--env node</code> to override the value from <code>jest.config.js</code>:</p>
<pre><code class="hljs language-sh">npx jest --<span class="hljs-built_in">env</span> node firestore.test.js
</code></pre>
<p>Last resort, the <code>useFetchStreams</code> hack above should do it. üòÑ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Using Google Chrome instead of Chromium in Google Cloud Functions</title>
    <link href="https://www.codejam.info/2024/05/google-chrome-cloud-functions.html" />
    <id>https://www.codejam.info/2024/05/google-chrome-cloud-functions.html</id>
    <updated>2024-05-05T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>When using Puppeteer, Playwright and similar, you need to have Chrome
installed. When you‚Äôre running on AWS Lambda or Google Cloud Functions,
it can get tricky.</p>
<p>Google Cloud Functions <em>used to</em> bundle Chromium in their base images,
but it‚Äôs been a few years it‚Äôs no longer the case. That‚Äôs where packages
like <a href="https://github.com/alixaxel/chrome-aws-lambda"><code>chrome-aws-lambda</code></a>
come in handy, by bundling Chromium directly inside a npm package, and
exposing a function that extracts the Chromium binary and returns the
path:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> chromium = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chrome-aws-lambda&#x27;</span>)

<span class="hljs-keyword">const</span> path = <span class="hljs-keyword">await</span> chromium.<span class="hljs-property">executablePath</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> unnecessary pedantic detail: the above code doesn‚Äôt look like a function,
but <a href="https://github.com/alixaxel/chrome-aws-lambda/blob/f9d5a9ff0282ef8e172a29d6d077efc468ca3c76/source/index.ts#L147">it is, in fact</a>,
a getter function that returns a promise. üòÑ</p>
</div>
<p>However that‚Äôs Chromium, and you may have reasons to want Google Chrome
instead (mainly, proprietary codecs).</p>
<h2 id="a-totally-unrelated-note-about-aws-lambda" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/google-chrome-cloud-functions.html#a-totally-unrelated-note-about-aws-lambda"><span>A totally unrelated note about AWS Lambda</span></a></h2>
<p>This article is about Google Cloud Functions, but if you‚Äôre on AWS
Lambda, the above option is your best bet. Because of the Lambda total
size limit of 250 MB (all layers combined), it‚Äôs really hard to get a
binary of Chrome that fits in there.</p>
<p>That‚Äôs why <code>chrome-aws-lambda</code> uses <a href="https://github.com/alixaxel/lambdafs">LambdaFS</a>
under the hood, to aggressively compress the Chrome installation with
Brotli and make it fit in that limited space.</p>
<p>But again with that build, you won‚Äôt have proprietary codecs. I tried to
trim down a Chrome Linux build and compress it with the same technique
but never managed to make it fit on AWS Lambda. Recent Chrome versions
are just too big.</p>
<p>There‚Äôs another option, which is to compile Chromium yourself with
proprietary codecs. I never found any prebuilt binaries of Chromium that
include proprietary codecs (maybe because of license issues
redistributing them üôÉ) so you‚Äôre on your own here.</p>
<p><a href="https://www.remotion.dev/">Remotion</a> successfully does that for
<a href="https://www.remotion.dev/docs/lambda">Remotion Lambda</a>.
Here‚Äôs <a href="https://github.com/remotion-dev/chrome-build-instructions">their instructions</a>
to compile Chromium with proprietary codecs for Lambda.</p>
<p>Fair warning: it gets hairy, fast.</p>
<h2 id="back-to-google-cloud-functions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/google-chrome-cloud-functions.html#back-to-google-cloud-functions"><span>Back to Google Cloud Functions</span></a></h2>
<p>Google Cloud Functions is more generous as for bundle size, so we don‚Äôt
need to resort to those tricks, and we can include a complete,
uncompressed, Google Chrome installation.</p>
<p>Google publishes <a href="https://googlechromelabs.github.io/chrome-for-testing/">Chrome for Testing</a>,
builds <a href="https://developer.chrome.com/blog/chrome-for-testing">specifically made</a>
for headless usage.</p>
<p>We can just download the latest build from there as part of the
<code>gcp-build</code> script in our <code>package.json</code>.</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;gcp-build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;curl -s -O &#x27;https://storage.googleapis.com/chrome-for-testing-public/124.0.6367.91/linux64/chrome-linux64.zip&#x27; &amp;&amp; unzip chrome-linux64.zip &amp;&amp; rm chrome-linux64.zip&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> the <code>gcp-build</code> script allows you to <a href="https://cloud.google.com/appengine/docs/standard/nodejs/running-custom-build-step">run a custom build step</a>
in Google Cloud Build, which is what Cloud Functions (both 1st and 2nd
gen, as well as Cloud Run and App Engine) use to build your function
image.</p>
<p>It would work just fine with a <code>postinstall</code> script as well, but
<code>gcp-build</code> makes sure you run it only on Google Cloud Build, which is
probably desirable in this particular case.</p>
</div>
<p>You will then have the Chrome binary in <code>chrome-linux64/chrome</code>, that
you can pass to the tool of your choice.</p>
<h2 id="with-puppeteer" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/google-chrome-cloud-functions.html#with-puppeteer"><span>With Puppeteer</span></a></h2>
<p>Courtesy of <a href="https://medium.com/@jackklpan/run-puppeteer-in-google-cloud-functions-v2-b18a353e609b">this post</a>,
with Puppeteer, you don‚Äôt need to download Chrome manually, since it
provides a nifty script to do just that.</p>
<p>Actually, Puppeteer‚Äôs <a href="https://github.com/puppeteer/puppeteer/blob/f23646b3526aa87145c17b22e9967ec8f77d82d2/packages/puppeteer/package.json#L41"><code>postinstall</code> script</a>
automatically downloads the latest version of Chrome for Testing for
your platform.</p>
<p>The caveat is that this script by default installs it to
<code>~/.cache/puppeteer</code>, which in the case of Google Cloud Build, is not
gonna be preserved in the final image. So we need to instruct Puppeteer
to install Chrome in a directory that Cloud Build will keep.</p>
<p>This can be done with the following <code>.puppeteerrc.js</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-string">`<span class="hljs-subst">${__dirname}</span>/.cache/puppeteer`</span>
}
</code></pre>
<p>But even then, there‚Äôs another caveat. Puppeteer‚Äôs <code>postinstall</code> script
will only run after it gets installed. However, because of build
caching, you will get in a state where <code>node_modules</code> is restored, with
Puppeteer already installed (so <code>postinstall</code> will <em>not</em> run), but the
<code>.cache/puppeteer</code> directory will also <em>not</em> be restored.</p>
<p>To mitigate that, we need to make sure to install Chrome systematically.
Again we can leverage the <code>gcp-build</code> for that:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;gcp-build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npx puppeteer browsers install chrome&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> you could call Puppeteer‚Äôs <code>postinstall</code> script directly by
doing <code>node node_modules/puppeteer/install.mjs</code> instead, but I found the
above command cleaner.</p>
</div>
<p>The good thing is that this script knows to not re-download Chrome if
it‚Äôs already found in the cache directory, so when the <code>postinstall</code>
script <em>does</em> run, the extra <code>gcp-build</code> command will be a no-op.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Knex: timeout acquiring a connection, the pool is probably full</title>
    <link href="https://www.codejam.info/2024/05/knex-timeout-pool-full.html" />
    <id>https://www.codejam.info/2024/05/knex-timeout-pool-full.html</id>
    <updated>2024-05-05T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<pre><code class="hljs">Error: Knex: Timeout acquiring a connection. The pool is probably full. Are you missing a .transacting(trx) call?
</code></pre>
<p>Yes, you‚Äôre probably missing a <code>.transacting(trx)</code> call, but what‚Äôs
going on exactly?</p>
<p>Knex maintains a connection pool to your database, which you configure
with the <a href="https://knexjs.org/guide/#pool"><code>pool</code> <code>min</code> and <code>max</code> options</a>.
If <code>max</code> is 5, then Knex will keep up to 5 connections to your database
in the pool.</p>
<p>If you‚Äôre attempting to make a query and the pool is full, then it‚Äôll
wait that one of the connection frees up in order to use it.</p>
<p>Sometimes however, it will timeout doing so. One common case is a
deadlock when mixing queries inside and outside a transaction.</p>
<p>Let‚Äôs say that you start 5 transactions, but within those transactions,
you‚Äôre performing some queries <em>outside</em> of the transaction:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">await</span> knex.<span class="hljs-title function_">transaction</span>(<span class="hljs-function"><span class="hljs-params">trx</span> =&gt;</span> {
  <span class="hljs-keyword">await</span> trx.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;...&#x27;</span>)
  <span class="hljs-keyword">await</span> knex.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;...&#x27;</span>)
})
</code></pre>
<p>Here, the <code>knex.raw</code> statement will execute outside of the transaction
(despite being in the function, because it doesn‚Äôt use <code>trx</code>). This
means that it will use its own connection from the pool, on top of the
one <code>knex.transaction</code> already uses.</p>
<p>If you have enough of those running in parallel, you can hit a case
where there‚Äôs no available connection to execute the <code>knex.raw</code> bit. So
it‚Äôs waiting that a connection frees up. <strong>But no connection get freed up
because all the transactions are waiting for the <code>knex.raw</code> bit to
complete in order to commit!</strong></p>
<p>See the deadlock here?</p>
<p>So the solution is to make sure that all the queries you perform inside
the transaction actually use that transaction. In the above example,
it‚Äôs very obvious, but it can get trickier when you call a function that
calls another function that calls a method that makes a query but didn‚Äôt
accept a <code>trx</code> parameter and so ends up needing its own connection. üò¨</p>
<p>Now you know what to look for. üëÄ</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Prevent macOS to switch to bluetooth headphones microphone üéß</title>
    <link href="https://www.codejam.info/2024/05/macos-prevent-bluetooth-headphones-microphone.html" />
    <id>https://www.codejam.info/2024/05/macos-prevent-bluetooth-headphones-microphone.html</id>
    <updated>2024-05-05T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Maybe like me, you have bluetooth headphones such as the Sony WH-1000XM4
that you like because they have great audio, but the built-in microphone
otherwise suck. But you don‚Äôt care because you use your MacBook‚Äôs
microphone.</p>
<p>Then, maybe also like me, you didn‚Äôt even <em>know</em> that it had a built-in
microphone in the first place, and even less that macOS was
automatically switching to that microphone when you connect your
headphones!</p>
<p>Luckily, I didn‚Äôt sound like shit on calls for too long, because my
friends quickly told me ‚Äúbro, ur mic sounds like shit‚Äù. üí©</p>
<h2 id="forcing-the-internal-microphone" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/macos-prevent-bluetooth-headphones-microphone.html#forcing-the-internal-microphone"><span>Forcing the internal microphone</span></a></h2>
<p>Now we know what‚Äôs wrong, let‚Äôs fix it. The idea is that when I connect
my bluetooth headphones, I want the audio output to go to them, but I
don‚Äôt want to switch my default microphone.</p>
<p>We can achieve that with the <strong>Audio MIDI Setup</strong> app.</p>
<p>Create an <strong>Aggregate Device</strong> (from the <code>+</code> icon at the bottom-left
corner) that has only one input: your MacBook microphone. Then set this
aggregate device as ‚Äúdefault for sound input‚Äù from the right click menu.</p>
<figure class="center">
  <img alt="Audio MIDI Setup" srcset="../../img/2024/05/macos-microphone/audio-midi-setup.png 2x">
</figure>
<p>Tada! Now connecting your headphones will leave the aggregate device
alone, meaning you‚Äôll keep using the good microphone that comes with
your laptop, without thinking about it. üëå</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Firebase Auth Admin SDK denied when using application default credentials</title>
    <link href="https://www.codejam.info/2024/05/firebase-auth-admin-denied-application-default.html" />
    <id>https://www.codejam.info/2024/05/firebase-auth-admin-denied-application-default.html</id>
    <updated>2024-05-05T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If you‚Äôre using the Firebase Admin SDK from your development machine
e.g. to run ad hoc scripts, you may have tried to do something like
this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> admin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase-admin&#x27;</span>
<span class="hljs-keyword">import</span> { applicationDefault } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase-admin/app&#x27;</span>

admin.<span class="hljs-title function_">initializeApp</span>({
  <span class="hljs-attr">projectId</span>: <span class="hljs-string">&#x27;my-project&#x27;</span>,
  <span class="hljs-attr">credential</span>: <span class="hljs-title function_">applicationDefault</span>()
})

<span class="hljs-keyword">const</span> auth = admin.<span class="hljs-title function_">auth</span>()

<span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> auth.<span class="hljs-title function_">getUserByEmail</span>(<span class="hljs-string">&#x27;foo@bar.com&#x27;</span>)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user)
</code></pre>
<p>After all, it works just fine with other Firebase APIs like Firestore.</p>
<p>But in the above case, you‚Äôd be getting the following error (spread onto
lines for readability):</p>
<pre><code class="hljs">FirebaseAuthError: //cloud.google.com/docs/authentication/.

If you are getting this error with curl or similar tools, you may need
to specify &#x27;X-Goog-User-Project&#x27; HTTP header for quota and billing
purposes.

For more information regarding &#x27;X-Goog-User-Project&#x27; header, please
check https://cloud.google.com/apis/docs/system-parameters.

Raw server response:

{
  &quot;error&quot;: {
    &quot;code&quot;: 403,
    &quot;message&quot;: &quot;Your application has authenticated using end user credentials from the Google Cloud SDK or Google Cloud Shell which are not supported by the identitytoolkit.googleapis.com. We recommend configuring the billing/quota_project setting in gcloud or using a service account through the auth/impersonate_service_account setting. For more information about service accounts and how to use them in your application, see https://cloud.google.com/docs/authentication/. If you are getting this error with curl or similar tools, you may need to specify &#x27;X-Goog-User-Project&#x27; HTTP header for quota and billing purposes. For more information regarding &#x27;X-Goog-User-Project&#x27; header, please check https://cloud.google.com/apis/docs/system-parameters.&quot;,
    &quot;errors&quot;: [
      {
        &quot;message&quot;: &quot;Your application has authenticated using end user credentials from the Google Cloud SDK or Google Cloud Shell which are not supported by the identitytoolkit.googleapis.com. We recommend configuring the billing/quota_project setting in gcloud or using a service account through the auth/impersonate_service_account setting. For more information about service accounts and how to use them in your application, see https://cloud.google.com/docs/authentication/. If you are getting this error with curl or similar tools, you may need to specify &#x27;X-Goog-User-Project&#x27; HTTP header for quota and billing purposes. For more information regarding &#x27;X-Goog-User-Project&#x27; header, please check https://cloud.google.com/apis/docs/system-parameters.&quot;,
        &quot;domain&quot;: &quot;usageLimits&quot;,
        &quot;reason&quot;: &quot;accessNotConfigured&quot;,
        &quot;extendedHelp&quot;: &quot;https://console.developers.google.com&quot;
      }
    ],
    &quot;status&quot;: &quot;PERMISSION_DENIED&quot;,
    &quot;details&quot;: [
      {
        &quot;@type&quot;: &quot;type.googleapis.com/google.rpc.ErrorInfo&quot;,
        &quot;reason&quot;: &quot;SERVICE_DISABLED&quot;,
        &quot;domain&quot;: &quot;googleapis.com&quot;,
        &quot;metadata&quot;: {
          &quot;service&quot;: &quot;identitytoolkit.googleapis.com&quot;,
          &quot;consumer&quot;: &quot;projects/123456&quot;
        }
      }
    ]
  }
}
}
</code></pre>
<p>So what‚Äôs going on? Well <code>applicationDefault()</code> works with the
application default credentials as created by
<a href="https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login"><code>gcloud auth application-default login</code></a>,
which live in <code>~/.config/gcloud/application_default_credentials.json</code>.</p>
<p>In my case, those credentials didn‚Äôt have access to Firebase Auth for a
reason I did not try to understand.</p>
<p>However, what <em>did</em> have access to Firebase Auth is the application
default credentials as created by <a href="https://firebase.google.com/docs/cli#sign-in-test-cli"><code>firebase login</code></a>,
which live in <code>~/.config/firebase/*_application_default_credentials.json</code>.</p>
<p>Firebase‚Äôs <code>applicationDefault()</code>, despite being a method of the
Firebase SDK, <a href="https://github.com/firebase/firebase-admin-node/blob/ddcf965511e2f03853bad7658b5c61b85c306580/src/app/credential-internal.ts#L485">does <em>not</em> know</a>
about the Firebase application default credentials, and instead only
uses the Google Cloud credentials. üòÖ</p>
<p>However it supports reading the credentials file from the
<code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable, so we can run the
script like this:</p>
<pre><code class="hljs language-sh">GOOGLE_APPLICATION_CREDENTIALS=~/.config/firebase/*_application_default_credentials.json node script.js
</code></pre>
<div class="note">
<p><strong>Note:</strong> I left a wildcard <code>*</code> in the path above because Firebase
application default credentials contain your user and organization name.
It‚Äôll work out of the box if you are only connected to a single Firebase
identity, but you‚Äôll have to be more specific otherwise.</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Send Cloudflare Workers logs to Google Cloud Logging using Logpush</title>
    <link href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html" />
    <id>https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html</id>
    <updated>2024-05-05T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Cloudflare Workers are great, until they become a key part of your
production system and you realize you don‚Äôt have any logs. üòÖ</p>
<p>Something didn‚Äôt work the way it should? Woops, sorry, can‚Äôt do much
about that, I have no trace of what happened. ü§∑</p>
<p>Not ideal.</p>
<div class="note">
<p><strong>Note:</strong> sure there‚Äôs the option to tail logs from the dashboard and
the CLI, but it turns out most of the logs I need don‚Äôt get logged while
I‚Äôm watching. üëÄ</p>
</div>
<p>For a while, the alternative was to replace <code>console.log</code> statements by
<code>fetch</code> requests to something that will actually persist logs. Fine, but
still not ideal.</p>
<p>Thankfully they introduced <a href="https://blog.cloudflare.com/logpush-for-workers/">Logpush for Workers</a>
back in 2022, which finally gave us a way to forward worker logs to a
number of <a href="https://developers.cloudflare.com/logs/get-started/enable-destinations/">destinations</a>,
including Amazon S3, Google Cloud Storage, Datadog, Elasticsearch,
BigQuery and more.</p>
<p>But none of those options was Google Cloud Logging. And I like to
centralize my logs in Google Cloud Logging. Bummer.</p>
<h2 id="leveraging-the-http-destination" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#leveraging-the-http-destination"><span>Leveraging the HTTP destination</span></a></h2>
<p>One of those options though is an arbitrary <a href="https://developers.cloudflare.com/logs/get-started/enable-destinations/http/">HTTP destination</a>.</p>
<p>With that, I should be able to integrate any log backend I want.</p>
<p>What if I made a Cloudflare Worker to handle the logs of my other
workers? That log drain worker probably shouldn‚Äôt drain logs to itself
to avoid an infinite recursion, but I could fallback in one of the other
integrations just for this one.</p>
<h2 id="configuring-a-logpush-handler" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#configuring-a-logpush-handler"><span>Configuring a Logpush handler</span></a></h2>
<p>In order to use Cloudflare Logpush, <a href="https://developers.cloudflare.com/logs/about/">you need to be under the Cloudflare Enterprise plan</a>.
However there‚Äôs an exception for the Cloudflare Workers logs! Then all
you need is the <a href="https://developers.cloudflare.com/workers/platform/pricing/">Workers Paid</a>
plan.</p>
<p>You can configure a log handler from your dashboard, in <strong>Analytics &amp;
Logs &gt; Logs &gt; Add Logpush job</strong>. Select <strong>Workers trace events</strong> as a
dataset, select the fields you care about (more on that later), and
configure your HTTP endpoint.</p>
<p>This UI looks like a recent addition! When I originally worked on this,
Logpush was only configurable <a href="https://developers.cloudflare.com/logs/get-started/enable-destinations/http/#manage-via-api">by using the Cloudflare HTTP API</a>.</p>
<p>For the record, and because it gives you more control over the Logpush
settings, here‚Äôs how you would do this with the API.</p>
<p>First, you need an API token, which you can create from <strong>My Profile &gt;
API Tokens</strong>.</p>
<p>While the API docs often reference the usage of API keys with
<code>X-Auth-Email</code> and <code>X-Auth-Key</code> headers, those API keys have complete
permissions over your account, and I would recommend against using them
if you have a better alternative.</p>
<p>The better alternative: API <em>tokens</em>, which lets you scope permissions.
In our case, we want to create a custom token with permissions of
<code>Zone.Logs.Edit</code>. That token can then be used in a <code>Authorization: Bearer</code> header.</p>
<p>Here‚Äôs how you would list existing Logpush jobs:</p>
<pre><code class="hljs language-sh">curl \
    -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$TOKEN</span>&quot;</span> \
    <span class="hljs-string">&#x27;https://api.cloudflare.com/client/v4/accounts/my-account-id/logpush/jobs&#x27;</span>
</code></pre>
<p>Where <code>my-account-id</code> is your account ID, that you can find for example
in the <strong>Workers &amp; Pages &gt; Overview</strong> page on the right.</p>
<p>To create a job:</p>
<pre><code class="hljs language-sh">curl \
    -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$TOKEN</span>&quot;</span> \
    -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \
    <span class="hljs-string">&#x27;https://api.cloudflare.com/client/v4/accounts/my-account-id/logpush/jobs&#x27;</span> \
    --data <span class="hljs-string">&#x27;{
  &quot;name&quot;: &quot;test&quot;,
  &quot;output_options&quot;: {
    &quot;field_names&quot;: [&quot;DispatchNamespace&quot;, &quot;Entrypoint&quot;, &quot;Event&quot;, &quot;EventTimestampMs&quot;, &quot;EventType&quot;, &quot;Exceptions&quot;, &quot;Logs&quot;, &quot;Outcome&quot;, &quot;ScriptName&quot;, &quot;ScriptTags&quot;, &quot;ScriptVersion&quot;],
    &quot;timestamp_format&quot;: &quot;rfc3339&quot;
  },
  &quot;destination_conf&quot;: &quot;https://my.worker.workers.dev&quot;,
  &quot;dataset&quot;: &quot;workers_trace_events&quot;,
  &quot;enabled&quot;: true
}&#x27;</span>
</code></pre>
<p>Where the API shines compared to the UI, is that you can configure a
number of <a href="https://developers.cloudflare.com/api/operations/post-accounts-account_identifier-logpush-jobs#request-body">extra options</a>
like <code>max_upload_bytes</code>, <code>max_upload_interval_seconds</code> and
<code>max_upload_records</code>, to make sure Logpush makes requests within
acceptable limits for your endpoint.</p>
<p>In our case, the Logpush handler is also a Cloudflare worker so the max
body size will be between 100 MB and 500 MB <a href="https://developers.cloudflare.com/workers/platform/limits/#request-limits">depending on your plan</a>.
But also, Cloudflare workers have a <a href="https://developers.cloudflare.com/workers/platform/limits/">memory limit</a>
of 128 MB so that‚Äôs something to take into account as well. Oh and keep
in mind <a href="https://community.cloudflare.com/t/workers-memory-limit/491329/2">this memory limit is per-isolate</a>
meaning that multiple requests could hit the same isolate. So adjust
accordingly, but I don‚Äôt have a silver bullet for this one. üôÉ</p>
<div class="note">
<p><strong>Note:</strong> in my experience, setting <code>timestamp_format</code> to <code>rfc3339</code>
doesn‚Äôt do anything? I‚Äôm still only getting <code>TimestampMs</code> fields in
milliseconds (which interestingly is neither a <code>unix</code> (seconds) nor
<code>unixnano</code> (nanoseconds) timestamp, which are the other two possible
options).</p>
</div>
<p>In order to update a job, you‚Äôll need the <code>id</code> that was returned by the
create request, or simply fetch it with the list request. It‚Äôs gonna be
like the create request but you append the log ID in the end, e.g.
<code>logpush/jobs/12345</code>, it‚Äôs a <code>PUT</code> request, and all fields are optional.</p>
<p>To delete a job, same but it‚Äôs a <code>DELETE</code> request with no body.</p>
<h2 id="the-logpush-http-destination-protocol" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#the-logpush-http-destination-protocol"><span>The Logpush HTTP destination protocol</span></a></h2>
<p>I didn‚Äôt find documentation about what the HTTP destination is supposed
to accept, so here‚Äôs what I figured out:</p>
<ul>
<li>It sends a <code>POST</code> request to the configured URL.</li>
<li>The body is gzipped.</li>
<li>The uncompressed body is a newline-delimited JSON of ‚Äúevents‚Äù, e.g.:</li>
</ul>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;DispatchNamespace&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Entrypoint&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Event&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;RayID&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;87ed87f80cf22d84&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Request&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;URL&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;https://test.workers.dev/&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Response&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;Status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;EventTimestampMs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1714878560011</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;EventType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;fetch&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Exceptions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Logs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;Level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;bar&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;TimestampMs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1714878560016</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Outcome&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ok&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ScriptName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ScriptTags&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ScriptVersion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;ID&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1e7519b3-08e2-441d-ae10-7c8c6d3b7e17&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Tag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;DispatchNamespace&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Entrypoint&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Event&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;RayID&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;87ed87fb49cb2d84&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Request&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;URL&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;https://test.workers.dev/&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Response&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;Status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;EventTimestampMs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1714878560532</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;EventType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;fetch&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Exceptions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Logs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;Level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;bar&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;TimestampMs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1714878560532</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Outcome&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ok&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ScriptName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ScriptTags&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ScriptVersion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;ID&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1e7519b3-08e2-441d-ae10-7c8c6d3b7e17&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;Tag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">}</span>
</code></pre>
<p>When you configure the HTTP destination, you get a chance to choose
which of those fields are included. You‚Äôll get a different set of fields
depending on the kind of dataset you‚Äôre dealing with, but in the scope
of this article we‚Äôre focusing on worker logs.</p>
<p>For reference, here‚Äôs the list of supported <a href="https://developers.cloudflare.com/logs/reference/log-fields/zone/">zone-scoped datasets</a>
and <a href="https://developers.cloudflare.com/logs/reference/log-fields/account/">account-scoped datasets</a>.
Zone-scoped datasets like DNS logs are tied to a specific ‚Äúzone‚Äù
(a specific domain), while account-scoped datasets like worker logs are
global to your account (workers don‚Äôt belong to a particular zone).</p>
<h2 id="writing-the-worker" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#writing-the-worker"><span>Writing the worker</span></a></h2>
<p>The worker will need to decompress the gzipped body, split it into lines
and send the individual logs to the Google Cloud Logging API.</p>
<p>Calling Google Cloud APIs from Cloudflare Workers is a bit of a
challenge because the Node.js SDK is not compatible with the workers
environment, so we need to reimplement the whole authentication process.
But it‚Äôs a problem <a href="https://www.codejam.info/2022/02/how-to-call-google-cloud-apis-from-cloudflare-workers.html">we‚Äôve already solved in the past</a>
so it should be no big deal. üòé</p>
<p>First let‚Äôs start with the base of the worker, including decompressing
the body:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-keyword">async</span> fetch (request) {
    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">method</span> !== <span class="hljs-string">&#x27;POST&#x27;</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&#x27;&#x27;</span>, { <span class="hljs-attr">status</span>: <span class="hljs-number">405</span> })
    }

    <span class="hljs-keyword">const</span> ds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecompressionStream</span>(<span class="hljs-string">&#x27;gzip&#x27;</span>)
    <span class="hljs-keyword">const</span> stream = request.<span class="hljs-property">body</span>.<span class="hljs-title function_">pipeThrough</span>(ds)
    <span class="hljs-keyword">const</span> body = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(stream).<span class="hljs-title function_">text</span>()
    <span class="hljs-keyword">const</span> logs = body.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> json <span class="hljs-keyword">of</span> logs) {
      <span class="hljs-keyword">if</span> (json.<span class="hljs-title function_">trim</span>() === <span class="hljs-string">&#x27;&#x27;</span>) {
        <span class="hljs-keyword">continue</span>
      }

      <span class="hljs-keyword">const</span> log = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json)

      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(log)
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>()
  }
}
</code></pre>
<p>To do that, we use the native
<a href="https://developer.mozilla.org/en-US/docs/Web/API/DecompressionStream"><code>DecompressionStream</code></a>,
that we can then <a href="https://stackoverflow.com/a/72718732/4324668">convert to text</a>
with <code>await new Response(stream).text()</code>.</p>
<h2 id="calling-the-google-cloud-logging-api" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#calling-the-google-cloud-logging-api"><span>Calling the Google Cloud Logging API</span></a></h2>
<p>Now let‚Äôs see how we can call the Google Cloud Logging API. Again, we
can‚Äôt use the Google Cloud Node.js SDK, so we need to call the REST API
manually. Everything about authentication is explained in
<a href="https://www.codejam.info/2022/02/how-to-call-google-cloud-apis-from-cloudflare-workers.html">this post</a>
so I won‚Äôt cover that again. Read that article to understand how to deal
with Google Cloud API authentication from a Cloudflare worker!</p>
<p>When it comes to Google Cloud Logging specifically, you‚Äôll need an <code>aud</code>
of <code>https://logging.googleapis.com/</code> in your JWT. The rest of this post
will assume you generated a <code>token</code> variable thanks to the
aforementioned article.</p>
<p>In order to write logs, we need to call the <a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/entries/write"><code>entries:write</code></a>
endpoint.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
  <span class="hljs-string">`https://logging.googleapis.com/v2/entries:write`</span>,
  {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,
      <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${token}</span>`</span>
    },
    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({
      <span class="hljs-attr">entries</span>: [
        {
          <span class="hljs-attr">logName</span>: <span class="hljs-string">`projects/my-project-id/logs/my-log-id`</span>,
          <span class="hljs-attr">resource</span>: {
            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;generic_node&#x27;</span>,
            <span class="hljs-attr">labels</span>: {
              <span class="hljs-comment">// project_id: &#x27;...&#x27;,</span>
              <span class="hljs-comment">// location: &#x27;...&#x27;,</span>
              <span class="hljs-comment">// namespace: &#x27;...&#x27;,</span>
              <span class="hljs-comment">// node_id: &#x27;...&#x27;</span>
            }
          },
          <span class="hljs-comment">// severity: &#x27;DEFAULT&#x27;,</span>
          <span class="hljs-attr">timestamp</span>: <span class="hljs-string">&#x27;2024-05-05T17:38:47.512Z&#x27;</span>,
          <span class="hljs-attr">jsonPayload</span>: {
            <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar
          }
        }
      ]
    })
  }
)
</span></code></pre>
<p>Replace <code>my-project-id</code> by your project ID. <code>my-log-id</code> can be anything.</p>
<p>Here I chose to use a <code>generic_node</code> resource type, but there‚Äôs
<a href="https://cloud.google.com/logging/docs/api/v2/resource-list#resource-types">quite a lot of other choices</a>
so feel free to use what makes the most sense to you.</p>
<p>The resource type that you chose will have a number of associated labels
that you can feed. In this example I included the <code>generic_node</code> labels.
<code>project_id</code> doesn‚Äôt really need to be set because it will be
automatically populated from the project ID in your <code>logName</code>. The other
ones are also optional. Put what makes the most sense for your data!</p>
<p>There‚Äôs a number of other fields you can set on each <a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry">log entry</a>
in the <code>entries</code> array, but I kept it simple for this example.</p>
<p>You can for example tune the
<a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#LogSeverity"><code>severity</code></a>,
e.g. to distinguish <code>WARNING</code> and <code>ERROR</code> logs appropriately.</p>
<h2 id="formatting-logpush-logs-to-google-cloud-logging-entries" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#formatting-logpush-logs-to-google-cloud-logging-entries"><span>Formatting Logpush logs to Google Cloud Logging entries</span></a></h2>
<p>Let‚Äôs look in a bit more details at a worker log received from Logpush:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;DispatchNamespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;Entrypoint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;Event&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;RayID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87ed87f80cf22d84&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;Request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;URL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://test.workers.dev/&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;Method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;GET&quot;</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;Response&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;Status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;EventTimestampMs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1714878560011</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;EventType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fetch&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;Exceptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;Logs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;Level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;log&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;Message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-string">&quot;bar&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-string">&quot;foo&quot;</span>
      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;TimestampMs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1714878560016</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;Outcome&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ok&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;ScriptName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;ScriptTags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;ScriptVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;ID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1e7519b3-08e2-441d-ae10-7c8c6d3b7e17&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;Message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;Tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>And here‚Äôs the associated <a href="https://developers.cloudflare.com/logs/reference/log-fields/account/workers_trace_events/">docs</a>.</p>
<p>As we can see, we get one entry per ‚Äúevent‚Äù which in this case, is a
whole HTTP request completing.</p>
<p>Then for this particular HTTP request, we‚Äôve got an array of <code>Logs</code> that
the worker outputted during its runtime.</p>
<div class="note">
<p><strong>Note:</strong> interestingly, the above log <code>[&quot;bar&quot;, &quot;foo&quot;]</code> was generated
by:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>)
</code></pre>
<p>So it looks like the <code>Message</code> array is the reverse of the arguments
order that was passed to <code>console.log</code>.</p>
<p>Weird, but OK.</p>
</div>
<p>From there, it‚Äôs up to you how you translate that to Google Cloud
Logging entries. You could:</p>
<ol>
<li>Use the whole ‚Äúevent‚Äù as a single log entry and dig in the <code>Logs</code>
property to see the actual logs. Then you could set the log severity
based on the response status code, e.g. <code>ERROR</code> if the status is
<code>&gt;=400</code>.</li>
<li>Store the HTTP request ‚Äúevent‚Äù without logs in a separate entry, then
map the <code>Logs</code> array to individual log entries. Then you could map
the <code>Level</code> property to a log severity and have more granularity that
way.</li>
</ol>
<p>For this post, I‚Äôll take the lazy approach and just shove the whole
thing in the <code>jsonPayload</code>. üòÑ</p>
<p>Building off the <a href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#writing-the-worker">worker base from earlier</a>:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> entries = []

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> json <span class="hljs-keyword">of</span> logs) {
  <span class="hljs-keyword">if</span> (json.<span class="hljs-title function_">trim</span>() === <span class="hljs-string">&#x27;&#x27;</span>) {
    <span class="hljs-keyword">continue</span>
  }

  <span class="hljs-keyword">const</span> log = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json)

  entries.<span class="hljs-title function_">push</span>({
    <span class="hljs-attr">logName</span>: <span class="hljs-string">`projects/my-project-id/logs/my-log-id`</span>,
    <span class="hljs-attr">resource</span>: {
      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;generic_node&#x27;</span>,
      <span class="hljs-attr">labels</span>: {
        <span class="hljs-attr">namespace</span>: log.<span class="hljs-property">ScriptName</span>
      }
    },
    <span class="hljs-attr">severity</span>: log.<span class="hljs-property">Event</span>.<span class="hljs-property">Response</span>.<span class="hljs-property">Status</span> &gt;= <span class="hljs-number">400</span> ? <span class="hljs-string">&#x27;ERROR&#x27;</span> : <span class="hljs-string">&#x27;DEFAULT&#x27;</span>,
    <span class="hljs-attr">timestamp</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(log.<span class="hljs-property">EventTimestampMs</span>).<span class="hljs-title function_">toISOString</span>(),
    <span class="hljs-attr">jsonPayload</span>: log
  })
}
</code></pre>
<p>Then as we saw before, we can push those entries to Google Cloud
Logging:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
  <span class="hljs-string">`https://logging.googleapis.com/v2/entries:write`</span>,
  {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,
      <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${token}</span>`</span>
    },
    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({
      entries
    })
  }
)
</code></pre>
<h2 id="make-your-workers-use-logpush" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#make-your-workers-use-logpush"><span>Make your workers use Logpush!</span></a></h2>
<p>The final step is to enable Logpush on your workers. By default, even if
you have Logpush destinations enabled, they won‚Äôt be used unless
explicitly enabled at the worker level as well.</p>
<p>You can do that from the UI in your worker page, in <strong>Logs &gt; Event logs
Workers Logpush</strong>. If you use the Wrangler CLI, make sure to also set
<code>logpush = true</code> in your <code>wrangler.toml</code>!</p>
<h2 id="final-thoughts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/cloudflare-workers-logs-gcp-logging-logpush.html#final-thoughts"><span>Final thoughts</span></a></h2>
<p>Getting your Cloudflare Workers logs onto Google Cloud Logging is not
easy, and using a Cloudflare worker for the integration layer makes it
even harder, but it‚Äôs also kinda cool if you ask me. üòè</p>
<p>You should now have everything you need to implement that, from the
details of using the Cloudflare API to create Logpush jobs and tune it
in a way you can‚Äôt do from the UI, implementing a HTTP Logpush
destination with gzip support, parsing the Logpush payload, all the way
to translating it for Google Cloud Logging and push it using the raw
HTTP API in an environment where the official SDK is not supported.</p>
<p>I hope you learnt a thing or two thanks to this post, and that your logs
are being happily ingested now! ü´∂</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1787213611267674227">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Next.js: make Firebase Auth signInWithRedirect work with Safari</title>
    <link href="https://www.codejam.info/2024/05/nextjs-firebase-auth-safari.html" />
    <id>https://www.codejam.info/2024/05/nextjs-firebase-auth-safari.html</id>
    <updated>2024-05-04T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Had that
<a href="https://github.com/firebase/firebase-js-sdk/issues/6716">issue</a>
back in 2022 and it‚Äôs now a pretty
<a href="https://firebase.google.com/docs/auth/web/redirect-best-practices">well-understood</a>
problem, but better write about it later than never. üòÇ</p>
<p>Essentially, in Safari 16.1+ (and now Firefox 109+), there are more
aggressive restrictions on third-party cookies that mess with the way
Firebase Auth <code>signInWithRedirect</code> is implemented.</p>
<p>By default, your app could be running on <code>https://myapp.com</code> but
<code>signInWithRedirect</code> would redirect to
<code>https://myapp.firebaseapp.com/__/auth</code> and then back to your app in
order to handle the auth. The message passing with third-party cookies
between those two hosts is no longer possible in Safari, Firefox, and
soon Chrome.</p>
<p>Firebase docs now document <a href="https://firebase.google.com/docs/auth/web/redirect-best-practices">5 options</a>
to solve that.</p>
<ol>
<li>If you host your app on Firebase, make sure your Firebase config
<code>authDomain</code> point to your custom domain and not
<code>myapp.firebaseapp.com</code>. Because Firebase hosts your app, it will
automatically handle the special <code>__/auth</code> path.</li>
<li>Use <code>signInWithPopup</code> which doesn‚Äôt depend on third-party cookies.</li>
<li>If your frontend is not hosted on Firebase, proxy requests from
<code>https://myapp.com/__auth/*</code> to <code>https://myapp.firebaseapp.com/__/auth/*</code>
so there‚Äôs no cross-domain concerns.</li>
<li>Download the relevant files from
<code>https://myapp.firebaseapp.com/__/auth/*</code> and ‚Äúself-host‚Äù them on
your app.</li>
<li>Handle provider auth by yourself.</li>
</ol>
<p>In my case, I‚Äôm not hosting the website on Firebase, and I don‚Äôt want to
use <code>signInWithPupup</code>, so the proxy looks like a solid option.</p>
<p>In a Next.js app, it‚Äôs as easy as adding the following to
<code>next.config.js</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-keyword">async</span> rewrites () {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">beforeFiles</span>: [
        {
          <span class="hljs-attr">source</span>: <span class="hljs-string">&#x27;/__/auth/:path*&#x27;</span>,
          <span class="hljs-attr">destination</span>: <span class="hljs-string">`https://myapp.firebaseapp.com/__/auth/:path*`</span>
        }
      ]
    }
  }
}
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>PostgreSQL: swap tables with dependent views</title>
    <link href="https://www.codejam.info/2024/05/postgresql-swap-tables-dependent-views.html" />
    <id>https://www.codejam.info/2024/05/postgresql-swap-tables-dependent-views.html</id>
    <updated>2024-05-04T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Sometimes, you need to do some maintenance on a table, and doing a
<em>table swap</em> is a good tool to avoid downtime (e.g. if the maintenance
would lock aggressively and run for a long time). The idea is as
follows:</p>
<ol>
<li>Clone the source table.</li>
<li>Perform the maintenance.</li>
<li>Make sure they‚Äôre in sync if needs be.</li>
<li>When the maintenance is over, in a transaction, drop the source
table, and rename the clone to the original name.</li>
</ol>
<p>It can get a bit more complicated than that if you have foreign keys,
but I won‚Äôt cover that in this article.</p>
<p>However, another way it gets more complicated is when you have <em>views</em>
that depend on the table you want to swap:</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">BEGIN</span>;
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> example;
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> example_swap RENAME <span class="hljs-keyword">TO</span> example;
</code></pre>
<pre><code class="hljs">ERROR: cannot drop table example because other objects depend on it
DETAIL: view example_view depends on table example
</code></pre>
<p>In this case, we need to update <code>example_view</code> (and all other views that
depend on <code>example</code>) to reference the <code>example_swap</code> table before we
perform the actual swap.</p>
<p>If this is a one-off swap, fine, but if you‚Äôre doing the swap as part of
some automated maintenance task, that won‚Äôt do it.</p>
<h2 id="automatically-swapping-dependent-views" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/postgresql-swap-tables-dependent-views.html#automatically-swapping-dependent-views"><span>Automatically swapping dependent views</span></a></h2>
<p>In my case, the dependent views don‚Äôt change very often (if at all), so
I went with a static list of the views that depend on the table I need
to swap.</p>
<p>Then I use the following script to swap the views:</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">FUNCTION</span> pg_temp.replace_view_table(view_schema text, view_name text, old_table text, new_table text) <span class="hljs-keyword">RETURNS</span> void <span class="hljs-keyword">AS</span> $$
<span class="hljs-keyword">DECLARE</span>
    view_definition text;
<span class="hljs-keyword">BEGIN</span>
    <span class="hljs-keyword">SELECT</span> definition <span class="hljs-keyword">INTO</span> view_definition
    <span class="hljs-keyword">FROM</span> pg_views
    <span class="hljs-keyword">WHERE</span> schemaname <span class="hljs-operator">=</span> view_schema
    <span class="hljs-keyword">AND</span> viewname <span class="hljs-operator">=</span> view_name;

    view_definition :<span class="hljs-operator">=</span> REPLACE(view_definition, old_table, new_table);

    <span class="hljs-keyword">EXECUTE</span> <span class="hljs-string">&#x27;CREATE OR REPLACE VIEW &#x27;</span> <span class="hljs-operator">||</span> view_schema <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-operator">||</span> view_name <span class="hljs-operator">||</span> <span class="hljs-string">&#x27; AS &#x27;</span> <span class="hljs-operator">||</span> view_definition;
<span class="hljs-keyword">END</span>;
$$ <span class="hljs-keyword">LANGUAGE</span> plpgsql;
</code></pre>
<p>This function will redefine the view to point to the new swap table. It
does a basic search and replace in the SQL definition of the view, so
you need to make sure the table name doesn‚Äôt conflict with anything else
in there.</p>
<div class="note">
<p><strong>Note:</strong> I‚Äôm using <code>pg_temp</code> so that the function is local to the
current database connection. I don‚Äôt want to leave it around permanently
in that case.</p>
</div>
<p>You can now perform the swap as follows:</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">BEGIN</span>;
<span class="hljs-keyword">SELECT</span> pg_temp.replace_view_table(<span class="hljs-string">&#x27;public&#x27;</span>, <span class="hljs-string">&#x27;example_view&#x27;</span>, <span class="hljs-string">&#x27;example&#x27;</span>, <span class="hljs-string">&#x27;example_swap&#x27;</span>);
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> example;
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> example_swap RENAME <span class="hljs-keyword">TO</span> example;
<span class="hljs-keyword">COMMIT</span>;
</code></pre>
<p>The renaming of the table will automatically propagate to the dependent
views, they won‚Äôt keep referencing the now gone <code>example_swap</code> table,
they‚Äôll properly point to <code>example</code>! ü•≥</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Vercel monorepo: properly cache Yarn installs</title>
    <link href="https://www.codejam.info/2024/05/vercel-monorepo-cache-yarn-installs.html" />
    <id>https://www.codejam.info/2024/05/vercel-monorepo-cache-yarn-installs.html</id>
    <updated>2024-05-04T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>So you have a Vercel app that‚Äôs part of a monorepo. You may have noticed
that by default it installs the whole monorepo dependencies, and you may
have already <a href="https://www.codejam.info/2024/05/vercel-monorepo-single-project-dependencies-yarn.html">addressed that</a>!</p>
<p>But either way, you have another problem: Yarn downloads all your
dependencies on every single build. That‚Äôs pretty time consuming. It
doesn‚Äôt seem that dependencies are getting cached at all.</p>
<p>Vercel <a href="https://github.com/orgs/vercel/discussions/222#discussioncomment-2036114">recommends</a>
setting a <code>ENABLE_ROOT_PATH_BUILD_CACHE=1</code> environment variable to
<a href="https://vercel.com/changelog/faster-build-times-for-monorepos">make build times faster in monorepos</a>.</p>
<p>It sounds great, but in my experience it didn‚Äôt do anything, and I‚Äôm not
<a href="https://github.com/orgs/vercel/discussions/222#discussioncomment-2745510">the</a>
<a href="https://github.com/orgs/vercel/discussions/222#discussioncomment-5105483">only</a>
<a href="https://github.com/orgs/vercel/discussions/222#discussioncomment-7077684">one</a>.</p>
<p>It <a href="https://github.com/orgs/vercel/discussions/222#discussioncomment-5166537"><em>seems</em></a>
that regardless of <code>ENABLE_ROOT_PATH_BUILD_CACHE</code>, Vercel doesn‚Äôt
cache Yarn‚Äôs cache folder <code>.yarn/cache</code>, and Yarn 3 and greater will
download everything again if this directory is not present, regardless
of the state of <code>node_modules</code>.</p>
<p>So the key is to force Yarn‚Äôs cache folder to be inside a directory that
Vercel actually caches.</p>
<p>I <a href="https://github.com/orgs/vercel/discussions/222#discussioncomment-4295643">tried</a>
setting it inside the root <code>node_modules</code> by doing
<code>YARN_CACHE_FOLDER=../../node_modules/.yarn-cache yarn workspaces focus</code>,
which worked at first, but quickly encountered some
<a href="https://github.com/orgs/vercel/discussions/222#discussioncomment-5165657">issues</a>
when the cache was reused across different build states.</p>
<p>Luckily, thanks to <a href="https://github.com/vercel/turbo/issues/785#issuecomment-1060054306">this comment</a>
on a totally unrelated issue, I discovered I could put the cache in
<code>.next/cache</code> instead, and I never had issues since then!</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;installCommand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;YARN_CACHE_FOLDER=.next/cache/yarn-cache yarn workspaces focus&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Vercel monorepo: install only a single project dependencies with Yarn</title>
    <link href="https://www.codejam.info/2024/05/vercel-monorepo-single-project-dependencies-yarn.html" />
    <id>https://www.codejam.info/2024/05/vercel-monorepo-single-project-dependencies-yarn.html</id>
    <updated>2024-05-04T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If you have a Vercel app as part of a monorepo, it may bother you that
by default every build installs the whole monorepo dependencies.</p>
<p>If the Vercel app is the <em>main</em> project in the monorepo, it should go
unnoticed, but if you have a bunch of other packages whose dependencies
differ a lot from that of the Vercel app, then it will be very obvious
that you‚Äôre spending a lot of time installing useless stuff on every
build.</p>
<p>If you‚Äôre using a modern version of Yarn, aka not ‚ÄúYarn classic‚Äù, aka
Yarn ‚ÄúBerry‚Äù and later, which would be Yarn 4 today, then you can use
<a href="https://yarnpkg.com/cli/workspaces/focus"><code>yarn workspaces focus</code></a> to
do just that.</p>
<p><a href="https://v3.yarnpkg.com/cli/workspaces/focus">In Yarn 3</a>, you need to
install the <code>workspace-tools</code> plugin via <code>yarn plugin import workspace-tools</code> for this to work. In Yarn 4, the command is supported
out of the box.</p>
<p><code>yarn workspaces focus</code>, when run from inside a specific workspace
directory, will install that workspace dependencies, as well as the
dependencies of all the workspaces it depends on.</p>
<div class="note">
<p><strong>Note:</strong> if you‚Äôre using <code>nodeLinker: node-modules</code>, the <code>node_modules</code>
layout may differ a bit, especially the fact that packages from your
other workspaces are no longer installed at the root of the monorepo.</p>
<p>This will make it obvious if you‚Äôre implicitly depending on packages
that are part of your monorepo but not depended on by your specific
workspace.</p>
</div>
<p>In order to configure that on Vercel, you can configure the following in
<code>vercel.json</code>:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;installCommand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yarn workspaces focus&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> you‚Äôll probably want to mirror that configuration inside your
app settings in the Vercel dashboard in <strong>Settings &gt; Build &amp; Development
Settings &gt; Install Command</strong>, otherwise after you deploy, Vercel will
warn you that ‚Äúthe configuration of the current production deployment
differ from your current project settings‚Äù.</p>
</div>
<h2 id="making-it-work-with-vercel-cache" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/vercel-monorepo-single-project-dependencies-yarn.html#making-it-work-with-vercel-cache"><span>Making it work with Vercel cache</span></a></h2>
<p>There‚Äôs one more problem. Now you download only the dependencies of your
project, which is much better, but on subsequent builds, Yarn keeps
re-downloading everything again. It‚Äôs like there‚Äôs no cache!</p>
<p>That‚Äôs because Vercel and Yarn 3 and greater don‚Äôt play well together.
Yarn needs its <code>.yarn/cache</code> and Vercel doesn‚Äôt cache it between builds.</p>
<p>More details in <a href="https://www.codejam.info/2024/05/vercel-monorepo-cache-yarn-installs.html">this other post</a>. üòâ</p>
<p>TLDR: use the following command.</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;installCommand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;YARN_CACHE_FOLDER=.next/cache/yarn-cache yarn workspaces focus&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Swift: detect space (virtual desktop) changes</title>
    <link href="https://www.codejam.info/2024/05/swift-detect-space-virtual-desktop-changes.html" />
    <id>https://www.codejam.info/2024/05/swift-detect-space-virtual-desktop-changes.html</id>
    <updated>2024-05-04T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In a macOS app, you can
<a href="https://stackoverflow.com/a/56435288/4324668">get an event</a>
when <a href="https://stackoverflow.com/a/73548661/4324668">the active space changes</a>.
This happens e.g. if you have multiple virtual desktops, or full screen
windows, and you swap between ‚Äúspaces‚Äù, using the 3 fingers swipe on the
trackpad, or the <kbd>Ctrl</kbd> + <kbd>Left</kbd> and <kbd>Right</kbd>
shortcuts.</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObserver</span> {
  <span class="hljs-keyword">init</span>() {
    <span class="hljs-type">NSWorkspace</span>.shared.notificationCenter.addObserver(
      forName: <span class="hljs-type">NSWorkspace</span>.activeSpaceDidChangeNotification,
      object: <span class="hljs-literal">nil</span>,
      queue: <span class="hljs-literal">nil</span>,
      using: <span class="hljs-keyword">self</span>.spaceDidChange
    )
  }

  <span class="hljs-keyword">func</span> <span class="hljs-title function_">spaceDidChange</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">notification</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Desktop (space) changed&quot;</span>)
  }
}
</code></pre>
<p>Looks like there‚Äôs an alternative way to call it:</p>
<pre><code class="hljs language-swift">
<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObserver</span> {
  <span class="hljs-keyword">init</span>() {
    <span class="hljs-type">NSWorkspace</span>.shared.notificationCenter.addObserver(
      <span class="hljs-keyword">self</span>,
      selector: <span class="hljs-keyword">#selector</span>(<span class="hljs-keyword">self</span>.spaceDidChange),
      name: <span class="hljs-type">NSWorkspace</span>.activeSpaceDidChangeNotification,
      object: <span class="hljs-literal">nil</span>
    )
  }

  <span class="hljs-keyword">func</span> <span class="hljs-title function_">spaceDidChange</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">notification</span>: <span class="hljs-type">Notification</span>) {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Desktop (space) changed&quot;</span>)
  }
}
</code></pre>
<p>Whatever works for you!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1790906281487933916">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Use Gmail to send emails with a custom domain for free (secret trick) üòè</title>
    <link href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html" />
    <id>https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html</id>
    <updated>2024-05-03T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>So you want to use Gmail with a custom domain without paying a Google
Workspace subscription? Well, it‚Äôs possible!</p>
<p>The main tradeoff with that is that Gmail will
<a href="https://support.google.com/mail/answer/1311182">display</a>
your emails on the recipient side with a ‚Äúvia gmail.com‚Äù next to your
email.</p>
<figure class="center">
  <img alt="Sender card showing ‚Äúvia gmail.com‚Äù" srcset="../../img/2024/05/gmail/via.png 2x">
</figure>
<p>The second tradeoff is that while the email will appear with your custom
domain, the Gmail address that you use will also show in the source
headers of the email, so a technical user could find it.</p>
<p>The last tradeoff is that you won‚Äôt be able to sign your emails with
DKIM.</p>
<p>If you‚Äôre fine with that, then read on!</p>
<h2 id="configuring-gmail-smtp-as-an-external-smtp-in-gmail" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#configuring-gmail-smtp-as-an-external-smtp-in-gmail"><span>Configuring Gmail SMTP as an external SMTP in Gmail üôÉ</span></a></h2>
<p>Gmail allows you to add external SMTP servers, to send emails using
other email addresses that you own. You can find that in <strong>Settings &gt;
Accounts and Import &gt; Send mail as</strong>.</p>
<p>However, Gmail can itself be used as a SMTP server for <em>other apps</em> to
send emails via your Gmail account. That in itself is a bit of a hidden
trick, and is explained <a href="https://noted.lol/setup-gmail-smtp-sending-2023/">here</a>.</p>
<p>In short: <a href="https://myaccount.google.com/security">in your Google account security settings</a>,
in <strong>2-Step Verification &gt; App passwords</strong>, add a new app password.</p>
<figure class="center">
  <img alt="App passwords" srcset="../../img/2024/05/gmail/app-passwords.png 2x">
</figure>
<div class="note">
<p><strong>Note:</strong> that section may not show for you‚Ä¶ on my side it seems to
show only if I already have existing app passwords but it‚Äôs completely
missing otherwise!</p>
<p>Luckily you can still access it via its <a href="https://myaccount.google.com/apppasswords">direct URL</a>.</p>
</div>
<p>Then you can use the following SMTP settings:</p>
<pre><code class="hljs">Host: smtp.gmail.com
Port: 587
Encryption: TLS
User: you@gmail.com
Password: the password generated earlier
</code></pre>
<p>Where it gets funky is that you can use those SMTP settings
<a href="https://support.google.com/domains/answer/9437157">from inside Gmail itself</a>,
like if you were adding an external SMTP server!</p>
<p>Again, in <strong>Settings &gt; Accounts and Import &gt; Send mail as</strong>, you can
<strong>Add another email address</strong>. Use your custom email address in the
email field e.g. <code>you@yourdomain.com</code>. Then use the SMTP settings from
above. In the SMTP settings, the user needs to be your Gmail account,
e.g. <code>you@gmail.com</code>, and not <code>you@yourdomain.com</code>.</p>
<p>Gmail will then need to verify that you own that email by sending you a
confirmation email. Once the verification done, you can start sending
emails using your custom domain! (You may have to reload the page as I
did otherwise sending an email using the new address would hang
forever.)</p>
<h2 id="why-is-that-even-allowed" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#why-is-that-even-allowed"><span>Why is that even allowed?</span></a></h2>
<p>It‚Äôs nice that Gmail does that verification step to confirm you do
really own that address, because they definitely don‚Äôt want Gmail
servers to be used to send nonlegitimate emails. But not all providers
and SMTP servers are that cautious. If I can make Gmail servers send
emails on the behalf of my domain, what prevents anyone to do the same
with their own servers?</p>
<p>Well, I‚Äôm glad you asked. Turns out anyone can, unless you configure
DKIM and DMARC.</p>
<h3 id="dkim-and-dmarc" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#dkim-and-dmarc"><span>DKIM &amp; DMARC</span></a></h3>
<p>With DKIM, you generate a keypair, configure the private key on your
SMTP server to sign your emails, and configure the public key on your
DNS so that the servers receiving your emails can check the signature
against your public key.</p>
<p>DMARC is also configured on your DNS and lets you define rules about how
to deal with emails that don‚Äôt pass DKIM validation (ignore, mark as
spam, or block), as well as endpoints to receive reports (so you have a
way to know if you misconfigured something and your emails are getting
blocked).</p>
<h3 id="you-need-google-workspace-for-that" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#you-need-google-workspace-for-that"><span>You need Google Workspace for that</span></a></h3>
<p>However as I mentioned in the beginning, that nifty Gmail setup doesn‚Äôt
let you use DKIM. You can‚Äôt configure a private key on Gmail‚Äôs SMTP
servers for them to sign emails from your custom domain. That‚Äôs a Google
Workspace <a href="https://support.google.com/a/answer/180504">feature</a> that you
have to pay for.</p>
<p>So for this trick to work, you need to not have DMARC configured, or
have your DMARC configuration allow unsigned emails.</p>
<h3 id="what-about-spf" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#what-about-spf"><span>What about SPF?</span></a></h3>
<p>Interestingly, SPF doesn‚Äôt help with that situation, because it
<a href="https://postmarkapp.com/guides/spf#understanding-the-limitations-of-spf">acts on the <code>Return-Path</code></a>
and not the <code>From</code> header.</p>
<p>In the case of the Gmail setup above, the email headers would look like:</p>
<pre><code class="hljs">From: you@yourdomain.com
Return-Path: you@gmail.com
</code></pre>
<p>(As I mentioned above, that‚Äôs where the Gmail email appears in the
source and could be seen by technical users.)</p>
<p>SPF validates against the <code>Return-Path</code>, so it will check that the
server sending the email is indeed allowed to send emails on behalf of
<code>gmail.com</code>, which Gmail servers are. No fucks are given about
<code>yourdomain.com</code> at that point.</p>
<p>Because of this weakness in SPF, that‚Äôs why even if SPF validation
passes, Gmail displays the ‚Äúvia‚Äù label when the <code>From</code> and <code>Return-Path</code>
domains don‚Äôt match <a href="https://postmarkapp.com/blog/dkim-and-the-via-label-in-gmail">and the email is not signed with DKIM</a>.
This gives you a chance to know that the email is not authenticated and
sent through a third party.</p>
<h2 id="it-doesn-t-work-across-gmail-accounts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#it-doesn-t-work-across-gmail-accounts"><span>It doesn‚Äôt work across Gmail accounts</span></a></h2>
<p>One thing to note, which you‚Äôre probably not likely to run into, but
well, I do weird things sometimes, is that this setup <em>doesn‚Äôt work
across different Gmail accounts</em>.</p>
<p>By that, I mean that if you set up an ‚Äúapp password‚Äù on <code>you2@gmail.com</code>,
and you configure it as the outbound SMTP server for <code>you@gmail.com</code> to
send emails from <code>you@yourdomain.com</code>, <strong>it won‚Äôt work</strong>.</p>
<p>Your emails will be sent, but it won‚Äôt show the custom email domain, it
will show from <code>you2@gmail.com</code> instead. The trick only works when the
same Gmail account is used in both places.</p>
<p>If this section makes no sense to you, don‚Äôt worry about it. It‚Äôs quite
a niche setup to try, but I thought I‚Äôd mention anyway if it can be
useful to anyone trying to do the same thing.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/05/gmail-send-custom-domain-free.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>I hope this trick will be useful to you!</p>
<p>As far as I‚Äôm concerned, because I wanted to avoid the ‚Äúvia‚Äù label and I
wanted to be able to set up DKIM, I went with <a href="https://www.zoho.com/mail/">Zoho Mail</a>
(not affiliated). They try really hard to hide it, but they
<a href="https://help.zoho.com/portal/en/community/topic/free-plan-mail-accounts-details">actually</a>
have a <a href="https://www.zoho.com/mail/help/adminconsole/subscription.html#:~:text=under%20Zoho%20Workplace-,free%20plan,-%3A%20Using%20this%20plan">free plan</a>
with up to 5 GB of storage, which I don‚Äôt care about because I just
configure it as an outbound SMTP server that doesn‚Äôt store anything. üòÑ</p>
<p>Either way, you should now be all set to send emails with your own
domain. Enjoy! ü§ô</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1786553405659545823">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>gocryptfs on macOS (with and without macFUSE)</title>
    <link href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html" />
    <id>https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html</id>
    <updated>2024-04-26T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In this post I‚Äôm taking gocryptfs as an example because that‚Äôs what I
use to encrypt my <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">offsite backups</a>, but this
can probably be applied to doing anything FUSE-related on a Mac.</p>
<h2 id="gocryptfs-on-macos" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#gocryptfs-on-macos"><span>gocryptfs on macOS</span></a></h2>
<p>Using gocryptfs on macOS requires <a href="https://osxfuse.github.io/">macFUSE</a>.
macFUSE (previously known as <a href="https://web.archive.org/web/20130710220229/https://osxfuse.github.io/">OSXFUSE</a>
(previously known as <a href="https://web.archive.org/web/20130704045540/http://code.google.com/p/macfuse/">MacFUSE</a>
lol TIL)) is an awesome project that allows to mount
<a href="https://www.kernel.org/doc/html/next/filesystems/fuse.html">FUSE</a>
filesystems on macOS.</p>
<p>All it takes is:</p>
<pre><code class="hljs language-sh">brew --cask install macfuse

<span class="hljs-comment"># Do the reboot dance to allow the kernel extension (see &quot;concerns&quot; below)</span>

brew install gromgit/fuse/gocryptfs-mac

<span class="hljs-comment"># Not needed but might as well have SSHFS around too</span>
brew install gromgit/fuse/sshfs-mac
</code></pre>
<div class="note">
<p><strong>Note:</strong> gocryptfs and SSHFS can‚Äôt be installed from Homebrew‚Äôs main
registry anymore <a href="https://github.com/Homebrew/homebrew-core/pull/74812#issuecomment-826895526">because</a>
they depend on macFUSE, which is not open-source.</p>
<p>This is why the above command installs from <a href="https://github.com/gromgit/homebrew-fuse">this repository</a>,
which hosts the Homebrew formulas that depend on FUSE that were dropped
from Homebrew.</p>
</div>
<h2 id="concerns-about-macfuse" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#concerns-about-macfuse"><span>Concerns about macFUSE</span></a></h2>
<p>Sadly, macFUSE is not open-source. But at least it‚Äôs been updated
regularly for over 10 years, and keeps supporting the latest macOS
versions, so as long as this stays the case, I don‚Äôt mind using it.</p>
<p>That said, depending on macFUSE for a process as critical as my <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">offsite backups</a>
means that I will need to wait for it to support a new macOS version
before I deem to upgrade. Because it‚Äôs a kernel extension, it‚Äôs
not necessarily as easy to upgrade as other userland programs.</p>
<p>The other problem is that Apple <a href="https://developer.apple.com/support/kernel-extensions/">deprecated kernel extensions</a>
in 2020 with macOS Catalina (although they still work up to this date on
later versions). This is tracked in <a href="https://github.com/osxfuse/osxfuse/issues/987">this macFUSE issue</a>
but at the time of writing, Apple doesn‚Äôt provide APIs that allow to
implement macFUSE outside of a (now deprecated) kernel extension.</p>
<p>On top of that, going with the deprecation, Apple made it
<a href="https://github.com/osxfuse/osxfuse/issues/814">annoying</a>
to install kernel extensions on ARM Macs, by having to reboot in
recovery and enabling ‚Äúreduced security‚Äù mode (which is now <a href="https://support.apple.com/en-ca/guide/security/sec7d92dc49f/web">required</a>
for kernel extensions).</p>
<p>While macFUSE works now, and have been working for many years after the
original deprecation of kernel extensions by Apple, its future is still
somewhat unclear.</p>
<p>In future versions, will macOS drop some the APIs that macFUSE depend
on, without providing viable alternatives? Or will they entirely block
kernel extensions? And in the event they do provide viable alternative
APIs, how long will it take for macFUSE to support that new version?</p>
<p>Otherwise, is any of the alternatives like
<a href="https://www.fuse-t.org/">FUSE-T</a> gonna be solid enough by then? And
more importantly, is gocryptfs gonna work with those alternatives?
Actually, it won‚Äôt, because right now
<a href="https://github.com/hanwen/go-fuse">go-fuse</a> depends explicitly on
macFUSE.</p>
<p>So, I wasn‚Äôt ready to commit to that setup without having a somewhat
viable fallback.</p>
<h2 id="gocryptfs-on-macos-without-macfuse" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#gocryptfs-on-macos-without-macfuse"><span>gocryptfs on macOS without macFUSE</span></a></h2>
<p>While FUSE, as we saw, is a bit of a challenge on macOS, it‚Äôs perfectly
fine on Linux. gocryptfs and FUSE on Linux are not going anywhere.</p>
<p>Now, <a href="https://github.com/lima-vm/lima">Lima</a> is a pretty sweet way to
run a Linux VM on macOS. Similarly to <a href="https://learn.microsoft.com/en-us/windows/wsl/install">WSL</a>
on Windows, Lima can drop you in a Linux shell on your Mac, with
transparent access to your files.</p>
<p>This means you can easily install gocryptfs in that Lima environment,
and use it there. Assuming I want to get an encrypted mount of my home
directory (<code>~</code>):</p>
<pre><code class="hljs language-sh">brew install lima

limactl start

lima sudo apt install gocryptfs

<span class="hljs-comment"># Init in a temp dir because Lima can&#x27;t write to the host filesystem</span>
lima gocryptfs -init -reverse /tmp/lima

<span class="hljs-comment"># From the host move the config file in the right place</span>
<span class="hljs-built_in">mv</span> /tmp/lima/.gocryptfs.reverse.conf ~

lima <span class="hljs-built_in">mkdir</span> -p /tmp/encrypted
lima gocryptfs -reverse ~ /tmp/encrypted
lima rsync --archive /tmp/encrypted <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span>
</code></pre>
<div class="note">
<p><strong>Note:</strong> Depending on how you connect to <code>$DESTINATION</code>, you may want to
copy/link your SSH config and keys inside the Linux home of the VM
user. For example:</p>
<pre><code class="hljs language-sh">lima <span class="hljs-built_in">ln</span> -s ~/.ssh/{config,id_ed25519*} <span class="hljs-string">&quot;<span class="hljs-subst">$(lima sh -c &#x27;echo $HOME&#x27;)</span>/.ssh&quot;</span>
</code></pre>
</div>
<h2 id="decrypting-remote-files" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#decrypting-remote-files"><span>Decrypting remote files</span></a></h2>
<p>We can as easily do the opposite: use SSHFS to mount the remote
encrypted directory locally, then use gocryptfs to decrypt it and access
the files transparently.</p>
<pre><code class="hljs language-sh">lima sudo apt install sshfs

lima <span class="hljs-built_in">mkdir</span> -p /tmp/encrypted /tmp/decrypted
sshfs -o idmap=user <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> /tmp/encrypted
gocryptfs /tmp/encrypted /tmp/decrypted
</code></pre>
<p>At that point we can browse the decrypted tree from the Lima shell,
however we can‚Äôt access it from the host.</p>
<h2 id="accessing-decrypted-files-from-the-host" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html#accessing-decrypted-files-from-the-host"><span>Accessing decrypted files from the host</span></a></h2>
<p>If Lima can access files from the host, why can‚Äôt the host access files
from Lima?</p>
<p>Well, it comes down again to the ability to us FUSE. In order to access
host files, Lima starts a SSHFS server on the macOS host, and then
mounts it via SSHFS (FUSE) inside the Linux VM. That‚Äôs fine, because
Linux have absolutely no issue with FUSE stuff.</p>
<p>The other way around however, we would need FUSE on the macOS side in
order to mount a SSHFS server running inside the VM. No bueno, because
we‚Äôre doing all this jazz to avoid dealing with FUSE on macOS in the
first place. üò¨</p>
<p>So if we‚Äôre not gonna use FUSE, we need to fallback to another protocol
that‚Äôs better supported on Mac, like WebDAV.</p>
<p>The best way I‚Äôve found to do that is actually to use a simple, plain Go
WebDAV server such as <a href="https://taoofmac.com/space/til/2022/11/25/2200">this one</a>.</p>
<p>Just point the server to serve the decrypted mount point from earlier.</p>
<p>We also need to edit the Lima VM config in
<code>~/.lima/default/lima.yaml</code> to forward the port the WebDAV server is
listening on, so we can access it from the host system, such as:</p>
<pre><code class="hljs language-yaml"><span class="hljs-attr">portForwards:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-attr">guestPort:</span> <span class="hljs-number">1234</span>
</code></pre>
<p>Then on the macOS side we can do:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">mkdir</span> -p mountpoint
mount_webdav http://localhost:1234 mountpoint
</code></pre>
<p>Before going with the custom Go solution, I‚Äôve tried
<a href="https://wiki.gnome.org/phodav">ph·ªüdav</a>, because unlike most WebDAV
servers, it doesn‚Äôt require any kind of hairy configuration, and can be
spawned in a ad hoc way that just works. But the performance wasn‚Äôt as
good as the Go version. I‚Äôve also tried NFS, but that was much even
slower.</p>
<p>That said, don‚Äôt get your hopes too high. Even with the Go version, the
performance wasn‚Äôt super fast, but I believe it‚Äôs mainly because of
being run over SSHFS, so your mileage may vary depending on the network
bandwidth you have with your offsite server. But as a fallback, I‚Äôll
call it good enough anyway.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1784030029187588316">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Encrypted offsite backup system: syncing üì≤</title>
    <link href="https://www.codejam.info/2024/04/offsite-backup-sync.html" />
    <id>https://www.codejam.info/2024/04/offsite-backup-sync.html</id>
    <updated>2024-04-26T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<ol>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-storage.html">Encrypted offsite backup system: storage üíæ</a></li>
<li>Encrypted offsite backup system: syncing üì≤</li>
</ol>
</div>
<p>In <a href="https://www.codejam.info/2024/04/offsite-backup-storage.html">the previous post</a> I decided to go with
a <a href="https://www.hetzner.com/storage/storage-box/">Hetzner Storage Box</a>
for my backups.</p>
<p>It supports a number of file transfer protocols as well as first-class
support for backup protocols like BorgBackup and Restic, and of course,
the venerated rsync.</p>
<p>I ended up settling for rsync, because it‚Äôs a lower level option than
BorgBackup and Restic, that gives me a ton of freedom do design my
backup system the way I want.</p>
<p>rsync is also incredibly simple to use and understand, and at the end of
the day it just syncs files from one place to another. There‚Äôs nothing
specific to rsync in the layout of my backups, so I don‚Äôt actually
<em>need</em> rsync for the backups to be usable. That‚Äôs a massive advantage.</p>
<p>It comes to the cost of having to take care of everything else myself,
in particular encryption, as well as incremental backups (which I chose
to not implement, although it‚Äôs <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html#bonus-implementing-incremental-backups">possible</a>).</p>
<h2 id="other-tools-i-tried" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#other-tools-i-tried"><span>Other tools I tried</span></a></h2>
<p>I also tried BorgBackup, Restic, Kopia, Duplicaciy, Duplicity.</p>
<p>Having chosen Hetzner as a backend, Kopia, Duplicacy and Duplicity
didn‚Äôt have native support so they were reduced to syncing over SFTP
which put them at a disadvantaged for speed compared to the other
options that had native support on Hetzner.</p>
<p>On top of that here‚Äôs a few notes of what turned me off for each of
those:</p>
<ul>
<li><strong>Kopia:</strong> I encountered issues setting it up with SFTP.</li>
<li><strong>Duplicacy:</strong>
<ul>
<li>Setting up the CLI wasn‚Äôt straightforward, had to resort to finding
info in some random forum posts.</li>
<li>Doesn‚Äôt support SSH aliases.</li>
<li>No way to configure a SSH key without being prompted every time.</li>
<li>May ask for SSH password / key in the middle of a backup so you
can‚Äôt just walk away.</li>
</ul>
</li>
<li><strong>Duplicity:</strong> can‚Äôt easily garbage collect old backups because they
all depend on each other, so it makes regaining space pretty cumbersome.</li>
<li><strong>Restic:</strong> was pretty impressed overall but rsync was significantly
faster despite both having native support on Hetzner.</li>
<li><strong>BorgBackup:</strong> I definitely tried it back then but it doesn‚Äôt seem
that I took any notes like for the other ones‚Ä¶ maybe I should try it
again at some point? With rsync it‚Äôs probably the one that would fit
the best my use case, but I guess I like how transparent is rsync.</li>
</ul>
<h2 id="syncing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#syncing"><span>Syncing</span></a></h2>
<p>The actual syncing part is super easy. I‚Äôm just going with a basic:</p>
<pre><code class="hljs language-sh">rsync <span class="hljs-string">&quot;<span class="hljs-variable">$SOURCE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> --archive --delete
</code></pre>
<p>I‚Äôm also adding <code>--no-specials</code> and <code>--no-devices</code> if I‚Äôm backing up a
directory that could have some of those special handles.</p>
<p>I add <code>--exclude-from exclude-file</code> to ignore a bunch of patterns that
don‚Äôt need to be backed up.</p>
<p>And finally, I‚Äôm customizing the output with <code>--itemize-changes</code> and
<code>--info=progress2</code>.</p>
<h2 id="encryption" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#encryption"><span>Encryption</span></a></h2>
<p>That‚Äôs where things get spicy, because rsync doesn‚Äôt do encryption
itself.</p>
<p>I found a blog post about <a href="https://www.gamecreatures.com/blog/2016/06/19/encrypted-offsite-rsync-backups/">encrypted offsite backups with rsync</a>
which is exactly what I was trying to do. It uses
<a href="https://vgough.github.io/encfs/">EncFS</a> as the encryption layer.</p>
<p>I ended up using <a href="https://nuetzlich.net/gocryptfs/">gocryptfs</a> on my
side, mainly because it‚Äôs still actively maintained.</p>
<p>gocryptfs allows you to have an encrypted directory on disk, and mount
the decrypted version to use it. But they also have a ‚Äúreverse‚Äù mode,
where you can mount a directory into its encrypted representation.
That‚Äôs what I need. (I just want the encryption for syncing to my remote
storage, the data is already encrypted on disk at a lower level
otherwise.)</p>
<p>With gocryptfs, that looks like:</p>
<pre><code class="hljs language-sh">gocryptfs -reverse -init /path/to/directory
gocryptfs -reverse /path/to/directory /path/to/mount
</code></pre>
<p>From there, I can apply my rsync command to sync the encrypted
<code>/path/to/mount</code> with my Hetzner server!</p>
<p>Not that complicated after all.</p>
<p>Well‚Ä¶ except if you‚Äôre running macOS. This rabbit hole is deep enough
that it <a href="https://www.codejam.info/2024/04/gocryptfs-macos-macfuse.html">deserves its own blog post</a>. üôÉ</p>
<h2 id="making-the-encrypted-rsync-output-intelligible" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#making-the-encrypted-rsync-output-intelligible"><span>Making the encrypted rsync output intelligible</span></a></h2>
<p>Now we‚Äôre syncing an encrypted directory, the output of rsync only shows
the encrypted paths. That‚Äôs OK, but I don‚Äôt like it. I wish I saw the
<em>actual</em> files it was transferring, so that if one of them takes a long
time, I can instantly identify if it‚Äôs a file that should or not be
included in the backup anyway. Maybe just add it to my ignore list.</p>
<p>Luckily, gocryptfs provides an API to translated encrypted paths to
their plaintext version!</p>
<p>This comes through a separate util, <code>gocryptfs-xray</code>, that‚Äôs not
included in the Homebrew version, so we need to compile gocryptfs from
source:</p>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> https://github.com/rfjakob/gocryptfs

<span class="hljs-comment"># Checkout the version you actually want, or YOLO and build from `main`</span>
<span class="hljs-comment"># git checkout v2.4.0</span>

./build-without-openssl
</code></pre>
<p>Then make sure to add the <code>gocryptfs</code> and <code>gocryptfs-xray</code> binaries
somewhere that‚Äôs in your <code>PATH</code> (or just run them from there if you
prefer).</p>
<p><code>gocryptfs-xray</code> needs access to the gocryptfs <code>ctlsock</code>, a socket to
communicate with the gocryptfs process. You get one by adding <code>-ctlsock /path/to/ctlsock</code> to your <code>gocryptfs</code> invocation.</p>
<p>Then, we can parse the rsync output and translate any encrypted path in
its decrypted version. I made a script for that:
<a href="https://github.com/valeriangalliat/gocryptfs-rsync/blob/master/gocryptfs-rsync-pretty"><code>gocryptfs-rsync-pretty</code></a>.
Just pipe the rsync output to it:</p>
<pre><code class="hljs language-sh">rsync ... 2&gt;&amp;1 | gocryptfs-rsync-pretty /path/to/ctlsock /path/to/mount
</code></pre>
<h2 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#putting-it-all-together"><span>Putting it all together</span></a></h2>
<p>We now have a functional encrypted offsite backup system! It‚Äôs a
combination of:</p>
<ul>
<li>gocryptfs to mount an encrypted representation of a directory,</li>
<li>rsync to sync it to a remote host,</li>
<li>a small script to make the rsync output intelligible.</li>
</ul>
<p>In <a href="https://github.com/valeriangalliat/gocryptfs-rsync">this repo</a> you
can find the code I use to combine those 3 elements.</p>
<p>It‚Äôs not much more than:</p>
<pre><code class="hljs language-sh">gocryptfs -reverse -ctlsock /path/to/ctlsock /path/to/directory /path/to/mount

rsync <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> /path/to/mount <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> 2&gt;&amp;1 \
    | gocryptfs-rsync-pretty /path/to/ctlsock /path/to/mount
</code></pre>
<h2 id="bonus-implementing-incremental-backups" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#bonus-implementing-incremental-backups"><span>Bonus: implementing incremental backups</span></a></h2>
<p>In my solution above, the backups are not incremental. I‚Äôm just syncing
the <em>current</em> state to the remote host, but I keep no history of the
previous ‚Äúsnapshots‚Äù. This could be an issue, for example, if I end up
running a backup <em>after</em> my systems gets compromised or after I lose
some data, then my backup is useless.</p>
<p>This is fine with me because I also do incremental backups that just
don‚Äôt happen to be offsite. I guess I‚Äôm not edging against my house
burning down or getting my computers and drives robbed, <em>while at the
same time</em> having experienced some kind of data loss that I‚Äôve
accidentally propagated to my offsite server. üôÉ</p>
<p>Anyway, in order to add incremental backups to the equation, we could
use <a href="https://github.com/cytopia/linux-timemachine">Linux Time Machine</a>
(which also works very well on Mac despite the name üòÅ).</p>
<p>It works very much like macOS Time Machine, pretty much down to the
underlying way the incremental backups are implemented on the
filesystem: each ‚Äúsnapshot‚Äù gets its own directory, but then files that
didn‚Äôt change since the latest snapshot are just hardlinked to avoid
duplication! So essentially, only the files that changed get stored, but
you still have a full picture of the snapshot because the other files
are hardlinked in the right place!</p>
<p>This is genius, and turns out this is provided by rsync through the
<code>--link-dest</code> option. Linux Time Machine adds a nice, easy to use
frontend to it which is very appreciated.</p>
<p>Building off our work from above, we can simply replace the <code>rsync</code>
command by <code>timemachine</code>:</p>
<pre><code class="hljs language-sh">gocryptfs -reverse -ctlsock /path/to/ctlsock /path/to/directory /path/to/mount

timemachine <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> /path/to/mount <span class="hljs-string">&quot;<span class="hljs-variable">$DESTINATION</span>&quot;</span> 2&gt;&amp;1 \
    | gocryptfs-rsync-pretty /path/to/ctlsock /path/to/mount
</code></pre>
<p>This is possible because hard links are supported by Hetzner, and thanks
to native rsync support, they can be preserved along the way!</p>
<div class="note">
<p><strong>Note:</strong> I haven‚Äôt tested <code>gocryptfs-rsync-pretty</code> with the output of
<code>timemachine</code>, but because <code>timemachine</code> wraps rsync, it should work out
of the box, or require only basic tuning of the underlying rsync output.
Let me know if you try it!</p>
</div>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-sync.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>Despite only writing this today, I‚Äôve been using this system for <em>two
years</em> already! (Time flies omg.)</p>
<p>The commits I‚Äôve added over time were mostly to refine the rsync output
parsing, so looks like the core of the script was pretty solid from the
get go.</p>
<p>That setup survived at least two macOS upgrades, and I‚Äôve been using it
on my Linux machines as well.</p>
<p>So feel free to use <a href="https://github.com/valeriangalliat/gocryptfs-rsync">gocryptfs-rsync</a>
for your own backups, or use it as an inspiration to build your own
backup system! Cheers. ‚úåÔ∏è</p>
<div class="note">
<ol>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-storage.html">Encrypted offsite backup system: storage üíæ</a></li>
<li>Encrypted offsite backup system: syncing üì≤</li>
</ol>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1784030027967062106">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Encrypted offsite backup system: storage üíæ</title>
    <link href="https://www.codejam.info/2024/04/offsite-backup-storage.html" />
    <id>https://www.codejam.info/2024/04/offsite-backup-storage.html</id>
    <updated>2024-04-26T07:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<ol>
<li>Encrypted offsite backup system: storage üíæ</li>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">Encrypted offsite backup system: syncing üì≤</a></li>
</ol>
</div>
<p><strong>Threat model:</strong> my house burns. Or someone breaks in and takes my
computers and hard drives. Everything‚Äôs encrypted so I‚Äôm not so worried
about them gaining access to my data but I‚Äôm concerned about losing my
data.<br>
<strong>Solution:</strong> offsite backup system.</p>
<p><strong>But then‚Ä¶ threat model:</strong> breach in the company / data center that hosts
my offsite backups, from a third-party attack or from maleovlent
employees.<br>
<strong>Solution:</strong> <em>end-to-end encrypted</em> offsite backup system.</p>
<h2 id="requirements" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#requirements"><span>Requirements</span></a></h2>
<p>I have over 4 TB of data and I want a bit of buffer, so I‚Äôm only gonna
consider solutions for 5 TB of storage.</p>
<h2 id="comparison" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#comparison"><span>Comparison</span></a></h2>
<p>Let‚Äôs start with everything I considered for offsite storage. If you
know better options, let me know!</p>
<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Plan</th>
      <th>Storage</th>
      <th>Monthly price (billed annually)</th>
      <th>Monthly price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://www.sync.com/pricing/">Sync</a></td>
      <td>Teams+ Unlimited</td>
      <td>6 TB</td>
      <td>20 CAD</td>
      <td>24 CAD</td>
    </tr>
    <tr>
      <td><a href="https://web.archive.org/web/20221101213929/https://www.dropbox.com/plans"><s>Dropbox</s></a></td>
      <td><s>Standard</s></td>
      <td><s>5 TB</s></td>
      <td><s>15 USD</s></td>
      <td><s>18 USD</s></td>
    </tr>
    <tr>
      <td colspan="5">
        <em>Discontinued.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://www.dropbox.com/plans">Dropbox</a></td>
      <td>Business</td>
      <td>9 TB</td>
      <td>26 CAD</td>
      <td>31 CAD</td>
    </tr>
    <tr>
      <td><a href="https://one.google.com/about/plans"><s>Google One</s></a></td>
      <td><s>5 TB</s></td>
      <td><s>5 TB</s></td>
      <td><s>20.83 USD</s></td>
      <td><s>24.99 USD</s></td>
    </tr>
    <tr>
    <tr>
      <td colspan="5">
        <em>Discontinued. Google One doesn't offer more than 2 TB now so
        it's not an option anymore.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://learn.microsoft.com/en-us/answers/questions/577943/how-to-get-unlimited-onedrive-storage-for-my-enter"><s>OneDrive</s></a></td>
      <td><s>Business (Plan 2)</s></td>
      <td><s>Unlimited</s></td>
      <td><s>65 USD</s></td>
      <td></td>
    </tr>
    <tr>
      <td colspan="5">
        <em>Discontinued. OneDrive only offers up to 1 TB now. They used
        to have unlimited storage if you have 5 or more users with
        "Business (Plan 2)" at 13 USD per user.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://www.box.com/en-ca/pricing">Box Drive</a></td>
      <td>Business</td>
      <td>Unlimited</td>
      <td>63 CAD</td>
      <td>84 CAD</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>21/28 CAD per user per month but need at least 3 users.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://mega.io/pricing">MEGA</a></td>
      <td>Pro II</td>
      <td>8 TB</td>
      <td>16.66 EUR</td>
      <td>19.99 EUR</td>
    </tr>
    <tr>
      <td colspan="2"><a href="https://www.backblaze.com/cloud-storage/pricing">Backblaze B2</a></td>
      <td>5 TB</td>
      <td colspan="2">30 USD*</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>*And $0.01/GB to access the data, so that would be 50 USD
        for me to download my entire 5 TB backup once.</em>
      </td>
    </tr>
    <tr>
      <td colspan="2"><a href="https://www.backblaze.com/cloud-backup/pricing">Backblaze Computer Backup</a></td>
      <td>Unlimited</td>
      <td>8.25 USD*</td>
      <td>9 USD*</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>*Per machine. And can only use through their own proprietary
        backup software with serious limitations.</em>
      </td>
    </tr>
    <tr>
      <td colspan="2"><a href="https://www.linode.com/products/object-storage/">Linode Object Storage</a></td>
      <td>5 TB</td>
      <td colspan="2">100 USD*</td>
    </tr>
    <tr>
      <td colspan="5">
        <em>*1 TB outbound transfer included, after that $0.005/GB, so
        that would be 20 USD for me to download my entire 5 TB backup
        once.</em>
      </td>
    </tr>
    <tr>
      <td><a href="https://www.apple.com/ca/icloud/#compare-plans">iCloud</a></td>
      <td>6 TB</td>
      <td>6 TB</td>
      <td colspan="2">39.99 CAD</td>
    </tr>
    <tr>
      <td><a href="https://www.hetzner.com/storage/storage-box/">Hetzner Storage Box</a></td>
      <td>BX21</td>
      <td>5 TB</td>
      <td colspan="2">10.90 EUR</td>
    </tr>
    <tr>
      <td><a href="https://www.hetzner.com/storage/storage-share/">Hetzner Storage Share</a></td>
      <td>NX21</td>
      <td>5 TB</td>
      <td colspan="2">14.19 EUR</td>
    </tr>
  </tbody>
</table>
<h2 id="diving-in" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#diving-in"><span>Diving in</span></a></h2>
<h3 id="backblaze-computer-backup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#backblaze-computer-backup"><span>Backblaze Computer Backup</span></a></h3>
<p>Backblaze Computer Backup is incredibly cheap with 9 USD per month for
<em>unlimited storage</em>, but keep in mind the price is per machine, and
everything needs to go through their own proprietary backup software. No
Linux support, no way to customize the backup strategy, no way to script
it. The software needs to call home at least once a month otherwise data
gets deleted.</p>
<p>While the backups are encrypted, by default <a href="https://help.backblaze.com/hc/en-us/articles/217664688-Can-you-tell-me-more-about-the-encryption-Backblaze-uses">Backblaze can decrypt them</a>,
however they also provide a way to make the backups end-to-end
encrypted, which is nice.</p>
<p>So if you‚Äôre fine with the terms and limitations of their backup
software, then it‚Äôs by far the cheapest option and it seems convenient
to use.</p>
<h3 id="box-drive" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#box-drive"><span>Box Drive</span></a></h3>
<p>Another ‚Äúunlimited storage‚Äù option without as many limitations as
Backblaze Computer Backup is Box Drive. It‚Äôs 63 CAD per month
though so quite a lot pricier. But if you have <em>a lot</em> of data and want
more control over it, that may be very well worth it.</p>
<p>It‚Äôs even cheaper than the unlimited OneDrive storage that Microsoft was
offering at some point for 65 USD per month.</p>
<p>Box Drive comes with a decent web interface as well as a native app for
macOS, Windows, iPhone and Android.</p>
<p>However keep in mind that it‚Äôs gonna behave like Dropbox and iCloud:
it‚Äôs great as a virtual remote drive that has a local copy of some or
all files, but it may not be what you want from a backup solution.</p>
<div class="note">
<p><strong>Note:</strong> on macOS, the app uses the <a href="https://developer.apple.com/documentation/fileprovider/nonreplicated_file_provider_extension">Nonreplicated File Provider extension</a>
to provide the syncing.</p>
</div>
<p>As far as encryption goes, it doesn‚Äôt seem that anything prevents Box to
access your data, so it‚Äôs something you have to be comfortable with.</p>
<h3 id="mega" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#mega"><span>MEGA</span></a></h3>
<p>Pretty decent option at 16.66 EUR for 8 TB. Like the above, it comes
with an app, and it also supports Linux on top of macOS and Windows!</p>
<p>It‚Äôs basically a mix of the 2 products mentioned above. You can back up
entire devices to it, but also use it as a shared drive, so that‚Äôs
pretty neat.</p>
<p>However unlike the Box Drive app, all the files in the synced folder
must be present locally. There‚Äôs no way to have synced files being on
the server only and being downloaded on demand only when you need them
(and delete just the local copy afterwards).</p>
<div class="note">
<p><strong>Note:</strong> it seems that MEGA uses its own watching and syncing
algorithm, and they only use macOS‚Äôs <a href="https://developer.apple.com/documentation/findersync">Finder Sync API</a>
in order to provide feedback in the Finder UI about whether files are
synced or not.</p>
</div>
<p>So like for Box Drive, if you like the way it behaves, it‚Äôs a pretty
cheap and convenient solution. If you want more flexibility, they do
offer a SDK but you‚Äôll have to write C++. There‚Äôs also a
<a href="https://rclone.org/mega/">Rclone integration for MEGA</a> so that‚Äôs neat
to interact with the storage from the CLI and make something more custom
with it.</p>
<p>In terms of encryption, MEGA seems pretty solid because everything is
end-to-end encrypted with a key derived from your account password. If
you forget your password and recovery key, you‚Äôre out of luck, but that
also means MEGA can‚Äôt read your data. Thumbs up for me.</p>
<h3 id="hetzner-storage-box" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#hetzner-storage-box"><span>Hetzner Storage Box</span></a></h3>
<p>At 10.90 EUR for 5 TB, it‚Äôs the cheapest option here to be <em>actually</em>
flexible. You don‚Äôt need a proprietary app to use it. Instead it
supports the following <a href="https://www.hetzner.com/storage/storage-box/">protocols</a>:</p>
<ul>
<li>FTP</li>
<li>FTPS</li>
<li>SFTP</li>
<li>SCP</li>
<li>Samba/CIFS</li>
<li>BorgBackup over SSH</li>
<li>Restic over SSH</li>
<li>Rclone over SFTP</li>
<li>rsync over SSH</li>
<li>HTTPS</li>
<li>WebDAV</li>
</ul>
<p>This is quite impressive, as it supports a number of popular backup
software, so unlike the options above, you don‚Äôt need to use a backup
or syncing software made by the storage provider. Hetzner only does the
storage (and does it well), and you can use the backup or syncing
software of your choice, whose only focus is to do just that (and do it
well). Now we‚Äôre talking.</p>
<p>Most of those protocols are gonna be useful for listing, retrieving and
uploading files, and the few options ‚Äúover SSH‚Äù are gonna be
particularly performant at incremental backups.</p>
<p>While backup and syncing software often have an option to working over
SFTP or similar, it‚Äôs usually pretty inefficient when you need to diff
the local and remote state in order to upload only what changed.</p>
<p>However, when paired with a companion command on the server, like is the
case with BorgBackup, Restic and rsync above, the process can be much,
much more efficient, because the client/server programs can exchange
just the minimum amount of metadata in order to determine what changed
and what needs to be transferred.</p>
<p><strong>This makes the Hetzner Storage Box a killer option if you‚Äôre gonna use
one of those natively supported options above.</strong></p>
<p>The encryption is gonna depend on the protocol you use. The files are
obviously stored encrypted on disk, and everything but FTP will transfer
the files encrypted, however only BorgBackup and Restic actually perform
end-to-end encryption of the files (meaning that Hetzner can‚Äôt decrypt
them).</p>
<p>If you want to use any other protocol and also want end-to-end
encryption, you can still implement it yourself as another layer. See
more <a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">in the next article</a>. üòâ</p>
<h3 id="hetzner-storage-share" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#hetzner-storage-share"><span>Hetzner Storage Share</span></a></h3>
<p>A bit pricier than the Storage Box at 14.19 EUR for 5 TB, and the use
case is a bit different. It‚Äôs a hosted
<a href="https://nextcloud.com/">Nextcloud</a> instance.</p>
<p>They have an app for Windows, macOS and Linux, as well as mobile apps. I
only tried the macOS app and it acts as a shared folder just like
Dropbox would.</p>
<p>At the time of writing, the desktop app will download all the files
locally, <a href="https://help.nextcloud.com/t/mac-desktop-client-dont-download-files-only-show-the-files/101987/4">there‚Äôs no way</a>
to browse the remote data without downloading everything locally first.
For me and my 5 TB, that‚Äôs a problem.</p>
<p>Also keep in mind Nextcloud <a href="https://help.nextcloud.com/t/end-to-end-encryption-zero-knowledge/172209">doesn‚Äôt support end-to-end encryption</a>.</p>
<p>So the Hetzner Storage Share looks like a pretty sweet option with a
decent price if you want a synced folder, but it doesn‚Äôt cut it for my
backups.</p>
<h2 id="bonus-why-not-gcp-and-aws" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#bonus-why-not-gcp-and-aws"><span>Bonus: why not GCP and AWS?</span></a></h2>
<p><a href="https://cloud.google.com/">Google Cloud Platform</a> and <a href="https://aws.amazon.com/">Amazon Web Services</a>
both offer solutions that could help. So you may wonder why I‚Äôm not
considering a pure cloud storage service like <a href="https://cloud.google.com/storage">GCS</a>
or <a href="https://aws.amazon.com/s3/">S3</a>, or alternatively, a VM with
persistent disk on <a href="https://cloud.google.com/products/compute">GCE</a> or
<a href="https://aws.amazon.com/ec2/">EC2</a>.</p>
<p>Well, I did consider those option, that‚Äôs actually the one I
professionally work with most of the time, but they definitely did not
fit the bill for my personal usage.</p>
<h3 id="gcs-s3" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#gcs-s3"><span>GCS/S3</span></a></h3>
<p>As usual with cloud computing, the pricing is hard to predict. Not
because the pricing model is unpredictable <em>per se</em> (although it‚Äôs
complex, it‚Äôs also relatively clear). But because my potential usage is
unpredictable without gathering data by running real-world simulations.</p>
<p>GCS and S3 charge not only for the amount of data stored, but also the
read/write operations and download bandwidth.</p>
<p>Depending on the selected storage class, either the storage itself is
expensive but reading/writing and downloading are relatively cheap, or
the storage is cheap but reading/writing and downloading gets much, much
more expensive.</p>
<p>GCS and S3 are pretty similar for this in pricing. So for my 5 TB, I
could either:</p>
<ul>
<li>Pay $100 per month for storage and spend $15 to download my entire backup.</li>
<li>Pay $50 per month for storage and spend $50 to download my entire backup.</li>
<li>Pay $20 per month for storage and spend $200 to download my entire backup.</li>
</ul>
<p>And it‚Äôs not a precise number because it‚Äôs really, really hard to
predict how many operations I will actually use. And it would be totally
possible that I‚Äôm missing some egress bandwidth fee on top of what‚Äôs
already factored in the data retrieval fees, and it could easily
surprise bump the bill by something like $400 in case of downloading the
entire backup.</p>
<p>Not down to take the risk.</p>
<h3 id="gce-ec2-vm" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#gce-ec2-vm"><span>GCE/EC2 VM</span></a></h3>
<p>On GCE, it would cost ~$200 per month for a 5 TB HDD. Downloading the
entire backup would cost $400.</p>
<p>On EC2, that would be ~$80 per month for a 5 TB HDD, and $500 to
download the entire backup.</p>
<p>Not in my price range <em>at all</em>.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/04/offsite-backup-storage.html#conclusion"><span>Conclusion</span></a></h2>
<p>The <a href="https://www.codejam.info/2024/04/offsite-backup-storage.html#hetzner-storage-box">Hetzner Storage Box</a> was by far the best
option for me. It‚Äôs pretty cheap, and offers a ton of flexibility with
SFTP access as well as support for a number of protocols like rsync,
Restic and BorgBackup. End-to-end encryption comes for free with Restic
and BorgBackup, and can still be implemented ‚Äúmanually‚Äù otherwise.</p>
<p>All the other storage providers require a specific app that can‚Äôt be
customized to my needs, except for the <a href="https://www.codejam.info/2024/04/offsite-backup-storage.html#bonus-why-not-gcp-and-aws">cloud providers</a>
that are even more flexible but also insanely more expensive (and whose
pricing model can easily result in very costly surprises).</p>
<p>Also except for MEGA and Backblaze Computer Backup (as an option), the
other solutions don‚Äôt support end-to-end encryption.</p>
<p>So I subscribed for a 5 TB Hetzner Storage Box. Now, let‚Äôs see how I
<a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">implemented end-to-end encryption and syncing</a>
with it!</p>
<div class="note">
<ol>
<li>Encrypted offsite backup system: storage üíæ</li>
<li><a href="https://www.codejam.info/2024/04/offsite-backup-sync.html">Encrypted offsite backup system: syncing üì≤</a></li>
</ol>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1784030026759110978">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Duplicated ESM and CJS package in bundle</title>
    <link href="https://www.codejam.info/2024/02/esm-cjs-dupe.html" />
    <id>https://www.codejam.info/2024/02/esm-cjs-dupe.html</id>
    <updated>2024-02-18T08:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<p><strong>Note:</strong> for context we‚Äôre in a Next.js TypeScript project, using
Webpack as a bundler, but I could see this happening with similar tools.</p>
<p>The problem occurred with the <a href="https://www.npmjs.com/package/firebase"><code>firebase</code></a>
package, but again that could happen with other packages.</p>
</div>
<p>So we upgrade the Firebase SDK by a few minor versions, and suddenly,
our JS bundle size blows up. Like, 50 kB more of (gzipped) JS shipped on
every page. Not good.</p>
<p>Luckily we have <a href="https://github.com/hashicorp/nextjs-bundle-analysis">tests</a>
to catch this kind of thing.</p>
<p>Further <a href="https://nextjs.org/docs/app/building-your-application/optimizing/bundle-analyzer">investigation</a>
shown that we were shipping <code>@firebase/app</code> and <code>@firebase/auth</code> twice. ü§î</p>
<h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#the-problem"><span>The problem</span></a></h2>
<p>We use <a href="https://github.com/gladly-team/next-firebase-auth">next-firebase-auth</a>
to integrate Firebase Auth with Next.js. next-firebase-auth imports
specifically <code>firebase/app</code> and <code>firebase/auth</code>.</p>
<p>In our own code, we use <code>import</code> to import our dependencies:</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">import</span> { getApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/app&#x27;</span>
<span class="hljs-keyword">import</span> { getAuth } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/auth&#x27;</span>
</code></pre>
<p>But next-firebase-auth, while they do the same in their
<a href="https://github.com/gladly-team/next-firebase-auth/blob/d51bf07eecf727ef3df45587e4008551b0cb4803/src/initFirebaseClientSDK.ts#L1-L2">TypeScript source code</a>,
is actually bundled down (also with Webpack) to a <a href="https://socket.dev/npm/package/next-firebase-auth/files/1.0.2/build/index.browser.js">CJS file</a>.</p>
<p>The code is minified, but you can see it uses <code>require</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-number">324</span>:<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>{e.<span class="hljs-property">exports</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;firebase/app&quot;</span>)},<span class="hljs-number">610</span>:<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>{e.<span class="hljs-property">exports</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;firebase/auth&quot;</span>)}
</code></pre>
<p>The problem is that the version of the Firebase SDK we upgraded to
contains <a href="https://github.com/firebase/firebase-js-sdk/pull/6981">this PR</a>,
that makes <code>@firebase/auth</code> export both ESM and CJS variants of their
<code>browser</code> bundle, whereas before they only exposed the ESM version for
the browser.</p>
<p>Concretely, this means that before this PR, the <code>package.json</code> of
<code>@firebase/auth</code> looked like:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;exports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;.&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/esm2017/index.js&quot;</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>And after:</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;exports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;.&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/esm2017/index.js&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;require&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/browser-cjs/index.js&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;import&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/esm2017/index.js&quot;</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>Because initially there was no <code>browser</code> entry, Webpack picked the
<code>default</code> value for both <code>import</code> and <code>require</code>, which turns out to be
the ESM bundle.</p>
<p>However after that change, we now have a different bundle configured
depending if it‚Äôs imported with <code>import</code> or <code>require</code>. As
<a href="https://webpack.js.org/guides/package-exports/#import">documented</a>
Webpack will map <code>import</code> calls to the file under <code>import</code> in the
<code>package.json</code>, and <code>require</code> to the <code>require</code> field, which makes sense.</p>
<p>However this is a problem for us as we saw earlier, we use <code>import</code> in
our own codebase, but the distribution bundle of next-firebase-auth
(like probably many other packages in the ecosystem) only comes with a
CJS file using <code>require</code>.</p>
<p>This means our own code will use <code>@firebase/auth/dist/esm2017/index.js</code>,
while next-firebase-auth will use <code>@firebase/auth/dist/browser-cjs/index.js</code>.</p>
<p>Not only this increases our bundle size unnecessarily, but it breaks the
Firebase SDK as it depends on shared global state, and now different
parts of the codebase point to a different, isolated version of the SDK.</p>
<h2 id="this-sucks-and-nobody-s-to-blame-really" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#this-sucks-and-nobody-s-to-blame-really"><span>This sucks, and nobody‚Äôs to blame really</span></a></h2>
<ul>
<li>It‚Äôs absolutely reasonable for the Firebase SDK to expose a different
browser bundle for <code>import</code> and <code>require</code>.</li>
<li>It‚Äôs absolutely reasonable, and even expected, that Webpack maps
<code>import</code> and <code>require</code> calls to the matching field in <code>package.json</code>.</li>
<li>It‚Äôs absolutely reasonable for next-firebase-auth to export a single
CJS bundle (that‚Äôs how npm packages look like since npm is a thing).</li>
</ul>
<p>It‚Äôs just a result of the giant fracture in the ecosystem between CJS
and ESM imports. It‚Äôs probably for the best, and I look forward to ESM
being widespread enough that we don‚Äôt encounter those problems, but the
transition is long and painful. It‚Äôs been 3-4 years I‚Äôm dealing with
this kind of issues as a package maintainer, and they tend to be
particularly time consuming, and takes away time to fix real problems or
implement new features.</p>
<h2 id="the-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#the-solution"><span>The solution</span></a></h2>
<p>As far as I‚Äôm concerned, for that particular instance of this problem,
the solution was to configure Webpack to alias <code>firebase/app</code> and
<code>firebase/auth</code> (the parts of the Firebase SDK used by
next-firebase-auth) to their ESM bundle, so this same bundle gets used
regardless if imported with <code>import</code> or <code>require</code>.</p>
<p>In the Webpack config:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">resolve</span>: {
    <span class="hljs-attr">alias</span>: {
      <span class="hljs-string">&#x27;firebase/app&#x27;</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;firebase/app&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;index.cjs.js&#x27;</span>, <span class="hljs-string">&#x27;index.mjs&#x27;</span>),
      <span class="hljs-string">&#x27;firebase/auth&#x27;</span>: <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;firebase/auth&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;index.cjs.js&#x27;</span>, <span class="hljs-string">&#x27;index.mjs&#x27;</span>)
    }
  }
}
</code></pre>
<p>It‚Äôs something we‚Äôll have to maintain as we update the Firebase SDK, if
they were to change the layout of their distribution files, since this
doesn‚Äôt bother parsing the <code>package.json</code> <code>exports</code> field, but it‚Äôs good
enough.</p>
<h2 id="bonus" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2024/02/esm-cjs-dupe.html#bonus"><span>Bonus</span></a></h2>
<p>For reference, a <a href="https://github.com/webpack/webpack/issues/15967">related GitHub issue</a>
and <a href="https://github.com/webpack/webpack/discussions/18082">discussion</a>.</p>
<p>I‚Äôve also tried using
<a href="https://webpack.js.org/configuration/resolve/#resolveconditionnames"><code>resolve.conditionNames</code></a>
as follows, as a more generic fix to force <em>all</em> packages to use the ESM
build if present:</p>
<pre><code class="hljs language-js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">resolve</span>: {
    <span class="hljs-attr">conditionNames</span>: [<span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;default&#x27;</span>]
  }
}
</code></pre>
<p>This would have been great as it would prevent similar (but maybe less
noticeable) duplication issues to happen in the dependency graph,
however, as you can expect, this will break some packages (in my case
some <code>@babel/runtime</code> imports), so I couldn‚Äôt go with that.</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1759280799852179929">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! üíå<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! üçª
  </p>
</section>
]]></content>
  </entry>
</feed>
