#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const mdit = require('markdown-it')
const escape = require('escape-html')
const slugify = require('@sindresorhus/slugify')

const md = mdit({
  html: true,
  typographer: true
})

const baseUrl = 'https://www.codejam.info/'
const meta = {}

md.use(require('markdown-it-front-matter'), metaString => {
  for (const line of metaString.split('\n')) {
    const [key, value] = line.split(': ')
    meta[key] = value
  }
})

md.use(require('markdown-it-anchor'), {
  level: 2, // Do not permalink `<h1>`.
  slugify: slug => slugify(slug, { decamelize: false }),
  permalink: require('markdown-it-anchor').permalink.headerLink()
})

md.use(require('markdown-it-deflist'))
md.use(require('markdown-it-footnote'))
md.use(require('markdown-it-highlightjs'), { auto: false })
md.use(require('markdown-it-title'), { excerpt: 2 })
md.use(require('markdown-it-attr-typographer'), { html: true })

// Rewrite local Markdown links to HTML.
md.core.ruler.push('markdownLinkRewrite', state => {
  for (const blockToken of state.tokens) {
    if (blockToken.type !== 'inline') {
      continue
    }

    for (const token of blockToken.children) {
      if (token.type !== 'link_open') {
        continue
      }

      const href = token.attrGet('href')

      if (href.includes('://')) {
        continue
      }

      token.attrSet('href', href.replace(/\.md(#|$)/, '.html$1'))
    }
  }
})

const file = process.argv[2]
const head = fs.readFileSync(path.resolve(__dirname, '../head.html'), 'utf8')
const foot = fs.readFileSync(path.resolve(__dirname, '../foot.html'), 'utf8')
const markdown = fs.readFileSync(file, 'utf8')
const env = {}
const bodyClass = file.match(/^\d{4}\//) ? 'post' : 'page'
const lines = md.render(markdown, env).trim().split('\n')
const slice = bodyClass === 'post' ? lines.indexOf(lines.find(line => line.includes('</p>'))) + 1 : 1
const header = lines.slice(0, slice).join('\n').replace(/<h1>([^<]*)<small>/, '<h1 class="has-subtitle"><span>$1</span><small>').replace('<p>', `<p class="${slice > 2 ? 'tagline' : 'date'}">`).replace('<br>\n', '</p>\n<p class="date">')
const body = lines.slice(slice).join('\n')

let metaTags = `  <meta property="og:title" content="${escape(env.title)}">\n`

if (meta.excerpt) {
  metaTags += `  <meta property="og:description" content="${escape(md.typographer(meta.excerpt))}">\n`
} else if (env.excerpt) {
  metaTags += `  <meta property="og:description" content="${escape(env.excerpt[bodyClass === 'post' ? 1 : 0])}">\n`
}

const image = meta.image || meta.hero

if (image) {
  let absoluteImage = image

  if (!image.startsWith('http://') && !image.startsWith('https://')) {
    absoluteImage = new URL(image, `${baseUrl}${file}`).href
  }

  metaTags += `  <meta property="og:image" content="${absoluteImage}">\n`
} else {
  metaTags += `  <meta property="og:image" content="${baseUrl}img/profile.jpg">\n`
}

metaTags += `  <meta name="twitter:card" content="${image ? 'summary_large_image' : 'summary'}">
  <meta name="twitter:site" content="@valeriangalliat">
  <meta name="twitter:creator" content="@valeriangalliat">
`

let hero = '<header>'
let heroCredit = '</header>'

if (meta.hero) {
  const focus = meta.focus ? `; background-position: ${meta.focus}` : ''
  hero = `<header class="hero" style="background-image: url(${meta.hero})${focus}">`
}

if (meta.heroCredit) {
  heroCredit = `  <a class="hero-credit" href="${escape(meta.heroCreditUrl)}">Picture credit: ${meta.heroCredit}</a>\n  </header>`
}

let lang = ''

if (meta.lang) {
  lang = ` lang="${meta.lang}"`
}

process.stdout.write(
  head
    .replace('<title>', `<title>${escape(env.title)}`)
    .replace('</head>', `${metaTags}</head>`)
    .replace('<body>', `<body class="${bodyClass}">`)
    .replace('<header>', hero)
    .replace('</header>', heroCredit)
    .replace('<div class="content">', `<div class="content">\n${header}`)
    .replace(/<div class="content">/g, `<div class="content"${lang}>`)
)

process.stdout.write(body)
process.stdout.write('\n')

process.stdout.write(
  foot
    .replace('https://github.com/valeriangalliat/blog', `https://github.com/valeriangalliat/blog/tree/master/${file}`)
)
