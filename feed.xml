<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeJam</title>
  <subtitle>Hey, I’m Val, welcome to my blog!</subtitle>
  <link href="https://www.codejam.info/feed.xml" rel="self" />
  <link href="https://www.codejam.info/" />
  <id>https://www.codejam.info/</id>
  <updated>2021-11-20T00:35:45.212Z</updated>
  <author>
    <name>Val</name>
  </author>
  <entry>
    <title>Emoji displayed as monochrome symbol? 🤔 The Unicode variation selector</title>
    <link href="https://www.codejam.info/2021/11/emoji-variation-selector.html" />
    <id>https://www.codejam.info/2021/11/emoji-variation-selector.html</id>
    <updated>2021-11-19T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Are you wondering why some specific emoji are sometimes displayed as
black and white symbols instead of a colored glyph? And even more
confusing, you notice it happens on one device but looks perfect on
another? Look no further, you’ll find all the answers in this article!</p>
<h2 id="tldr" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#tldr"><span>TLDR</span></a></h2>
<p>Some symbols can be displayed either as text (black and white glyph) or
as a color emoji. Using Unicode <a href="https://en.wikipedia.org/wiki/Variation_Selectors_(Unicode_block)">variation selectors</a>,
we can hint at whether to use one or the other, but when no variation
selector is specified, it’s up to the system to decide which one to
pick, introducing inconsistencies.</p>
<p>Most emoji pickers will include the emoji variation selector to symbols
that would otherwise be ambiguous, but others won’t and that’s probably
how you ended up here.</p>
<p>If you want to make sure your emoji are always displayed in their color
version, the default macOS emoji picker does just that, otherwise
copy/pasting from <a href="https://emojipedia.org/">Emojipedia</a> also works, as
they both don’t leave room for ambiguity.</p>
<h2 id="the-story" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#the-story"><span>The story</span></a></h2>
<p>I initially noticed that some emoji that I added from my Linux machine
using <a href="https://github.com/valeriangalliat/dmenumoji">dmenumoji</a> or <a href="https://github.com/fdw/rofimoji"><code>rofimoji</code></a>
were displayed as black and white symbols on macOS and Android.</p>
<p>For a while I just fixed them by inserting them again from another
device, or copy/pasting them from <a href="https://emojipedia.org/">Emojipedia</a>,
but I eventually got tired of this and decided to understand why this
was happening in the first place.</p>
<h2 id="what-i-learnt" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#what-i-learnt"><span>What I learnt</span></a></h2>
<p>Unicode defines two <a href="https://en.wikipedia.org/wiki/Variation_Selectors_(Unicode_block)">variation selector characters</a>,
<a href="https://codepoints.net/U+FE0E">U+FE0E</a> and <a href="https://codepoints.net/U+FE0F">U+FE0F</a>,
also respectively known as VS15 and VS16.</p>
<p>When VS15 is appended to a symbol, it forces it to be displayed as text
(black and white glyph). Contrarily, when VS16 is appended, it forces
the color version to be displayed (emoji).</p>
<p>Now here’s the fun part. What happens when a symbol has both a text and
a color variant, and no variant selector is specified?
<a href="https://en.wikipedia.org/wiki/Emoticons_(Unicode_block)#Variant_forms">According to Wikipedia</a>,
the emoji variant is selected:</p>
<blockquote>
<p>If there is no variation selector appended, the default is the
emoji-style.</p>
</blockquote>
<p>But <a href="https://www.codejam.info/2021/11/emoji-variation-selector.html#concrete-tests">in reality</a>, it appears that macOS and Android
will in fact default to the text symbol if there’s one available! So
should we just append the VS16 code point on every single emoji? From
<a href="https://emojipedia.org/variation-selector-16/">its Emojipedia page</a>:</p>
<blockquote>
<p>[VS16 is] an invisible code point which specifies that the preceding
character should be displayed with emoji presentation. Only required
if the preceding character defaults to text presentation.</p>
</blockquote>
<p>Alright. But we just saw that this is system-specific. Still, how do we
know which character <em>can</em> default to a text presentation? An
interesting hint is in the <a href="https://unicode.org/faq/vs.html">unicode.org FAQ</a>.</p>
<blockquote>
<p><strong>What variation sequences are valid?</strong></p>
<p>Only those listed in <a href="http://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt"><code>StandardizedVariants.txt</code></a>,
<a href="http://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt"><code>emoji-variation-sequences.txt</code></a>,
or the registered sequences listed in the <a href="http://www.unicode.org/ivd/">Ideographic Variation Database (IVD)</a>.</p>
</blockquote>
<p>Here, we specifically care about <a href="http://www.unicode.org/Public/emoji/5.0/emoji-variation-sequences.txt"><code>emoji-variation-sequences.txt</code></a>,
the other sources not being related emoji. This file lists all the
symbols that have both a monochrome glyph and a color emoji available.</p>
<p>It’s only for those symbols that we need to append the VS16 code point
to make sure that they’re displayed consistently on every system. And it
looks like that’s precisely what the macOS and Android emoji pickers
seem to be doing!</p>
<h2 id="concrete-tests" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#concrete-tests"><span>Concrete tests</span></a></h2>
<p>Let’s look at a few concrete examples to highlight the inconsistencies.</p>
<table>
<thead>
<tr>
<th>Unicode code points</th>
<th>Command</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+1F60A</td>
<td><code>printf '\U0001f60A'</code></td>
<td>😊</td>
</tr>
<tr>
<td>U+1F60A, U+FE0E</td>
<td><code>printf '\U0001f60A\ufe0e'</code></td>
<td>😊︎</td>
</tr>
<tr>
<td>U+1F60A, U+FE0F</td>
<td><code>printf '\U0001f60A\ufe0f'</code></td>
<td>😊️</td>
</tr>
<tr>
<td>U+1F610</td>
<td><code>printf '\U0001f610'</code></td>
<td>😐</td>
</tr>
<tr>
<td>U+1F610, U+FE0E</td>
<td><code>printf '\U0001f610\ufe0e'</code></td>
<td>😐︎</td>
</tr>
<tr>
<td>U+1F610, U+FE0F</td>
<td><code>printf '\U0001f610'\ufe0f</code></td>
<td>😐️</td>
</tr>
<tr>
<td>U+2639</td>
<td><code>printf '\u2639'</code></td>
<td>☹</td>
</tr>
<tr>
<td>U+2639, U+FE0E</td>
<td><code>printf '\u2639\ufe0e'</code></td>
<td>☹︎</td>
</tr>
<tr>
<td>U+2639, U+FE0F</td>
<td><code>printf '\u2639\ufe0f'</code></td>
<td>☹️</td>
</tr>
<tr>
<td>U+270D</td>
<td><code>printf '\u270d'</code></td>
<td>✍</td>
</tr>
<tr>
<td>U+270D, U+FE0E</td>
<td><code>printf '\u270d\ufe0e'</code></td>
<td>✍︎</td>
</tr>
<tr>
<td>U+270D, U+FE0F</td>
<td><code>printf '\u270d\ufe0f'</code></td>
<td>✍️</td>
</tr>
</tbody>
</table>
<p>Or put another way:</p>
<table>
<thead>
<tr>
<th>Default</th>
<th>Text</th>
<th>Emoji</th>
</tr>
</thead>
<tbody>
<tr>
<td>😊</td>
<td>😊︎</td>
<td>😊️</td>
</tr>
<tr>
<td>😐</td>
<td>😐︎</td>
<td>😐️</td>
</tr>
<tr>
<td>☹</td>
<td>☹︎</td>
<td>☹️</td>
</tr>
<tr>
<td>✍</td>
<td>✍︎</td>
<td>✍️</td>
</tr>
</tbody>
</table>
<p>Your mileage may vary, but when I compare that table on my different
devices, while they all display the emoji variant properly, there’s a
few inconsistencies for the default (no variant) and explicit text
variant.</p>
<table>
<thead>
<tr>
<th>System</th>
<th>Emoji</th>
<th>Default</th>
<th>Text</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linux</td>
<td>😊️</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>Linux</td>
<td>😐️</td>
<td>Emoji</td>
<td>Text</td>
</tr>
<tr>
<td>Linux</td>
<td>☹️</td>
<td>Emoji</td>
<td>Text</td>
</tr>
<tr>
<td>Linux</td>
<td>✍️</td>
<td>Emoji</td>
<td>Text</td>
</tr>
<tr>
<td>macOS</td>
<td>😊️</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>macOS</td>
<td>😐️</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>macOS</td>
<td>☹️</td>
<td>Text</td>
<td>Text</td>
</tr>
<tr>
<td>macOS</td>
<td>✍️</td>
<td>Text</td>
<td>Text</td>
</tr>
<tr>
<td>Android</td>
<td>😊️</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>Android</td>
<td>😐️</td>
<td>Emoji</td>
<td>Emoji</td>
</tr>
<tr>
<td>Android</td>
<td>☹️</td>
<td>Text</td>
<td>Text</td>
</tr>
<tr>
<td>Android</td>
<td>✍️</td>
<td>Text</td>
<td>Text</td>
</tr>
</tbody>
</table>
<p>While the font on my Linux machine doesn’t have a text representation of
the blush emoji, it does for all the other ones. Regardless, when no
variant is specified, it always shows an emoji.</p>
<p>On the other hand, macOS and Android always default to the text variant,
but they appear to not have one available for the blush and neutral face
emoji.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/emoji-variation-selector.html#conclusion"><span>Conclusion</span></a></h2>
<p>In today’s article, we looked more closely at the Unicode standard and
the emoji specification to understand how to deal with symbols that have
both a text and emoji style available. We learnt about the VS15 and VS16
code points to select a specific variant, instead of leaving it for the
system to decide. Finally, we found out what symbols need an explicit
variant to be specified in order to avoid being rendered inconsistently.</p>
<p>I hope you now have everything you need to understand why you might be
noticing those inconsistencies, and how to fix them. Cheers! ✌️</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Using Homebrew on a multi-user system (don’t)</title>
    <link href="https://www.codejam.info/2021/11/homebrew-multi-user.html" />
    <id>https://www.codejam.info/2021/11/homebrew-multi-user.html</id>
    <updated>2021-11-17T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I’ve recently <a href="https://twitter.com/valeriangalliat/status/1460337357094326275">started working at a new company</a>,
where I’ve got the freedom to use my own rig, which is especially nice
if I want to work while travelling without having to bring two laptops
with me.</p>
<p>But setting up a work environment on my personal computer actually
brings a number of concerns, mainly about:</p>
<ul>
<li>Environment variables.</li>
<li>Development tools and configurations.</li>
<li>Shell history.</li>
</ul>
<p>Whether it’s my personal Google Cloud context leaking in my work
environment, work SSH keys being available in my personal projects,
various unrelated developer tokens and credentials cohabiting in the
same environment, and work-specific commands popping in my personal
shell history and making me press the up arrow even more than I already
do, it quickly feels like poor hygiene to keep everything under the same
user.</p>
<p>And while some of those tools allow to authenticate with multiple
accounts and offer ways to configure them individually and switch
between contexts, I’ve seen enough mistakes happen by juggling between
staging and production environments in the same session that adding my
personal credentials to the mix sounds like a recipe for disaster.</p>
<p>So after realizing that merging my personal projects with my
professional environment was a bad idea, I decided to create a dedicated
user for work, this way everything would be neatly contained. Meet the
multi-user system.</p>
<h2 id="sharing-a-homebrew-is-nice-but-brew-not-so-much" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#sharing-a-homebrew-is-nice-but-brew-not-so-much"><span>Sharing a homebrew is nice 🍺, but <code>brew</code> not so much</span></a></h2>
<p>The main issue I ran doing that was about running <a href="https://brew.sh/">Homebrew</a>,
the tool I install macOS packages with, and which I happen to use both
personally and for work.</p>
<p>Out of the box, if you install it from one user, it’ll just fail to do
anything when run from another user because of permission issues.</p>
<h3 id="the-evil-shared-group-writable-permissions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#the-evil-shared-group-writable-permissions"><span>The evil: shared group writable permissions</span></a></h3>
<p>Turns out I’m
<a href="https://medium.com/@leifhanack/homebrew-multi-user-setup-e10cb5849d59">not</a>
<a href="https://stackoverflow.com/questions/41840479/how-to-use-homebrew-on-a-multi-user-macos-sierra-setup">the</a>
<a href="https://gist.github.com/jaibeee/9a4ea6aa9d428bc77925">only</a>
<a href="https://newbedev.com/how-to-use-homebrew-on-a-multi-user-macos-sierra-setup">one</a>
to try to do this, a simple search for this yields a fuckton of results!
And they all mostly share the same “tip” which is some variant of:</p>
<pre><code class="hljs language-sh">chgrp -R admin /usr/<span class="hljs-built_in">local</span>/*
chmod -R g+w /usr/<span class="hljs-built_in">local</span>/*
</code></pre>
<p>Some variants use <code>brew --prefix</code> instead of hardcoding <code>/usr/local</code>,
some use a custom group instead of <code>admin</code>. Either way, it’s all the
same, and it appears to work at first, until it doesn’t.</p>
<p>The problem is that Homebrew is <em>not</em> designed to be used by multiple
Unix users. A given Homebrew installation is only meant to be used by a
single non-root user.</p>
<p>By giving write access to a given group (in the above example, <code>admin</code>),
that is shared by all the users you want to call <code>brew</code> from, you get
the illusion that you allowed <code>brew</code> to be used by multiple users.</p>
<p>But the issue is that the default <a href="https://en.wikipedia.org/wiki/Umask"><code>umask</code></a>
that <code>brew</code> uses doesn’t add group write access, meaning that as you
use <code>brew</code>, more and more parts of the state will not be writable by the
other users in your group.</p>
<p>For example if after running the earlier hack, you run <code>brew install some-package</code> as user <code>foo</code>, then you won’t be able to <code>brew uninstall some-package</code> or <code>brew update some-package</code> as user <code>bar</code>, because the
permission for the newly created files won’t have group write access.</p>
<p>This means that if you instal packages from different users, <code>brew update</code> will very quickly fail to run on <em>any</em> of those users because
none have access to <em>everything</em> anymore. Sure, you can solve that by
running the <code>chmod</code> hack again, but that’s flaky and won’t event prevent
every edge cases.</p>
<p>You see setups as crazy as running the <code>chmod</code> command in <code>~/.zshrc</code> or
similar to prevent this, which will still fall apart if you don’t open a
new terminal session every time right before running <code>brew</code>, on top of
being a performance nightmare!</p>
<h3 id="the-bad-separate-homebrew-installations" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#the-bad-separate-homebrew-installations"><span>The bad: separate Homebrew installations</span></a></h3>
<p>Another approach that’s <a href="https://stackoverflow.com/a/55021458/4324668">not</a>
<a href="https://docs.brew.sh/Installation#alternative-installs">as</a>
<a href="https://code.roygreenfeld.com/cookbook/homebrew-multi-user-setup.html">widespread</a>
as the first one is to maintain a separate <code>brew</code> installation per user,
e.g. somewhere under the home directory as opposed to the default global
location.</p>
<p>That sounds like a great idea and would be my favorite way if it wasn’t
for the fact that <strong>pretty much every package I wanted to install needed
to be compiled from source because the prebuilt binaries only works with
the default global prefix</strong>!</p>
<p>This makes <code>brew</code> effectively unusable as it can take ages to compile
complete dependency trees that way.</p>
<p>On top of that you can read the following in the <a href="https://docs.brew.sh/Installation#alternative-installs">official documentation</a>
which definitely doesn’t make me want to go that way:</p>
<blockquote>
<p>However do yourself a favour and use the installer to install to the
default prefix. Some things may not build when installed elsewhere.
One of the reasons Homebrew just works relative to the competition is
<strong>because</strong> we recommend installing here. <em>Pick another prefix at your
peril!</em></p>
</blockquote>
<p>This confirms my first feeling about this method: Homebrew is <em>not</em>
designed to be installed outside of its default prefix and you’ll run
into all sort of issues if you do. I don’t like spending my time fixing
issues like these so I’ll pass.</p>
<h3 id="the-good-dedicate-a-single-user-account-to-homebrew" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#the-good-dedicate-a-single-user-account-to-homebrew"><span>The good: dedicate a single user account to Homebrew</span></a></h3>
<p>This is what’s recommended for multi-user systems
<a href="https://docs.brew.sh/FAQ#why-does-homebrew-say-sudo-is-bad">in the Homebrew FAQ</a>.
Sadly this page is not well ranked when looking for how to to use
Homebrew in a multi-user system (unlike the previous hacks) and I only
found it write writing this post. The fun thing is that it’s also the
approach that I decided to use for myself and was about to document
here!</p>
<blockquote>
<p>If you need to run Homebrew in a multi-user environment, consider
creating a separate user account especially for use of Homebrew.</p>
</blockquote>
<p>So while I’m in fact not inventing anything new here, hopefully I can
help this solution to be better ranked and prevent people from running
into the issues that are guaranteed to happen with the earlier hacks!</p>
<p>The solution is simple. Because <strong>Homebrew is not designed to be used by
multiple users</strong>, and it’s <strong>not designed to be installed anywhere else than
the default location</strong>, what you want to do instead is to install
Homebrew in its <strong>default location</strong> with a <strong>dedicated user</strong> that you
switch to in order to use it.</p>
<p>Sounds annoying? Just use <code>sudo</code>! While Homebrew
<a href="https://docs.brew.sh/FAQ#why-does-homebrew-say-sudo-is-bad">documents</a>
that it &quot;refuses to work using <code>sudo</code>&quot;, this is not exactly true.
Homebrew refuses to work as root, but you can still use <code>sudo</code> to use it
as another, non-root user!</p>
<p>Typically, if you installed Homebrew in its default location from the
user <code>foo</code>, and now you’re user <code>bar</code> and want to run <code>brew update</code>:</p>
<pre><code class="hljs language-sh">sudo -Hu foo brew update
</code></pre>
<ul>
<li>The <code>-H</code> option will make sure that the <code>HOME</code> directory is set
to that of the impersonated user (here <code>foo</code>) instead of the
<em>impersonating user</em> (here <code>bar</code>), so that Homebrew can maintain its
cache and other local state in the proper user’s home.</li>
<li>The <code>-u</code> option allows to specify the user to impersonate instead of
the default of <code>root</code>.</li>
</ul>
<p>This will effectively run <code>brew update</code> like if you had switched to user
<code>foo</code> prior to running it, but without going through the hassle of
actually switching users every single time.</p>
<p>And for what it’s worth, you don’t need to create a new, dedicated user
for <code>brew</code>. In my case, since both my users are effectively, me, I
simply installed Homebrew from my personal user and use <code>sudo</code> to run
<code>brew</code> commands from my work user.</p>
<p>To make things even nicer, you can even add an alias in the <code>~/.zshrc</code>
of the user that needs to use <code>sudo</code>:</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">alias</span> brew=<span class="hljs-string">&#x27;sudo -Hu foo brew&#x27;</span>
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/homebrew-multi-user.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>That’s all for today. I hope this helped you figure your bug-free,
multi-user Homebrew situation! Peace. ✌</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1461136995544096773">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How I set up a new Mac</title>
    <link href="https://www.codejam.info/2021/11/mac-setup.html" />
    <id>https://www.codejam.info/2021/11/mac-setup.html</id>
    <updated>2021-11-17T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>As I <a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html">recently blogged</a>,
I just upgraded to macOS Monterey taking it as an opportunity to start
from a clean, fresh, pristine system. This means I had to set up
everything again, which is not a big deal, but for the sake of
remembering it and making it even faster next time, I figured I’d write
about it.</p>
<p>This is the kind of blog post that’s <em>mostly</em> for my personal interest,
but if you got there somehow, you might take inspiration from my
settings, who knows!</p>
<p>But first, let’s ask the following question.</p>
<h2 id="why-start-fresh" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#why-start-fresh"><span>Why start fresh?</span></a></h2>
<p>While I could totally have migrated all my data from Big Sur, I like
to start from a clean slate every year or two, to get rid of all the
unnecessary garbage that accumulated over the years.</p>
<p>Wait, what garbage? Well, let me explain.</p>
<p>Every time you update a software (including the OS), there’s no
guarantee that the state you’ll be in after the update would be the
same as if you installed the new version directly on a fresh system.
Actually, the opposite is pretty much guaranteed.</p>
<p>Most of the time this is not a big deal. Maybe you’re stuck with the
default settings of the version you originally installed instead of
the ones that would otherwise come with the latest version (i.e. Git
always defaults to <code>master</code> and you have to explicitly configure it to
use <code>main</code>, or any small things like this).</p>
<p>Or maybe some commands or tasks might run slightly slower because of
accumulated “bloat” related to things you don’t use anymore and forgot
about (keys, passwords, certificates, trusted IP lists and whatnot
from stuff you connected to once or at least stopped connecting to
ages ago, the list of known Wi-Fi networks and <code>~/.ssh/known_hosts</code>
being a typical example).</p>
<p>While the above are pretty inoffensive cases, this kind of undefined
state drifts might cause more sneaky bugs, and “works on that machine”
kind of answers when you try to figure them out.</p>
<p>The same is also true when you uninstall a software; there’s no
guarantee that the state you’ll be in after the removal will match the
one you would have been in if you didn’t install it in the first place.
And again, the opposite is pretty much guaranteed.</p>
<p><a href="https://nixos.org/">NixOS</a> solves some of those issues, but in the real
world, you’re likely gonna want to use many programs that are not
designed and packaged to be stateless, deterministic, reproducible and
purely functional, and using wrappers (or wrapping them yourself) often
comes at a tremendous cost in time and convenience.</p>
<p>My tradeoff so far? A fresh reinstall every other year, or whenever I
feel like I’ve fucked around enough with that system’s state to be worth
a clean start.</p>
<h2 id="new-system-setup" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#new-system-setup"><span>New system setup</span></a></h2>
<p>Here’s the things I do when I log in the first time on my freshly
installed system.</p>
<ul>
<li>Get rid of all the garbage in the dock. I just leave the Finder and
the trash, because you can’t really remove them anyways (did you try
dragging the trash to the trash?), but I happen to use them so that’s
fine.</li>
<li>Open Safari to download <strong>Firefox</strong>. Very similar to how one would use
Internet Explorer (oh wait, Edge) to install a real browser on
Windows. This comparison might sound like a joke, but Safari
effectively became the new Internet Explorer regarding how far behind
they drag web standards, so this is sadly far more accurate than I’d
like it to be.</li>
<li>Download and install <strong>iTerm2</strong>.</li>
</ul>
<div class="note">
<p><strong>Note:</strong> I could have installed Firefox and iTerm2 with Homebrew (which
I add later) but for some reason there’s a few programs I kinda like to
install on their own. Don’t ask me why.</p>
<p>But now I think about it, it’s probably because Homebrew became so
ridiculously slow to update its repository and the installed software
that I’d rather keep the ones I want to be the most up-to-date separate
from Homebrew.</p>
<p>I’ll otherwise update Homebrew once a month or two, or when I need to
install something new with it, and it forces me to upgrade everything
else at the same time.</p>
<p>As a general rule of thumb, everything graphical I tend to install on
its own, and all the CLI stuff is with Homebrew.</p>
</div>
<ul>
<li>Install <strong>Adobe Creative Cloud</strong> and the apps I use with it (Lightroom
Classic, Photoshop, Premiere and After Effects). In Creative Cloud
preferences, turn off file syncing and launch at login.
<ul>
<li>On a multi-user system, you’ll need to sign in to Creative Cloud for
every single user to turn off file syncing and launch at login, even
the ones who don’t use Creative Cloud apps (because the preferences
pane is only accessible to logged in users). Now all my users have an
empty Creative Cloud account just for the sake of disabling it. I
fucking hate the current state of technology. 🙃</li>
</ul>
</li>
<li>Install <strong>Logic Pro</strong> an download the full sound library. Sadly a fresh
Logic installation can’t reuse an existing sound library directory (I
like to keep mine on my hard drive instead of my limited size SSD), so
we need to download the whole 60 GB from scratch. Did I say I
hate the current state of technology already?</li>
<li>Press <kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>5</kbd> to open the
custom screenshot interface, where I can change the <strong>screenshot
directory</strong> to <code>~/Desktop/Screenshots</code>. I don’t like to clutter my
desktop with screenshots like it’s the case by default.</li>
<li>I download and run <a href="https://gist.github.com/adaugherity/7435890"><code>patch-edid.rb</code></a>
to <a href="https://www.codejam.info/2020/10/too-much-contrast-external-screen-macos-catalina.html">patch the EDID of my screen</a>
because since Catalina, macOS wants to communicate with it over YCbCr
instead of RGB and that causes colors and contrast to be fucked up.
This is extremely specific to my own screen.</li>
</ul>
<p>Now I’m ready to configure the <a href="https://www.codejam.info/2021/11/mac-setup.html#system-preferences">system preferences</a>,
<a href="https://www.codejam.info/2021/11/mac-setup.html#iterm2-settings">iTerm2 settings</a> and my <a href="https://www.codejam.info/2021/11/mac-setup.html#terminal-environment">terminal-environment</a>.</p>
<h2 id="system-preferences" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#system-preferences"><span>System preferences</span></a></h2>
<ul>
<li>In <strong>keyboard</strong> I set “key repeat” and “delay until repeat” to the
fastest possible. I like my keyboard to be snappy.</li>
<li>For the <strong>dock &amp; menu bar</strong>, I leave only <strong>Time Machine</strong> and <strong>fast
user switching</strong> if I’m on a multi-user system, and I set the
<strong>clock</strong> to 24 hours format.</li>
<li>I enable <strong>Time Machine</strong> backups to my usual drive after configuring
my exclude list (very specific to my data so not included here).</li>
<li>In <strong>energy saver</strong> I disable <strong>Power Nap</strong> because I don’t need my
machine to resume from sleep to check emails and run backups (after
all if I’m not using my machine there’s not much to back up anyways).</li>
<li>In <strong>displays</strong> I turn on <strong>Night Shift</strong> form sunset to sunrise.</li>
</ul>
<h2 id="iterm2-preferences" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#iterm2-preferences"><span>iTerm2 preferences</span></a></h2>
<ul>
<li>In <strong>appearance</strong>, <strong>windows</strong>, tick <strong>hide scrollbars</strong>.</li>
<li>In <strong>profiles</strong>, <strong>general</strong>, select <strong>reuse previous session’s
directory</strong> as working directory.</li>
<li>In <strong>profiles</strong>, <strong>terminal</strong>, tick <strong>silence bell</strong>.</li>
<li>In <strong>profiles</strong>, <strong>keys</strong>, <strong>key mappings</strong>, load the <strong>natural text
editing</strong> preset (allow it to remove whatever is already there), and
remove <kbd>Command</kbd> + <kbd>Left</kbd> and <kbd>Command</kbd> +
<kbd>Right</kbd> which otherwise shadow the shortcuts to navigate
between tabs.</li>
</ul>
<h2 id="terminal-environment" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#terminal-environment"><span>Terminal environment</span></a></h2>
<p>First, install <a href="https://brew.sh/">Homebrew</a> with whatever is the current
recommended way. Install it in the default place because otherwise it
won’t be able to leverage many prebuilt binaries that hardcode the
default prefix in them, and it’s utterly slow to compile everything. I’d
be running Gentoo if that’s what I wanted FFS. Also if you want to run
Homebrew on a multi-user system, <a href="https://www.codejam.info/2021/11/homebrew-multi-user.html">read that first</a>.</p>
<p>Then, make a SSH keypair or copy an existing one in <code>~/.ssh</code>. I usually
run <code>ssh-keygen</code> either way just to let it create the directory with the
proper permissions, even if I’ll override the key later.</p>
<pre><code class="hljs language-sh">ssh-keygen
</code></pre>
<p>Clone my <a href="https://github.com/valeriangalliat/dotfiles">dotfiles</a>
directory and install my Mac preset (mainly my Zsh, Vim and Git
settings).</p>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> git@github.com:valeriangalliat/dotfiles.git
<span class="hljs-built_in">cd</span> dotfiles
make mac
<span class="hljs-built_in">cd</span>
</code></pre>
<p>Edit my default <code>~/.zshrc</code> and <code>~/.zshenv</code> templates and comment or
uncomment some of the stuff there that I may need, mainly enabling my
asdf helper (see below).</p>
<pre><code class="hljs language-sh">vim ~/.zshrc ~/.zshenv
</code></pre>
<p>Install whatever software I pretty much always use with Homebrew.</p>
<pre><code class="hljs language-sh">brew install gpg ag fzf imagemagick ffmpeg ncdu
</code></pre>
<ul>
<li>GPG is required for the asdf Node.js plugin I’ll add later below.</li>
<li><a href="https://github.com/ggreer/the_silver_searcher">Ag (The Silver Searcher)</a>
is my favorite way to search code.</li>
<li><a href="https://github.com/junegunn/fzf">fzf</a> is an awesome fuzzy finder.</li>
<li>I probably don’t need to introduce <a href="https://imagemagick.org/">ImageMagick</a>
and <a href="https://www.ffmpeg.org/">FFmpeg</a>.</li>
<li><a href="https://dev.yorhel.nl/ncdu">ncdu</a> is a cool tool to monitor disk usage.</li>
</ul>
<p>Install the <a href="https://github.com/asdf-vm/asdf">asdf</a> plugins I need
and whatever version is in my <code>~/.tool-versions</code>. My <code>~/.zshrc</code>
automatically installs asdf on the first invocation so no need to do
that manually.</p>
<pre><code class="hljs language-sh">asdf plugin add nodejs
<span class="hljs-comment"># asdf plugin add python</span>
<span class="hljs-comment"># asdf plugin add ruby</span>
<span class="hljs-comment"># asdf plugin add elixir</span>
<span class="hljs-comment"># asdf plugin add erlang</span>
asdf install
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/mac-setup.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>That’s pretty much the gist! This is a fairly straightforward and not
very time consuming checklist, and the main things that need to be
automated (my dotfiles) are.</p>
<p>I don’t think it’s worth automating my macOS system preferences somehow
as they might change in future versions anyways. Same thing for iTerm2,
where I definitely don’t want to copy over my whole configuration file
from an old installation, I’d rather start from the latest and greatest
defaults and just tweak what I need on top of it.</p>
<p>Everything else is very specific to the current machine I’m setting up
and I leave them to my discretion at the time of installing.</p>
<p>If you read until there, I hope that you learnt something, or that it
inspired you to document your base setup in a similar way. Cheers!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1461136814400577537">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Desktop power button not responding and random sleep issues</title>
    <link href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html" />
    <id>https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html</id>
    <updated>2021-11-16T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>A few days ago I started having issues with my computer. When I was
putting it to sleep (or hibernating), it would either crash and turn off
immediately, or would fail to power the GPU and USB ports after waking up,
leaving me with a black screen and unresponsive keyboard and mouse,
and forcing me to hard reset it.</p>
<p>More notably, when it crashed instantly as it entered sleep state, the
power button didn’t work anymore and I needed to unplug the machine for
a minute or so before being able to start it again. This didn’t always
work the first shot though but usually after doing it a few times, it
would eventually boot up again.</p>
<p>It’s something that had already happened to me in rare occurrences
during the past year, enough to get me frustrated and somewhat anxious
when my machine effectively appeared to be bricked (that’s how I found
the unplug replug trick by despair), but not to a point where I spent
the time to understand and fix the root cause, as it always kinda fixed
itself without my intervention.</p>
<p>I remember one time where the unplug replug trick didn’t work to a point
where I decided to open the machine and see what I can do inside, but
interestingly just the sheer fact of opening it and moving it around so
that I can work on it fixed the problem, so I was just happy to have a
working computer again and didn’t question it much.</p>
<p>That’s until this week, coincidentally right before I <a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html">upgrade to macOS Monterey</a>.</p>
<h2 id="kernel-panic-sleep-wake-failure-in-efi" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#kernel-panic-sleep-wake-failure-in-efi"><span>Kernel panic: sleep wake failure in EFI</span></a></h2>
<p>I was still running Big Sur back then and it’s been running smooth the
whole year, but the day before I decide to upgrade to Monterey, I get
those sleep issues again, mainly lack of GPU and USB power on wake
(manifested by a black screen and unresponsive keyboard and mouse).</p>
<p>I figured it wasn’t worth fixing it now, and I might as well upgrade and
see if it still happens. And while <a href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html">the upgrade goes smooth AF</a>,
I notice even more of those sleep issues after the fact. They’re not
occasional anymore, they happen pretty much 90% of the time the computer
sleeps, seemingly at random. It either fails to power the connected
devices on wake or just crashes right away when being put to sleep and
causes the unresponsive power button issue.</p>
<p>At that point I assume that it comes from the upgrade to Monterey,
especially because I’m running a Hackintosh and I suspect that it must
be for sure the culprit. After all, there’s “hack” in the name, even
though it’s been impressively stable <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html">since I use OpenCore</a>.</p>
<p>I spend more time than I’m willing to admit trying everything to fix
<a href="https://dortania.github.io/OpenCore-Post-Install/universal/pm.html">power management</a>
and <a href="https://dortania.github.io/OpenCore-Post-Install/universal/sleep.html">sleep</a>,
including using <a href="https://github.com/acidanthera/CPUFriend/releases">CPUFriend</a>
and <a href="https://github.com/corpnewt/CPUFriendFriend">CPUFriendFriend</a> to
fix the “sleep wake failure in EFI” system panics. But none of that
changes anything. I try to understand the different macOS sleep modes
and <a href="https://dortania.github.io/OpenCore-Post-Install/universal/sleep.html#preparations">various</a>
<code>pmset</code> <a href="https://github.com/li3p/dell-optiplex-9020-hackintosh-opencore#sleep">settings</a>
to tune them and make things work but without any luck.</p>
<p>I also try to see if it’s related to any of my external devices, and
while the issues seem to happen less frequently when I unplug my 3
external drives and my external sound card, they still happen somewhat
randomly in a way that I can’t reliably isolate any of those as being
the problem.</p>
<h2 id="questioning-the-hardware" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#questioning-the-hardware"><span>Questioning the hardware</span></a></h2>
<p>At that point I lost more than 12 hours on this issue and I’m going on
my second day of relentless debugging. I feel like I’ve tried everything
possible and documented online about fixing sleep at the software,
drivers and configuration level, and the precise issues and symptoms I
run into don’t seem to exactly match any of the topics I find online.</p>
<p>I have a TP-Link PCI Wi-Fi card in there and I’m thinking maybe it’s
unsupported in a way that somehow causes the crashes with the new OS? I
open the case and remove it, but this doesn’t seem to change anything.</p>
<p>I start questioning my actual hardware, looking more precisely at the
ssue where the power button is unresponsive. I find a
<a href="https://www.reddit.com/r/buildapc/comments/3wn2d8/discussion_just_a_reminder_that_a_dead_bios/">number</a>
<a href="https://www.quora.com/Can-a-dead-CMOS-battery-stop-a-computer-from-booting">of</a>
<a href="https://steamcommunity.com/discussions/forum/11/618460171318429760/">pages</a>
stating that a weak or dead CMOS battery could cause it (or also a
faulty power supply 😅).</p>
<p>The CMOS battery is easier to test and cheaper to replace than the power
supply, so I start with that. My machine is now 5 years old so it’s not
exactly brand new, even though I’ve kept desktop computers much longer
than that in the past without needing to replace a CMOS battery once in
my life. Regardless, I take it out and test it with a multimeter only to
find that it delivers a solid 3 volts as it’s supposed to. I even test a
brand new battery to compare and get the same results! Not the issue
here, even though I wish it would have been as easy as replacing a
CR2032 battery.</p>
<p>But when I put the battery back in place, my computer still doesn’t
start! And turning off and on the PSU again doesn’t seem to work
anymore. Did I accidentally fry the motherboard while manipulating the
battery? I try one more time to be relieved by the sound of my machine
booting, and welcoming me with a fresh BIOS reset screen. I configure
everything again and boot macOS. At that point, all the USB devices are
unplugged and I’m on a freshly configured BIOS. I try the sleep again
but sadly it keeps crashing.</p>
<h2 id="very-specific-googling-and-final-fix" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#very-specific-googling-and-final-fix"><span>Very specific googling, and final fix</span></a></h2>
<p>As a last resort, I try searching the very specific symptom I’m having
and the hack I found to work around it: “need to unplug and replug
computer for it to start”. This sound so ridiculous and far fetched that
I’ve never thought about searching just that before, but I’m pretty
desperate at that point.</p>
<p>To my whole surprise, I’m <a href="https://www.ifixit.com/Answers/View/255569/Why+do+I+have+to+first+unplug+my+computer+to+start">not the only one</a>
to <a href="https://forums.tomshardware.com/threads/computer-shuts-off-and-wont-turn-back-on-until-i-unplug-it.217732/">have this issue</a>,
and in those two pages from respectively 5 and 10 years ago, the pinned
solution is the same:</p>
<blockquote>
<p>Open up the computer and look at all the extra cables inside make sure
they’re all neatly bundled away from any part of the case they may be
shorting it out.</p>
<p>— <a href="https://www.ifixit.com/Answers/View/255569/Why+do+I+have+to+first+unplug+my+computer+to+start#answer256519">Why do I have to first unplug my computer to start?</a></p>
</blockquote>
<blockquote>
<p>After trying just about everything software wise (except a complete
Windows reinstall) I was able to track the problem down to my PSU as
many forums had suggested. It tuned out that some of the many extra
connectors I had on my PSU I had stuffed into an extra empty drive bay
in order to reduce the clutter inside the case. Somehow one of them
had been causing a short. After moving the cables around and tiding
them up neat and proper the problem has completely gone away (went
from daily occurrence to two weeks so far with no problem).</p>
<p>— <a href="https://forums.tomshardware.com/threads/computer-shuts-off-and-wont-turn-back-on-until-i-unplug-it.217732/#post-11597639">Computer shuts off and won’t turn back on until I unplug it</a></p>
</blockquote>
<p>I did also stuff all my dangling PSU cables in an empty bay, and I
thought I was doing myself a service by doing so, preventing a mess of
cables in the middle of the case! I took the cables out of there, tidied
them up differently and put them back in there in a way where they
shouldn’t move around too much or touch anything.</p>
<p>After that? The computer boots just fine and I haven’t noticed a single
crash or any of the issues I was having around sleep and wake. I
progressively started to plug my sound card, then my external drives,
testing the sleep every time (to more easily identify a culprit if it
wasn’t fixed), and it kept working. I’ve restored all of my original
“clean” drivers, bootloader and system configuration (that I had
modified during my attempts to fix the issue earlier), none of them
caused any problem again.</p>
<p>I’ve performed more than 20 successful sleep and wake cycles since then,
whether I explicitly put the computer to sleep or let it hibernates by
itself after a period of inactivity.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html#conclusion"><span>Conclusion</span></a></h2>
<p>At that point I’m somewhat confident that like in the two posts above,
the dangling PSU cables in the unit were shorting and causes those
issues. The fact they caused instability specifically at the sleep and
wake level were probably very specific to me and the precise way the
cables where shorting each other.</p>
<p>And the reason why the problem appeared to fix itself when unplugging
and replugging the machine, or sometimes by just opening it and looking
at it, doing no particular change inside? Those mere manipulations
probably bumped the dangling wires inside just enough so that they
weren’t shorting anymore, until they do again.</p>
<p>It’s still hard for me to precisely explain why this was happening
especially around sleep, and how the machine would otherwise be
perfectly stable and never crash as long as it didn’t hit a sleep and
wake cycle. Maybe something to do with the fans slightly moving the
dangling cables while blowing at them? I’m not technical enough in
hardware and electronics to make sense of that, so if any of you reading
that have a better idea, please <a href="https://www.codejam.info/val.html#contact">let me know</a>!</p>
<p>And at the very least I hope that if you’re reading this because of a
similar issue, that helped you sort this problem out as well!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1459909788041682952">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Yearly Hackintosh upgrade: macOS Monterey with OpenCore</title>
    <link href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html" />
    <id>https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html</id>
    <updated>2021-11-16T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Exactly a year ago, I <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html">migrated my Hackintosh from Catalina to Big Sur,
and from Clover to OpenCore</a>. Apple recently released
Monterey, so it’s the first time for me doing a major upgrade since I’m
using OpenCore.</p>
<p>So far, OpenCore has been a breeze to work with. I’m not sure if it’s
because it’s a really high quality piece of software and ecosystem in
general, or if it’s because it forced me to learn a lot of low-level
details in order to have a working Hackintosh, but both probably have a
lot to do with this.</p>
<p>I’ve been upgrading seamlessly all year long through Big Sur updates
as smoothly as if I was using a “real Mac”. Upgrading to Monterey might
have been as easy (with the addition of upgrading OpenCore and all kexts
to their latest version, which I should probably do on minor updates
even though I’ve been getting away perfectly fine by ignoring that all
year long), but I like to take a new major version as an opportunity to
reinstall my system from scratch and start from a clean slate.</p>
<h2 id="my-paranoid-upgrade-procedure" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#my-paranoid-upgrade-procedure"><span>My paranoid upgrade procedure</span></a></h2>
<p>I don’t do cowboy-style upgrades or installations anymore, because I’ve
bricked my system too many times and while I’ve always managed to fix it
more or less gracefully, it’s always been a somewhat stressful,
uncomfortable and time-consuming experience.</p>
<p>I’m also constantly scared of losing critical data by mistake, so
I tend to back up everything more often than not. Here’s the procedure I
follow to upgrade my system making sure I always have a bootable machine
and without risking data loss.</p>
<ul>
<li>I make space for an empty partition on one of my drives to test the
new system.</li>
<li>I make sure that my current system has a full up-to-date backup on an
external drive <em>that I keep unplugged</em> until I’m back in a fully
stable state.</li>
<li>Because I make the above backup with Time Machine and I don’t trust
myself (nor macOS) to 100% reliably set up Time Machine on the new
system without fucking up the previous backups, I also do a second
(manual) backup on another drive. That step is probably unnecessary.</li>
<li>I install the new system to the test partition, tweaking the OpenCore
configuration, drivers and kexts as necessary.</li>
<li>Once the test system is installed and running, I check that everything
I need works as expected (display, audio, network, sleep) or otherwise
find how to fix it, documenting everything along the way especially
for fixes that live outside the EFI directory.</li>
<li>When all is well, I reboot and perform the install on my main
partition.</li>
<li>After the install, I restore whatever I need from my previous backup.
I still keep the rest of the backup (or at least parts of it) for 6
months or so just in case. That came handy a couple of times in the
past. I also wipe the temporary test installation.</li>
<li>Finally, I write a blog post. 😄</li>
</ul>
<p>This is a bit more time-consuming than straight up performing the
installation, and some of those steps might be a bit overkill, but I
like going the extra length to make sure everything is backed up and
redundant to prevent any unexpected issue and minimize the impact of a
program or human error.</p>
<h2 id="upgrade-log" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#upgrade-log"><span>Upgrade log</span></a></h2>
<p>I’ll list all the steps I took in that upgrade, which are very similar
to my <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html">Big Sur post</a>, but I’ll note here the differences.
Here’s the relevant details of my machine:</p>
<dl>
<dt>Motherboard</dt>
<dd><a href="https://www.newegg.ca/p/N82E16813130924">MSI H110M PRO-D</a> (RTL8111H Ethernet chipset,  Realtek ALC887 audio chipset)</dd>
<dt>CPU</dt>
<dd><a href="https://www.newegg.ca/p/N82E16819117563">Intel Core i5-6500 Skylake</a></dd>
<dt>GPU</dt>
<dd><a href="https://www.newegg.ca/p/N82E16814932247">GIGABYTE Radeon RX 580</a></dd>
</dl>
<p>Still following <a href="https://dortania.github.io/OpenCore-Install-Guide/">the OpenCore guide</a>,
I:</p>
<ul>
<li>downloaded the latest <a href="https://github.com/acidanthera/OpenCorePkg/releases"><code>OpenCorePkg</code></a>
(0.7.5 in my case),</li>
<li>downloaded <a href="https://github.com/corpnewt/ProperTree">ProperTree</a> to edit <code>.plist</code> files,</li>
<li>downloaded Monterey from the App Store,</li>
<li>formatted a USB drive as Mac OS Extended (HFS+) with a GUID partition
map,</li>
<li>ran <code>sudo /Applications/Install\ macOS\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</code>
(where <code>MyVolume</code> was… my volume) to create the installation media,</li>
<li>mounted the EFI partition of the USB key by running <code>sudo diskutil mount /dev/diskXsY</code>
where <code>X</code> was the drive number and <code>Y</code> the partition number (found
using <code>diskutil list</code>),</li>
<li>copied OpenCore <code>DEBUG</code> version to it and removed unneeded files as
instructed by the guide,</li>
<li>added <code>HfsPlus.efi</code> from the <a href="https://github.com/acidanthera/OcBinaryData/blob/master/Drivers/HfsPlus.efi"><code>OcBinaryData</code> repo</a>,</li>
<li>added <a href="https://github.com/acidanthera/VirtualSMC/releases">VirtualSMC</a>,
<a href="https://github.com/acidanthera/Lilu/releases">Lilu</a>,
<a href="https://github.com/acidanthera/WhateverGreen/releases">WhateverGreen</a>,
<a href="https://github.com/acidanthera/AppleALC/releases">AppleALC</a> and
<a href="https://github.com/Mieze/RTL8111_driver_for_OS_X/releases">RealtekRTL8111</a>
kexts.</li>
</ul>
<p>Now here’s what got easier than my first OpenCore installation.</p>
<h3 id="ssdts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#ssdts"><span>SSDTs</span></a></h3>
<p>I just had to copy <code>SSDT-PLUG.aml</code>, <code>SSDT-EC.aml</code> and <code>SSDT-USBX.aml</code>
from the <code>ACPI</code> directory of my <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#installing-macos-big-sur-with-opencore-and-the-issues-i-encountered">previous installation</a>,
the <a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/plug.html">first</a>
<a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/ec-fix.html">two</a>
which I had built back then with
<a href="https://github.com/corpnewt/SSDTTime">SSDTTime</a>, and the latter being
the <a href="https://github.com/dortania/OpenCore-Post-Install/blob/master/extra-files/SSDT-USBX.aml">prebuilt one</a>
that didn’t need to be updated.</p>
<h3 id="usb-map" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#usb-map"><span>USB map</span></a></h3>
<p>I could just copy <code>USBMap.kext</code> <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#generating-the-usb-map">from my previous installation</a>
to have my USB ports supported right away without having to generate it
again or to deal with <code>XhciPortLimit</code> and USBInjectAll. Sweet.</p>
<h3 id="making-the-config-plist" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#making-the-config-plist"><span>Making the <code>config.plist</code></span></a></h3>
<p>I started again from OpenCore’s <code>Sample.plist</code> and applied the same
tweaks from the <a href="https://dortania.github.io/OpenCore-Install-Guide/config.plist/skylake.html#deviceproperties">Skylake</a>
guide. I’m not sure if I could have reused my previous <code>config.plist</code> or
not, but I wanted to start fresh and up-to-date.</p>
<p>Everything was the same as <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#installing-macos-big-sur-with-opencore-and-the-issues-i-encountered">my previous installation</a>
so I won’t include it here.</p>
<p>The only difference was that I left <code>XhciPortLimit</code> to <code>False</code> as the
guide mentions to disable it if running macOS 11.3 or newer, plus I
already have my USB map so it shouldn’t be needed either way.</p>
<p>I also had <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#booting-on-macos-installer-just-reboots-into-recovery">an issue last time</a>
where I needed to set <code>SecureBootModel</code> to <code>Disabled</code> instead of the
<code>Default</code> mentioned in the guide, but just to check, I left it to
<code>Default</code> this time and didn’t have any issue, meaning I can now benefit
from Apple Secure Boot!</p>
<h3 id="removing-previous-fixes" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#removing-previous-fixes"><span>Removing previous fixes</span></a></h3>
<p>For Big Sur, I <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#no-wi-fi-on-big-sur">needed to add</a>
<code>IO80211HighSierra.kext</code> to get my Wi-Fi to work but I’m now connected
over Ethernet so I didn’t need to include it. It’s a good thing because
<a href="https://github.com/khronokernel/IO80211-Patches/issues/4">it doesn’t work on Monterey</a>
(at least for now, I tried and had the same issue).</p>
<p>Also I’ve had <a href="https://www.codejam.info/2021/..2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#can-t-find-my-sata-drives-in-the-macos-installer">an issue last time</a>
that required a <code>CtlnaAHCIPort.kext</code> in order to see my SATA drives in
the installer, but that wasn’t required anymore so I left it alone (it
actually prevented the installer to boot if it was there).</p>
<h3 id="finalizing" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#finalizing"><span>Finalizing</span></a></h3>
<p>Once everything was working, I copied OpenCore to my SSD’s EFI directory,
and applied the <a href="https://www.codejam.info/2020/11/upgrading-hackintosh-catalina-big-sur-clover-opencore.html#cosmetic-tweaks">cosmetic tweaks</a>
including putting the files from the OpenCore <code>RELEASE</code> version,
removing the debug and verbose settings, and adding <code>OpenCanopy.efi</code> for
a nice UI.</p>
<p>I still needed to <a href="https://www.codejam.info/2020/10/too-much-contrast-external-screen-macos-catalina.html">patch the EDID of my screen to force it in RBG mode</a>,
and the <a href="https://gist.github.com/adaugherity/7435890"><code>patch-edid.rb</code></a>
method still works!</p>
<p>After that, I didn’t need to do <em>any</em> tweak at the system configuration
level, everything works out of the box including CPU power management
and sleep. Power Nap also works like a charm but I turned it off just
because it’s not useful to me.</p>
<p>Since my system drive was named the same as my previous installation,
Time Machine was able to continue the existing backup and I kept my full
Time Machine history! Had I renamed the drive, it seems that I could
have used <code>tmutil inheritbackup</code> and <code>tmutil associatedisk</code> to help with
that.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/yearly-hackintosh-upgrade-macos-monterey-with-opencore.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>If it wasn’t for a <a href="https://www.codejam.info/2021/11/computer-sleep-issues-power-button-not-responding.html">totally unrelated hardware issue</a> that happened
around the same time I performed the upgrade, migrating to Monterey with
OpenCore was a straightforward and painless procedure and I didn’t
encounter any hiccup.</p>
<p>If you too are upgrading your Hackintosh to Monterey, I hope it went as
smooth for you as it did for me!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Standalone userland SSH server</title>
    <link href="https://www.codejam.info/2021/11/standalone-userland-ssh-server.html" />
    <id>https://www.codejam.info/2021/11/standalone-userland-ssh-server.html</id>
    <updated>2021-11-09T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I guess I have pretty unusual software needs sometimes. I’ve been
wanting to spawn a one-off SSH server on one of my computers so that I
can <code>rsync</code> something to it from another machine.</p>
<p>I didn’t want to enable SSH connections systemwide on this host.
Ideally, I wanted to start a server from my unprivileged user, that
would only allow access to that particular user, and only to the
specific SSH key of my other machine.</p>
<p>Turns out with a simple <code>sshd_config</code>, <a href="https://sourceware.org/legacy-ml/cygwin/2008-04/msg00363.html">this is possible</a>!</p>
<p>First, let’s make a directory to contain our server files.</p>
<pre><code class="hljs language-sh">mkdir standalone-sshd
<span class="hljs-built_in">cd</span> standalone-sshd
</code></pre>
<p>In there, we generate our host RSA key (the <code>-N ''</code> part specifies an
empty passphrase).</p>
<pre><code class="hljs language-sh">ssh-keygen -f ssh_host_rsa_key -N <span class="hljs-string">&#x27;&#x27;</span>
</code></pre>
<p>Then, add your public key to a <code>authorized_keys</code> file in this same
directory (same format as a regular <code>~/.ssh/authorized_keys</code>), and add
the following configuration in a <code>sshd_config</code> file.</p>
<pre><code class="hljs language-apache"><span class="hljs-attribute">Port</span> <span class="hljs-number">2222</span>
<span class="hljs-attribute">HostKey</span> /path/to/standalone-sshd/ssh_host_rsa_key
<span class="hljs-attribute">PidFile</span> /path/to/standalone-sshd/sshd.pid

<span class="hljs-comment"># Don&#x27;t allow interactive authentication.</span>
<span class="hljs-attribute">KbdInteractiveAuthentication</span> no

<span class="hljs-comment"># Same as above but for older SSH versions.</span>
<span class="hljs-attribute">ChallengeResponseAuthentication</span> no

<span class="hljs-comment"># Don&#x27;t allow password authentication.</span>
<span class="hljs-attribute">PasswordAuthentication</span> no

<span class="hljs-comment"># Only allow my own user.</span>
<span class="hljs-attribute">AllowUsers</span> val

<span class="hljs-comment"># Only allow my own key.</span>
<span class="hljs-attribute">AuthorizedKeysFile</span> /path/to/standalone-sshd/authorized_keys
</code></pre>
<p>Tweak the port, user, and other settings to your liking, but that should
give you a good base!</p>
<p>With that, you can run the server with the following command (the <code>-D</code>
option starts the server in the foreground instead of the default daemon
mode).</p>
<pre><code class="hljs language-sh">/usr/sbin/sshd -f sshd_config -D
</code></pre>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1458282446659653634">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>ImageMagick crop with percentage like CSS background-position</title>
    <link href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html" />
    <id>https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html</id>
    <updated>2021-11-08T05:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Another one of those posts that are probably only useful to me, but who
knows!</p>
<p>I’ve been wanting to crop images with ImageMagick in a way that mimics
what the CSS <code>background-position</code> property does.</p>
<h2 id="how-does-background-position-behave" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html#how-does-background-position-behave"><span>How does <code>background-position</code> behave?</span></a></h2>
<p>Let’s say I have a picture that I’m making shorter, e.g. a 1:1 picture
that I want to make 16:9, and I want to make sure to keep it centered
both horizontally and vertically. I would use the following:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.element</span> {
  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;
}
</code></pre>
<p>In this particular case, we can easily mimic that with ImageMagick.
Let’s assume <code>input.jpg</code> is currently a 1080x1080 square picture, and we
want to scale it down to a 640x360 16:9 landscape:</p>
<pre><code class="hljs language-sh">convert input.jpg -resize 640x -gravity center -crop 640x360+0+0 output.jpg
</code></pre>
<p>But <code>-gravity</code> only allows us to align top (<code>north</code>), center or bottom
(<code>south</code>). What if we wanted a percentage in between?</p>
<p>In the case of <code>background-position</code>, 0% would align the picture at the
top, and 100% at the bottom. Anything in between would allow to navigate
in that range.</p>
<h2 id="applying-it-to-imagemagick" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html#applying-it-to-imagemagick"><span>Applying it to ImageMagick</span></a></h2>
<p>Let’s pretend we can’t do <code>-gravity south</code> to align the crop at the bottom,
and convert our 100% offset to a pixels offset. It would be equal to the
original picture height minus the target crop height, or in the case of
our example, <code>640 - 360</code>, which is 280 pixels.</p>
<pre><code class="hljs language-sh">convert input.jpg -resize 640x -crop 640x360+0+280 output.jpg
</code></pre>
<p>Similarly, our 75% becomes <code>75 / 100 * (640 - 360)</code>, which is 210.</p>
<p>But it gets a bit annoying to calculate that manually every time.
Instead, let me introduce the <code>magick</code> command!</p>
<h2 id="the-magick-command" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/imagemagick-crop-percentage-css-background-position.html#the-magick-command"><span>The <code>magick</code> command</span></a></h2>
<p><code>magick</code> behaves very similarly to <code>convert</code>, but supports some extra
features like the ability to embed calculations directly in the cropping
options!</p>
<pre><code class="hljs language-sh">magick input.jpg -resize 640x -crop <span class="hljs-string">&#x27;640x360+0+%[fx:75/100*(h-360)]&#x27;</span> output.jpg
</code></pre>
<p>Here, the only variable we have to manually write down is the cropped
height, which we already need to know to perform the crop in the first
place.</p>
<p>With that, it gets easy to adjust the percentage in a way that’s
consistent with what <code>background-position</code> would otherwise do, without
having to do the math by hand.</p>
<p>It was already possible to do this by combining <code>identify</code> and a command
line calculator like <code>bc</code>, but having the option to do that so easily in
the <code>-crop</code> option is definitely nicer!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1457849255855542279">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Elixir: intercepting Phoenix LiveView events in JavaScript</title>
    <link href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html" />
    <id>https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html</id>
    <updated>2021-11-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Recently, I was dealing with a Phoenix LiveView where I wanted to
intercept some events from the LiveSocket to take specific action in
JavaScript.</p>
<p>Typically, I wanted to know when a form was done being submitted and
processed by the backend <strong>even if that event didn’t trigger a DOM
change</strong>.</p>
<h2 id="the-use-case" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#the-use-case"><span>The use case</span></a></h2>
<p>To give the context, I have a <code>&lt;span&gt;</code> that is transformed to a <code>&lt;form&gt;</code>
on click. For reactivity, this is done in JavaScript. When the form is
submitted, it triggers a Phoenix event that might or might not update
the DOM.</p>
<p>I don’t want to reset the state back to the <code>&lt;span&gt;</code> on submission,
because it would temporarily show the old text until the update is
processed by the backend and the DOM is updated, which causes a quick
text flash.</p>
<p>In the happy path where the form submission triggers a DOM update
Phoenix resets the DOM to the <code>&lt;span&gt;</code> and everything is good, but
if we just added a bunch of spaces to the existing text and the backend
decides to trim the value, Phoenix is smart enough to notice that since
the input state didn’t change, it doesn’t need to update the DOM. This
is great, except it leaves us with the open <code>&lt;form&gt;</code> even if the
submission was handled successfully.</p>
<p>To deal with this, I wanted a way to tell from JavaScript when the form
submission was <em>completed</em> so that I can make sure to reset the <code>&lt;span&gt;</code>
only then (to avoid the quick text flash mentioned earlier).</p>
<h2 id="using-phoenix-liveview-hooks" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#using-phoenix-liveview-hooks"><span>Using Phoenix LiveView hooks?</span></a></h2>
<p>The first thing I thought about was to use LiveView hooks as documented
in <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html">JavaScript interoperability</a>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { Socket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix&#x27;</span>
<span class="hljs-keyword">import</span> { LiveSocket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix_live_view&#x27;</span>

<span class="hljs-keyword">const</span> csrfToken = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;meta[name=&#x27;csrf-token&#x27;]&quot;</span>).getAttribute(<span class="hljs-string">&#x27;content&#x27;</span>)

<span class="hljs-keyword">const</span> liveSocket = <span class="hljs-keyword">new</span> LiveSocket(<span class="hljs-string">&#x27;/live&#x27;</span>, Socket, {
  <span class="hljs-attr">params</span>: { <span class="hljs-attr">_csrf_token</span>: csrfToken },
  <span class="hljs-attr">hooks</span>: {
    <span class="hljs-attr">ElementUpdated</span>: {
      updated (e) {
        <span class="hljs-built_in">this</span>.el.dispatchEvent(<span class="hljs-keyword">new</span> CustomEvent(<span class="hljs-string">&#x27;phx:element-updated&#x27;</span>))
      }
    }
  }
})

liveSocket.connect()
</code></pre>
<p>By adding <code>phx-hook=&quot;ElementUpdated&quot;</code> on the elements we want to get
notified for updates, we trigger the hook we defined, which here
dispatches a custom <code>phx:element-updated</code> on the node. This allows us to
handle that event at the node level instead of trying to handle every
single case directly from the hook, which is very nice and decoupled if
you ask me.</p>
<p>For example you could now do:</p>
<pre><code class="hljs language-js">someElement.addEventListener(<span class="hljs-string">&#x27;phx:element-updated&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-comment">// Deal with the fact this element got updated!</span>
})
</code></pre>
<p>Sadly, this didn’t work for me because the <code>updated</code> hook only fires
when the element is… updated, which is not the case if the form
submission completes but doesn’t result in a state change. Bummer.</p>
<h2 id="leveraging-the-phx-page-loading-stop-window-event" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#leveraging-the-phx-page-loading-stop-window-event"><span>Leveraging the <code>phx:page-loading-stop</code> <code>window</code> event</span></a></h2>
<p>This is the easiest solution. Unlike the one I talk about after, it
doesn’t give any granularity on the kind of event that was sent or
received, but it’s very easy to implement.</p>
<p>In my case, I use <a href="https://alpinejs.dev/">Alpine</a> so my code looks something like this:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">x-data</span>=<span class="hljs-string">&quot;{ edit: false }&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;edit = true&quot;</span> @<span class="hljs-attr">click.outside</span>=<span class="hljs-string">&quot;edit = false&quot;</span> @<span class="hljs-attr">phx:page-loading-stop.window</span>=<span class="hljs-string">&quot;edit = false&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">x-show</span>=<span class="hljs-string">&quot;!edit&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- ... --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">x-show</span>=<span class="hljs-string">&quot;edit&quot;</span> <span class="hljs-attr">phx-submit</span>=<span class="hljs-string">&quot;edit_whatever&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- ... --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- ... --&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p>We start with a state of <code>edit: false</code>. When that element is clicked, we
switch the <code>&lt;span&gt;</code> to a <code>&lt;form&gt;</code> to let the user edit it. On
submission, if the DOM is refreshed, Phoenix will reset the state
anyways and we’re back to the <code>&lt;span&gt;</code>, but if it’s not (e.g. input not
modified), we can still handle the <code>page-loading-stop</code> event to go back
to <code>&lt;span&gt;</code> mode. Sweet!</p>
<div class="note">
<p><strong>Note:</strong> if you don’t use Alpine, you can just listen to the
<code>phx:page-loading-stop</code> event on the <code>window</code> object:</p>
<pre><code class="hljs language-js">addEventListener(<span class="hljs-string">&#x27;phx:page-loading-stop&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-comment">// Your code here!</span>
})
</code></pre>
</div>
<h2 id="monkey-patching-the-livesocket" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#monkey-patching-the-livesocket"><span>Monkey patching the LiveSocket 🙈</span></a></h2>
<p>Oh yeah, we love monkey patching. If you use Phoenix LiveView your code
should look something like this (I left alone the Alpine part because
it’s not relevant to this example).</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { Socket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix&#x27;</span>
<span class="hljs-keyword">import</span> { LiveSocket } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;phoenix_live_view&#x27;</span>

<span class="hljs-keyword">const</span> csrfToken = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;meta[name=&#x27;csrf-token&#x27;]&quot;</span>).getAttribute(<span class="hljs-string">&#x27;content&#x27;</span>)

<span class="hljs-keyword">const</span> liveSocket = <span class="hljs-keyword">new</span> LiveSocket(<span class="hljs-string">&#x27;/live&#x27;</span>, Socket, {
  <span class="hljs-attr">params</span>: { <span class="hljs-attr">_csrf_token</span>: csrfToken }
})

liveSocket.connect()
</code></pre>
<p>From there, we can intercept the <code>push</code> method on the LiveSocket
channel. That will in turn allow us to add an event handler to the
<code>receive</code> event for a given push, so that we can not only get the full
response from Phoenix, but can also tell from what event it originated!</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> channel = <span class="hljs-built_in">Object</span>.values(liveSocket.roots)[<span class="hljs-number">0</span>].channel
<span class="hljs-keyword">const</span> pushImpl = channel.push

channel.push = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wrappedPush</span> (<span class="hljs-params">event, payload, timeout</span>) </span>{
  <span class="hljs-keyword">const</span> push = pushImpl.call(<span class="hljs-built_in">this</span>, event, payload, timeout)

  push.receive(<span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> {
    <span class="hljs-built_in">console</span>.log(event, payload, resp)
  })

  <span class="hljs-keyword">return</span> push
}
</code></pre>
<p>In the case of my <code>&lt;form&gt;</code> example earlier, <code>event</code> is set to the string
<code>event</code>, <code>resp</code> would contain a <code>diff</code> object that really only makes
sense to Phoenix (or be an empty object if nothing was updated), and the
<code>payload</code> would look something like this:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;form&quot;</span>,
  <span class="hljs-attr">&quot;event&quot;</span>: <span class="hljs-string">&quot;edit_whatever&quot;</span>,
  <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;URL encoded string of the form elements&quot;</span>
}
</code></pre>
<p>This gives pretty useful informations that can allow to hook to LiveView
events in a much more granular manner!</p>
<p>While I didn’t end up needing that method, I found this trick during my
numerous attempts at dealing with that issue and I found it would be
pretty useful to documented as it’s pretty easy to implement and I
didn’t find anything similar online.</p>
<h2 id="further-reading" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/11/elixir-intercepting-phoenix-liveview-events-javascript.html#further-reading"><span>Further reading</span></a></h2>
<p>If you enjoy reading about this topic, I encourage you to read those two
articles I stumbled upon during my research on this subject.</p>
<ul>
<li><a href="http://blog.pthompson.org/alpine-js-and-liveview">Integrating Phoenix LiveView with JavaScript and AlpineJS</a>
by <a href="http://blog.pthompson.org/">Patrick Thompson</a>, for a cool demo of
using hooks and events to make LiveView and Alpine play nice together
(but sadly not nice enough for my edge case).</li>
<li><a href="https://elixirschool.com/blog/live-view-with-channels/">Using channels with LiveView for better UX</a>
by <a href="https://twitter.com/sm_debenedetto">Sophie DeBenedetto</a>, to extend
the LiveSocket with a custom channel that allow passing granular
messages to the client. It’s pretty complex and it kinda scared me at
first to be honest, but if my <a href="https://www.codejam.info/2021/11/monkey-patching-the-livesocket">monkey patch</a>
solution wasn’t flexible enough for you, this one surely will!</li>
</ul>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1456786062039261187">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>JSDoc: TypeScript inside JavaScript and not the other way around 🤯</title>
    <link href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html" />
    <id>https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html</id>
    <updated>2021-10-17T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This post is inspired by this great <a href="https://speakeasyjs.com/">Speakeasy JS</a>
talk by <a href="https://austingil.com/">Austin Gil</a>. 💯</p>
<figure class="video">
  <iframe src="https://www.youtube.com/embed/iP5XwRT2tNw" allowfullscreen></iframe>
</figure>
<p>Even though I was familiar with the concept of type checking JS files
with TypeScript through JSDoc, I’ve always seen it as a way to
<strong>transition to TypeScript</strong>. You would progressively add
TypeScript-compatible JSDoc to an existing JavaScript project until
everything is covered, to ultimately transition to the actual TypeScript
syntax.</p>
<p>But it never crossed my mind to use TypeScript with JSDoc as an end
goal. Until I saw that talk.</p>
<h2 id="the-problem-with-compiled-javascript" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#the-problem-with-compiled-javascript"><span>The problem with compiled JavaScript</span></a></h2>
<p>The main reason I don’t use TypeScript is not because of TypeScript
itself (even though there’s a lot to say here). It’s because I don’t
like to compile my JavaScript in the first place, at least not when it’s
intended for Node.js.</p>
<p>It’s the same reason I don’t use <a href="https://flow.org/">Flow</a>,
<a href="https://elm-lang.org/">Elm</a>, <a href="https://dart.dev/">Dart</a>,
<a href="https://babeljs.io/">Babel</a> or <a href="https://coffeescript.org/">CoffeeScript</a>.</p>
<p>JavaScript being an interpreted language, it naturally comes with the
ability to directly run your code. <strong>This is an incredibly convenient
thing.</strong></p>
<ul>
<li>It’s fast as fuck because there’s nothing to compile.</li>
<li>You can inspect and debug directly what you write without any extra
tool or configuration.</li>
<li>Your stack traces will be readable and usable out of the box.</li>
<li>Every tool and service you use will (mostly) understand your code by
default, because it’s <em>native</em> and doesn’t require special treatment.</li>
</ul>
<p>That’s a lot of time saved right there by not having to maintain custom
configurations on all the tools and services you use, on top of the fact
you need to install, configure, update and maintain a number of extra
tools, pipelines, workflows, which you’ll also need to teach to
everybody who’s going to work with you because we all do those things a
little bit differently.</p>
<p>Now, there are benefits to invest in this extra work, so if the cost of
compiling your JavaScript is worth it for you, or you just enjoy the
process, that’s fine! As far as I’m concerned, I don’t enjoy a single
bit of it.</p>
<h2 id="separate-type-definitions-hell" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#separate-type-definitions-hell"><span>Separate type definitions hell 🔥</span></a></h2>
<p>Static types are useful and there’s no argument that having type
checking is generally a beneficial thing. For that reason, more and more
people want types with the libraries they’re going to use.</p>
<p>I maintain <a href="https://github.com/valeriangalliat">quite a few</a> open source
JavaScript libraries, and on the most popular ones, people have
requested (or better, contributed) TypeScript definitions, whether it’s
directly in the package repository or on <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">Definitely Typed</a>.</p>
<p>While this comes from a good intention, it causes a number of issues for
everybody involved:</p>
<ul>
<li>
<p>When added directly to the package repository, types represent extra
work for the maintainers who initially wrote a JavaScript project and
didn’t want to write, maintain, and deal with a TypeScript project.</p>
</li>
<li>
<p>Types are pretty much always added as manually written, static <code>.d.ts</code>
files, because it would represent a lot more work (on top of being
extremely bold and opinionated) to convert the project to TypeScript,
and nobody really wants to do that.</p>
<p>This means there’s no guarantee that the types will match what the JS
code is actually doing. It’s a best effort that worked good enough for
whoever contributed it.</p>
</li>
<li>
<p>On top of that, the maintainers (e.g. me) might “forget” to update the
previously contributed TypeScript definitions when they make changes.
The more changes there is, the more likely the types won’t be updated
because of the amount of extra work it represents.</p>
<p>This means that the included types will most certainly drift out of
sync with the actual code (even more than they already are) until it
breaks someone’s build and they contribute a fix.</p>
</li>
</ul>
<p>As a maintainer, what can I do?</p>
<ul>
<li>Should I reject a PR that add type definitions because I’m not ready
to commit to the extra work required to maintain them?</li>
<li>Should I merge the PR only at the condition that the person becomes a
core contributor and maintain the types in future updates?</li>
<li>Should I merge the PR but put a note somewhere that types are
community contributed and might drift out of sync from the JavaScript
code, a bit like I do for translations contributed in languages that I
don’t speak?</li>
</ul>
<p>I don’t like any of those choices. Luckily, most of my projects are
small enough that the types don’t represent a lot of extra work, plus
everybody seems to be happy with type definitions covering only the
happy path which is usually a small subset of the codebase.</p>
<p>So for now I just merge the PRs and let TypeScript users contribute
improvements and bug fixes over time as they need them. It seems that
they’re used to having things partially broken all the time and they
prefer to have inaccurate or incomplete types than no types.</p>
<h2 id="having-the-best-of-both-worlds" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#having-the-best-of-both-worlds"><span>Having the best of both worlds</span></a></h2>
<p>Out of sympathy for those users (I truly think they deserve something
better), and also because I do believe in the benefits of static typing
(as much as I hate compiling an interpreted language), I decided to
start my <a href="https://github.com/valeriangalliat/node-firefox-sync">latest JavaScript library</a>
with TypeScript definitions in mind from the start.</p>
<p>Thanks to the talk I shared in the beginning of this post, I decided to
write my JSDoc comments in a way that the TypeScript compiler can
consume. Here’s a few examples:</p>
<details>
  <summary><a href="https://github.com/valeriangalliat/node-firefox-sync/blob/master/auth/oauth.js"><code>auth/oauth.js</code></a></summary>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> base = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./oauth-base&#x27;</span>)

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncOAuthChallengeImpl</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{crypto.KeyPairKeyObjectResult}</span> <span class="hljs-variable">keyPair</span></span>
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{base.OAuthChallenge &amp; SyncOAuthChallengeImpl}</span> <span class="hljs-variable">SyncOAuthChallenge</span></span>
 */</span>

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param <span class="hljs-type">{SyncOAuthChallenge}</span> <span class="hljs-variable">challenge</span></span>
 * <span class="hljs-doctag">@param <span class="hljs-type">{base.OAuthResult}</span> <span class="hljs-variable">result</span></span>
 * <span class="hljs-doctag">@param <span class="hljs-type">{Object}</span> </span>[options]
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.clientId] - OAuth client ID.
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.scope] - OAuth scope.
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.tokenEndpoint] - OAuth token endpoint.
 * <span class="hljs-doctag">@param <span class="hljs-type">{string}</span> </span>[options.tokenServerUrl] - TokenServer URL.
 * <span class="hljs-doctag">@returns <span class="hljs-type">{Promise&lt;import(&#x27;../types&#x27;).SyncCredentials&gt;}</span></span>
 */</span>
<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complete</span> (<span class="hljs-params">challenge, result, options</span>) </span>{
  <span class="hljs-comment">// Actual code.</span>
}

<span class="hljs-built_in">module</span>.exports = { complete }
</code></pre>
</details>
<details>
  <summary><a href="https://github.com/valeriangalliat/node-firefox-sync/blob/master/types.js"><code>types.js</code></a></summary>
<pre><code class="hljs language-js"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncOptions</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[authServerUrl]
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[authorizationUrl]
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[tokenEndpoint]
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> </span>[tokenServerUrl]
 * <span class="hljs-doctag">@property <span class="hljs-type">{import(&#x27;./auth/oauth-base&#x27;).OAuthOptions}</span> </span>[oauthOptions]
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">OAuthToken</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">access_token</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">scope</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{number}</span> <span class="hljs-variable">expires_in</span></span>
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncToken</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">id</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">key</span></span>
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncKeyBundle</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">encryptionKey</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">hmacKey</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{string}</span> <span class="hljs-variable">kid</span></span>
 *
 * <span class="hljs-doctag">@typedef <span class="hljs-type">{Object}</span> <span class="hljs-variable">SyncCredentials</span></span>
 * <span class="hljs-doctag">@property <span class="hljs-type">{OAuthToken}</span> <span class="hljs-variable">oauthToken</span></span> - The OAuth token required to authenticate to the TokenServer.
 * <span class="hljs-doctag">@property <span class="hljs-type">{SyncKeyBundle}</span> <span class="hljs-variable">syncKeyBundle</span></span> - The Sync key bundle required to decrypt the collection keys.
 * <span class="hljs-doctag">@property <span class="hljs-type">{SyncToken}</span> <span class="hljs-variable">token</span></span> - The token object required to call the Firefox Sync API.
 * <span class="hljs-doctag">@property <span class="hljs-type">{number}</span> <span class="hljs-variable">tokenIssuedAt</span></span> - Timestamp in milliseconds of when the token was issued to preemptively refresh it.
 */</span>

<span class="hljs-comment">// Does nothing but required for TypeScript to import this file.</span>
<span class="hljs-built_in">module</span>.exports = {}
</code></pre>
</details>
<p>Because I was writing that library from scratch and not adding types to
an existing project, this came at a lower cost, and yielded two major
benefits:</p>
<ul>
<li>I can leverage TypeScript for type checking even though the code is
pure JavaScript.</li>
<li>I can let TypeScript derivate <strong>accurate</strong> type definitions from the
source code.</li>
</ul>
<p>Since the <code>.d.ts</code> files are automatically generated as opposed to being
manually maintained, this drastically reduces the chance for them to go
out of sync or be inaccurate, especially because the code itself is also
type checked (this is important because TypeScript will otherwise
happily generate totally broken type definitions from JSDoc comments
that don’t pass type checking).</p>
<p>Also for that same reason, if the types were to be incomplete (there’s
still a number of <code>any</code> in this project, I admit), contributors will
have to add them as JSDoc comments to the JavaScript source and not just
to a “dead” <code>.d.ts</code> file, making the code safer as a side effect by
increasing the actual type checking coverage, and guaranteeing that the
exported types match the underlying implementation. Not only this tests
code against the types, but as importantly, <strong>it tests the types against
the code</strong>.</p>
<h2 id="why-this-works-best-for-me" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#why-this-works-best-for-me"><span>Why this works best for me</span></a></h2>
<p>With this pattern, I can still <strong>write, run and debug native JavaScript
code</strong>.</p>
<p>This is what makes me <strong>efficient at what I’m doing</strong>. My development is
not slowed down by constantly running a compiler, dealing with the extra
complexity that comes with debugging transpiled code, and time spent
fixing type errors on non-production code.</p>
<p>When I write a piece of code, it’s rarely going to be perfect,
production quality code from the start. It takes me dozens of iterations
and rewriting pieces of it until I reach a point where I’m satisfied.
Only when I’m done I’ll clean up and refactor whatever parts need extra
love, handle the edge cases, and make the linter happy. This is when,
and only when, I want to run the type checks. There’s no point in having
blocking type checks on code that I’ll rewrite or remove a minute later.</p>
<div class="note">
<p><strong>Note:</strong> this last point is a problem that I had specifically with the
<code>ts-node</code> utility, but <code>tsc</code> itself is more forgiving and will output a
runnable JS code even when there’s type errors.</p>
<p>Also while writing this section, I stumbled upon <code>ts-node --transpile-only</code>
that allows running the code even if it doesn’t pass type validation,
which seems like a must-have during development. I’m kinda sour that
it took me a 4 months post-burnout retirement kind of step back to
finally find about it, after fighting with this problem for years. 😬</p>
</div>
<h2 id="the-chicken-and-egg-problem-between-js-and-d-ts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#the-chicken-and-egg-problem-between-js-and-d-ts"><span>The chicken and egg problem between <code>.js</code> and <code>.d.ts</code></span></a></h2>
<p>I didn’t share the commands I use to do the type checking and derive the
<code>.d.ts</code> files from the JSDoc comments yet, and you’re probably dying to
know them. 😉</p>
<p>But first, I need to share something else with you. See, I usually have
this kind of structure for packages I publish on npm:</p>
<pre><code class="hljs">my-cool-package
├── index.js
├── package.json
└── test.js
</code></pre>
<p>It seems that the natural way to <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html#tsconfig">extract type definitions</a>
would be:</p>
<pre><code class="hljs language-sh">tsc *.js --allowJs --declaration --emitDeclarationOnly
</code></pre>
<p>Which yields:</p>
<pre><code class="hljs">my-cool-package
├── <span class="hljs-addition">index.d.ts</span>
├── index.js
├── package.json
├── <span class="hljs-addition">test.d.ts</span>
└── test.js</code></pre>
<p>You’ll quickly notice that there’s something funky with this method of
doing things.</p>
<ul>
<li>We generate <code>.d.ts</code> files from <code>.js</code> files.</li>
<li>TypeScript has an <strong>hardcoded</strong> rule where it systematically imports
any <code>.d.ts</code> file that’s next to an imported <code>.js</code> file. This is
regardless of your explicit <code>include</code> and <code>exclude</code> patterns and
there’s no way to turn off this behavior.</li>
<li>TypeScript refuses to overwrite input files (and that’s a good thing).</li>
</ul>
<p>But guess what? <code>test.js</code> imports <code>index.js</code> (so that it can, you know,
test it).</p>
<p>The problem here is that while this command will run fine the first
time, <a href="https://github.com/microsoft/TypeScript/issues/16749">subsequent runs will fail</a>
because TypeScript will <em>always</em> consider a <code>.d.ts</code> that is next to an
included <code>.js</code> file to be part of its inputs and will refuse to
overwrite it. And even if it allowed to overwrite the declaration files,
we would still be loading the stale <code>.d.ts</code> instead of using the
up-to-date JSDoc types, which sounds like a hot mess.</p>
<p>You might tell me that hey, we don’t really need a <code>.d.ts</code> to be
generated for the test file, and you would be right. Replacing <code>*.js</code> by
<code>index.js</code> in the above example does fix the problem.</p>
<p>But sometimes, I’m dealing with a more complex package where the
structure would look something like this:</p>
<pre><code class="hljs">my-cool-package
├── index.js
├── package.json
├── <span class="hljs-addition">some-other-file.js</span>
└── test.js</code></pre>
<p>As soon as <code>index.js</code> imports <code>some-other-file.js</code>, we’re off the happy
path for TypeScript again.</p>
<p>I wrote about this in more details in <a href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html">cannot write file <code>.d.ts</code> because it would overwrite input file</a>,
and you have many options to go about this, including splitting the code
in a <code>src</code> or <code>dist</code> directory or some combination of both, and while
they all solve this particular problem, they also all leak into other
aspects that you’ll have to work around.</p>
<p>For example in the “complex” case above, you might want to allow
your users to <code>import 'my-cool-package/some-other-file'</code>, and not just
<code>import 'my-cool-package'</code>. How wild would that be?</p>
<p>Apparently, wild enough that most of the recommended solutions for the
earlier problem will fail to deliver types information for that use
case, or require you to do crazy things like copying your <code>package.json</code>
to the <code>dist</code> directory and publishing from there.</p>
<h2 id="the-simple-hack-that-just-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#the-simple-hack-that-just-works"><span>The simple hack that just works</span></a></h2>
<p>Because I prefer a simple hack that just works to a fix that will break
other things and require a cascade of other fixes, I settled for the
following command:</p>
<pre><code class="hljs"><span class="hljs-addition">rm -f *.d.ts && </span>tsc *.js --allowJs --declaration --emitDeclarationOnly</code></pre>
<p>It’s simple, reliable, it works and I understand every bit of why it
works and why it needs to be there (as much as I hate that it needs to
be there in the first place).</p>
<p>I also added <code>--removeComments</code> and replaced <code>--allowJs</code> by <code>--checkJs</code>
to make sure that the code passes type checking when I generate the
final definitions.</p>
<p>In my <code>package.json</code>, the final <code>scripts</code> property looks like this:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;scripts&quot;</span>: {
    <span class="hljs-attr">&quot;check&quot;</span>: <span class="hljs-string">&quot;tsc *.js --checkJs --noEmit&quot;</span>,
    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
    <span class="hljs-attr">&quot;prepare&quot;</span>: <span class="hljs-string">&quot;npm run lint &amp;&amp; npm run types&quot;</span>,
    <span class="hljs-attr">&quot;types&quot;</span>: <span class="hljs-string">&quot;rm *.d.ts &amp;&amp; tsc *.js --checkJs --declaration --emitDeclarationOnly --removeComments&quot;</span>
  }
}
</code></pre>
<p>As always, I use <a href="https://standardjs.com/"><code>standard</code></a> to lint my code,
and in the <a href="https://docs.npmjs.com/cli/v7/using-npm/scripts#life-cycle-scripts"><code>prepare</code></a>
script, the code is linted, typed checked and the definitions are
updated.</p>
<p>There’s also a convenience <code>check</code> script that doesn’t emits the
declaration files, to be used for quick checks during development.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/jsdoc-typescript-inside-javascript.html#conclusion"><span>Conclusion</span></a></h2>
<p>As usual with TypeScript it was a pain in the ass to get this to work
and (also as usual) I had to resort to a hack at the end of the day. But
that’s mostly because I’m a perfectionist and I wasn’t happy with having
just the happy path working. 😜</p>
<p>Still, I believe that this method allows to reduce the gap between
TypeScript and JavaScript, while <strong>getting rid of manual work</strong>, making
the JavaScript code <strong>safer</strong>, and making the type definitions <strong>more
accurate and reliable</strong> by tightly coupling them to the code.</p>
<p>Because it yields <strong>most of the benefit</strong> at the <strong>lowest cost and
initial investment</strong>, TypeScript-aware JSDoc comments is likely to
become my go-to for writing JS libraries from now on.</p>
<p>What do you think of this solution? Have you used it yourself, or did
this make you want to type your projects this way? Feel free to <a href="https://www.codejam.info/val.html#contact">reach out</a>
and let me know. And as usual, keep hacking! ✨</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1449783928970256394">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>TypeScript: cannot write file .d.ts because it would overwrite input file</title>
    <link href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html" />
    <id>https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html</id>
    <updated>2021-10-16T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>There’s <a href="https://stackoverflow.com/questions/42609768/typescript-error-cannot-write-file-because-it-would-overwrite-input-file">countless</a>
<a href="https://stackoverflow.com/questions/46914070/how-to-exclude-d-ts-file-for-typescript-compiler">issues</a>
<a href="https://github.com/microsoft/TypeScript/issues/16749">about</a>
this error and I thought it would be useful to write a clear explanation
of what’s going on and a summary of the possible solutions.</p>
<p>This happens for two reasons:</p>
<ol>
<li>You’re explicitly including those <code>.d.ts</code> files e.g. as part of your
<code>include</code> array in <code>tsconfig.json</code> or as part of the <code>tsc</code> arguments,
and you’re asking TypeScript to output type declarations in the same
place. Then the error is pretty obvious and the fix should be too
(don’t output the generated declarations in the same place as types
you’re importing, for example using <code>outDir</code>, or don’t import those
generated declarations in the first place).</li>
<li>You’re not importing those <code>.d.ts</code> files, or you’re even explicitly
ignoring them e.g. with the <code>exclude</code> array in <code>tsconfig.json</code>, yet
TypeScript keeps using them as input and complaining that it can’t
overwrite them when generating type declarations.</li>
</ol>
<p>Here we’ll go in more details about the second reason.</p>
<h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#the-problem"><span>The problem</span></a></h2>
<p>The main thing that you need to know is that if you’re importing a <code>.js</code>
file and there’s a matching <code>.d.ts</code> next to it, TypeScript will
<strong>always</strong> import it, even if you didn’t explicitly include those
<code>.d.ts</code> files as input, and even if you explicitly put them in the
<code>exclude</code> array. There’s no way around this.</p>
<h2 id="output-d-ts-declarations-to-a-separate-directory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#output-d-ts-declarations-to-a-separate-directory"><span>Output <code>.d.ts</code> declarations to a separate directory</span></a></h2>
<p>One solution is to put the generated type declarations in a separate
directory instead of next to the <code>.js</code> files. You can do that by
configuring a <code>outDir</code>, as explained in the documentation about
<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html#tsconfig">creating <code>.d.ts</code> files from <code>.js</code> files</a>:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;compilerOptions&quot;</span>: {
    <span class="hljs-comment">// Tells TypeScript to read `.js` files, as normally they are</span>
    <span class="hljs-comment">// ignored as source files.</span>
    <span class="hljs-attr">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-comment">// Generate `d.ts` files.</span>
    <span class="hljs-attr">&quot;declaration&quot;</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-comment">// This compiler run should only output `d.ts` files.</span>
    <span class="hljs-attr">&quot;emitDeclarationOnly&quot;</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-comment">// Types should go into this directory. Removing this would place</span>
    <span class="hljs-comment">// the `.d.ts` files next to the `.js` files.</span>
    <span class="hljs-attr">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>
  }
}
</code></pre>
<p>As they nicely indicate, if you don’t specify <code>outDir</code>, the <code>.d.ts</code> will
be put next to the <code>.js</code> files (which literally means they’ll be
automatically considered as inputs on the next build and it will crash),
and it’s probably the way you’re using this right now.</p>
<p>Then you can tell TypeScript where to <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html">find the package types</a>
in your <code>package.json</code>:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;types&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>
}
</code></pre>
<p>But this only works for the main export (<code>import 'my-lib'</code>) and will
break if you attempt to import nested files <code>import 'my-lib/some-file'</code>.</p>
<p>If you want to support this use case, you <strong>have to</strong> ship the <code>.d.ts</code>
files next to the <code>.js</code> files.</p>
<p>So here’s a few alternative solutions and their tradeoffs.</p>
<h2 id="copy-the-js-files-next-to-the-d-ts-declarations" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#copy-the-js-files-next-to-the-d-ts-declarations"><span>Copy the <code>.js</code> files next to the <code>.d.ts</code> declarations</span></a></h2>
<p>Since we can’t generate the <code>.d.ts</code> next to the source <code>.js</code> files (well
we can, but just once), we can instead generate the <code>.d.ts</code> files to a
<code>dist</code> directory and copy the <code>.js</code> files next to them.</p>
<p>There’s two ways you can do that, the first one I tried is to remove
<code>emitDeclarationOnly</code> so that let TypeScript compiles the source <code>.js</code>
files to the <code>outDir</code>, and the other one is to manually copy them.</p>
<p>In both cases there’s a number of caveats with that about how you import
nested files, and I’ll go through the possible workarounds.</p>
<h3 id="compile-your-js-files-to-js-lol" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#compile-your-js-files-to-js-lol"><span>Compile your JS files to JS (lol)</span></a></h3>
<p>The reason you have this error in the first place is likely because
you’re writing actual JavaScript and generating types from JSDoc.</p>
<p>One of the numerous benefits of doing that is that you don’t need to
compile your code. Your <code>src</code> is your <code>dist</code> and that’s the beauty of
it. You run what you write, no compilation, no source maps, and no
configuration of every single tool and service you use to deal with this
extra complexity.</p>
<p>You can throw away all of those benefits by letting TypeScript compile
your <code>.js</code> files to the <code>outDir</code>, by removing <code>emitDeclarationOnly</code> from
the <code>tsc</code> command or <code>tsconfig.json</code>, so that they’re put along the
generated <code>.d.ts</code> files.</p>
<p>But at that point you might as well write TypeScript in the first place.</p>
<h3 id="manually-copy-your-js-files-to-the-outdir" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#manually-copy-your-js-files-to-the-outdir"><span>Manually copy your JS files to the <code>outDir</code></span></a></h3>
<p>A <a href="https://vccolombo.github.io/blog/tsc-how-to-copy-non-typescript-files-when-building/">better way</a>
if you want to ship your <code>.js</code> files unaltered is to copy them yourself
next to the <code>.d.ts</code> declarations.</p>
<pre><code class="hljs language-sh">tsc *.js --allowJs --declaration --emitDeclarationOnly --outDir dist &amp;&amp; cp *.js dist
</code></pre>
<p>Then you can <code>import 'my-lib/dist/some-file</code> and types will work
properly. If you want to allow deep imports though, we need to dig a bit
further.</p>
<h2 id="getting-it-to-work-with-deep-nested-imports" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#getting-it-to-work-with-deep-nested-imports"><span>Getting it to work with deep/nested imports</span></a></h2>
<p>If you want to allow <code>import 'my-lib/some-file'</code> and don’t like the idea
of documenting <code>import 'my-lib/dist/some-file'</code>, you have again
<a href="https://stackoverflow.com/questions/67097803/how-to-let-users-import-from-subfolders-of-my-npm-package">a few options</a>.</p>
<h3 id="compile-to-the-project-root" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#compile-to-the-project-root"><span>Compile to the project root</span></a></h3>
<p>Make sure your source files are in a subfolder, e.g. <code>src</code>, then compile
to the project root directory.</p>
<pre><code class="hljs language-sh">tsc src/*.js --allowJs --declaration --emitDeclarationOnly --outDir . &amp;&amp; cp src/*.js .
</code></pre>
<h3 id="publish-from-your-dist-directory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#publish-from-your-dist-directory"><span>Publish from your <code>dist</code> directory</span></a></h3>
<p>The previous solution might get a bit messy though so
<a href="https://stackoverflow.com/questions/38935176/how-to-npm-publish-specific-folder-but-as-package-root">alternatively</a>
you can use the earlier command with <code>--outDir dist</code>, but put your
<code>package.json</code> in the <code>dist</code> directory as well, and run <code>npm publish dist</code> (or <code>cd dist &amp;&amp; npm publish</code>).</p>
<p>Whether you want your <code>package.json</code> to live in the <code>dist</code> directory
(and commit it there), or run <code>cp package.json dist</code> as part of your
build command is up to you.</p>
<h3 id="write-an-exports-map" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#write-an-exports-map"><span>Write an <code>exports</code> map</span></a></h3>
<p>If you’re not happy with the previous solutions, you can write an
<a href="https://nodejs.org/api/packages.html#packages_exports"><code>exports</code> map</a>
in your <code>package.json</code> so that <code>import 'my-lib/some-file</code> translates
to <code>my-lib/dist/some-file</code>.</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;exports&quot;</span>: {
   <span class="hljs-attr">&quot;./some-file&quot;</span>: <span class="hljs-string">&quot;./dist/some-file&quot;</span>,
   <span class="hljs-attr">&quot;./some/other-file&quot;</span>: <span class="hljs-string">&quot;./dist/some/other-file&quot;</span>
  }
}
</code></pre>
<p>That being said only the paths defined here will be allowed to be
imported, you won’t be able to import arbitrary files anymore, which
might not be a bad thing, but maybe you like the simplicity of
everything being importable by default.</p>
<h2 id="quick-and-dirty-hack-that-actually-works" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/typescript-cannot-write-file-overwrite-input.html#quick-and-dirty-hack-that-actually-works"><span>Quick and dirty hack that actually works</span></a></h2>
<p>To get the best of both worlds by generating <code>.d.ts</code> files next to your
source <code>.js</code> files without adding extra configuration and still allowing
deep imports, you need to <strong>explicitly remove the generated files before
running the compiler</strong>.</p>
<p>Simple, easy and dirty:</p>
<pre><code class="hljs language-sh">rm -f *.d.ts &amp;&amp; tsc *.js --allowJs --declaration --emitDeclarationOnly
</code></pre>
<p>Here I use <code>rm -f</code> so that it doesn’t fail if the declaration files are
not generated yet. Feel free to tweak the pattern, for example if you
have subfolders you want to include.</p>
<p>I’m not a big fan of this solution, but it’s still my favorite of all
the ones I described in this post. It seems that TypeScript wasn’t built
for simplicity, let alone for working with source <code>.js</code> files, and deep
imports don’t seem to be part of the happy path either. If you found a
better way, please <a href="https://www.codejam.info/val.html#contact">let me know</a>!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Bypass SQLite exclusive lock 🔐</title>
    <link href="https://www.codejam.info/2021/10/bypass-sqlite-exclusive-lock.html" />
    <id>https://www.codejam.info/2021/10/bypass-sqlite-exclusive-lock.html</id>
    <updated>2021-10-14T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>There’s a <a href="https://www.sqlite.org/lockingv3.html">number of ways</a> SQLite
can lock a database file, and if you’re encountering a “database is
locked” error, according to <a href="https://stackoverflow.com/questions/151026/how-do-i-unlock-a-sqlite-database">the internet</a>,
you have two options:</p>
<ol>
<li>If you control the software that created the lock, go and fix the
problematic queries.</li>
<li>You’re fucked.</li>
</ol>
<p>By “you’re fucked” I mean that your seemingly only option is to <strong>copy
the whole database file and query the copy</strong>. If working off a one-time
snapshot of the database work for you, awesome, problem solved:</p>
<pre><code class="hljs language-sh">$ <span class="hljs-built_in">echo</span> .tables | sqlite3 db.sqlite
Error: database is locked
$ cp db.sqlite db-snapshot.sqlite
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;.tables&#x27;</span> | sqlite3 db-snapshot.sqlite
actual_table
</code></pre>
<p>But it seems that’s not a good enough solution for many people (including myself)
and we’re desperately trying to <a href="https://stackoverflow.com/questions/7857755/is-it-possible-to-open-a-locked-sqlite-database-in-read-only-mode">perform</a>
<a href="https://www.linuxquestions.org/questions/linux-server-73/can-i-open-sqlite-datbase-in-read-only-mode-4175578075/">read-only</a>
<a href="https://github.com/skeeto/emacsql/issues/34">queries</a>
<a href="https://www.reddit.com/r/firefox/comments/aw01gq/how_to_disable_sqlite_database_locking_for/">on a</a>
<a href="https://dba.stackexchange.com/questions/45368/how-do-i-prevent-sqlite-database-locks">locked</a>
SQLite database.</p>
<p>This is especially useful for <strong>Firefox</strong> and <strong>Chrome</strong> SQLite files
because both browsers have a bad tendency to keep them permanently
locked, preventing us to access the database without closing the browser
first.</p>
<p>In my case, I want to poll a specific table, and while technically the
database is small enough that it’s not a problem to copy it over and
over to query it periodically, <strong>I just don’t like this idea</strong>
and I believe there <em>must</em> be a better way.</p>
<p>So let me tell you the better way.</p>
<h2 id="the-better-way" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/bypass-sqlite-exclusive-lock.html#the-better-way"><span>The better way</span></a></h2>
<p>SQLite <a href="https://www.sqlite.org/c3ref/open.html">allows passing</a> a
<a href="https://www.sqlite.org/uri.html"><code>file:</code> URI</a> instead of a filename
(e.g. <code>file:db.sqlite</code> instead of <code>db.sqlite</code>), which comes with the
extra ability to pass query string parameters.</p>
<p>Some of those are aliases for flags you could otherwise set when opening
the connexion, for example <a href="https://github.com/sqlite/sqlite/blob/8436f53ebe369e0d646068d3b25ea11673debf0e/src/main.c#L3023"><code>mode=ro</code></a>
is equivalent to setting <a href="https://www.sqlite.org/c3ref/c_open_autoproxy.html"><code>SQLITE_OPEN_READONLY</code></a>
and <a href="https://github.com/sqlite/sqlite/blob/8436f53ebe369e0d646068d3b25ea11673debf0e/src/main.c#L3011"><code>cache=private</code></a>
the same as <a href="https://www.sqlite.org/c3ref/c_open_autoproxy.html"><code>SQLITE_OPEN_PRIVATECACHE</code></a>.</p>
<p>But we also have other parameters that have a deeper implementation that
would otherwise be inaccessible to the SQLite user (no configuration
flags for those). In particular, <a href="https://github.com/sqlite/sqlite/blob/8436f53ebe369e0d646068d3b25ea11673debf0e/src/pager.c#L4913"><code>nolock</code></a>
and <a href="https://github.com/sqlite/sqlite/blob/8436f53ebe369e0d646068d3b25ea11673debf0e/src/pager.c#L4915"><code>immutable</code></a>.</p>
<p>While <code>nolock</code> only prevents this connection from locking the database
and doesn’t do anything about the fact a lock is already being held by
another connection, the <code>immutable</code> is especially interesting for us.
From its <a href="https://www.sqlite.org/c3ref/open.html">documentation</a>:</p>
<blockquote>
<p>The immutable parameter is a boolean query parameter that indicates
that the database file is stored on read-only media. When <code>immutable</code>
is set, SQLite assumes that the database file cannot be changed, and
so the database is opened read-only and <strong>all locking and change
detection is disabled</strong>.</p>
<p><strong>Caution:</strong> setting the immutable property on a database file that
does in fact change can result in incorrect query results and/or
<a href="https://www.sqlite.org/rescode.html#corrupt"><code>SQLITE_CORRUPT</code></a> errors.</p>
<p><strong>See also:</strong> <a href="https://www.sqlite.org/c3ref/c_iocap_atomic.html"><code>SQLITE_IOCAP_IMMUTABLE</code></a>.</p>
</blockquote>
<p>Even though <code>SQLITE_IOCAP_IMMUTABLE</code> is not an option per se, but a
particular characteristic of the IO device, we can force SQLite to treat
the database as if was on an read-only device by setting <code>immutable=1</code>,
which has the particularity of disabling all locking mechanisms,
<strong>including that of respecting existing locks</strong>.</p>
<p>With this trick, we can rewrite the previous fix:</p>
<pre><code class="hljs language-sh">$ <span class="hljs-built_in">echo</span> .tables | sqlite3 db.sqlite
Error: database is locked
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;.tables&#x27;</span> | sqlite3 <span class="hljs-string">&#x27;file:db.sqlite?immutable=1&#x27;</span>
actual_table
</code></pre>
<p>This doesn’t require creating a copy of the file that you want to
query it despite it being locked by another active connection!</p>
<p>The only caveat is because SQLite doesn’t expect that file to be
updated, changes wont be reflected in that immutable connexion, so it’s
still like you’re querying a snapshot, it’s just that you don’t have to
physically copy the database in order to read it.</p>
<p>Also as mentioned earlier, if the underlying database is updated, this
might result in errors when querying over the immutable connection.
Because of that, I would recommending opening a new connection every
time you want to query the database.</p>
<h2 id="applying-it-to-a-sqlite-driver" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/bypass-sqlite-exclusive-lock.html#applying-it-to-a-sqlite-driver"><span>Applying it to a SQLite driver</span></a></h2>
<p>It’s nice to be able to do that with the CLI, but how do we do that from
a program that uses a SQLite driver? In my case I’m using
<a href="https://www.npmjs.com/package/sqlite3"><code>sqlite3</code></a> with Node.js, but the
method should be very similar in your language of choice.</p>
<p>Because the <code>immutable</code> option is only available in the <a href="https://www.sqlite.org/uri.html">URI filename</a>
format, we need to pass this kind of URI to our driver, e.g.
<code>file:db.sqlite?immutable=1</code> as opposed to <code>db.sqlite</code>.</p>
<p>The URI format is not enabled by default and you need to pass the
<a href="https://www.sqlite.org/c3ref/c_open_autoproxy.html"><code>SQLITE_OPEN_URI</code></a>
flag in order to enable it.</p>
<p>With <code>sqlite3</code>, this looks like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> sqlite3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sqlite3&#x27;</span>)
<span class="hljs-keyword">const</span> db = <span class="hljs-keyword">new</span> sqlite3.Database(<span class="hljs-string">&#x27;file:db.sqlite?immutable=1&#x27;</span>, sqlite3.OPEN_READONLY | sqlite3.OPEN_URI)
</code></pre>
<p>We need to precise <code>OPEN_READONLY</code> because <code>OPEN_URI</code> alone is not a
valid mode, and by passing an explicit mode, we’re effectively
overriding the <a href="https://github.com/mapbox/node-sqlite3/blob/918052b538b0effe6c4a44c74a16b2749c08a0d2/src/database.cc#L135">default</a>
of <code>SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_FULLMUTEX</code>.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/bypass-sqlite-exclusive-lock.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>I hope you enjoyed this trick! If you find a better way to do this, or
a way that allows to reflect underlying database updates without
reloading the connection, please <a href="https://www.codejam.info/val.html#contact">let me know</a>, I’d
love to know about it!</p>
<p>And as usual, keep hacking. 😜</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1448722067638177795">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How long can you keep a tent and sleeping bag packed wet? 🏕</title>
    <link href="https://www.codejam.info/2021/10/tent-sleeping-bag-packed-wet.html" />
    <id>https://www.codejam.info/2021/10/tent-sleeping-bag-packed-wet.html</id>
    <updated>2021-10-05T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>Camping is not always going as planned. You might hit unexpected rain,
or just a very humid weather, and might be forced to leave in unideal
conditions, where your sleeping bag or tent is still humid from rain or
condensation, and you’re not in a situation where you can properly dry
it off before packing.</p>
<p>How bad can it be if you packed your wet sleeping bag or tent? What if
you forgot it like this for a few days, or just weren’t in a situation
where you could take it out to dry the same day? How bad can this be for
your equipment? Here’s my experience.</p>
<figure class="center">
  <a href="https://photography.codejam.info/photos/P2560398.html">
    <img alt="Tents in snow" src="https://photography.codejam.info/photos/sd/P2560398.jpg">
  </a>
</figure>
<h2 id="equipment-and-context" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/tent-sleeping-bag-packed-wet.html#equipment-and-context"><span>Equipment and context</span></a></h2>
<p>My tent is a <a href="https://www.msrgear.com/ca/tents/backpacking-tents/hubba-hubba-nx-2-person-backpacking-tent/10316.html">MSR Hubba Hubba NX</a>,
and my sleeping bag is actually a <a href="https://enlightenedequipment.com/revelation-custom/">down quilt</a>
made by <a href="https://enlightenedequipment.com/">Enlightened Equipment</a>. Both
are fairly expensive so I’m always pretty cautious about them.</p>
<p>Few days ago I was camping and packed my tent in the morning after a
rainy night. It was going to rain all day so there was no chance of the
equipment drying properly before leaving.</p>
<p>This is not the first time this happens, and usually I can unpack them a
few hours later or at least the same night at home, and have them dry in
the apartment or outside if it’s nice enough. When it’s dry, I shake the
dust off the tent and pack everything nicely again. Or if I’m on a
multiday hike, I’ll just set it up again somewhere else the same night,
and even if it’s still raining, the humidity is usually not a problem
unless the gear is tightly packed and cannot breathe.</p>
<figure class="center">
  <a href="https://photography.codejam.info/photos/P2640878.html">
    <img alt="Tent on an island" src="https://photography.codejam.info/photos/sd/P2640878.jpg">
  </a>
</figure>
<h2 id="the-exception" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/tent-sleeping-bag-packed-wet.html#the-exception"><span>The exception</span></a></h2>
<p>But this time, something different happened that made me forget about my
equipment. We went for a bouldering session during the day, and <strong>I took
a pretty bad fall and broke my tailbone</strong>. Not bad enough for me to go
to the hospital, but still shook me enough that I forgot about my tent
and sleeping bag during the rest of the trip (we were staying at a
chalet for the last few days).</p>
<p><strong>I left my (damp) gear packed in my hiking backpack</strong>. It’s only when
getting back home that I realized everything stayed packed wet for 4
days straight. Kinda worrying when you read online a sleeping bag
shouldn’t stay compressed more than 12 hours, let alone compressed wet,
and a tent can develop mold when stored wet for more than 24 or 48
hours.</p>
<blockquote>
<p>Generally speaking, you should not leave your sleeping bag in a
compression sack for longer than 12 hours at a time.</p>
<p>This is only a guideline though, and you shouldn’t worry if your
sleeping bag is compressed for longer than this. It is not like it
will be ruined if it’s stored for another few hours or even a day like
this.</p>
<p>— <a href="https://bigoutdooradventure.com/compression-sack-sleeping-bags-how-long-can-they-stay-compressed/">Big Outdoor Adventure, “Compression sack sleeping bags – how long can they stay compressed?”</a></p>
</blockquote>
<p>What about when it’s 4 days straight or more though?</p>
<blockquote>
<p>It only takes 24 to 48 hours before mold starts to noticeably grow on
the fabric of your tent.</p>
<p>— <a href="https://bigoutdooradventure.com/compression-sack-sleeping-bags-how-long-can-they-stay-compressed/">Camping Habits, “How long can you store a wet tent?”</a></p>
</blockquote>
<figure class="center">
  <a href="https://photography.codejam.info/photos/P2560533.html">
    <img alt="Tents with a sunset" src="https://photography.codejam.info/photos/sd/P2560533.jpg">
  </a>
</figure>
<h2 id="how-bad-was-it" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/tent-sleeping-bag-packed-wet.html#how-bad-was-it"><span>How bad was it?</span></a></h2>
<p>When I unpacked everything, they were both still pretty wet to the
touch. I let them dry overnight in my apartment. 🙏 Those are very good
and expensive equipment and I was worried that I might have ruined or
significantly damaged them by leaving them packed wet for pretty much
4 times longer than recommended.</p>
<p>The next day, I shook everything off, and it turns out the tent didn’t
develop any mold! And the sleeping bag was nicely dry and took back its
normal fluffiness. Both smelled as smokey as usual 😆, no worst no
better, but definitely not like mold or anything concerning.</p>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/10/tent-sleeping-bag-packed-wet.html#conclusion"><span>Conclusion</span></a></h2>
<p>While you should definitely avoid doing that, if you end up in a
situation where you left your tent or sleeping bag packed wet for a
few days, maybe even a week, don’t sweat it, <strong>you probably didn’t ruin
your gear</strong>!</p>
<p>If you have high quality equipment, maybe it’ll last 28 years instead of
30 because of such a mistake? But it shouldn’t be a huge deal if it
<strong>happens exceptionally</strong> and you otherwise <strong>take good care of it</strong>.</p>
<p>Did you have a similar experience where you left your gear packed in an
unideal way for longer than you would have wanted to? <a href="https://www.codejam.info/val.html#contact">Let me know</a>
what kind of gear you have, what happened and how it turned out! I’d
love to update this post and get a better idea of how different
equipment react to rough situations.</p>
<figure class="center">
  <a href="https://photography.codejam.info/photos/P1060390-Edit.html">
    <img alt="Tents in snow" src="https://photography.codejam.info/photos/sd/P1060390-Edit.jpg">
  </a>
</figure>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Start a conversation on <a href="https://twitter.com/valeriangalliat">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Authy: reversed 🔐</title>
    <link href="https://www.codejam.info/2021/09/authy-reversed.html" />
    <id>https://www.codejam.info/2021/09/authy-reversed.html</id>
    <updated>2021-09-28T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I recently signed up for SendGrid for a new business. It seems like a
nice tool to send my transactional emails.</p>
<p>One thing with SendGrid though is that they enforce 2FA. You can’t
access your account without enabling 2FA first. That’s great, except one
thing:</p>
<p><strong>They only offer two options for 2FA: Authy and SMS.</strong></p>
<p>That’s somewhat understandable, because SendGrid belongs to Twilio, who
also owns Authy. By forcing SendGrid users on Authy, and making sure
that they can’t easily use any of the competitor 2FA apps, they boost
their Authy adoption metrics, and that will certainly make investors
happy. Users? Not so much.</p>
<p>But I’m not a Authy user, and I don’t plan to be. I definitely will not
install the Authy app just for this. “Use the alternative SMS 2FA
method” you’ll say? But that’s less secure on top of having a poor user
experience. I’d rather <a href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html">use my existing password manager for this</a>
which is much faster and more convenient.</p>
<div class="note">
<p><strong>Note:</strong> if you don’t care about the technical details and just want to
transfer your Authy secrets to another authenticator, check out
<a href="https://github.com/valeriangalliat/authy-user-client">Authy user client</a>.</p>
<p>Otherwise, keep reading, I’ll give you all the details about it! ✌️</p>
</div>
<h2 id="here-we-go-again" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/authy-reversed.html#here-we-go-again"><span>Here we go again</span></a></h2>
<p>Every time I face a situation like this, I reverse.
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">I love</a>
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">reversing</a>
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">things</a>,
especially when it helps me make my life better. I’ll spend
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">days</a>,
even
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">weeks</a>
doing what’s necessary to achieve what I want.</p>
<p>Maybe that means decompiling apps and running them through a debugger,
or patching APKs to wipe certificate pinning mechanism in order to
<a href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html">intercept the TLS traffic through a logging proxy</a>.</p>
<p>Often though, things are even easier. In the case of Authy, they have a
<a href="https://chrome.google.com/webstore/detail/authy/gaedmjdfmmahhbjefcbgaolhhanlaolb">Chrome app</a>
that we can easily debug to understand how the protocol work. The best
thing about it? Someone already did a lot of the work and <a href="https://randomoracle.wordpress.com/2017/02/15/extracting-otp-seeds-from-authy/">documented it</a>.
Sweet.</p>
<div class="note">
<p><strong>Note:</strong> I noticed later that <a href="https://github.com/alexzorin/authy">someone wrote a similar program in Go</a>.</p>
<p>The main difference is that it’s intended to be used alongside an
existing Authy app and account, instead of replacing it completely, but
a lot of the code is the same. If Go is more your jam, check it out!</p>
</div>
<h2 id="understanding-the-implementation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/authy-reversed.html#understanding-the-implementation"><span>Understanding the implementation</span></a></h2>
<p>That article <a href="https://randomoracle.wordpress.com/2017/02/15/extracting-otp-seeds-from-authy/">I linked earlier</a>
gives us a good starting point:</p>
<ol>
<li>Authy uses TOTP in the background.</li>
<li>They generate TOTP using SHA-1, 7 digits, and a period of 10 seconds
(whereas most implementations are SHA-1, 6 digits and 30 seconds).</li>
<li>They check the codes against the neighbouring periods, not only the
current one, which is how they allow codes to be valid for 20 seconds
even if the underlying implementation uses 10 seconds periods.</li>
<li>By debugging the <a href="https://chrome.google.com/webstore/detail/authy/gaedmjdfmmahhbjefcbgaolhhanlaolb">Chrome app</a>,
you can easily extract your Authy secrets and import them in your
favorite authenticator app or password manager.</li>
</ol>
<p>That’s awesome, but we’re not there yet. I don’t want to <em>have to use
Authy</em> (even once) in order to <em>not use Authy later</em>.</p>
<p>A mystery still remains. Since during 2FA setup they don’t ever show a
QR code or give access to a TOTP URI or plaintext secret, how do this
secret ever reach the Authy app? Is it cryptographically derived from
the phone number, the service name, and other parameters? How does the
Authy app automagically knows what secret to generate the codes with?</p>
<p>Well, as it often turns out, the easiest answer is often the right one.
By inspecting the network traffic of the Chrome app, we clearly see
that… the secrets are directly retrieved from the Authy servers.</p>
<p>Now, how do we write our own code that fetches the secrets from the
Authy servers, without installing the Authy app? Let me tell you.</p>
<h2 id="documenting-the-protocol" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/authy-reversed.html#documenting-the-protocol"><span>Documenting the protocol</span></a></h2>
<p>If we install the Chrome app, use our phone number to sign up or log in,
and generate a one-time code, the following happens:</p>
<ol>
<li>The app checks the status of the given number on the Authy servers.</li>
<li>If the user doesn’t exist, it creates it.</li>
<li>Then it starts a device registration flow, which consists in sending
a code to the user’s device via a call, SMS, or a push notification
to an existing Authy app if any.</li>
<li>By inputting that code in the Chrome app, it can finalize the
registration flow and gets its own ID and “secret seed”.</li>
<li>It uses that seed as TOTP secret to generate a code for the next 3
periods, and sends those 3 codes along with its device ID to sync the
Authy state. This is how we retrieve the plaintext secrets for all
the services associated with that account.</li>
</ol>
<p>Additionally, all the requests contain an API key that’s public and
hardcoded in the Chrome app.</p>
<div class="note">
<p><strong>Note:</strong> the secrets for each 2FA entry are unique to each Authy
installation. This means that the secrets in the app on one device
will be different from the secrets on another device (including our own
client).</p>
<p>I expect they use that to make the secrets revocable. If you remove one
of your Authy devices, the secret seeds associated with it are going to
be invalidated and the codes generated by this device are no longer
valid.</p>
</div>
<p>With that in mind, we can write an API client.</p>
<h2 id="making-a-client" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/authy-reversed.html#making-a-client"><span>Making a client</span></a></h2>
<p>At that point you’ll be interested to look at the code of <a href="https://github.com/valeriangalliat/authy-user-client">Authy user client</a>.</p>
<p>I won’t copy everything here, but I essentially made a quick
<a href="https://github.com/valeriangalliat/authy-user-client/blob/c77d5c6e56619b012079482da4d7b9d269bab485/index.js#L38">API wrapper</a>
that allows me to define every method very concisely:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> checkUserStatus = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.country_code}</span>-<span class="hljs-subst">${p.cellphone}</span>/status`</span>,
  <span class="hljs-attr">search</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>]
})

<span class="hljs-keyword">const</span> createUser = api({
  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/users/new&#x27;</span>,
  <span class="hljs-attr">body</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;cellphone&#x27;</span>, <span class="hljs-string">&#x27;country_code&#x27;</span>]
})

<span class="hljs-keyword">const</span> startRegistration = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.authy_id}</span>/devices/registration/start`</span>,
  <span class="hljs-attr">body</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;via&#x27;</span>, <span class="hljs-string">&#x27;signature&#x27;</span>, <span class="hljs-string">&#x27;device_app&#x27;</span>]
})

<span class="hljs-keyword">const</span> completeRegistration = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.authy_id}</span>/devices/registration/complete`</span>,
  <span class="hljs-attr">body</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;pin&#x27;</span>]
})

<span class="hljs-keyword">const</span> listDevices = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.authy_id}</span>/devices`</span>,
  <span class="hljs-attr">search</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;otp1&#x27;</span>, <span class="hljs-string">&#x27;otp2&#x27;</span>, <span class="hljs-string">&#x27;otp3&#x27;</span>, <span class="hljs-string">&#x27;device_id&#x27;</span>]
})

<span class="hljs-keyword">const</span> deleteDevice = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.authy_id}</span>/devices/<span class="hljs-subst">${p.delete_device_id}</span>/delete`</span>,
  <span class="hljs-attr">body</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;otp1&#x27;</span>, <span class="hljs-string">&#x27;otp2&#x27;</span>, <span class="hljs-string">&#x27;otp3&#x27;</span>, <span class="hljs-string">&#x27;device_id&#x27;</span>]
})

<span class="hljs-keyword">const</span> enableMultiDevice = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.authy_id}</span>/devices/enable`</span>,
  <span class="hljs-attr">body</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;otp1&#x27;</span>, <span class="hljs-string">&#x27;otp2&#x27;</span>, <span class="hljs-string">&#x27;otp3&#x27;</span>, <span class="hljs-string">&#x27;device_id&#x27;</span>]
})

<span class="hljs-keyword">const</span> disableMultiDevice = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.authy_id}</span>/devices/disable`</span>,
  <span class="hljs-attr">body</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;otp1&#x27;</span>, <span class="hljs-string">&#x27;otp2&#x27;</span>, <span class="hljs-string">&#x27;otp3&#x27;</span>, <span class="hljs-string">&#x27;device_id&#x27;</span>]
})

<span class="hljs-keyword">const</span> sync = api({
  <span class="hljs-attr">url</span>: <span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> <span class="hljs-string">`/users/<span class="hljs-subst">${p.authy_id}</span>/devices/<span class="hljs-subst">${p.device_id}</span>/apps/sync`</span>,
  <span class="hljs-attr">body</span>: [<span class="hljs-string">&#x27;api_key&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;otp1&#x27;</span>, <span class="hljs-string">&#x27;otp2&#x27;</span>, <span class="hljs-string">&#x27;otp3&#x27;</span>, <span class="hljs-string">&#x27;device_id&#x27;</span>]
})
</code></pre>
<p>We’ll also need a method to generate a TOTP codes using Authy settings:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> base32 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;rfc-3548-b32&#x27;</span>)
<span class="hljs-keyword">const</span> totpGenerator = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;totp-generator&#x27;</span>)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOtp</span> (<span class="hljs-params">secret</span>) </span>{
  <span class="hljs-comment">// `totpGenerator` wants Base32, Authy uses hex.</span>
  secret = base32.encode(Buffer.from(secret, <span class="hljs-string">&#x27;hex&#x27;</span>))
  <span class="hljs-keyword">return</span> totpGenerator(secret, { <span class="hljs-attr">digits</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">period</span>: <span class="hljs-number">10</span> })
}
</code></pre>
<p>The main difference here is that Authy stores the TOTP secrets in
hexadecimal while most TOTP libraries and services expect Base32 as
defined in <a href="https://datatracker.ietf.org/doc/html/rfc3548#section-5">RFC 3548</a>,
so we need to do a quick conversion.</p>
<p>It’s a bit stupid because the first thing totp-generator does is
<a href="https://github.com/bellstrand/totp-generator/blob/af64a977b2aee17d0f0d3e607afa0af2a9a4814b/index.js#L11">converting the secret back to hex</a>
but there’s no way to avoid that by specifying a custom encoding, so be
it.</p>
<p>Then we also need an helper method to generate the 3 next codes in the
time period sequence:</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOtps</span> (<span class="hljs-params">secret</span>) </span>{
  <span class="hljs-comment">// `totpGenerator` wants Base32, Authy uses hex.</span>
  secret = base32.encode(Buffer.from(secret, <span class="hljs-string">&#x27;hex&#x27;</span>))

  <span class="hljs-keyword">const</span> now = <span class="hljs-built_in">Date</span>.now()

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">otp1</span>: totpGenerator(secret, { <span class="hljs-attr">digits</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">period</span>: <span class="hljs-number">10</span>, now }),
    <span class="hljs-attr">otp2</span>: totpGenerator(secret, { <span class="hljs-attr">digits</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">period</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">now</span>: now + <span class="hljs-number">10_000</span> }),
    <span class="hljs-attr">otp3</span>: totpGenerator(secret, { <span class="hljs-attr">digits</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">period</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">now</span>: now + <span class="hljs-number">20_000</span> })
  }
}
</code></pre>
<p>This depends on <a href="https://github.com/bellstrand/totp-generator/pull/37">this PR on totp-generator</a>
which might or might not be merged when you read this.</p>
<p>From there I export those methods to be used in the CLI, or by other
Node.js programs.</p>
<h2 id="making-a-cli" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/authy-reversed.html#making-a-cli"><span>Making a CLI</span></a></h2>
<p>From there, we can use the awesome <a href="https://www.npmjs.com/package/prompts">prompts</a>
package to build an interactive CLI that dumps the TOTP secrets from
your Authy account.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> prompts = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;prompts&#x27;</span>)
<span class="hljs-keyword">const</span> uri = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uri-tag&#x27;</span>).default
<span class="hljs-keyword">const</span> authy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;authy-user-client&#x27;</span>)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prompt</span> (<span class="hljs-params">params</span>) </span>{
  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> prompts({ ...params, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;value&#x27;</span> })

  <span class="hljs-keyword">if</span> (!res.value) {
    process.exit()
  }

  <span class="hljs-keyword">return</span> res.value
}

<span class="hljs-keyword">const</span> countryCode = <span class="hljs-keyword">await</span> prompt({ <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Country code:&#x27;</span>, <span class="hljs-attr">initial</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">min</span>: <span class="hljs-number">1</span> })
<span class="hljs-keyword">const</span> phoneNumber = <span class="hljs-keyword">await</span> prompt({ <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;phoneNumber&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Phone number:&#x27;</span>, <span class="hljs-attr">validate</span>: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value !== <span class="hljs-string">&#x27;&#x27;</span> })

<span class="hljs-keyword">const</span> status = <span class="hljs-keyword">await</span> authy.checkUserStatus({ <span class="hljs-attr">country_code</span>: countryCode, <span class="hljs-attr">cellphone</span>: phoneNumber })
<span class="hljs-keyword">let</span> authyId = status.authy_id

<span class="hljs-keyword">if</span> (!authyId) {
  <span class="hljs-keyword">const</span> email = <span class="hljs-keyword">await</span> prompt({ <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Email:&#x27;</span> })
  <span class="hljs-keyword">const</span> registration = <span class="hljs-keyword">await</span> authy.createUser({ email, <span class="hljs-attr">country_code</span>: countryCode, <span class="hljs-attr">cellphone</span>: phoneNumber })
  authyId = registration.authy_id
}

<span class="hljs-keyword">const</span> via = <span class="hljs-keyword">await</span> prompt({
  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;select&#x27;</span>,
  <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Authentication method:&#x27;</span>,
  <span class="hljs-attr">choices</span>: [
    { <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Push&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;push&#x27;</span> },
    { <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Call&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;call&#x27;</span> },
    { <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;SMS&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;sms&#x27;</span> }
  ]
})

<span class="hljs-keyword">await</span> authy.startRegistration({
  <span class="hljs-attr">authy_id</span>: authyId,
  via,

  <span class="hljs-comment">// Not sure why, but works better with this. 🤷</span>
  <span class="hljs-attr">signature</span>: crypto.randomBytes(<span class="hljs-number">32</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>)
})

<span class="hljs-keyword">const</span> pin = <span class="hljs-keyword">await</span> prompt({ <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;PIN:&#x27;</span>, <span class="hljs-attr">min</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">validate</span>: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value !== <span class="hljs-string">&#x27;&#x27;</span> })
<span class="hljs-keyword">const</span> registrationResponse = <span class="hljs-keyword">await</span> authy.completeRegistration({ <span class="hljs-attr">authy_id</span>: authyId, pin })

<span class="hljs-keyword">const</span> deviceId = registrationResponse.device.id
<span class="hljs-keyword">const</span> secretSeed = registrationResponse.device.secret_seed

<span class="hljs-keyword">const</span> syncResponse = <span class="hljs-keyword">await</span> authy.sync({
  <span class="hljs-attr">authy_id</span>: authyId,
  <span class="hljs-attr">device_id</span>: deviceId,
  ...authy.getOtps(secretSeed)
})

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> app <span class="hljs-keyword">of</span> syncResponse.apps) {
  <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> URL(uri<span class="hljs-string">`otpauth://totp/<span class="hljs-subst">${app.name}</span>`</span>)

  url.search = <span class="hljs-keyword">new</span> URLSearchParams(<span class="hljs-built_in">Object</span>.entries({
    <span class="hljs-comment">// Authy uses hex, everything else uses Base32.</span>
    <span class="hljs-attr">secret</span>: authy.hexToBase32(app.secret_seed),
    <span class="hljs-attr">digits</span>: app.digits,
    <span class="hljs-attr">period</span>: <span class="hljs-number">10</span>
  }))

  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${app.name}</span>: <span class="hljs-subst">${url}</span>`</span>)
}
</code></pre>
<p>This will list all the associated apps with a <a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format">standard TOTP URI</a>
to be used in any compliant authenticator or password manager.</p>
<p>You can look at <a href="https://github.com/valeriangalliat/authy-user-client/blob/master/cli.js">the full source</a>
for the implementation of individual calls for more fine-grained
control!</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/authy-reversed.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>Thanks to this, we can work around services that force the Authy app for
2FA and extract the secret and settings to use them with our favorite
authenticator app.</p>
<p>Was this overkill? Hell yeah. But was it fun? Of course!</p>
<p>Still, I hope this can be useful to you if you run into the same issue.
You can just use the CLI and happily move on with your life and your
favorite TOTP provider! 🎉</p>
<div class="note">
<p><strong>Note:</strong> if you need help understanding and documenting other
undocumented APIs and protocols, <a href="https://www.codejam.info/val.html#contact">let me know</a>, I’m
currently available for <a href="https://www.codejam.info/freelance.html">contracting</a> projects
and I’ll be happy to help you with that. ✌️</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1442826926545121284">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>TOTP/2FA support with ANY password manager (you read that right)</title>
    <link href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html" />
    <id>https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html</id>
    <updated>2021-09-28T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>As I’m writing an article on <a href="https://www.codejam.info/2021/09/authy-reversed.html">how I reversed the Authy proprietary 2FA protocol</a>
to generate their codes from my own password manager and authenticator,
I realized that I didn’t write about the hack I use to <strong>support
<abbr title="Time-based one-time password">TOTP</abbr> in any password
manager</strong> (especially the ones that don’t support it out of the box).</p>
<p>So I’ll start with that.</p>
<p>See, I explained some time ago <a href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html">why I switched to Firefox Lockwise as my password manager</a>.
In this post, I compare it to Bitwarden, and I go through some of the
<a href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#cons">Lockwise cons</a>,
one of them being <a href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#no-totp-support">the lack of TOTP support</a>.</p>
<p>I said that while it would be nice to have native support for TOTP, I
already had my own authenticator app based on the <a href="https://www.npmjs.com/package/totp-generator">totp-generator</a>
package. I since made that app a lot nicer and shared it on
<a href="https://totp.vercel.app/">totp.vercel.app</a>! 🦄</p>
<p>It’s called <a href="https://totp.vercel.app/">TOTP with a password manager that doesn’t support TOTP 😅</a>
(yes, the emoji is part of the name) because I suck at naming things and
that’s the most explicit name that I came up with.</p>
<div class="note">
<p><strong>Note:</strong> everything you need to know in order to use it is on the link
above, but if you want to learn how it works in more technical details,
keep reading!</p>
</div>
<h2 id="why-would-you-do-that" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html#why-would-you-do-that"><span>Why would you do that?</span></a></h2>
<p>Maybe like me you really like Lockwise or another password manager
that doesn’t support TOTP, and that’s not enough of a reason to migrate
to another app like Bitwarden, especially where TOTP support only comes
in the paid version.</p>
<p>And you don’t want to install Yet Another App™ to do this.</p>
<p>Maybe a bit of a niche, I’ll admit.</p>
<h2 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html#how-does-it-work"><span>How does it work?</span></a></h2>
<p>First things first, you probably want to <a href="https://github.com/valeriangalliat/totp">check out the repo on GitHub</a>.</p>
<p>The principle is pretty simple. Most password managers will recognize
login forms on websites (e.g. username and password fields). Upon
submission, they’ll prompt you to save the credentials you just entered,
so that the next time you encounter this form, it’ll be able to autofill
the boxes and you just have to click “log in”.</p>
<p>Additionally, if you log in later with a different username on the same
site, it’ll also ask you to save it, and now every time you come back to
that form, you’ll be able to chose amongst all the credentials that you
saved.</p>
<p><a href="https://totp.vercel.app/">TOTP with a password manager that doesn’t support TOTP 😅</a>
looks like a login form, walks like a login form, and quacks like a
login form:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>
</code></pre>
<p>(Yes, it’s that easy.)</p>
<p>This means that whatever you put in there, your password manager will
prompt you to store upon submission of the form. With that trick, <strong>we
can store arbitrary data in any password manager</strong>.</p>
<p>To retrieve that data, the user simply clicks on the username or
password field and chose from the list of all the saved items. We can
then read the values directly from the form fields. For example if the
above HTML was in a <code>&lt;form id=&quot;form&quot;&gt;</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { username, password } = form.elements
<span class="hljs-built_in">console</span>.log(username.value, password.value)
</code></pre>
<p>Since <a href="https://stackoverflow.com/questions/11708092/detecting-browser-autofill">it’s a bit tricky</a>
to reliably detect when inputs are autofilled (the <code>change</code> event is not
usually triggered), we’ll use a Big Blue Button™ that reads “Get
TOTP 🚀” instead. Good enough.</p>
<figure class="center">
  <img alt="TOTP form" src="https://www.codejam.info/img/2021/09/totp-form-1.png">
</figure>
<p>When that button is clicked, we use <a href="https://www.npmjs.com/package/totp-generator">totp-generator</a>
to generate a code for the secret that’s in the password field.</p>
<p>If the TOTP settings differ from the standard SHA-1 algorithm, 6 digits
and 30 seconds period, you can also paste a somewhat standard
<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format"><code>otpauth://</code> URI</a>
thanks to the following code:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> totp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;totp-generator&#x27;</span>)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">totpFromUriOrSecret</span> (<span class="hljs-params">value</span>) </span>{
  <span class="hljs-keyword">if</span> (!value.startsWith(<span class="hljs-string">&#x27;otpauth://&#x27;</span>)) {
    <span class="hljs-comment">// Directly the secret, use default options.</span>
    <span class="hljs-keyword">return</span> totp(value)
  }

  <span class="hljs-keyword">const</span> search = <span class="hljs-keyword">new</span> URLSearchParams(<span class="hljs-keyword">new</span> URL(value).search)
  <span class="hljs-keyword">const</span> { secret, algorithm, digits, period } = <span class="hljs-built_in">Object</span>.fromEntries(search)

  <span class="hljs-keyword">return</span> totp(secret, { algorithm, digits, period })
}
</code></pre>
<p>For convenience, we can automatically copy the code to the user’s clipboard:</p>
<pre><code class="hljs language-js">navigator.clipboard.writeText(code)
</code></pre>
<h2 id="scanning-qr-codes" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html#scanning-qr-codes"><span>Scanning QR codes</span></a></h2>
<p>But that’s not enough. While some services will give us an option to
retrieve the plaintext secret or a <code>otpauth://</code> URI, a lot will only
give a QR code to scan, and some will even give <em>nothing</em> and force you
to use Authy’s proprietary TOTP implementation (luckily, I already
<a href="https://www.codejam.info/2021/09/authy-reversed.html">reversed that</a> so that you don’t have to).</p>
<p>For that, I’ll add two options: scan a QR code using the device camera,
or import a QR code from an existing image (like a screenshot).</p>
<figure class="center">
  <img alt="TOTP form" src="https://www.codejam.info/img/2021/09/totp-form-2.png">
</figure>
<p>Luckily, there’s a <a href="https://www.npmjs.com/package/qr-scanner">QR scanner</a>
package that makes that really easy.</p>
<h3 id="using-the-camera" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html#using-the-camera"><span>Using the camera</span></a></h3>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> QrScanner = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;qr-scanner&#x27;</span>)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleTotpUri</span> (<span class="hljs-params">uri</span>) </span>{
  <span class="hljs-keyword">const</span> search = <span class="hljs-keyword">new</span> URLSearchParams(<span class="hljs-keyword">new</span> URL(uri).search)

  form.username.value = search.get(<span class="hljs-string">&#x27;issuer&#x27;</span>)
  form.password.value = uri
}

<span class="hljs-keyword">const</span> video = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video&#x27;</span>)

<span class="hljs-keyword">const</span> qrScanner = <span class="hljs-keyword">new</span> QrScanner(video, <span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> {
  qrScanner.stop()
  handleTotpUri(result)
})

qrScanner.start()
</code></pre>
<p>During the scan, the QR scanner will show the camera feed in the given
video element.</p>
<p>On successful scan, we parse the URI to get the <code>issuer</code> value (the
service that issued that secret) and fill the username field with it to
give a meaningful name to our secret. Then we can store the full URI in
the password field.</p>
<h3 id="from-file-upload" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html#from-file-upload"><span>From file upload</span></a></h3>
<p>We’ll support two ways to upload files. With a regular file input, and
with drag and drop.</p>
<p>For the file input, the following will do:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { file } = form.elements

file.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  handleFile(file.files[<span class="hljs-number">0</span>])
})
</code></pre>
<p>And for the drag and drop, the
<a href="https://www.npmjs.com/package/drag-drop">drag-drop</a> package makes it
trivial for us:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> dragDrop = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;drag-drop&#x27;</span>)

dragDrop(<span class="hljs-string">&#x27;body&#x27;</span>, {
  onDrop (files) {
    handleFile(files[<span class="hljs-number">0</span>])
  },
  onDragEnter (event) {
    <span class="hljs-built_in">document</span>.body.classList.add(<span class="hljs-string">&#x27;drag-drop&#x27;</span>)
  },
  onDragLeave (event) {
    <span class="hljs-built_in">document</span>.body.classList.remove(<span class="hljs-string">&#x27;drag-drop&#x27;</span>)
  }
})
</code></pre>
<p>Here we toggle a class on the <code>&lt;body&gt;</code> element during drag and drop to
make it obvious that we’re accepting files to be dropped here.</p>
<p>Now, all we need is to write the <code>handleFile</code> function that’s used by
both of those, where we scan the uploaded file and parse the TOTP URI in it.</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFile</span> (<span class="hljs-params">file</span>) </span>{
  QrScanner.scanImage(file)
    .then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> {
      handleTotpUri(result)
    })
}
</code></pre>
<h2 id="manually-editing-totp-settings" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html#manually-editing-totp-settings"><span>Manually editing TOTP settings</span></a></h2>
<p>Lastly, we might encounter situations where we only have the secret and
specific TOTP settings (algorithm, digits and period), but no TOTP URI.</p>
<p>To support that, we need to add an “advanced” mode allowing to edit the
individual settings, and automatically generating the proper URI in the
password field to be stored.</p>
<p>We’ll start by adding a hamburger menu that will open the detailed
settings.</p>
<figure class="center">
  <img alt="TOTP form" src="https://www.codejam.info/img/2021/09/totp-form-3.png">
</figure>
<p>This will toggle the following form:</p>
<figure class="center">
  <img alt="TOTP form" src="https://www.codejam.info/img/2021/09/totp-details-form.png">
</figure>
<p>Here, I added for convenience a “Authy” button that will automatically
set the settings to 7 digits and a 10 seconds period, because that’s the
main use case I have for this.</p>
<p>When any of those settings change, I generate a new URI to put in the
password field:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { username, password, secret, algorithm, digits, period } = form.elements

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updatePasswordFromDetails</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> uri = <span class="hljs-keyword">new</span> URL(password.value.startsWith(<span class="hljs-string">&#x27;otpauth://&#x27;</span>) ? password.value : <span class="hljs-string">`otpauth://totp/<span class="hljs-subst">${<span class="hljs-built_in">encodeURIComponent</span>(username.value)}</span>`</span>)
  <span class="hljs-keyword">const</span> search = <span class="hljs-keyword">new</span> URLSearchParams(uri.search)

  search.set(<span class="hljs-string">&#x27;secret&#x27;</span>, secret.value)
  search.set(<span class="hljs-string">&#x27;algorithm&#x27;</span>, algorithm.value)
  search.set(<span class="hljs-string">&#x27;digits&#x27;</span>, digits.value)
  search.set(<span class="hljs-string">&#x27;period&#x27;</span>, period.value)

  uri.search = search
  password.value = uri.toString()
}

secret.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, updatePasswordFromDetails)
algorithm.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, updatePasswordFromDetails)
digits.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, updatePasswordFromDetails)
period.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, updatePasswordFromDetails)
</code></pre>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/totp-2fa-support-any-password-manager.html#conclusion"><span>Conclusion</span></a></h2>
<p>And this is it! You know everything that’s behind <a href="https://totp.vercel.app/">totp.vercel.app</a>.</p>
<p>Did you find this useful? Did you like that I explained some of the code
behind it in this blog post? Don’t hesitate to let me know and <a href="https://twitter.com/valeriangalliat">ping me on Twitter</a>!</p>
<p>Until next time, keep hacking! 🐿</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1442937054854221828">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Elixir, Ecto and Heroku Postgres: unverified SSL certificates</title>
    <link href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html" />
    <id>https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html</id>
    <updated>2021-09-24T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This one took me a bit of time to sort out so I figured I’d write a blog
post about it in case it can help someone else.</p>
<p>I have a Phoenix Elixir application that I recently deployed on one of
my servers. While it’s running smooth, I was bugged by the following
warning that was showing only in production when starting the app:</p>
<pre><code class="hljs language-elixir">[warn] <span class="hljs-symbol">Description:</span> <span class="hljs-string">&#x27;Authenticity is not established by certificate path validation&#x27;</span>
     <span class="hljs-symbol">Reason:</span> <span class="hljs-string">&#x27;Option {verify, verify_peer} and cacertfile/cacerts is missing&#x27;</span>
</code></pre>
<p>This message was repeated 10 times during boot. Spoiler, 10 is also my
Ecto <code>:pool_size</code>, but I didn’t think about that right away.</p>
<p>There was no context around that, and since the app interacts with quite
a few things over SSL, it could have come from a lot of places.</p>
<h2 id="tracing-warnings-in-elixir-investigation-and-delusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#tracing-warnings-in-elixir-investigation-and-delusion"><span>Tracing warnings in Elixir: investigation and delusion</span></a></h2>
<p>My first reflex was to look for something similar to
<a href="https://nodejs.org/api/cli.html#cli_trace_warnings">Node.js’ <code>--trace-warnings</code> option</a>.
This will add a stack trace to all warnings, making it very easy to
track where they’re from and address them.</p>
<p>Sadly, I couldn’t find anything similar with Elixir and Erlang. I
resorted to <a href="https://elixirforum.com/t/tracing-runtime-warnings/42576">asking on Elixir Forum</a>,
only to get confirmation that this wasn’t possible.</p>
<h2 id="compiling-erlang" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#compiling-erlang"><span>Compiling Erlang?</span></a></h2>
<p><a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl.erl#L2833">The line that logged that warning</a>
was easy to find in the Erlang <code>ssl</code> module, but that didn’t help me
identifying what code path triggers it.</p>
<p>I thought about compiling Erlang with a patch that raises an exception
instead of logging a warning there. While that wouldn’t be the quickest
solution, it would definitely make it obvious what’s triggering that
peer validation warning.</p>
<p>What was bugging me was that I was seeing this warning only in
production, not on my development machine. And I didn’t really like the
idea of compiling my patched Erlang in production to debug in
production…</p>
<div class="note">
<p><strong>Note:</strong> I didn’t end up compiling Erlang to trace the warning that
way, because I was lucky to find after some trial and error what was
causing it.</p>
<p>That being said, if you run into the same kind of issue and don’t find
any alternative, this is guaranteed to give you an answer, so it’s
probably worth the effort at that point!</p>
</div>
<h2 id="going-for-a-walk" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#going-for-a-walk"><span>Going for a walk</span></a></h2>
<p>I didn’t actually go for a walk, but that’s the kind of thoughts that
usually happen when you take a walk, or when you’re under the shower, so
I would have probably gotten that idea earlier if I did.</p>
<blockquote>
<p>If it’s happening only in production, it’s probably coming from one of
the production environment variables!</p>
</blockquote>
<p>For some reason, until then, I was focused on finding if there was
something odd about my Erlang build in production, or the CA
certificates configuration on the server, and while it could have come
from there, environment variables were an easy one to test.</p>
<p>So I configure my local machine with the production environment
variables, and bingo! I can repro the warning.</p>
<p>At that point it becomes very obvious to me that my database connection
is the culprit, because it’s the only thing in the environment that’s
related to SSL in a way or another.</p>
<h2 id="heroku-postgres-and-ssl-certificate-verification" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#heroku-postgres-and-ssl-certificate-verification"><span>Heroku Postgres and SSL certificate verification</span></a></h2>
<p>Now that I found the offender, it’s easier to look for a specific
solution. The first result on Google for <code>heroku postgres ssl verify</code> is
<a href="https://help.heroku.com/3DELT3RK/why-can-t-my-third-party-utility-connect-to-heroku-postgres-with-ssl">this page on the Heroku support website</a>.</p>
<p>Since for some reason it requires to be logged in with an Heroku account
to view it, I’ll just quote the relevant part here:</p>
<blockquote>
<p>Heroku Postgres does not currently support verifiable certificates.
Our certificates will change when the underlying hardware has issues
and we move your database away from it.</p>
</blockquote>
<p>Sweet. So it’s actually “intended” that I get a SSL verification warning
when connecting to my Heroku Postgres database over SSL.</p>
<p>But knowing that is not enough for me. Now I identified that this
warning was acceptable and doesn’t need to be fixed per se, I need to
mute it, so that it doesn’t adds noise to the logs.</p>
<p><strong>This is particularly important</strong> because otherwise, I would hardly
notice a new SSL verification warning that would appears in another
potentially <strong>more critical part of the codebase</strong>, leaving me with
vulnerabilities.</p>
<h2 id="muting-this-particular-warning" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#muting-this-particular-warning"><span>Muting this particular warning</span></a></h2>
<p><a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl.erl#L2833">As we saw earlier</a>,
for that warning to show up, we need the SSL connection’s <code>verify</code> to
be set to <code>verify_none</code>, and the <code>ssl_logger</code>'s level to be configured
to show warnings.</p>
<p>The default value of <code>verify</code> in the <code>ssl</code> module <a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl_internal.hrl#L195">is indeed <code>verify_none</code></a>,
and Ecto doesn’t seem to alter it by default. Also the default
<code>log_level</code> of the <code>ssl_logger</code> <a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl_internal.hrl#L160">is set to <code>notice</code></a>,
which is why we’re seeing that warning.</p>
<p>It seems that my only option here is to configure the SSL connection
specifically for my Ecto repository to have a log level of <code>:error</code>:</p>
<pre><code class="hljs language-elixir">config <span class="hljs-symbol">:myapp</span>, MyApp.Repo
  <span class="hljs-symbol">ssl_opts:</span> [<span class="hljs-symbol">log_level:</span> <span class="hljs-symbol">:error</span>]
</code></pre>
<p>It took more hours than I’m willing to admit to come up with this patch
that turns out to be trivial. So I’m trying to feel better about myself
by spending even more hours writing a blog post about it to explain all
the details and subtleties. 😅</p>
<p>If you’re here to try and solve an unverified warning issue, or trace
warnings with Elixir and Erlang in general, I hoped that it was useful
to you. Have a wonderful day!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1441563191557849090">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Zoom H2n: pro tips and tricks</title>
    <link href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html" />
    <id>https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html</id>
    <updated>2021-09-24T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>The <a href="https://amzn.to/2XRD6mk">Zoom H2n</a> is an awesome portable
microphone with a long battery life. It’s very versatile and delivers a
solid sound.</p>
<p>In this post, I’ll give you all of the tips and tricks that I discovered
over the years using my H2n, that made me more efficient at using it and
allowed me to do even more with it.</p>
<figure class="center">
  <img alt="Zoom H2n" src="https://www.codejam.info/img/2021/09/h2n/zoom-h2n.jpg">
</figure>
<p>But first, I’ll give you a little bit of backstory about how I got
there in the first place. Feel free to <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#my-do-to-microphone-setting">skip it</a>.</p>
<h2 id="the-story-about-my-h2n" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#the-story-about-my-h2n"><span>The story about my H2n</span></a></h2>
<p>The reason I got it in the first place was put it in my motorcycle
jacket while I ride to record clean engine sound for my
<a href="https://www.youtube.com/playlist?list=PL3gQ6-WYh7kU8QjpRSMpDknhAwvccFiMu">GoPro recordings</a>.
This is how <a href="https://www.youtube.com/c/royaljordanianR">Royal Jordanian</a>,
a famous motorcycle YouTuber, <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#record-motorcycle-sound-rj-style">uses his H2n</a>,
and his results are remarkable.</p>
<p>I used to have a <a href="https://amzn.to/2ZraaCh">Zoom H4n</a> because I liked
that it could act as an external sound card where I could plug XLR
microphones and jack instruments as well, but it was too big to fit in
my motorcycle jacket, which turned out to be what allowed me to get the
<a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#record-motorcycle-sound-rj-style">best sounding audio on a motorcycle</a>.</p>
<p>Anyways, because I had that mic around when I started <a href="https://www.youtube.com/FunkyVal">making more YouTube videos</a>,
it became my main device to record voice in various settings (indoors,
outdoors, multiple people interviews, live streaming). I also use it to
record acoustic instruments.</p>
<figure class="grid grid-2">
  <img alt="Acoustic guitar recording with the H2n" src="https://www.codejam.info/img/2021/09/h2n/acoustic-1.jpg">
  <img alt="Acoustic guitar recording with the H2n (closeup)" src="https://www.codejam.info/img/2021/09/h2n/acoustic-2.jpg">
</figure>
<p>While specialized microphones might give you even better results in
specific situations, the H2n has allowed me to record high quality audio
in an impressively wide set of settings.</p>
<p>After years of using it, I have a couple of tips to share with you that
will make you even more productive with your H2n and enable you to do
even more with it.</p>
<h2 id="my-go-to-mic-setting" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#my-go-to-mic-setting"><span>My go-to mic setting</span></a></h2>
<p>The H2n has 5 built-in microphones and lets you use them in the
<a href="https://composerfocus.com/zoom-h2n-review/">following settings</a>:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Stereophonic_sound#X-Y_technique:_intensity_stereophony">X-Y stereo</a>:
2 mics in the front.</li>
<li><a href="https://en.wikipedia.org/wiki/Stereophonic_sound#M/S_technique:_mid/side_stereophony">M/S mid/side</a>:
1 mic in the back, 2 mics on the sides with adjustable recording width.</li>
<li>2-channel surround: X-Y and M/S converted to 1 stereo track.</li>
<li>4-channel surround: X-Y and M/S converted to 2 stereo tracks.</li>
</ul>
<p>I personally use X-Y stereo the vast majority of the time. If you don’t
know which one to chose, I would default to this one.</p>
<figure class="center">
  <img alt="H2n record modes" src="https://www.codejam.info/img/2021/09/h2n/record-modes.jpg">
</figure>
<p>It’s going to record from the front of the Zoom (where the screen is),
which is convenient because you’re facing the front of the mic when
you’re recording. This allows you to easily monitor the levels on the
screen, and puts the record button right in front of you.</p>
<p>That being said the H2n is well designed because the clipping light on
top is visible from both sides, meaning that if you want to record in
M/S mode, you’ll still see the light while facing the back of the Zoom!</p>
<h2 id="my-go-to-gain-setting" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#my-go-to-gain-setting"><span>My go-to gain setting</span></a></h2>
<p>When I first got my H2n, I wasn’t sure where to put the gain. My usual
rule of thumb with gain is to put it <strong>as high as possible</strong> at the
source so that <strong>the highest peaks</strong> I plan to have are gonna be <strong>close
to 0 dB, but won’t clip</strong>.</p>
<p>Most of the time, I <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#hot-shoe-mount">mount the Zoom on top of my camera</a>,
or I <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#the-potholder-trick">put it on a surface</a> about an arm’s length
in front of me. In those conditions, I found that <strong>leaving the gain on
8 all the time</strong> gave me the best results. It’s perfect to record my
voice clearly and any meaningful context sound, without clipping,
and leaving enough headroom for any reasonable surprise peaks.</p>
<figure class="center">
  <img alt="H2n mic gain knob" src="https://www.codejam.info/img/2021/09/h2n/mic-gain.jpg">
</figure>
<p>Because it stays there most of the time, I ensure that all the
recordings that are made in similar conditions will have consistent
levels, so that I don’t have to adjust them one by one in post. I just
boost the gain a bit more at the track level, and add some compression
to avoid unnecessary peaking.</p>
<p>So I always leave my Zoom with a gain of 8 by default, and if I’m in a
recording setting that <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#mic-stand-adapter">differs from my usual use case</a>,
like singing very close to the mic through a pop filter or recording an
instrument, I’ll go back to step one where I try to get the gain as high
as possible while making sure it doesn’t clip during the highest peaks I
plan to have. FWIW in those settings, I rarely needed to go below 6.</p>
<h2 id="battery-and-clock-reset-trick" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#battery-and-clock-reset-trick"><span>Battery and clock reset trick</span></a></h2>
<p>You might have noticed that the H2n internal clock is reset when you
remove the AA batteries to change or recharge them. It’s pretty
frustrating to have to configure the date and time again every time you
recharge the Zoom!</p>
<p>But there’s a neat trick that I’ve found <a href="https://www.reddit.com/r/livesound/comments/ci181c/comment/evc0nt0/">on Reddit</a>.
If you change the batteries <strong>one at a time</strong>, e.g. without ever having no
battery in the Zoom at all, it will keep the clock intact!</p>
<figure class="center">
  <img alt="Changing the H2n batteries" src="https://www.codejam.info/img/2021/09/h2n/batteries.jpg">
</figure>
<h2 id="preventing-the-filename-counter-to-reset" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#preventing-the-filename-counter-to-reset"><span>Preventing the filename counter to reset</span></a></h2>
<p>By default, the H2n names files like <code>ZOOM0001.WAV</code>, incrementing the
number for every new file.</p>
<p>This is fine with me, but every time I empty the SD card, the file
resets to <code>ZOOM0001.WAV</code>! There’s no persistent internal counter like
with my camera.</p>
<p>This is annoying because I end up with conflicting file names, and I
can’t uniquely identify a specific Zoom recording by its name. Not
great.</p>
<p>If you want to keep incrementing the number after wiping your SD card
clean, just <strong>leave the latest file you recorded there</strong>! For example if
you recorded all the way to <code>ZOOM0363.WAV</code>, just leave that file there,
and the next one to be recorded will be called <code>ZOOM0364.WAV</code>.</p>
<p>If even this single file is large enough that you want to remove it as
well, you can drop an empty file instead with the same filename, and
that’ll do the trick. 👌</p>
<p>But beware, if you ever reach <code>ZOOM9999.WAV</code>, the H2n will not let you
record any further and will just error with <code>DATA FULL</code>, even if there’s
still technically enough free space on the SD card.</p>
<p>For this reason, and also because it’s even easier overall, I recommend
switching to <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#using-date-and-time-as-filename">naming files after the date</a>,
which is something that I didn’t know was possible until very recently!</p>
<h2 id="using-date-and-time-as-filename" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#using-date-and-time-as-filename"><span>Using date and time as filename</span></a></h2>
<p>If you want something more deterministic to name files that the default
strategy of incrementing a counter that resets every time you empty the
SD card, I recommend switching to using the date file naming strategy
instead.</p>
<p>You’ll find it from the <code>MENU</code> button on the right, in <code>REC</code>, <code>FILE NAME</code>, and set it to <code>DATE</code> there.</p>
<figure class="center">
  <a href="https://www.bhphotovideo.com/lit_files/67854.pdf">
    <img alt="H2n filename settings" src="https://www.codejam.info/img/2021/09/h2n/filename-setting.png">
  </a>
  <figcaption>From the operation manual</figcaption>
</figure>
<h2 id="hot-shoe-mount" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#hot-shoe-mount"><span>Hot shoe mount</span></a></h2>
<p>Because I often record <a href="https://www.youtube.com/FunkyVal">YouTube videos</a>,
I like to mount my H2n on top of my camera to get high quality audio in
my videos.</p>
<p>I know most YouTubers use the <a href="https://amzn.to/3ADspSM">Rode VideoMic</a>
or one of its declinations, but since I already had the H2n, I didn’t
want to bother buying a new mic for video.</p>
<p>It turns out the H2n can easily be mounted on top of a camera as well,
with the help of a cheap <a href="https://amzn.to/3kEML8k">hot shoe</a> <a href="https://amzn.to/2XPrIY4">adapter</a>!</p>
<figure class="center">
  <img alt="Hot shoe mount" src="https://www.codejam.info/img/2021/09/h2n/hot-shoe-mount.jpg">
</figure>
<div class="note">
<p><strong>Note:</strong> in that setup, I noticed that the H2n picked up noise from my
camera strap rubbing and bouncing on the camera body and tripod when
moving around, e.g. when vlogging.</p>
<p>To avoid that, make sure to <strong>remove the camera strap before you
record</strong>, if you usually have one attached!</p>
<p>On my camera it’s a bit annoying to do, but definitely worth it to have
a clean sound. I’m looking forward to buying the <a href="https://amzn.to/39G7uCp">Leash by Peak Design</a>,
even though it’s a bit more expensive than what I’d like to pay for a
camera strap, it’s super simple to attach and detach and that would make
my life much easier.</p>
<p><strong>Edit:</strong> I ended up buying a simple (and much cheaper) <a href="https://amzn.to/3BEqFrS">quick release
connector</a> from Amazon which does wonders with
the original strap from my camera.</p>
</div>
<h2 id="wind-muff" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#wind-muff"><span>Wind muff</span></a></h2>
<p>A wind muff is a must for outdoor recording especially if it’s a bit
windy. This is <a href="https://amzn.to/3lYlpcQ">the one I use</a>, it’s for the
H4n but works perfectly on the H2n as well!</p>
<figure class="center">
  <img alt="Wind muff" src="https://www.codejam.info/img/2021/09/h2n/wind-muff.jpg">
</figure>
<div class="note">
<p><strong>Note:</strong> if like me you’re confused between the “H4n Fur” and “H4n Pro
Fur” variations and don’t know which one to pick, keep in mind that
it’s “H4n” and “H4n Pro” furs, not a “Pro Fur™”. 😂</p>
<figure class="grid">
  <a href="https://amzn.to/2WaddgX">
    <img alt="H4n Fur" src="https://www.codejam.info/img/2021/09/h2n/h4n-fur.png">
  </a>
  <a href="https://amzn.to/2WaddgX">
    <img alt="H4n Pro Fur" src="https://www.codejam.info/img/2021/09/h2n/h4n-pro-fur.png">
  </a>
</figure>
</div>
<p>Zoom also provides one as part of their <a href="https://amzn.to/3i0GnqA">H2n accessory pack</a>,
and if you’re going to buy a few of the items that are part of it, it
might be cheaper to just get the pack!</p>
<h2 id="mic-stand-adapter" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#mic-stand-adapter"><span>Mic stand adapter</span></a></h2>
<p>Another thing that’s part of the <a href="https://amzn.to/3i0GnqA">accessory pack</a>
that I didn’t get but probably should have, is the <a href="https://amzn.to/39G0mWF">mic stand adapter</a>.</p>
<figure class="center">
  <img alt="Mic stand adapter" src="https://www.codejam.info/img/2021/09/h2n/mic-stand-adapter.jpg">
</figure>
<p>It allows you to mount your H2n directly on a mic stand, which is very
practical if you want to record high quality audio while singing
directly into it, recording a podcast, live streaming, voice-over or
recording acoustic instruments.</p>
<figure class="center">
  <img alt="Mic stand setup" src="https://www.codejam.info/img/2021/09/h2n/mic-stand-setup.jpg">
  <img alt="Acoustic guitar recording with the H2n (closeup)" src="https://www.codejam.info/img/2021/09/h2n/acoustic-2.jpg">
</figure>
<p>This is the stack that I personally use for this kind of work and I’m
super happy with it:</p>
<ul>
<li><a href="https://amzn.to/3i3E3yQ">Mic stand</a>, this one is a bit on the cheap
side but gets the job done. You can even put two mics on it!</li>
<li><a href="https://amzn.to/3AEMnMV">Shock mount</a>, key element to avoid noise in
the recording from vibrations around the mic. This one specifically is
compatible with the <a href="https://amzn.to/39G0mWF">H2n mic stand adapter</a>.
Double-check the diameter if you get another one.</li>
<li><a href="https://amzn.to/3zEDPnG">Pop filter</a>, to remove artifacts or
distortion from pronouncing letters like P, T, K and S very close to
the mic.</li>
<li>And obviously the <a href="https://amzn.to/39G0mWF">mic stand adapter</a> to
mount the Zoom on the whole thing.</li>
</ul>
<p>Here’s an awesome article on <a href="https://www.lewitt-audio.com/blog/do-i-need-a-shock-mount-and-a-pop-filter-for-my-microphone">why a shock mount and pop filter are important</a>
if you’re not sure if you need them or not.</p>
<h2 id="use-as-an-audio-interface" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#use-as-an-audio-interface"><span>Use as an audio interface</span></a></h2>
<p>If you have the proper cable, you can connect your H2n to your computer
via USB and use it as an audio interface, meaning that you can capture
sound from it directly from a screen recording or from your
<abbr title="Digital audio workstation">DAW</abbr>!</p>
<figure class="center">
  <img alt="Audio interface" src="https://www.codejam.info/img/2021/09/h2n/audio-interface.jpg">
</figure>
<p>They don’t seem to mention it anywhere though but keep in mind that you
specifically need a Mini-B USB connector on the H2n side (which is not
that common).</p>
<p>Again, <a href="https://amzn.to/3AFKC22">this is the cable I use</a>, but if like
me you’re gonna need so many accessories that turn out to be part of the
<a href="https://amzn.to/3i0GnqA">H2n accessory pack</a>, you might as well
get that in the first place. That being said the cable I bought is
significantly longer than the one they provide in the pack and that
comes in handy to have a bit more moving freedom during studio sessions.</p>
<p>Here’s what it looks like once plugged, to set it as input device inside
Logic:</p>
<figure class="center">
  <img alt="H2n as input interface in Logic" src="https://www.codejam.info/img/2021/09/h2n/logic-interface.png">
</figure>
<p>But if you want to use another audio interface to record instruments, MIDI, and
other mics at the same time (I personally have a <a href="https://amzn.to/2XLrCQU">Steinberg UR22mkII</a>
for that), you can’t just switch input device in your DAW like this.</p>
<p>Instead, on macOS, I recommend in <em>Audio MIDI Setup</em> to configure an
aggregate device that includes both your sound card and the H2n. This
way, you can set that aggregate device as input in your DAW and you’ll
get all the channels from your sound card plus all the channels from the
Zoom!</p>
<figure class="center">
  <img alt="H2n as an aggregate defice with another sound card" src="https://www.codejam.info/img/2021/09/h2n/aggregate-device.png">
</figure>
<h2 id="record-motorcycle-sound-rj-style" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#record-motorcycle-sound-rj-style"><span>Record motorcycle sound, RJ style</span></a></h2>
<p>As I mentioned earlier <a href="https://www.youtube.com/c/royaljordanianR">Royal Jordanian</a>
is a famous motorcycle YouTuber, and makes some of the best sounding
motorcycle videos out there.</p>
<p>He records mainly with a H2n and that’s the reason I got one in the
first place! But if you’re going to record your motorcycle rides with
it, you’ll quickly realize that’s not enough information.</p>
<ul>
<li>Were to put the H2n?</li>
<li>What recording mode to use?</li>
<li>What direction should the mic be facing?</li>
<li>What gain to use?</li>
</ul>
<p>Luckily, RJ once made a Q&amp;A video where he shows exactly <a href="https://youtu.be/PVULgH3mOtw?t=9">how he uses is H2n</a>.
What I love is that even though it lasts a few seconds, we can see precisely that:</p>
<ol>
<li>The mic is in X-Y stereo mode (arrow pointing to the front of the mic).</li>
<li>He puts it in his motorcycle jacket chest pocket.</li>
<li>Specifically, the mic is placed facing downwards, with the front of
the mic on his chest (so facing towards the back of the
motorcycle).</li>
</ol>
<p>This makes sense, as most of the sound is going to be heard at the
exhaust level, which is behind him, and definitely below his chest.</p>
<figure class="center">
  <img alt="H2n in motorcycle jacket chest pocket" src="https://www.codejam.info/img/2021/09/h2n/motorcycle-jacket.jpg">
</figure>
<p>This leaves us with the question of the gain. That’s gonna be very
specific to your jacket and your motorcycle in general, so you should do
a couple of tests, going at relatively high revs, to see if it’s
clipping or not. When in doubt, I would recommend using a lower gain for
this as distorted audio from recording a motorcycle engine quickly gets
unusable. Maybe start around 5 and go up or down from there!</p>
<p>I’ll add from my personal experience that it’s a good idea to put the
<code>HOLD</code> mode on the right side of the H2n while riding (same button you
use to power it on but sliding it up). This will make sure that any
accidental contact with buttons around the mic won’t stop the recording
or open menus and change random things there.</p>
<h2 id="the-potholder-trick" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#the-potholder-trick"><span>The potholder trick</span></a></h2>
<p>Lastly, I’ll share with you a small trick that I use when I put the Zoom
on a hard surface in front of me, like a table or a desk.</p>
<p>If you just leave it directly on the hard surface, it’ll pick up all the
vibrations from it as noise, so it’s gonna be especially bad when you
take or put objects on the same surface as the Zoom is on.</p>
<p>To avoid that, I just place a potholder below it. Anything similar
should work, like a folded towel. With that, it’s much less affected by
interactions with the hard surface, giving you a cleaner sound quality
overall!</p>
<figure class="center">
  <img alt="Potholder trick" src="https://www.codejam.info/img/2021/09/h2n/potholder.jpg">
</figure>
<h2 id="zooming-out" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#zooming-out"><span>Zooming out</span></a></h2>
<p>That’s it for today! I hope that you learnt a thing or two today thanks
to this post. Consider subscribing to my <a href="https://www.youtube.com/FunkyVal">YouTube channel</a>
where I also share video versions of those articles (and much more).
Happy recording!</p>
<figure class="center">
  <img alt="Cheers!" src="https://www.codejam.info/img/2021/09/h2n/cheers.jpg">
</figure>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1441462405700145154">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>How I set up a minimalist Debian host with nginx and Let’s Encrypt</title>
    <link href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html" />
    <id>https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html</id>
    <updated>2021-09-22T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>It’s something I’ve had to do more than once this year so I think it’s
about time to write a blog post.</p>
<div class="note">
<p><strong>Note:</strong> in this post (including the title), I use “Let’s Encrypt”
because it’s the term most people know and will look up, but what I mean
is technically the <abbr title="Automatic certificate management environment">ACME</abbr>
protocol with any compatible certificate authority.</p>
<p><a href="https://letsencrypt.org/">Let’s Encrypt</a> is one of those certificate
authorities, but I personally use <a href="https://zerossl.com/">ZeroSSL</a> which
is another ACME-compatible authority to provide free certificates.</p>
</div>
<h2 id="why-do-i-spawn-debian-vms" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#why-do-i-spawn-debian-vms"><span>Why do I spawn Debian VMs?</span></a></h2>
<p>Let’s start with the why I’m doing that. See, Google Cloud has
<a href="https://cloud.google.com/free/docs/gcp-free-tier/#compute">a cool thing</a>
where they allow you to run a <code>e2-micro</code> instance for free per billing
account, with up to 30 GB of storage, and as long as you pay for egress
(outgoing) traffic.</p>
<p>This is one of the cheapest ways that I know of to host a proof of
concept, <abbr title="Minimum viable product">MVP</abbr> or a very small
or lightweight project like this blog.</p>
<p>Google Cloud defaults their VM image to latest stable Debian, which I
find to be a good base for a server when you don’t want to spend a lot
of time setting things up and don’t want to think too much about it.</p>
<h2 id="why-do-i-install-nginx-and-let-s-encrypt" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#why-do-i-install-nginx-and-let-s-encrypt"><span>Why do I install nginx and Let’s Encrypt?</span></a></h2>
<p>Most of the time I spawn such a VM, it’s to run some kind of web
service over HTTPS. nginx is my favorite web server, and ACME is my
favorite way to manage TLS certificates (see note above about my usage
of the term “Let’s Encrypt”).</p>
<h2 id="what-about-infrastructure-as-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#what-about-infrastructure-as-code"><span>What about infrastructure as code?</span></a></h2>
<p>I won’t go into this topic in this blog post because there’s a fuckton
of ways you could want to code your infrastructure and provision your
servers depending on your needs.</p>
<p>This is out of scope for this article, but feel free to adapt it to
whatever tools you use! Personally, my favorite provisioning tool is
<code>/bin/sh</code> and this post is a breakdown of my script with detailed
explanations about everything it’s doing.</p>
<p>Now the context is set, let’s get into how I set up everything in a
minimalistic way (I like to keep things simple).</p>
<h2 id="preventing-the-bloat-on-debian" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#preventing-the-bloat-on-debian"><span>Preventing the bloat on Debian</span></a></h2>
<p>First things first, I start every of my Debian installations by adding
this <code>apt.conf</code> I shared on this blog over 7 years ago, to <a href="https://www.codejam.info/2014/09/keeping-debian-clean-and-minimal.html">keep Debian clean and minimal</a>.</p>
<p>The gist of it is that by default Debian packages can come with
“recommended packages” and “suggested packages”, and APT automatically
installs the recommended ones by default.</p>
<div class="note">
<p><strong>Note:</strong> APT also used to install the suggested packages by default,
which is how we ended up with <code>imagemagick</code> on the system after
installing <code>nmap</code> like mentioned in the article above.</p>
<p>It looks like I wasn’t the only one to be bugged by this and this
behavior is no longer the default.</p>
</div>
<p>I like to explicitly install every package that’s not a hard dependency,
so I use the following config to make sure nothing extra is installed by
default.</p>
<pre><code class="hljs language-sh">cat &lt;&lt; <span class="hljs-string">EOF &gt; /etc/apt/apt.conf
APT::Install-Recommends false;
APT::Install-Suggests false;
APT::AutoRemove::RecommendsImportant false;
APT::AutoRemove::SuggestsImportant false;
EOF</span>
</code></pre>
<p>It also configures APT to consider previously installed recommendations
and suggestions unimportant, meaning that they’ll be wiped in the next
<code>apt autoremove</code>. This won’t do anything on most fresh installations,
but if installing this configuration in an existing system, you might
want to double-check that list before removing the packages marked as
“no longer necessary”.</p>
<p>After that, APT will only install what’s strictly required by default,
and on top of the “suggested packages” list, it’ll also display a
“recommended packages” informational list, instead of automatically
installing them. Neat.</p>
<p>Also note that <code>apt autoremove</code>, like <code>apt remove</code>, will keep the
configuration files of the removed packages on the system, and there’s
no equivalent of <code>apt purge</code> like <code>apt autopurge</code>.</p>
<div class="note">
<p><strong>Note:</strong> I just tried out of curiosity and even though undocumented, it
looks like <a href="https://github.com/Debian/apt/blob/766b24b7f7484751950c76bc66d3d6cdeaf949a5/apt-private/private-install.cc#L608"><code>apt autopurge</code> exists</a>
and does exactly what you would expect!</p>
<p>So I would recommend running <code>apt autopurge</code> instead of <code>apt autoremove</code>
so that it also removes the configuration files of the packages it
removes.</p>
</div>
<p>Finally, if you used <code>apt remove</code> or <code>apt autoremove</code>, you can still
purge the dangling configuration files with the <a href="https://askubuntu.com/a/279432">following command</a>:</p>
<pre><code class="hljs language-sh">apt purge $(dpkg --get-selections | grep deinstall | cut -f1)
</code></pre>
<p>This will purge the configuration files of all packages that were ever
deinstalled and left with existing configuration files in place.</p>
<h2 id="installing-the-essentials" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#installing-the-essentials"><span>Installing the essentials</span></a></h2>
<p>In most Unix systems that I use, I’ll install the following packages:</p>
<pre><code class="hljs language-sh">apt install tmux vim git htop ca-certificates
</code></pre>
<p>On top of that, on Debian I like to add the <code>build-essential</code> package if
I need to compile anything, as it depends on the most common tools that
are necessary to build software from source.</p>
<h2 id="my-minimalist-nginx-configuration" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#my-minimalist-nginx-configuration"><span>My minimalist nginx configuration</span></a></h2>
<p>Let’s start with installing nginx.</p>
<pre><code class="hljs language-sh">apt install nginx
</code></pre>
<p>This will put the default Debian nginx configuration in <code>/etc/nginx</code>.</p>
<p>The default configuration is too much for me. I like to write my nginx
configuration from scratch. The only file I want to keep is the
<a href="https://github.com/nginx/nginx/blob/master/conf/mime.types">default <code>mime.types</code> file</a>.</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">cd</span> /etc
mkdir nginx2
cp nginx/mime.types nginx2
rm -rf nginx
mv nginx2 nginx
</code></pre>
<p>This wipes all the default nginx configuration and only keeps the
<code>mime.types</code> file which I’ll include in my custom configuration.</p>
<h3 id="trimmed-down-debian-configuration" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#trimmed-down-debian-configuration"><span>Trimmed-down Debian configuration</span></a></h3>
<p>Speaking about my custom configuration, here’s the base. Everything
there is the parts of the default <code>nginx.conf</code> on Debian that I kept.
I’ll post my custom additions after.</p>
<pre><code class="hljs language-nginx"><span class="hljs-comment">#</span>
<span class="hljs-comment"># /etc/nginx/nginx.conf</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment"># Based on a simplified Debian default.</span>
<span class="hljs-comment">#</span>

<span class="hljs-attribute">user</span> www-data;
<span class="hljs-attribute">worker_processes</span> auto;
<span class="hljs-attribute">pid</span> /run/nginx.pid;

<span class="hljs-section">events</span> {
    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">768</span>;
    <span class="hljs-comment"># multi_accept on;</span>
}

<span class="hljs-section">http</span> {
    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;
    <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;
    <span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">2048</span>;
    <span class="hljs-comment"># server_tokens off;</span>

    <span class="hljs-attribute">include</span> /etc/nginx/mime.types;
    <span class="hljs-attribute">default_type</span> application/octet-stream;

    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;
    <span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;

    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;
}
</code></pre>
<h3 id="val-s-essential-tweaks" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#val-s-essential-tweaks"><span>Val’s essential tweaks</span></a></h3>
<p>From there, I tweak a few things.</p>
<pre><code class="hljs language-diff">     sendfile on;
     tcp_nopush on;
     types_hash_max_size 2048;
<span class="hljs-deletion">-    # server_tokens off;</span>
<span class="hljs-addition">+    server_tokens off;</span>

     include /etc/nginx/mime.types;
     default_type application/octet-stream;

<span class="hljs-deletion">-    access_log /var/log/nginx/access.log;</span>
<span class="hljs-addition">+    access_log off;</span>
     error_log /var/log/nginx/error.log;

     gzip on;
<span class="hljs-addition">+    gzip_vary on;</span>
<span class="hljs-addition">+</span>
<span class="hljs-addition">+    # Custom list based on Debian&#x27;s `/etc/nginx/mime.types`.</span>
<span class="hljs-addition">+    gzip_types text/css text/xml application/javascript application/atom+xml application/rss+xml text/plain application/json image/svg+xml;</span>
<span class="hljs-addition">+</span>
<span class="hljs-addition">+    charset utf-8;</span>
 }
</code></pre>
<ul>
<li>I turn <code>server_tokens</code> off to remove the <code>Server</code> HTTP response header.</li>
<li>I turn off the default access log because I like to specify it per
virtual host and I don’t care about requests that didn’t hit a virtual
host.</li>
<li>I enable <code>gzip_vary</code> to have the <code>Vary: Accept-Encoding</code> header in the
responses. This is especially important when used with a caching
server in front, because it instructs it to not mix responses with
different <code>Accept-Encoding</code> together, preventing for example to serve
a gzip response to a client that can only handle plain text.</li>
<li>I configure more <code>gzip_types</code> than the default of just <code>text/html</code>, so
that we automatically compress most web resources. Feel free to add
more that makes sense to you here.</li>
<li>I set <code>charset</code> to <code>utf-8</code> so that <code>charset=utf-8</code> is added to the
<code>Content-Type</code> response header, e.g. <code>Content-Type: text/html; charset=utf-8</code>.</li>
</ul>
<p>But we’re still missing a very important part. The TLS configuration!</p>
<h3 id="tls-settings" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#tls-settings"><span>TLS settings</span></a></h3>
<p>I use <a href="https://ssl-config.mozilla.org/">Mozilla’s SSL configuration generator</a>
for that, with the intermediate setting, which gives me the following
(comments removed):</p>
<pre><code class="hljs language-nginx"><span class="hljs-attribute">ssl_certificate</span> /path/to/signed_cert_plus_intermediates;
<span class="hljs-attribute">ssl_certificate_key</span> /path/to/private_key;
<span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">1d</span>;
<span class="hljs-attribute">ssl_session_cache</span> shared:MozSSL:<span class="hljs-number">10m</span>;
<span class="hljs-attribute">ssl_session_tickets</span> <span class="hljs-literal">off</span>;
<span class="hljs-attribute">ssl_dhparam</span> /path/to/dhparam;
<span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;
<span class="hljs-attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
<span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">off</span>;
<span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=63072000&quot;</span> always;
<span class="hljs-attribute">ssl_stapling</span> <span class="hljs-literal">on</span>;
<span class="hljs-attribute">ssl_stapling_verify</span> <span class="hljs-literal">on</span>;
<span class="hljs-attribute">ssl_trusted_certificate</span> /path/to/root_CA_cert_plus_intermediates;
</code></pre>
<p>I like to include it in the <code>http</code> block, after the <code>default_type</code>
directive.</p>
<p>But we don’t yet have the certificates and key files that we reference
there. We still need to generate them with Let’s Encrypt. We’ll do that
a bit later, but until then, we need to comment those parts otherwise
the nginx config won’t validate and nginx won’t be able to start (or
reload).</p>
<pre><code class="hljs language-diff"><span class="hljs-deletion">-ssl_certificate /path/to/signed_cert_plus_intermediates;</span>
<span class="hljs-deletion">-ssl_certificate_key /path/to/private_key;</span>
<span class="hljs-addition">+# ssl_certificate /path/to/signed_cert_plus_intermediates;</span>
<span class="hljs-addition">+# ssl_certificate_key /path/to/private_key;</span>
 ssl_session_timeout 1d;
 ssl_session_cache shared:MozSSL:10m;
 ssl_session_tickets off;
<span class="hljs-deletion">-ssl_dhparam /path/to/dhparam;</span>
<span class="hljs-addition">+# ssl_dhparam /path/to/dhparam;</span>
 ssl_protocols TLSv1.2 TLSv1.3;
 ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
 ssl_prefer_server_ciphers off;
 add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;
 ssl_stapling on;
 ssl_stapling_verify on;
<span class="hljs-deletion">-ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span>
<span class="hljs-addition">+# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span>
</code></pre>
<h3 id="default-server-with-https-and-www-redirect" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#default-server-with-https-and-www-redirect"><span>Default server with HTTPS and <code>www</code> redirect</span></a></h3>
<p>I like <code><strong>http://</strong>www.codejam.info/</code> to redirect to
<code><strong>https://</strong>www.codejam.info/</code>, and also
<code>https://codejam.info/</code> to redirect to <code>https://<strong>www.</strong>codejam.info/</code>.
As a bonus, I like when <code><strong>http://</strong>codejam.info/</code>
redirects to <code><strong>https://www.</strong>codejam.info/</code> in
a single step. 😏</p>
<p>We’ll also take this as an opportunity to configure the Let’s Encrypt
webroot challenge path, so that our ACME client can automatically
generate and renew certificates.</p>
<div class="note">
<p><strong>Note:</strong> it appears that the most common way people run ACME clients is
by letting it automatically modify their web server configuration file
to handle the ACME challenge endpoint <code>/.well-known/acme-challenge</code>
during the issuing or renewal.</p>
<p>Alternatively, the “webroot” method lets you configure the
<code>/.well-known/acme-challenge</code> path yourself on your web server to serve
an existing directory on the system. The ACME client will then just put
files in that directory to have them served by your web server, without
altering its configuration. This is a much simpler and more reliable
solution.</p>
<p>While common ACME clients like <a href="https://certbot.eff.org/">Certbot</a> and
<a href="https://github.com/acmesh-official/acme.sh">acme.sh</a> can handle a
variety of web server configurations, I hate the idea of a tool
modifying my <code>nginx.conf</code> which is why I use the webroot mode instead.</p>
</div>
<p>The following <code>server</code> blocks will do all of that. They live inside the
main <code>http</code> block which I won’t include again here.</p>
<pre><code class="hljs language-nginx"><span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server;
    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2 default_server;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2 default_server;

    <span class="hljs-attribute">location</span> / {
        <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>;
    }
}

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;

    <span class="hljs-attribute">server_name</span> www.codejam.<span class="hljs-literal">info</span>;

    <span class="hljs-attribute">location</span> / {
        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://$host$request_uri;
    }

    <span class="hljs-attribute">location</span> /.well-known/acme-challenge {
        <span class="hljs-attribute">root</span> /var/www/challenges;
    }
}

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;

    <span class="hljs-attribute">server_name</span> codejam.<span class="hljs-literal">info</span>;

    <span class="hljs-attribute">location</span> / {
        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://www.$host$request_uri;
    }

    <span class="hljs-attribute">location</span> /.well-known/acme-challenge {
        <span class="hljs-attribute">root</span> /var/www/challenges;
    }
}

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;

    <span class="hljs-attribute">server_name</span> www.codejam.<span class="hljs-literal">info</span>;

    <span class="hljs-attribute">access_log</span> /var/log/nginx/www.codejam.<span class="hljs-literal">info</span>.access.log;
    <span class="hljs-attribute">error_log</span> /var/log/nginx/www.codejam.<span class="hljs-literal">info</span>.<span class="hljs-literal">error</span>.log;

    <span class="hljs-attribute">root</span> /var/www/www.codejam.<span class="hljs-literal">info</span>;
    <span class="hljs-attribute">index</span> index.html;

    <span class="hljs-attribute">location</span> /.well-known/acme-challenge {
        <span class="hljs-attribute">root</span> /var/www/challenges;
    }
}
</code></pre>
<p>The first block with <code>default_server</code> makes sure that nginx returns a
404 for every requests it sees for a domain that it doesn’t know about.</p>
<p>The rest should be self-explanatory.</p>
<div class="note">
<p><strong>Note:</strong> this will be good for production but because we don’t have the
certificate files yet, nginx will not accept our SSL servers. So comment
those out in the meantime, and just add the following server that will
let us generate our initial certificates:</p>
<pre><code class="hljs language-conf">server {
    listen 80 default_server;
    listen [::]:80 default_server;

    location / {
        return 404;
    }

    location /.well-known/acme-challenge {
        root /var/www/challenges;
    }
}
</code></pre>
</div>
<h3 id="enabling-starting-or-reloading-nginx" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#enabling-starting-or-reloading-nginx"><span>Enabling, starting or reloading nginx</span></a></h3>
<p>First, let’s test the configuration:</p>
<pre><code class="hljs language-sh">nginx -t
</code></pre>
<p>If successful, we can enable the nginx service if it’s not already:</p>
<pre><code class="hljs language-sh">systemctl <span class="hljs-built_in">enable</span> nginx
</code></pre>
<p>Then start it:</p>
<pre><code class="hljs language-sh">systemctl start nginx
</code></pre>
<p>Or reload its configuration if it was already running</p>
<pre><code class="hljs language-sh">systemctl reload nginx
</code></pre>
<div class="note">
<p><strong>Note:</strong> by default when installing a package that comes with a service
like nginx, Debian automatically enables it and starts it, so you
probably only need the reload command above at that point.</p>
<p>Use <code>systemctl status nginx</code> to see if it’s currently enabled and
running.</p>
</div>
<p>While in this state we don’t have proper TLS certificates to handle
HTTPS just yet, we have everything we need to automatically generate and
renew TLS certificates with the ACME protocol.</p>
<h2 id="managing-tls-certificates-with-acme-sh" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#managing-tls-certificates-with-acme-sh"><span>Managing TLS certificates with acme.sh</span></a></h2>
<p><abbr title="Automatic certificate management environment">ACME</abbr>
is the protocol behind Let’s Encrypt. <a href="https://github.com/acmesh-official/acme.sh">acme.sh</a>
is an ACME client written in pure Unix shell. It’s simple and
lightweight, unlike <a href="https://certbot.eff.org/">Certbot</a>, which is the
client that Let’s Encrypt recommends to use.</p>
<p>acme.sh is the most simple client that I found, but their default usage
instructions still do some magic that I would rather avoid, so I’ll
present here my modified installation method, which doesn’t have any
magic and where you’re fully in control of every step.</p>
<h3 id="setting-up-a-restricted-user" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#setting-up-a-restricted-user"><span>Setting up a restricted user</span></a></h3>
<p>We’ll do a custom installation of <a href="https://github.com/acmesh-official/acme.sh">acme.sh</a>
so that it runs <strong>with its own restricted user</strong> based on <a href="https://gist.github.com/lachesis/943769f3fac740d5848352752ac08741">this Gist</a>,
because running it as root like they show out of the box is
irresponsible.</p>
<p>First we create a <code>acme</code> user with home directory set to <code>/var/lib/acme</code>
(it’ll be created automatically because we specified <code>-m</code>) and
<code>/usr/sbin/nologin</code> as login shell to deny login access to this account.</p>
<pre><code class="hljs language-sh">useradd -m -d /var/lib/acme -s /usr/sbin/nologin acme
</code></pre>
<p>We also make sure this home directory is only accessible by the <code>acme</code>
user itself.</p>
<pre><code class="hljs language-sh">chmod 700 /var/lib/acme
</code></pre>
<p>Then we prepare the webroot challenge directory that we configured
earlier in <code>nginx.conf</code>. We make sure that it’s owned by the <code>acme</code> user
and group so that it can write to this directory. The default permission
for the directory is full access for the user and read and execute
access for everyone else which is fine here.</p>
<pre><code class="hljs language-sh">mkdir /var/www/challenges
chown acme:acme /var/www/challenges
</code></pre>
<p>Next, we prepare the directory where we’ll install the certificates.
This directory needs to be writable by the <code>acme</code> user but nginx (who
runs under the <code>www-data</code> user and group) needs to be able to read from
it, so we set the group to <code>www-data</code>.</p>
<p>This allows us to set the <code>710</code> permission which means full access for
the user, execute access for the group (on a directory that means it can
access files in this directory according to the files permissions but
cannot list the contents of the directory), and no permissions for
everyone else.</p>
<pre><code class="hljs language-sh">mkdir /etc/acme
chown acme:www-data /etc/acme
chmod 710 /etc/acme
</code></pre>
<p>Finally we give <code>sudo</code> access to the <code>acme</code> user, allowing it to only
run the <code>/bin/systemctl reload nginx</code> command without being prompted for
a password. Run <code>visudo</code> to safely edit the <code>/etc/sudoers</code> file and add
the following line:</p>
<pre><code class="hljs language-sh">acme	ALL=(ALL:ALL) NOPASSWD: /bin/systemctl reload nginx
</code></pre>
<p>We can now open a shell as the <code>acme</code> user to set up acme.sh there. Here
we explicitly precise <code>/bin/bash</code> as shell because we set the default
one to <code>/usr/sbin/nologin</code> for this user earlier to deny shell access.
We make sure to run a login shell using <code>-</code>.</p>
<pre><code class="hljs language-sh">su -s /bin/bash - acme
</code></pre>
<p>We’ll end up in the home directory which we set earlier to <code>/var/lib/acme</code>.</p>
<h3 id="installation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#installation"><span>Installation</span></a></h3>
<p>We can now follow the official <a href="https://github.com/acmesh-official/acme.sh#2-or-install-from-git">install from Git instructions</a>
because piping scripts from the web into <code>sh</code> is a terrible idea.</p>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> https://github.com/acmesh-official/acme.sh
<span class="hljs-built_in">cd</span> acme.sh
</code></pre>
<p>That’s where my method starts to differ. They recommend running
<code>./acme.sh --install -m my@example.com</code> which will do a number of
things:</p>
<ol>
<li>Register to <a href="https://zerossl.com/">ZeroSSL</a> with the given email address.</li>
<li>Copy the contents of the repo to <code>~/.acme.sh</code>, doing a few shebang
modifications.</li>
<li>Create a default <code>account.conf</code> and <code>acme.sh.env</code> files that we won’t
need here.</li>
<li>Generate a cron entry to renew certificates, which we can generate
later on with a more specific command.</li>
</ol>
<p>I like to keep the source code separate from the configuration and some
of those steps are unnecessary for me.</p>
<p>Instead, I don’t “install” acme.sh and I just run it from its Git repo,
which will make it much easier to update the code in the future. Because
by default it stores all the configuration in <code>~/.acme.sh</code>, this has the
nice side effect of keeping the code and the configuration separate. The
code from the repo is directly usable, and all the extra state will be
put in <code>~/.acme.sh</code>.</p>
<p>We still need to explicitly register to ZeroSSL (or any of the other
<a href="https://github.com/acmesh-official/acme.sh#supported-ca">supported certificate authorities</a>):</p>
<pre><code class="hljs language-sh">./acme.sh --register-account -m y@example.com
</code></pre>
<p>We also need to set up the cron entry:</p>
<pre><code class="hljs language-sh">LE_WORKING_DIR=<span class="hljs-variable">$PWD</span> ./acme.sh --install-cronjob
</code></pre>
<p>You can check what acme.sh did by running <code>crontab -l</code>. You could also
manually configure an entry like:</p>
<pre><code class="hljs language-crontab">42 0 * * * /path/to/.acme.sh/acme.sh --cron --home /path/to/.acme.sh &gt; /dev/null
</code></pre>
<p>This would run the acme.sh cron task every day at 00:42. But their
<code>--install-cronjob</code> script generates a random minute to run the job so
that the certificate authority doesn’t get a huge burst of requests at
the same second every day, which I think is a good practice to keep.</p>
<p>From there, the commands we’ll run are the same as the recommended ones
in the acme.sh readme.</p>
<h2 id="preparing-the-certificates-directory-and-dh-parameters" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#preparing-the-certificates-directory-and-dh-parameters"><span>Preparing the certificates directory and DH parameters</span></a></h2>
<p>I like to install my certificates in <code>/etc/acme</code> which we created
earlier, with a directory per domain, but this is totally arbitrary.</p>
<pre><code class="hljs language-sh">mkdir /etc/acme/codejam.info
</code></pre>
<p>We also get the <abbr title="Diffie-Hellman">DH</abbr> parameters as
recommended by <a href="https://ssl-config.mozilla.org/">Mozilla’s SSL configuration generator</a>.</p>
<pre><code class="hljs language-sh">curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /etc/acme/ssl-dhparams.pem
</code></pre>
<div class="note">
<p><strong>Note:</strong> long story short, generating strong DH parameters is not that
easy and it’s actually <a href="https://security.stackexchange.com/a/149818">considered more secure</a>
to use ones that are proven to be strong despite being public like those
provided by Mozilla, unless the key size is considered short (1024 bits
or less as of today’s standards), then using shared DH parameters could
introduce more security risks than it would prevent.</p>
</div>
<h3 id="generating-our-certificate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#generating-our-certificate"><span>Generating our certificate</span></a></h3>
<pre><code class="hljs language-sh">./acme.sh --issue -d codejam.info -d www.codejam.info -w /var/www/challenges
</code></pre>
<p>This will issue a certificate for <code>codejam.info</code> with <code>www.codejam.info</code>
as alternate name (you can put as many alternate names as you want with
subsequent <code>-d</code> parameters), meaning that the certificate will be valid
for all of those domains. You can also generate a wildcard certificate
but this requires going through automated DNS validation which I won’t
cover in this blog post.</p>
<h3 id="installing-the-certificate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#installing-the-certificate"><span>Installing the certificate</span></a></h3>
<p>In the previous step, acme.sh generated the key and certificate files in
its own state directory, but it’s not recommended to hardcode those
paths. That’s why we configure certificate installation paths as well as
a reload command:</p>
<pre><code class="hljs language-sh">./acme.sh --install-cert -d codejam.info \
    --key-file /etc/acme/codejam.info/privkey.pem \
    --cert-file /etc/acme/codejam.info/cert.pem \
    --fullchain-file /etc/acme/codejam.info/fullchain.pem \
    --ca-file /etc/acme/codejam.info/chain.pem \
    --reloadcmd <span class="hljs-string">&#x27;sudo systemctl reload nginx&#x27;</span>
</code></pre>
<p>This will not only install the files in the specified locations and run
the reload command, but will also save those to your domain
configuration so that acme.sh knows knows where to install the
certificates and how to reload the server during the cron job.</p>
<p>But we commented out the certificate files in <code>nginx.conf</code> earlier
because they didn’t exist yet. We can now edit the config (as root) to
reference those files we just installed.</p>
<pre><code class="hljs language-diff"><span class="hljs-deletion">-# ssl_certificate /path/to/signed_cert_plus_intermediates;</span>
<span class="hljs-deletion">-# ssl_certificate_key /path/to/private_key;</span>
<span class="hljs-addition">+ssl_certificate /etc/acme/codejam.info/fullchain.pem;</span>
<span class="hljs-addition">+ssl_certificate_key /etc/acme/codejam.info/privkey.pem;</span>
 ssl_session_timeout 1d;
 ssl_session_cache shared:MozSSL:10m;
 ssl_session_tickets off;
<span class="hljs-deletion">-# ssl_dhparam /path/to/dhparam;</span>
<span class="hljs-addition">+ssl_dhparam /etc/acme/ssl-dhparams.pem;</span>
 ssl_protocols TLSv1.2 TLSv1.3;
 ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
 ssl_prefer_server_ciphers off;
 add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;
 ssl_stapling on;
 ssl_stapling_verify on;
<span class="hljs-deletion">-# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span>
<span class="hljs-addition">+ssl_trusted_certificate /etc/acme/codejam.info/chain.pem;</span>
</code></pre>
<p>Verify the config is valid with <code>nginx -t</code> and run a final <code>systemctl reload nginx</code> to apply the changes.</p>
<h2 id="bonus-http-basic-authentication" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#bonus-http-basic-authentication"><span>Bonus: HTTP basic authentication</span></a></h2>
<p>You don’t want your website to be public just yet but still want to test
it from there? Add basic authentication to it!</p>
<pre><code class="hljs language-sh">apt install apache2-utils
htpasswd -c /etc/nginx/htpasswd &lt;user&gt;
</code></pre>
<p>Then in <code>nginx.conf</code>, add the following to the <code>server</code> block you want
to add authentication to:</p>
<pre><code class="hljs language-nginx"><span class="hljs-attribute">location</span> / {
    <span class="hljs-attribute">auth_basic</span> <span class="hljs-string">&quot;Private&quot;</span>;
    <span class="hljs-attribute">auth_basic_user_file</span> /etc/nginx/htpasswd;
}
</code></pre>
<p>Here, “private” is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives">basic authentication <code>realm</code> parameter</a>
and could be literally anything. It doesn’t even seem to be shown in
browser UIs anymore so it doesn’t really matter.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>At that point, you should have a working HTTPS server with auto-renewed
certificates. I hope this post was useful to you!</p>
<div class="note">
<p><strong>Note:</strong> if you’re looking to integrate Let’s Encrypt or similar on
your server but this post was too technical for you, <a href="https://www.codejam.info/val.html#contact">let me know</a>,
I’m available for <a href="https://www.codejam.info/freelance.html">contracting</a> projects and
I’ll be happy to help you with that. ✌️</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1440704576059961362">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Vercel custom log drain (dump HTTP traffic for free on a Vercel app)</title>
    <link href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html" />
    <id>https://www.codejam.info/2021/09/vercel-custom-log-drain.html</id>
    <updated>2021-09-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In the <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html">previous post</a>, we
compared the different services providing free static website hosting,
and their options to access server-side web analytics or raw HTTP logs.</p>
<p><a href="https://vercel.com/">Vercel</a> was the only one to allow accessing
traffic data for free, but it’s not the easiest thing to do. In this
article, I’ll show you how.</p>
<div class="note">
<p><strong>Note:</strong> if you’re in a rush, go straight to the <a href="https://github.com/valeriangalliat/vercel-custom-log-drain">GitHub repo</a>
which contains the full code for a working integration that allows you
to manage arbitrary log drains!</p>
<p>I also give you the link to the <a href="https://vercel.com/integrations/custom-log-drain">live integration that I use for myself</a>,
and you can use it too!</p>
<p>Otherwise, if you’re interested in the underlying implementation, read
on.</p>
</div>
<p>I’ll assume that you already have an account with Vercel and deployed
your app there. This shouldn’t be too bad, but if you like to keep
things simple, you might want to read a few tips of mine about <a href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html">keeping Vercel clean and silent</a>.</p>
<p>Neither of Vercel’s UI, CLI and API directly allow to manage log drains.
While <a href="https://vercel.com/docs/rest-api#integrations/log-drains">the API has endpoints to manage log drains</a>,
those are only available to Vercel integrations, and are denied when
called with a <a href="https://vercel.com/account/tokens">regular user token</a>
like the ones the CLI and web app use.</p>
<p>This means that we’ll need to create our own Vercel integration in order
to have an integration token that will let us call the log drains API.</p>
<h2 id="how-does-a-vercel-integration-work" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#how-does-a-vercel-integration-work"><span>How does a Vercel integration work</span></a></h2>
<ul>
<li>A Vercel integration is a web app hosted on your own domain, which
needs to respond to a “Vercel callback” page.</li>
<li>Vercel will redirect the user to that page when they try to install
your integration, providing a <code>code</code> and <code>next</code> query parameters.</li>
<li>You can exchange the <code>code</code> parameter for a Vercel API OAuth access token.</li>
<li>You’re expected to redirect to the URL provided in the <code>next</code>
parameter once the installation is complete.</li>
</ul>
<p>Most integrations will store the OAuth access token and refresh token
that are exchanged during that process to be able to query the API on
behalf of the user later on, but for cost and time reasons, <strong>I want to
keep my integration stateless</strong>. This means that I’ll perform the log
drain operations only during the installation process, and <strong>will
instantly forget the token</strong>.</p>
<p>Because of that, we’ll have to remove the integration and add it again
if we want to configure a new log drain. Log drains are specific to an
integration, meaning that when you remove the integration, the log
drains are removed with it too.</p>
<p>I could have built a stateful application where I allow to fully manage
log drains, but then I would need to charge for it to pay for the
hosting and development costs, and at that point I believe that most
users who are willing to pay will be happy to pay for Logtrail,
Sematext, Datadog, LogDNA and others that already have an official
Vercel integration.</p>
<div class="note">
<p><strong>Note:</strong> if I’m wrong with that assumption, and you would pay a monthly
fee for a service that allows you to fully manage your Vercel log drains
with arbitrary URLs, <a href="https://www.codejam.info/val.html#contact">let me know</a>. If there’s enough
demand I’ll consider building something!</p>
</div>
<h2 id="creating-our-own-vercel-integration" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#creating-our-own-vercel-integration"><span>Creating our own Vercel integration</span></a></h2>
<p>For this, head to the <a href="https://vercel.com/dashboard/integrations/console">Vercel integrations console</a>,
which lists you all the integrations that you have created, and allows
you to create new ones.</p>
<p>Click the “create” button. In that form, you need to fill a bunch of
details about your integration that should be pretty obvious.</p>
<p>You’ll need to include the redirect URL. If you want to use <a href="https://github.com/valeriangalliat/vercel-custom-log-drain">the repo I mentioned earlier</a>,
it’s going to be on the <code>/vercel/callback</code> path, on the domain you’re
going to host it on.</p>
<p>You can ignore the webhook and configuration URLs unless you want to
build a stateful version that allows editing the log drains after
installation (then you’d need the configuration URL specifically).</p>
<h3 id="making-the-form" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#making-the-form"><span>Making the form</span></a></h3>
<p>We’ll go for a very basic HTML form that allows selecting between
<code>json</code>, <code>ndjson</code> and <code>syslog</code> as the log drain type, which are the only
formats supported by Vercel as of writing, as well as the URL to the log
drain we want to add.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;json&quot;</span>&gt;</span>json<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ndjson&quot;</span>&gt;</span>ndjson<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;syslog&quot;</span>&gt;</span>syslog<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;URL&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
</code></pre>
<p>See the <a href="https://github.com/valeriangalliat/vercel-custom-log-drain/blob/master/form.html">full HTML</a>
with a tiny layer of CSS.</p>
<h3 id="serving-the-form" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#serving-the-form"><span>Serving the form</span></a></h3>
<p>I’ll use <a href="https://www.fastify.io/">Fastify</a> to handle the HTTP requests,
but <a href="https://expressjs.com/">Express</a> would have worked just fine for
this too.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)
<span class="hljs-keyword">const</span> fastify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fastify&#x27;</span>)

<span class="hljs-keyword">const</span> form = fs.readFileSync(<span class="hljs-string">&#x27;form.html&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)

<span class="hljs-keyword">const</span> app = fastify({ <span class="hljs-attr">logger</span>: <span class="hljs-literal">true</span> })

app.get(<span class="hljs-string">&#x27;/vercel/callback&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">if</span> (!req.query.code || !req.query.next) {
    <span class="hljs-keyword">return</span> res.type(<span class="hljs-string">&#x27;text/plain&#x27;</span>).send(<span class="hljs-string">&#x27;Hello!&#x27;</span>)
  }

  res.type(<span class="hljs-string">&#x27;text/html&#x27;</span>).send(form)
})


app.listen(process.env.PORT || <span class="hljs-number">8080</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
  <span class="hljs-keyword">if</span> (err) {
    app.log.error(err)
    process.exit(<span class="hljs-number">1</span>)
  }
})
</code></pre>
<p>This gets us running with a simple app that serves the form we just
built on <code>/vercel/callback</code>.</p>
<p>If called without <code>code</code> and <code>next</code> parameters, it means we’re not being
redirected from Vercel integration installation, and we just show a
simple message to say hello, because the form wouldn’t be useful when
it’s not called from Vercel.</p>
<h3 id="handling-the-form" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#handling-the-form"><span>Handling the form</span></a></h3>
<p>First, we’ll need to trade the <code>code</code> parameter for a Vercel OAuth
access token. We can do that by calling the <code>https://api.vercel.com/v2/oauth/access_token</code>.</p>
<p>This requires us to configure the OAuth client ID and client secret that
were provided to you at the end of the <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#creating-our-own-vercel-integration">integration creation</a>,
as well as the redirect URL that we defined during creation.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)
<span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)
<span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config&#x27;</span>)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getToken</span> (<span class="hljs-params">code</span>) </span>{
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://api.vercel.com/v2/oauth/access_token&#x27;</span>

  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> fetch(url, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>
    },
    <span class="hljs-attr">body</span>: qs.stringify({
      <span class="hljs-attr">client_id</span>: config.clientId,
      <span class="hljs-attr">client_secret</span>: config.clientSecret,
      code,
      <span class="hljs-attr">redirect_uri</span>: config.redirectUri
    })
  })

  <span class="hljs-keyword">if</span> (!res.ok) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`<span class="hljs-subst">${url}</span> responded with <span class="hljs-subst">${res.status}</span>`</span>)
  }

  <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> res.json()

  <span class="hljs-keyword">return</span> json.access_token
}
</code></pre>
<p>With that token, we can call the log drains endpoint to create a new log
drain.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createLogDrain</span> (<span class="hljs-params">token, body</span>) </span>{
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://api.vercel.com/v1/integrations/log-drains&#x27;</span>

  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> fetch(url, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,
      <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${token}</span>`</span>
    },
    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(body)
  })

  <span class="hljs-keyword">if</span> (!res.ok) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`<span class="hljs-subst">${url}</span> responded with <span class="hljs-subst">${res.status}</span>`</span>)
  }
}
</code></pre>
<p>Now, we can put those together when handling the <code>POST</code> form submission,
as well as redirecting to the <code>next</code> URL at the end.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> formBody = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fastify-formbody&#x27;</span>)

app.register(formBody)

app.post(<span class="hljs-string">&#x27;/vercel/callback&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; {
  <span class="hljs-keyword">if</span> (!req.query.code || !req.query.next || !req.body.type || !req.body.url) {
    <span class="hljs-keyword">return</span> res.code(<span class="hljs-number">400</span>)
  }

  <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> getToken(req.query.code)

  <span class="hljs-keyword">await</span> createLogDrain(token, {
    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;custom-log-drain&#x27;</span>,
    <span class="hljs-attr">type</span>: req.body.type,
    <span class="hljs-attr">url</span>: req.body.url
  })

  res.redirect(req.query.next)
})
</code></pre>
<p>You can see <a href="https://github.com/valeriangalliat/vercel-custom-log-drain/blob/master/index.js">the full code on GitHub</a>.</p>
<p>After deploying that code, you should be able to use your custom
integration from the integration marketplace to configure any log drain
you want for your Vercel apps.</p>
<p>You can hack on this code if you want to allow setting up the log drain
only on certain apps and not globally (see other <a href="https://vercel.com/docs/rest-api#integrations/log-drains/create-a-log-drain/request-parameters">request parameters</a>),
or make it stateful with the option to edit and remove existing log
drains without having to reinstall the integration.</p>
<h2 id="making-a-simple-log-drain-with-nginx" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#making-a-simple-log-drain-with-nginx"><span>Making a simple log drain with nginx</span></a></h2>
<p>Now, we only solved half of the problem. We can configure any URL as a
log drain on our Vercel apps, but we don’t have a URL to put there yet!
Most of the logging software as a service apps already have
<a href="https://vercel.com/integrations#logging">an integration on the marketplace</a>.</p>
<p>Instead, we want to provide our own URL to handle the logs, in a way
that’s the cheapest as possible, or ideally free.</p>
<p>For that, we’re going to leverage the Google Cloud free tier, which
includes one <code>e2-micro</code> instance for free per billing account.</p>
<p>It should be easy to get one running and to install nginx on it.</p>
<div class="note">
<p><strong>Note:</strong> if you’re interested in how I do the initial configuration of
a Debian Google Cloud VM, I’ll have an article about that very soon.
Stay tuned!</p>
</div>
<p>Then, we’re going to use a cool “hack” that allows us to configure nginx
to append the <code>POST</code> body of an endpoint directly to the file of our
choice. This is essentially the definition of a simple HTTP log
drain.</p>
<p>First, we’ll define a <code>postdata</code> log format that logs the plain
unescaped request body to the log file:</p>
<pre><code class="hljs language-nginx"><span class="hljs-section">http</span> {
    <span class="hljs-attribute">log_format</span> postdata escape=<span class="hljs-literal">none</span> $request_body;
}
</code></pre>
<p>But we can’t just us it like this. By default, nginx won’t bother
reading the request body if it’s not doing anything with it, which means
it won’t be included in the log variables.</p>
<p>There’s two ways to force nginx to read the request body. One is with the
<a href="https://github.com/openresty/echo-nginx-module">nginx <code>echo</code> module</a>,
and the other one (fully native) leverages a hack with the <code>proxy_pass</code>
directive.</p>
<p>In both cases, you’ll be able to configure <code>https://your.domain/vercel/drain</code>
as a Vercel log drain. I find that NDJSON works best with this format.</p>
<h3 id="with-echo-read-request-body" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#with-echo-read-request-body"><span>With <code>echo_read_request_body</code></span></a></h3>
<pre><code class="hljs language-nginx"><span class="hljs-comment"># Make sure this is loaded, method may vary depending on your setup.</span>
<span class="hljs-attribute">load_module</span> modules/ngx_http_echo_module.so;

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">location</span> /vercel/drain {
        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;

        <span class="hljs-attribute">if</span> ($request_method = POST) {
            <span class="hljs-comment"># Wherever you want to store your logs.</span>
            <span class="hljs-attribute">access_log</span> /path/to/vercel.log postdata;

            <span class="hljs-comment"># Required to force nginx to read the request body,</span>
            <span class="hljs-comment"># otherwise it won&#x27;t log anything.</span>
            echo_read_request_body;
        }
    }
}
</code></pre>
<h3 id="with-proxy-pass-hack" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#with-proxy-pass-hack"><span>With <code>proxy_pass</code> hack</span></a></h3>
<p>If you don’t want to load <code>ngx_http_echo_module</code>, you can instead use
the native <code>proxy_pass</code> directive to force nginx to read the request
body.</p>
<p>Since <code>proxy_pass</code> needs to proxy to <em>something</em>, the trick consists
into defining a “black hole” endpoint to proxy to. Because <code>proxy_pass</code>
will need to read the whole HTTP body in order to forward it, it will
become accessible to our log format.</p>
<pre><code class="hljs language-nginx"><span class="hljs-section">server</span> {
    <span class="hljs-attribute">location</span> /vercel/empty {
      <span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;
    }

    <span class="hljs-attribute">location</span> /vercel/drain {
        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;

        <span class="hljs-attribute">if</span> ($request_method = POST) {
            <span class="hljs-attribute">access_log</span> /path/to/vercel.log postdata;

            <span class="hljs-comment"># Adapt this to whatever your server responds to, or</span>
            <span class="hljs-comment"># feel free to use `$scheme`, `$server_name`, `$host`,</span>
            <span class="hljs-comment"># `$server_port` and so on.</span>
            <span class="hljs-attribute">proxy_pass</span> http://localhost/vercel/empty;
        }
    }
}
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#wrapping-up"><span>Wrapping up</span></a></h2>
<p>You should now have everything you need to store your Vercel logs in
plain text files on a Google Cloud free tier VM (or wherever else you
wanted to)!</p>
<p>You’re now free to <code>grep</code> through them or do whatever magic you want
with the data to get all the stats and insights that you want. And all
of that for free (or nearly).</p>
<div class="note">
<p><strong>Note:</strong> if you need to forward your Vercel logs to a custom endpoint
but this article was too technical for you, feel free to <a href="https://www.codejam.info/val.html#contact">contact me</a>,
I’m available for <a href="https://www.codejam.info/freelance.html">freelance work</a> and I’ll be
happy to help you with that. ✌️</p>
</div>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1440401250927857668">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Free static hosting with server-side analytics</title>
    <link href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html" />
    <id>https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html</id>
    <updated>2021-09-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This blog has been hosted on <a href="https://pages.github.com/">GitHub Pages</a>
for a while, but I was getting frustrated of not having any idea of the
traffic it was getting, and I was really curious to find out.</p>
<p>The only way to get traffic insights on GitHub pages is through
client-side analytics scripts, which is technically very unreliable, and
I’d rather not get any data than getting data that I cannot trust, and
which on top of that negatively impacts the performance of my site.</p>
<p>What I want is raw access to HTTP logs, which is the only proper source
of truth for this.</p>
<p>In the first part of this series, I’ll compare different free static
hosting services and their options to get access to server-side
analytics or logs. Then, I’ll show you <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html">in the second part</a>
how to retrieve logs on a Vercel app, which is the only service I found
to provide HTTP logs as part of their free offer!</p>
<h2 id="github-pages" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#github-pages"><span>GitHub Pages</span></a></h2>
<p><a href="https://pages.github.com/">GitHub Pages</a> is the easiest option to host
a static website for free, especially if you’re already working with
GitHub, but it doesn’t have an option to access HTTP logs.</p>
<p>The only method they document is using Google Analytics or a similar
script, but that’s not an acceptable solution to me. Let’s move on.</p>
<h2 id="netlify" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#netlify"><span>Netlify</span></a></h2>
<p><a href="https://www.netlify.com/">Netlify</a> is my next favorite way to deploy a
static website. They also have a <a href="https://www.netlify.com/products/analytics/">Netlify Analytics</a>,
product, an analytics platform based on server logs, which is exactly
what I want!</p>
<p>As they point out in their marketing page, it’s “data right from the
source of truth”, it’s got “better performance”, “more accurate
numbers”, “better privacy” and gives you access to extra metrics you can
only get on the server side.</p>
<p>To me this the only proper way to get traffic analytics on the web.</p>
<p>But they price that feature at $9 per month per site, which to be honest
is pretty decent if you have a website that’s generating some cash, but
my blog is not and my current budget is closer to $0.</p>
<p>And sadly, if not interested in the full blown analytics product,
there’s no way to <a href="https://answers.netlify.com/t/download-raw-server-access-logs/6586">only get the raw server logs</a>.</p>
<h2 id="cloudflare" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#cloudflare"><span>Cloudflare</span></a></h2>
<p><a href="https://www.cloudflare.com/">Cloudflare</a> also has a free static hosting
offer. They’ve got a <a href="https://www.cloudflare.com/web-analytics/">Cloudflare Analytics</a>
product, but the free version is only powered by a client-side script,
which as we saw earlier, is useless.</p>
<p>Otherwise, the option to have analytics based on server logs starts with
the “pro” plan that’s $20 per month. Too much for me.</p>
<p>They also offer <a href="https://www.cloudflare.com/products/cloudflare-logs/">Cloudflare Logs</a>
which seems like it would at least give access to raw HTTP logs, but the
pricing is not mentioned and you need to contact their sales department
to maybe get access to it. Doesn’t look good.</p>
<h2 id="render" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#render"><span>Render</span></a></h2>
<p><a href="https://render.com/">Render</a> is another service with free static
hosting, and a it’s a very well built product. Simple and efficient. Out
of all the websites in this list, it’s the one with my favorite UI so
far. Gets shit done, no bullshit. 😍</p>
<p>I especially love the fact that they allow to configure any public Git
URL to pull from, without forcing you to connect with GitHub or another
hosted Git provider through OAuth like it’s the case with <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#vercel">Vercel</a>.</p>
<p>Sadly, while you can <a href="https://render.com/docs/log-streams">configure a syslog drain</a>,
it only forward application logs and doesn’t include edge load balancer
HTTP logs, which is the only thing I care about.</p>
<h2 id="google-cloud-free-tier-vm" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#google-cloud-free-tier-vm"><span>Google Cloud free tier VM</span></a></h2>
<p>While it’s very different from the other managed services I mention in
this list, <a href="https://cloud.google.com/free/docs/gcp-free-tier/#compute">Google Cloud</a>
allows you to run a <code>e2-micro</code> instance constantly for free.</p>
<p>The <code>e2-micro</code> instance has access to 0.25 vCPU and can burst up to 2
vCPUs. It’s got 1 GB of RAM, and you’re allowed up to 30 GB of storage
for free. You can even assign it a static IP that will stay free as long
as it’s in use.</p>
<p>It’s a pretty underpowered machine but will be way fine for serving
static websites, for example with nginx, as long as it doesn’t have a
ridiculous amount of traffic.</p>
<p>The only caveat is that you still have to <a href="https://cloud.google.com/vpc/network-pricing">pay for traffic</a>.</p>
<p>Ingress traffic is free (data going in the VM), but you’ll have to pay
for egress traffic (data going out of the VM). In other words, this
means that someone uploading a large file to your VM will be nearly
free, but serving a large file to someone will impact your billing.</p>
<p>Typically this is low enough to be negligible, but Google will be happy
to charge your credit card for $0.03 every month.</p>
<p>And because <em>you’re the server</em>, you can do whatever the fuck you want,
like logging HTTP traffic to <code>/var/log</code>.</p>
<p>This solution requires a bit of system administration knowledge, but if
like me, you find it to be exciting and a lot of fun, it’s definitely a
good solution. That being said you’ll also be responsible of managing
the VM, keeping it up-to-date, and fixing any issue that might happen
with it, otherwise you website might get some downtime.</p>
<h2 id="vercel" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#vercel"><span>Vercel</span></a></h2>
<p>Finally, <a href="https://vercel.com/">Vercel</a> also has free static hosting. Yay!</p>
<p>They even have a <a href="https://vercel.com/analytics">Vercel Analytics</a>
product, but it’s mostly focused on performance, and the data is
captured on the client side. Makes sense for performance data, but not
what I want.</p>
<p>They also have <a href="https://vercel.com/docs/deployments/logs">logs</a>, which
can even be <a href="https://vercel.com/docs/deployments/logs#persistence">persisted</a>,
through <a href="https://vercel.com/integrations#logging">logging integrations</a>.</p>
<p>This is great, but the whole point I’m doing this comparison is because
I want a <em>free</em> hosting with logs. If I’m not willing to pay for
hosting, I’m not going to pay for Logtrail, Sematext, Datadog or LogDNA. 😆</p>
<p>The good news is that the logging integrations are built on top of <a href="https://vercel.com/docs/rest-api#integrations/log-drains">log
drains</a>, and
Vercel allows to <a href="https://vercel.com/docs/integrations">create custom integrations</a>.
This means that we can create our own custom integration, and for
example, configure a log drain that forwards the logs to… a <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#google-cloud-free-tier-vm">Google Cloud free tier VM</a>!</p>
<p>This is the best of both words, because Google Cloud won’t charge for
ingress (and sending data to it is indeed ingress), so we’ll only pay
for the egress of our SSH session where we query the log files, but
that’s going to be negligible.</p>
<p>In <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html">the next post</a>, I’ll show you how to set
up Vercel with a custom integration to forward logs to a Google Cloud VM
(or the log drain of your choice). See you there!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1440401245991170048">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
  <entry>
    <title>Using Vercel without preview deployments</title>
    <link href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html" />
    <id>https://www.codejam.info/2021/09/vercel-without-preview-deployments.html</id>
    <updated>2021-09-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://vercel.com/">Vercel</a> is a cool hosting service and is my go-to
for free static hosting. Why? While I prefer the experience of
<a href="https://pages.github.com/">GitHub Pages</a>, <a href="https://www.netlify.com/">Netlify</a>
and <a href="https://render.com/">Render</a>, Vercel <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html">is the only one</a>
to allow raw access to HTTP logs for free. GitHub Pages and Render don’t
have this feature and Netlify charges a premium fee for it that’s over
my budget for a small website.</p>
<p>And while I don’t use client-side analytics scripts (because they
technically cannot be reliable), I like to have a sense of my website
traffic through HTTP logs (the only proper source of truth).</p>
<div class="note">
<p><strong>Note:</strong> if you’re interested in this topic, I specifically wrote an
article on <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html">how to get access to raw HTTP logs on a Vercel website</a>.
Check it out!</p>
</div>
<h2 id="the-problem-with-vercel" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#the-problem-with-vercel"><span>The problem with Vercel</span></a></h2>
<p>Vercel works. It works well. But it doesn’t fit my workflow at all.</p>
<p>I like to keep things simple and minimal, and have the least amount of
noise possible. Vercel likes to make things complicated, over-engineered
(relative to what I’m doing with it), and noisy.</p>
<p>Let’s take the example of this very blog, if I wanted to host it on
Vercel. The <a href="https://github.com/valeriangalliat/blog">source</a> is on
GitHub, I keep my Markdown files neatly in the <code>master</code> branch, I
render them to HTML using a <a href="https://github.com/valeriangalliat/blog/blob/03a140f7c02e540b4bf97c470261d23e3a156fad/Makefile#L49">dependency-based incremental build system</a>
(also known as makefile) in the <code>gh-pages</code> branch (could be called
anything else but hey, it was once hosted on GitHub Pages after all).</p>
<p>I don’t <em>need</em> to re-render the whole site every time I deploy, which is
why I commit the HTML files on a separate branch, instead of asking
Vercel or any other hosting platform to compile everything from <code>master</code>
on every deploy. This keeps things <em>fast as fuck</em> and low energy.</p>
<h3 id="preview-deployments" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#preview-deployments"><span>Preview deployments</span></a></h3>
<p>By default, Vercel expects every branch to be deployable, and they have
that cool feature of automatically deploying every single commit to a
random URL (preview deployments). I don’t need preview deployments for
my blog, but there’s no way to turn them off.</p>
<h3 id="very-verbose-vercel" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#very-verbose-vercel"><span>Very verbose Vercel</span></a></h3>
<p>They also have the annoying habit of posting a comment on every GitHub
PR and commit with the deployment URL by default. I hate noise and this
is pure noise for me. Luckily there’s a non-intuitive way of turning it
off and I’ll show you how.</p>
<h3 id="managing-garbage" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#managing-garbage"><span>Managing garbage</span></a></h3>
<p>Finally, because each PR and commit is going to trigger a deployment
with a not-so-temporary URL. This creates a lot of old, unused, garbage
deployments, and Vercel doesn’t know when you don’t need them anymore
and consider them garbage (for me, like, instantly, for anything that’s
not the latest production build).</p>
<p>You can either remove them manually (sad), or you can periodically run a
command that does just that for you (also sad, but less sad), and I’ll
show you how.</p>
<p>Let’s get into it.</p>
<h2 id="turning-off-preview-deployments-kinda" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#turning-off-preview-deployments-kinda"><span>Turning off preview deployments (kinda)</span></a></h2>
<p>I guess that the whole point of Vercel is to offer preview deployments,
so they didn’t really consider the use case where you would want to
remove them.</p>
<p>But if you go in your project settings, under the Git section, you can
<a href="https://vercel.com/support/articles/how-do-i-use-the-ignored-build-step-field-on-vercel">configure</a>
a “ignored build step” command.</p>
<figure class="center">
  <img alt="Ignored build step" src="https://www.codejam.info/img/2021/09/vercel-ignored-build-step.png">
</figure>
<p>It’s a command whose exit code will determine whether Vercel will
actually deploy the branch. When the command errors out (exits with a
nonzero code), a new build will be triggered, but if the commands
succeeds (exits with 0), this build will be ignored.</p>
<p>You can <a href="https://vercel.com/docs/projects/overview#ignored-build-step">run Git commands there</a>,
but I like to keep it simple and just rely on the <code>VERCEL_ENV</code>
environment variable to only allow builds on the production branch
(<code>gh-pages</code> in my case) as defined in “production branch”.</p>
<figure class="center">
  <img alt="Production branch" src="https://www.codejam.info/img/2021/09/vercel-production-branch.png">
</figure>
<p>By using the following command, I can effectively ignore all builds that
are not in the production branch.</p>
<pre><code class="hljs language-sh">[ <span class="hljs-string">&quot;<span class="hljs-variable">$VERCEL_ENV</span>&quot;</span> != production ]
</code></pre>
<p>This uses the
<a href="https://man7.org/linux/man-pages/man1/test.1.html"><code>test(1)</code></a> command
(commonly aliased to <code>[</code>) to exit with an error when we’re on the
production branch, in order to trigger a build.</p>
<p>The ignored build will still show up in your deployments list as
“cancelled” deployments, and there’s no way around that, but I show you
below <a href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#garbage-collecting-dangling-deployments">how to garbage collect them</a>.</p>
<h2 id="getting-rid-of-bot-comments" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#getting-rid-of-bot-comments"><span>Getting rid of bot comments</span></a></h2>
<p>By default Vercel will comment on every PR and commit with the link to
the deployment.</p>
<p>To avoid that, create a <code>vercel.json</code> file in every branch where you
want to turn this off, with the following content:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;github&quot;</span>: {
    <span class="hljs-attr">&quot;silent&quot;</span>: <span class="hljs-literal">true</span>
  }
}
</code></pre>
<div class="note">
<p><strong>Note:</strong> if you used the previous trick to only run builds in the
production branch, you only need to add this configuration there.</p>
</div>
<h2 id="garbage-collecting-dangling-deployments" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#garbage-collecting-dangling-deployments"><span>Garbage collecting dangling deployments</span></a></h2>
<p>Vercel knows to create preview deployments, but doesn’t know when to
delete them. This means that you need to more or less manually delete
the old preview deployments that are not needed anymore.</p>
<p>It usually doesn’t cause any harm to have hundreds of older versions of
your website available on random public URLs that most likely only your
team knows about. I just don’t like them being <em>there</em> in the first
place.</p>
<figure class="center">
  <img alt="Dangling deployments" src="https://www.codejam.info/img/2021/09/vercel-dangling-deployments.png">
  <figcaption>I don't know about you, but that makes me anxious.</figcaption>
</figure>
<p>With the <a href="https://vercel.com/docs/cli">Vercel CLI</a>, which you can
install with <code>npm install -g vercel</code>, you can use the <a href="https://vercel.com/docs/cli#commands/remove"><code>vercel remove</code></a>
command to remove deployments.</p>
<p>Specifically, to remove everything but deployments with an active production or preview URL, run:</p>
<pre><code class="hljs language-sh">vercel remove &lt;project&gt; --safe
</code></pre>
<figure class="center">
  <img alt="Clean deployments" src="https://www.codejam.info/img/2021/09/vercel-clean-deployments.png">
  <figcaption>Now this is better!</figcaption>
</figure>
<h2 id="final-thoughts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#final-thoughts"><span>Final thoughts</span></a></h2>
<p>I’m not blaming Vercel for all of this, I’m happy they provide this
service for free and <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html">they’re the only ones</a>
to include HTTP logs access in the free offer.</p>
<p>Sadly their approach to deploying websites if very far from mine, and
this requires me to work around those default behaviors to have
something that fits me better.</p>
<p>If you’re in a similar situation, I hope you found this post useful!</p>
<section class="post-footer">
  <h3>Want to leave a comment?</h3>
  <p>
    Join the discussion on <a href="https://twitter.com/valeriangalliat/status/1440401242522406912">Twitter</a> or send me an <a href="mailto:val@codejam.info">email</a>! 💌<br>
    This post helped you? <a href="https://ko-fi.com/funkyval">Buy me a coffee</a>! 🍻
  </p>
</section>
]]></content>
  </entry>
</feed>
