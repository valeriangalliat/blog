<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeJam</title>
  <subtitle>Hey, I‚Äôm Val, welcome to my blog!</subtitle>
  <link href="https://www.codejam.info/feed.xml" rel="self" />
  <link href="https://www.codejam.info/" />
  <id>https://www.codejam.info/</id>
  <updated>2021-09-25T01:00:22Z</updated>
  <author>
    <name>Val</name>
  </author>
  <entry>
    <title>Elixir, Ecto and Heroku Postgres: unverified SSL certificates</title>
    <link href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html" />
    <id>https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html</id>
    <updated>2021-09-24T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This one took me a bit of time to sort out so I figured I‚Äôd write a blog
post about it in case it can help someone else.</p>
<p>I have a Phoenix Elixir application that I recently deployed on one of
my servers. While it‚Äôs running smooth, I was bugged by the following
warning that was showing only in production when starting the app:</p>
<pre><code class="hljs language-elixir">[warn] <span class="hljs-symbol">Description:</span> <span class="hljs-string">&#x27;Authenticity is not established by certificate path validation&#x27;</span>
     <span class="hljs-symbol">Reason:</span> <span class="hljs-string">&#x27;Option {verify, verify_peer} and cacertfile/cacerts is missing&#x27;</span>
</code></pre>
<p>This message was repeated 10 times during boot. Spoiler, 10 is also my
Ecto <code>:pool_size</code>, but I didn‚Äôt think about that right away.</p>
<p>There was no context around that, and since the app interacts with quite
a few things over SSL, it could have come from a lot of places.</p>
<h2 id="tracing-warnings-in-elixir-investigation-and-delusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#tracing-warnings-in-elixir-investigation-and-delusion">Tracing warnings in Elixir: investigation and delusion</a></h2>
<p>My first reflex was to look for something similar to
<a href="https://nodejs.org/api/cli.html#cli_trace_warnings">Node.js‚Äô <code>--trace-warnings</code> option</a>.
This will add a stack trace to all warnings, making it very easy to
track where they‚Äôre from and address them.</p>
<p>Sadly, I couldn‚Äôt find anything similar with Elixir and Erlang. I
resorted to <a href="https://elixirforum.com/t/tracing-runtime-warnings/42576">asking on Elixir Forum</a>,
only to get confirmation that this wasn‚Äôt possible.</p>
<h2 id="compiling-erlang" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#compiling-erlang">Compiling Erlang?</a></h2>
<p><a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl.erl#L2833">The line that logged that warning</a>
was easy to find in the Erlang <code>ssl</code> module, but that didn‚Äôt help me
identifying what code path triggers it.</p>
<p>I thought about compiling Erlang with a patch that raises an exception
instead of logging a warning there. While that wouldn‚Äôt be the quickest
solution, it would definitely make it obvious what‚Äôs triggering that
peer validation warning.</p>
<p>What was bugging me was that I was seeing this warning only in
production, not on my development machine. And I didn‚Äôt really like the
idea of compiling my patched Erlang in production to debug in
production‚Ä¶</p>
<div class="note">
<p><strong>Note:</strong> I didn‚Äôt end up compiling Erlang to trace the warning that
way, because I was lucky to find after some trial and error what was
causing it.</p>
<p>That being said, if you run into the same kind of issue and don‚Äôt find
any alternative, this is guaranteed to give you an answer, so it‚Äôs
probably worth the effort at that point!</p>
</div>
<h2 id="going-for-a-walk" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#going-for-a-walk">Going for a walk</a></h2>
<p>I didn‚Äôt actually go for a walk, but that‚Äôs the kind of thoughts that
usually happen when you take a walk, or when you‚Äôre under the shower, so
I would have probably gotten that idea earlier if I did.</p>
<blockquote>
<p>If it‚Äôs happening only in production, it‚Äôs probably coming from one of
the production environment variables!</p>
</blockquote>
<p>For some reason, until then, I was focused on finding if there was
something odd about my Erlang build in production, or the CA
certificates configuration on the server, and while it could have come
from there, environment variables were an easy one to test.</p>
<p>So I configure my local machine with the production environment
variables, and bingo! I can repro the warning.</p>
<p>At that point it becomes very obvious to me that my database connection
is the culprit, because it‚Äôs the only thing in the environment that‚Äôs
related to SSL in a way or another.</p>
<h2 id="heroku-postgres-and-ssl-certificate-verification" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#heroku-postgres-and-ssl-certificate-verification">Heroku Postgres and SSL certificate verification</a></h2>
<p>Now that I found the offender, it‚Äôs easier to look for a specific
solution. The first result on Google for <code>heroku postgres ssl verify</code> is
<a href="https://help.heroku.com/3DELT3RK/why-can-t-my-third-party-utility-connect-to-heroku-postgres-with-ssl">this page on the Heroku support website</a>.</p>
<p>Since for some reason it requires to be logged in with an Heroku account
to view it, I‚Äôll just quote the relevant part here:</p>
<blockquote>
<p>Heroku Postgres does not currently support verifiable certificates.
Our certificates will change when the underlying hardware has issues
and we move your database away from it.</p>
</blockquote>
<p>Sweet. So it‚Äôs actually ‚Äúintended‚Äù that I get a SSL verification warning
when connecting to my Heroku Postgres database over SSL.</p>
<p>But knowing that is not enough for me. Now I identified that this
warning was acceptable and doesn‚Äôt need to be fixed per se, I need to
mute it, so that it doesn‚Äôt adds noise to the logs.</p>
<p><strong>This is particularly important</strong> because otherwise, I would hardly
notice a new SSL verification warning that would appears in another
potentially <strong>more critical part of the codebase</strong>, leaving me with
vulnerabilities.</p>
<h2 id="muting-this-particular-warning" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/elixir-ecto-heroku-postgres-unverified-ssl-certificates.html#muting-this-particular-warning">Muting this particular warning</a></h2>
<p><a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl.erl#L2833">As we saw earlier</a>,
for that warning to show up, we need the SSL connection‚Äôs <code>verify</code> to
be set to <code>verify_none</code>, and the <code>ssl_logger</code>'s level to be configured
to show warnings.</p>
<p>The default value of <code>verify</code> in the <code>ssl</code> module <a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl_internal.hrl#L195">is indeed <code>verify_none</code></a>,
and Ecto doesn‚Äôt seem to alter it by default. Also the default
<code>log_level</code> of the <code>ssl_logger</code> <a href="https://github.com/erlang/otp/blob/896510977b6cf1f2f4ac817394f3d5c9061f92cf/lib/ssl/src/ssl_internal.hrl#L160">is set to <code>notice</code></a>,
which is why we‚Äôre seeing that warning.</p>
<p>It seems that my only option here is to configure the SSL connection
specifically for my Ecto repository to have a log level of <code>:error</code>:</p>
<pre><code class="hljs language-elixir">config <span class="hljs-symbol">:myapp</span>, MyApp.Repo
  <span class="hljs-symbol">ssl_opts:</span> [<span class="hljs-symbol">log_level:</span> <span class="hljs-symbol">:error</span>]
</code></pre>
<p>It took more hours than I‚Äôm willing to admit to come up with this patch
that turns out to be trivial. So I‚Äôm trying to feel better about myself
by spending even more hours writing a blog post about it to explain all
the details and subtleties. üòÖ</p>
<p>If you‚Äôre here to try and solve an unverified warning issue, or trace
warnings with Elixir and Erlang in general, I hoped that it was useful
to you. Have a wonderful day!</p>
]]></content>
  </entry>
  <entry>
    <title>Zoom H2n: pro tips and tricks</title>
    <link href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html" />
    <id>https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html</id>
    <updated>2021-09-24T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>The <a href="https://amzn.to/2XRD6mk">Zoom H2n</a> is an awesome portable
microphone with a long battery life. It‚Äôs very versatile and delivers a
solid sound.</p>
<p>In this post, I‚Äôll give you all of the tips and tricks that I discovered
over the years using my H2n, that made me more efficient at using it and
allowed me to do even more with it.</p>
<figure class="center">
  <img alt="Zoom H2n" src="https://www.codejam.info/img/2021/09/h2n/zoom-h2n.jpg">
</figure>
<p>But first, I‚Äôll give you a little bit of backstory about how I got
there in the first place. Feel free to <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#my-do-to-microphone-setting">skip it</a>.</p>
<h2 id="the-story-about-my-h2n" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#the-story-about-my-h2n">The story about my H2n</a></h2>
<p>The reason I got it in the first place was put it in my motorcycle
jacket while I ride to record clean engine sound for my
<a href="https://www.youtube.com/playlist?list=PL3gQ6-WYh7kU8QjpRSMpDknhAwvccFiMu">GoPro recordings</a>.
This is how <a href="https://www.youtube.com/c/royaljordanianR">Royal Jordanian</a>,
a famous motorcycle YouTuber, <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#record-motorcycle-sound-rj-style">uses his H2n</a>,
and his results are remarkable.</p>
<p>I used to have a <a href="https://amzn.to/2ZraaCh">Zoom H4n</a> because I liked
that it could act as an external sound card where I could plug XLR
microphones and jack instruments as well, but it was too big to fit in
my motorcycle jacket, which turned out to be what allowed me to get the
<a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#record-motorcycle-sound-rj-style">best sounding audio on a motorcycle</a>.</p>
<p>Anyways, because I had that mic around when I started <a href="https://www.youtube.com/FunkyVal">making more YouTube videos</a>,
it became my main device to record voice in various settings (indoors,
outdoors, multiple people interviews, live streaming). I also use it to
record acoustic instruments.</p>
<figure class="grid grid-2">
  <img alt="Acoustic guitar recording with the H2n" src="https://www.codejam.info/img/2021/09/h2n/acoustic-1.jpg">
  <img alt="Acoustic guitar recording with the H2n (closeup)" src="https://www.codejam.info/img/2021/09/h2n/acoustic-2.jpg">
</figure>
<p>While specialized microphones might give you even better results in
specific situations, the H2n has allowed me to record high quality audio
in an impressively wide set of settings.</p>
<p>After years of using it, I have a couple of tips to share with you that
will make you even more productive with your H2n and enable you to do
even more with it.</p>
<h2 id="my-go-to-mic-setting" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#my-go-to-mic-setting">My go-to mic setting</a></h2>
<p>The H2n has 5 built-in microphones and lets you use them in the
<a href="https://composerfocus.com/zoom-h2n-review/">following settings</a>:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Stereophonic_sound#X-Y_technique:_intensity_stereophony">X-Y stereo</a>:
2 mics in the front.</li>
<li><a href="https://en.wikipedia.org/wiki/Stereophonic_sound#M/S_technique:_mid/side_stereophony">M/S mid/side</a>:
1 mic in the back, 2 mics on the sides with adjustable recording width.</li>
<li>2-channel surround: X-Y and M/S converted to 1 stereo track.</li>
<li>4-channel surround: X-Y and M/S converted to 2 stereo tracks.</li>
</ul>
<p>I personally use X-Y stereo the vast majority of the time. If you don‚Äôt
know which one to chose, I would default to this one.</p>
<figure class="center">
  <img alt="H2n record modes" src="https://www.codejam.info/img/2021/09/h2n/record-modes.jpg">
</figure>
<p>It‚Äôs going to record from the front of the Zoom (where the screen is),
which is convenient because you‚Äôre facing the front of the mic when
you‚Äôre recording. This allows you to easily monitor the levels on the
screen, and puts the record button right in front of you.</p>
<p>That being said the H2n is well designed because the clipping light on
top is visible from both sides, meaning that if you want to record in
M/S mode, you‚Äôll still see the light while facing the back of the Zoom!</p>
<h2 id="my-go-to-gain-setting" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#my-go-to-gain-setting">My go-to gain setting</a></h2>
<p>When I first got my H2n, I wasn‚Äôt sure where to put the gain. My usual
rule of thumb with gain is to put it <strong>as high as possible</strong> at the
source so that <strong>the highest peaks</strong> I plan to have are gonna be <strong>close
to 0 dB, but won‚Äôt clip</strong>.</p>
<p>Most of the time, I <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#hot-shoe-mount">mount the Zoom on top of my camera</a>,
or I <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#the-potholder-trick">put it on a surface</a> about an arm‚Äôs length
in front of me. In those conditions, I found that <strong>leaving the gain on
8 all the time</strong> gave me the best results. It‚Äôs perfect to record my
voice clearly and any meaningful context sound, without clipping,
and leaving enough headroom for any reasonable surprise peaks.</p>
<figure class="center">
  <img alt="H2n mic gain knob" src="https://www.codejam.info/img/2021/09/h2n/mic-gain.jpg">
</figure>
<p>Because it stays there most of the time, I ensure that all the
recordings that are made in similar conditions will have consistent
levels, so that I don‚Äôt have to adjust them one by one in post. I just
boost the gain a bit more at the track level, and add some compression
to avoid unnecessary peaking.</p>
<p>So I always leave my Zoom with a gain of 8 by default, and if I‚Äôm in a
recording setting that <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#mic-stand-adapter">differs from my usual use case</a>,
like singing very close to the mic through a pop filter or recording an
instrument, I‚Äôll go back to step one where I try to get the gain as high
as possible while making sure it doesn‚Äôt clip during the highest peaks I
plan to have. FWIW in those settings, I rarely needed to go below 6.</p>
<h2 id="battery-and-clock-reset-trick" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#battery-and-clock-reset-trick">Battery and clock reset trick</a></h2>
<p>You might have noticed that the H2n internal clock is reset when you
remove the AA batteries to change or recharge them. It‚Äôs pretty
frustrating to have to configure the date and time again every time you
recharge the Zoom!</p>
<p>But there‚Äôs a neat trick that I‚Äôve found <a href="https://www.reddit.com/r/livesound/comments/ci181c/comment/evc0nt0/">on Reddit</a>.
If you change the batteries <strong>one at a time</strong>, e.g. without ever having no
battery in the Zoom at all, it will keep the clock intact!</p>
<figure class="center">
  <img alt="Changing the H2n batteries" src="https://www.codejam.info/img/2021/09/h2n/batteries.jpg">
</figure>
<h2 id="preventing-the-filename-counter-to-reset" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#preventing-the-filename-counter-to-reset">Preventing the filename counter to reset</a></h2>
<p>By default, the H2n names files like <code>ZOOM0001.WAV</code>, incrementing the
number for every new file.</p>
<p>This is fine with me, but every time I empty the SD card, the file
resets to <code>ZOOM0001.WAV</code>! There‚Äôs no persistent internal counter like
with my camera.</p>
<p>This is annoying because I end up with conflicting file names, and I
can‚Äôt uniquely identify a specific Zoom recording by its name. Not
great.</p>
<p>If you want to keep incrementing the number after wiping your SD card
clean, just <strong>leave the latest file you recorded there</strong>! For example if
you recorded all the way to <code>ZOOM0363.WAV</code>, just leave that file there,
and the next one to be recorded will be called <code>ZOOM0364.WAV</code>.</p>
<p>If even this single file is large enough that you want to remove it as
well, you can drop an empty file instead with the same filename, and
that‚Äôll do the trick. üëå</p>
<p>But beware, if you ever reach <code>ZOOM9999.WAV</code>, the H2n will not let you
record any further and will just error with <code>DATA FULL</code>, even if there‚Äôs
still technically enough free space on the SD card.</p>
<p>For this reason, and also because it‚Äôs even easier overall, I recommend
switching to <a href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#using-date-and-time-as-filename">naming files after the date</a>,
which is something that I didn‚Äôt know was possible until very recently!</p>
<h2 id="using-date-and-time-as-filename" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#using-date-and-time-as-filename">Using date and time as filename</a></h2>
<p>If you want something more deterministic to name files that the default
strategy of incrementing a counter that resets every time you empty the
SD card, I recommend switching to using the date file naming strategy
instead.</p>
<p>You‚Äôll find it from the <code>MENU</code> button on the right, in <code>REC</code>, <code>FILE NAME</code>, and set it to <code>DATE</code> there.</p>
<figure class="center">
  <a href="https://www.bhphotovideo.com/lit_files/67854.pdf">
    <img alt="H2n filename settings" src="https://www.codejam.info/img/2021/09/h2n/filename-setting.png">
  </a>
  <figcaption>From the operation manual</figcaption>
</figure>
<h2 id="hot-shoe-mount" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#hot-shoe-mount">Hot shoe mount</a></h2>
<p>Because I often record <a href="https://www.youtube.com/FunkyVal">YouTube videos</a>,
I like to mount my H2n on top of my camera to get high quality audio in
my videos.</p>
<p>I know most YouTubers use the <a href="https://amzn.to/3ADspSM">Rode VideoMic</a>
or one of its declinations, but since I already had the H2n, I didn‚Äôt
want to bother buying a new mic for video.</p>
<p>It turns out the H2n can easily be mounted on top of a camera as well,
with the help of a cheap <a href="https://amzn.to/3kEML8k">hot shoe</a> <a href="https://amzn.to/2XPrIY4">adapter</a>!</p>
<figure class="center">
  <img alt="Hot shoe mount" src="https://www.codejam.info/img/2021/09/h2n/hot-shoe-mount.jpg">
</figure>
<div class="note">
<p><strong>Note:</strong> in that setup, I noticed that the H2n picked up noise from my
camera strap rubbing and bouncing on the camera body and tripod when
moving around, e.g. when vlogging.</p>
<p>To avoid that, make sure to <strong>remove the camera strap before you
record</strong>, if you usually have one attached!</p>
<p>On my camera it‚Äôs a bit annoying to do, but definitely worth it to have
a clean sound. I‚Äôm looking forward to buying the <a href="https://amzn.to/39G7uCp">Leash by Peak Design</a>,
even though it‚Äôs a bit more expensive than what I‚Äôd like to pay for a
camera strap, it‚Äôs super simple to attach and detach and that would make
my life much easier.</p>
</div>
<h2 id="wind-muff" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#wind-muff">Wind muff</a></h2>
<p>A wind muff is a must for outdoor recording especially if it‚Äôs a bit
windy. This is <a href="https://amzn.to/3lYlpcQ">the one I use</a>, it‚Äôs for the
H4n but works perfectly on the H2n as well!</p>
<figure class="center">
  <img alt="Wind muff" src="https://www.codejam.info/img/2021/09/h2n/wind-muff.jpg">
</figure>
<div class="note">
<p><strong>Note:</strong> if like me you‚Äôre confused between the ‚ÄúH4n Fur‚Äù and ‚ÄúH4n Pro
Fur‚Äù variations and don‚Äôt know which one to pick, keep in mind that
it‚Äôs ‚ÄúH4n‚Äù and ‚ÄúH4n Pro‚Äù furs, not a ‚ÄúPro Fur‚Ñ¢‚Äù. üòÇ</p>
<figure class="grid">
  <a href="https://amzn.to/2WaddgX">
    <img alt="H4n Fur" src="https://www.codejam.info/img/2021/09/h2n/h4n-fur.png">
  </a>
  <a href="https://amzn.to/2WaddgX">
    <img alt="H4n Pro Fur" src="https://www.codejam.info/img/2021/09/h2n/h4n-pro-fur.png">
  </a>
</figure>
</div>
<p>Zoom also provides one as part of their <a href="https://amzn.to/3i0GnqA">H2n accessory pack</a>,
and if you‚Äôre going to buy a few of the items that are part of it, it
might be cheaper to just get the pack!</p>
<h2 id="mic-stand-adapter" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#mic-stand-adapter">Mic stand adapter</a></h2>
<p>Another thing that‚Äôs part of the <a href="https://amzn.to/3i0GnqA">accessory pack</a>
that I didn‚Äôt get but probably should have, is the <a href="https://amzn.to/39G0mWF">mic stand adapter</a>.</p>
<figure class="center">
  <img alt="Mic stand adapter" src="https://www.codejam.info/img/2021/09/h2n/mic-stand-adapter.jpg">
</figure>
<p>It allows you to mount your H2n directly on a mic stand, which is very
practical if you want to record high quality audio while singing
directly into it, recording a podcast, live streaming, voice-over or
recording acoustic instruments.</p>
<figure class="center">
  <img alt="Mic stand setup" src="https://www.codejam.info/img/2021/09/h2n/mic-stand-setup.jpg">
  <img alt="Acoustic guitar recording with the H2n (closeup)" src="https://www.codejam.info/img/2021/09/h2n/acoustic-2.jpg">
</figure>
<p>This is the stack that I personally use for this kind of work and I‚Äôm
super happy with it:</p>
<ul>
<li><a href="https://amzn.to/3i3E3yQ">Mic stand</a>, this one is a bit on the cheap
side but gets the job done. You can even put two mics on it!</li>
<li><a href="https://amzn.to/3AEMnMV">Shock mount</a>, key element to avoid noise in
the recording from vibrations around the mic. This one specifically is
compatible with the <a href="https://amzn.to/39G0mWF">H2n mic stand adapter</a>.
Double-check the diameter if you get another one.</li>
<li><a href="https://amzn.to/3zEDPnG">Pop filter</a>, to remove artifacts or
distortion from pronouncing letters like P, T, K and S very close to
the mic.</li>
<li>And obviously the <a href="https://amzn.to/39G0mWF">mic stand adapter</a> to
mount the Zoom on the whole thing.</li>
</ul>
<p>Here‚Äôs an awesome article on <a href="https://www.lewitt-audio.com/blog/do-i-need-a-shock-mount-and-a-pop-filter-for-my-microphone">why a shock mount and pop filter are important</a>
if you‚Äôre not sure if you need them or not.</p>
<h2 id="use-as-an-audio-interface" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#use-as-an-audio-interface">Use as an audio interface</a></h2>
<p>If you have the proper cable, you can connect your H2n to your computer
via USB and use it as an audio interface, meaning that you can capture
sound from it directly from a screen recording or from your
<abbr title="Digital audio workstation">DAW</abbr>!</p>
<figure class="center">
  <img alt="Audio interface" src="https://www.codejam.info/img/2021/09/h2n/audio-interface.jpg">
</figure>
<p>They don‚Äôt seem to mention it anywhere though but keep in mind that you
specifically need a Mini-B USB connector on the H2n side (which is not
that common).</p>
<p>Again, <a href="https://amzn.to/3AFKC22">this is the cable I use</a>, but if like
me you‚Äôre gonna need so many accessories that turn out to be part of the
<a href="https://amzn.to/3i0GnqA">H2n accessory pack</a>, you might as well
get that in the first place. That being said the cable I bought is
significantly longer than the one they provide in the pack and that
comes in handy to have a bit more moving freedom during studio sessions.</p>
<p>Here‚Äôs what it looks like once plugged, to set it as input device inside
Logic:</p>
<figure class="center">
  <img alt="H2n as input interface in Logic" src="https://www.codejam.info/img/2021/09/h2n/logic-interface.png">
</figure>
<p>But if you want to use another audio interface to record instruments, MIDI, and
other mics at the same time (I personally have a <a href="https://amzn.to/2XLrCQU">Steinberg UR22mkII</a>
for that), you can‚Äôt just switch input device in your DAW like this.</p>
<p>Instead, on macOS, I recommend in <em>Audio MIDI Setup</em> to configure an
aggregate device that includes both your sound card and the H2n. This
way, you can set that aggregate device as input in your DAW and you‚Äôll
get all the channels from your sound card plus all the channels from the
Zoom!</p>
<figure class="center">
  <img alt="H2n as an aggregate defice with another sound card" src="https://www.codejam.info/img/2021/09/h2n/aggregate-device.png">
</figure>
<h2 id="record-motorcycle-sound-rj-style" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#record-motorcycle-sound-rj-style">Record motorcycle sound, RJ style</a></h2>
<p>As I mentioned earlier <a href="https://www.youtube.com/c/royaljordanianR">Royal Jordanian</a>
is a famous motorcycle YouTuber, and makes some of the best sounding
motorcycle videos out there.</p>
<p>He records mainly with a H2n and that‚Äôs the reason I got one in the
first place! But if you‚Äôre going to record your motorcycle rides with
it, you‚Äôll quickly realize that‚Äôs not enough information.</p>
<ul>
<li>Were to put the H2n?</li>
<li>What recording mode to use?</li>
<li>What direction should the mic be facing?</li>
<li>What gain to use?</li>
</ul>
<p>Luckily, RJ once made a Q&amp;A video where he shows exactly <a href="https://youtu.be/PVULgH3mOtw?t=9">how he uses is H2n</a>.
What I love is that even though it lasts a few seconds, we can see precisely that:</p>
<ol>
<li>The mic is in X-Y stereo mode (arrow pointing to the front of the mic).</li>
<li>He puts it in his motorcycle jacket chest pocket.</li>
<li>Specifically, the mic is placed facing downwards, with the front of
the mic on his chest (so facing towards the back of the
motorcycle).</li>
</ol>
<p>This makes sense, as most of the sound is going to be heard at the
exhaust level, which is behind him, and definitely below his chest.</p>
<figure class="center">
  <img alt="H2n in motorcycle jacket chest pocket" src="https://www.codejam.info/img/2021/09/h2n/motorcycle-jacket.jpg">
</figure>
<p>This leaves us with the question of the gain. That‚Äôs gonna be very
specific to your jacket and your motorcycle in general, so you should do
a couple of tests, going at relatively high revs, to see if it‚Äôs
clipping or not. When in doubt, I would recommend using a lower gain for
this as distorted audio from recording a motorcycle engine quickly gets
unusable. Maybe start around 5 and go up or down from there!</p>
<p>I‚Äôll add from my personal experience that it‚Äôs a good idea to put the
<code>HOLD</code> mode on the right side of the H2n while riding (same button you
use to power it on but sliding it up). This will make sure that any
accidental contact with buttons around the mic won‚Äôt stop the recording
or open menus and change random things there.</p>
<h2 id="the-potholder-trick" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#the-potholder-trick">The potholder trick</a></h2>
<p>Lastly, I‚Äôll share with you a small trick that I use when I put the Zoom
on a hard surface in front of me, like a table or a desk.</p>
<p>If you just leave it directly on the hard surface, it‚Äôll pick up all the
vibrations from it as noise, so it‚Äôs gonna be especially bad when you
take or put objects on the same surface as the Zoom is on.</p>
<p>To avoid that, I just place a potholder below it. Anything similar
should work, like a folded towel. With that, it‚Äôs much less affected by
interactions with the hard surface, giving you a cleaner sound quality
overall!</p>
<figure class="center">
  <img alt="Potholder trick" src="https://www.codejam.info/img/2021/09/h2n/potholder.jpg">
</figure>
<h2 id="zooming-out" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/zoom-h2n-pro-tips-and-tricks.html#zooming-out">Zooming out</a></h2>
<p>That‚Äôs it for today! I hope that you learnt a thing or two today thanks
to this post. Consider subscribing to my <a href="https://www.youtube.com/FunkyVal">YouTube channel</a>
where I also share video versions of those articles (and much more).
Happy recording!</p>
<figure class="center">
  <img alt="Cheers!" src="https://www.codejam.info/img/2021/09/h2n/cheers.jpg">
</figure>
]]></content>
  </entry>
  <entry>
    <title>How I set up a minimalist Debian host with nginx and Let‚Äôs Encrypt</title>
    <link href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html" />
    <id>https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html</id>
    <updated>2021-09-22T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>It‚Äôs something I‚Äôve had to do more than once this year so I think it‚Äôs
about time to write a blog post.</p>
<div class="note">
<p><strong>Note:</strong> in this post (including the title), I use ‚ÄúLet‚Äôs Encrypt‚Äù
because it‚Äôs the term most people know and will look up, but what I mean
is technically the <abbr title="Automatic certificate management environment">ACME</abbr>
protocol with any compatible certificate authority.</p>
<p><a href="https://letsencrypt.org/">Let‚Äôs Encrypt</a> is one of those certificate
authorities, but I personally use <a href="https://zerossl.com/">ZeroSSL</a> which
is another ACME-compatible authority to provide free certificates.</p>
</div>
<h2 id="why-do-i-spawn-debian-vms" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#why-do-i-spawn-debian-vms">Why do I spawn Debian VMs?</a></h2>
<p>Let‚Äôs start with the why I‚Äôm doing that. See, Google Cloud has
<a href="https://cloud.google.com/free/docs/gcp-free-tier/#compute">a cool thing</a>
where they allow you to run a <code>e2-micro</code> instance for free per billing
account, with up to 30 GB of storage, and as long as you pay for egress
(outgoing) traffic.</p>
<p>This is one of the cheapest ways that I know of to host a proof of
concept, <abbr title="Minimum viable product">MVP</abbr> or a very small
or lightweight project like this blog.</p>
<p>Google Cloud defaults their VM image to latest stable Debian, which I
find to be a good base for a server when you don‚Äôt want to spend a lot
of time setting things up and don‚Äôt want to think too much about it.</p>
<h2 id="why-do-i-install-nginx-and-let-s-encrypt" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#why-do-i-install-nginx-and-let-s-encrypt">Why do I install nginx and Let‚Äôs Encrypt?</a></h2>
<p>Most of the time I spawn such a VM, it‚Äôs to run some kind of web
service over HTTPS. nginx is my favorite web server, and ACME is my
favorite way to manage TLS certificates (see note above about my usage
of the term ‚ÄúLet‚Äôs Encrypt‚Äù).</p>
<h2 id="what-about-infrastructure-as-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#what-about-infrastructure-as-code">What about infrastructure as code?</a></h2>
<p>I won‚Äôt go into this topic in this blog post because there‚Äôs a fuckton
of ways you could want to code your infrastructure and provision your
servers depending on your needs.</p>
<p>This is out of scope for this article, but feel free to adapt it to
whatever tools you use! Personally, my favorite provisioning tool is
<code>/bin/sh</code> and this post is a breakdown of my script with detailed
explanations about everything it‚Äôs doing.</p>
<p>Now the context is set, let‚Äôs get into how I set up everything in a
minimalistic way (I like to keep things simple).</p>
<h2 id="preventing-the-bloat-on-debian" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#preventing-the-bloat-on-debian">Preventing the bloat on Debian</a></h2>
<p>First things first, I start every of my Debian installations by adding
this <code>apt.conf</code> I shared on this blog over 7 years ago, to <a href="https://www.codejam.info/2014/09/keeping-debian-clean-and-minimal.html">keep Debian clean and minimal</a>.</p>
<p>The gist of it is that by default Debian packages can come with
‚Äúrecommended packages‚Äù and ‚Äúsuggested packages‚Äù, and APT automatically
installs the recommended ones by default.</p>
<div class="note">
<p><strong>Note:</strong> APT also used to install the suggested packages by default,
which is how we ended up with <code>imagemagick</code> on the system after
installing <code>nmap</code> like mentioned in the article above.</p>
<p>It looks like I wasn‚Äôt the only one to be bugged by this and this
behavior is no longer the default.</p>
</div>
<p>I like to explicitly install every package that‚Äôs not a hard dependency,
so I use the following config to make sure nothing extra is installed by
default.</p>
<pre><code class="hljs language-sh">cat &lt;&lt; <span class="hljs-string">EOF &gt; /etc/apt/apt.conf
APT::Install-Recommends false;
APT::Install-Suggests false;
APT::AutoRemove::RecommendsImportant false;
APT::AutoRemove::SuggestsImportant false;
EOF</span>
</code></pre>
<p>It also configures APT to consider previously installed recommendations
and suggestions unimportant, meaning that they‚Äôll be wiped in the next
<code>apt autoremove</code>. This won‚Äôt do anything on most fresh installations,
but if installing this configuration in an existing system, you might
want to double-check that list before removing the packages marked as
‚Äúno longer necessary‚Äù.</p>
<p>After that, APT will only install what‚Äôs strictly required by default,
and on top of the ‚Äúsuggested packages‚Äù list, it‚Äôll also display a
‚Äúrecommended packages‚Äù informational list, instead of automatically
installing them. Neat.</p>
<p>Also note that <code>apt autoremove</code>, like <code>apt remove</code>, will keep the
configuration files of the removed packages on the system, and there‚Äôs
no equivalent of <code>apt purge</code> like <code>apt autopurge</code>.</p>
<div class="note">
<p><strong>Note:</strong> I just tried out of curiosity and even though undocumented, it
looks like <a href="https://github.com/Debian/apt/blob/766b24b7f7484751950c76bc66d3d6cdeaf949a5/apt-private/private-install.cc#L608"><code>apt autopurge</code> exists</a>
and does exactly what you would expect!</p>
<p>So I would recommend running <code>apt autopurge</code> instead of <code>apt autoremove</code>
so that it also removes the configuration files of the packages it
removes.</p>
</div>
<p>Finally, if you used <code>apt remove</code> or <code>apt autoremove</code>, you can still
purge the dangling configuration files with the <a href="https://askubuntu.com/a/279432">following command</a>:</p>
<pre><code class="hljs language-sh">apt purge $(dpkg --get-selections | grep deinstall | cut -f1)
</code></pre>
<p>This will purge the configuration files of all packages that were ever
deinstalled and left with existing configuration files in place.</p>
<h2 id="installing-the-essentials" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#installing-the-essentials">Installing the essentials</a></h2>
<p>In most Unix systems that I use, I‚Äôll install the following packages:</p>
<pre><code class="hljs language-sh">apt install tmux vim git htop ca-certificates
</code></pre>
<p>On top of that, on Debian I like to add the <code>build-essential</code> package if
I need to compile anything, as it depends on the most common tools that
are necessary to build software from source.</p>
<h2 id="my-minimalist-nginx-configuration" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#my-minimalist-nginx-configuration">My minimalist nginx configuration</a></h2>
<p>Let‚Äôs start with installing nginx.</p>
<pre><code class="hljs language-sh">apt install nginx
</code></pre>
<p>This will put the default Debian nginx configuration in <code>/etc/nginx</code>.</p>
<p>The default configuration is too much for me. I like to write my nginx
configuration from scratch. The only file I want to keep is the
<a href="https://github.com/nginx/nginx/blob/master/conf/mime.types">default <code>mime.types</code> file</a>.</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">cd</span> /etc
mkdir nginx2
cp nginx/mime.types nginx2
rm -rf nginx
mv nginx2 nginx
</code></pre>
<p>This wipes all the default nginx configuration and only keeps the
<code>mime.types</code> file which I‚Äôll include in my custom configuration.</p>
<h3 id="trimmed-down-debian-configuration" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#trimmed-down-debian-configuration">Trimmed-down Debian configuration</a></h3>
<p>Speaking about my custom configuration, here‚Äôs the base. Everything
there is the parts of the default <code>nginx.conf</code> on Debian that I kept.
I‚Äôll post my custom additions after.</p>
<pre><code class="hljs language-nginx"><span class="hljs-comment">#</span>
<span class="hljs-comment"># /etc/nginx/nginx.conf</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment"># Based on a simplified Debian default.</span>
<span class="hljs-comment">#</span>

<span class="hljs-attribute">user</span> www-data;
<span class="hljs-attribute">worker_processes</span> auto;
<span class="hljs-attribute">pid</span> /run/nginx.pid;

<span class="hljs-section">events</span> {
    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">768</span>;
    <span class="hljs-comment"># multi_accept on;</span>
}

<span class="hljs-section">http</span> {
    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;
    <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;
    <span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">2048</span>;
    <span class="hljs-comment"># server_tokens off;</span>

    <span class="hljs-attribute">include</span> /etc/nginx/mime.types;
    <span class="hljs-attribute">default_type</span> application/octet-stream;

    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;
    <span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;

    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;
}
</code></pre>
<h3 id="val-s-essential-tweaks" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#val-s-essential-tweaks">Val‚Äôs essential tweaks</a></h3>
<p>From there, I tweak a few things.</p>
<pre><code class="hljs language-diff">     sendfile on;
     tcp_nopush on;
     types_hash_max_size 2048;
<span class="hljs-deletion">-    # server_tokens off;</span>
<span class="hljs-addition">+    server_tokens off;</span>

     include /etc/nginx/mime.types;
     default_type application/octet-stream;

<span class="hljs-deletion">-    access_log /var/log/nginx/access.log;</span>
<span class="hljs-addition">+    access_log off;</span>
     error_log /var/log/nginx/error.log;

     gzip on;
<span class="hljs-addition">+    gzip_vary on;</span>
<span class="hljs-addition">+</span>
<span class="hljs-addition">+    # Custom list based on Debian&#x27;s `/etc/nginx/mime.types`.</span>
<span class="hljs-addition">+    gzip_types text/css text/xml application/javascript application/atom+xml application/rss+xml text/plain application/json image/svg+xml;</span>
<span class="hljs-addition">+</span>
<span class="hljs-addition">+    charset utf-8;</span>
 }
</code></pre>
<ul>
<li>I turn <code>server_tokens</code> off to remove the <code>Server</code> HTTP response header.</li>
<li>I turn off the default access log because I like to specify it per
virtual host and I don‚Äôt care about requests that didn‚Äôt hit a virtual
host.</li>
<li>I enable <code>gzip_vary</code> to have the <code>Vary: Accept-Encoding</code> header in the
responses. This is especially important when used with a caching
server in front, because it instructs it to not mix responses with
different <code>Accept-Encoding</code> together, preventing for example to serve
a gzip response to a client that can only handle plain text.</li>
<li>I configure more <code>gzip_types</code> than the default of just <code>text/html</code>, so
that we automatically compress most web resources. Feel free to add
more that makes sense to you here.</li>
<li>I set <code>charset</code> to <code>utf-8</code> so that <code>charset=utf-8</code> is added to the
<code>Content-Type</code> response header, e.g. <code>Content-Type: text/html; charset=utf-8</code>.</li>
</ul>
<p>But we‚Äôre still missing a very important part. The TLS configuration!</p>
<h3 id="tls-settings" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#tls-settings">TLS settings</a></h3>
<p>I use <a href="https://ssl-config.mozilla.org/">Mozilla‚Äôs SSL configuration generator</a>
for that, with the intermediate setting, which gives me the following
(comments removed):</p>
<pre><code class="hljs language-nginx"><span class="hljs-attribute">ssl_certificate</span> /path/to/signed_cert_plus_intermediates;
<span class="hljs-attribute">ssl_certificate_key</span> /path/to/private_key;
<span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">1d</span>;
<span class="hljs-attribute">ssl_session_cache</span> shared:MozSSL:<span class="hljs-number">10m</span>;
<span class="hljs-attribute">ssl_session_tickets</span> <span class="hljs-literal">off</span>;
<span class="hljs-attribute">ssl_dhparam</span> /path/to/dhparam;
<span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;
<span class="hljs-attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
<span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">off</span>;
<span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=63072000&quot;</span> always;
<span class="hljs-attribute">ssl_stapling</span> <span class="hljs-literal">on</span>;
<span class="hljs-attribute">ssl_stapling_verify</span> <span class="hljs-literal">on</span>;
<span class="hljs-attribute">ssl_trusted_certificate</span> /path/to/root_CA_cert_plus_intermediates;
</code></pre>
<p>I like to include it in the <code>http</code> block, after the <code>default_type</code>
directive.</p>
<p>But we don‚Äôt yet have the certificates and key files that we reference
there. We still need to generate them with Let‚Äôs Encrypt. We‚Äôll do that
a bit later, but until then, we need to comment those parts otherwise
the nginx config won‚Äôt validate and nginx won‚Äôt be able to start (or
reload).</p>
<pre><code class="hljs language-diff"><span class="hljs-deletion">-ssl_certificate /path/to/signed_cert_plus_intermediates;</span>
<span class="hljs-deletion">-ssl_certificate_key /path/to/private_key;</span>
<span class="hljs-addition">+# ssl_certificate /path/to/signed_cert_plus_intermediates;</span>
<span class="hljs-addition">+# ssl_certificate_key /path/to/private_key;</span>
 ssl_session_timeout 1d;
 ssl_session_cache shared:MozSSL:10m;
 ssl_session_tickets off;
<span class="hljs-deletion">-ssl_dhparam /path/to/dhparam;</span>
<span class="hljs-addition">+# ssl_dhparam /path/to/dhparam;</span>
 ssl_protocols TLSv1.2 TLSv1.3;
 ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
 ssl_prefer_server_ciphers off;
 add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;
 ssl_stapling on;
 ssl_stapling_verify on;
<span class="hljs-deletion">-ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span>
<span class="hljs-addition">+# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span>
</code></pre>
<h3 id="default-server-with-https-and-www-redirect" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#default-server-with-https-and-www-redirect">Default server with HTTPS and <code>www</code> redirect</a></h3>
<p>I like <code><strong>http://</strong>www.codejam.info/</code> to redirect to
<code><strong>https://</strong>www.codejam.info/</code>, and also
<code>https://codejam.info/</code> to redirect to <code>https://<strong>www.</strong>codejam.info/</code>.
As a bonus, I like when <code><strong>http://</strong>codejam.info/</code>
redirects to <code><strong>https://www.</strong>codejam.info/</code> in
a single step. üòè</p>
<p>We‚Äôll also take this as an opportunity to configure the Let‚Äôs Encrypt
webroot challenge path, so that our ACME client can automatically
generate and renew certificates.</p>
<div class="note">
<p><strong>Note:</strong> it appears that the most common way people run ACME clients is
by letting it automatically modify their web server configuration file
to handle the ACME challenge endpoint <code>/.well-known/acme-challenge</code>
during the issuing or renewal.</p>
<p>Alternatively, the ‚Äúwebroot‚Äù method lets you configure the
<code>/.well-known/acme-challenge</code> path yourself on your web server to serve
an existing directory on the system. The ACME client will then just put
files in that directory to have them served by your web server, without
altering its configuration. This is a much simpler and more reliable
solution.</p>
<p>While common ACME clients like <a href="https://certbot.eff.org/">Certbot</a> and
<a href="https://github.com/acmesh-official/acme.sh">acme.sh</a> can handle a
variety of web server configurations, I hate the idea of a tool
modifying my <code>nginx.conf</code> which is why I use the webroot mode instead.</p>
</div>
<p>The following <code>server</code> blocks will do all of that. They live inside the
main <code>http</code> block which I won‚Äôt include again here.</p>
<pre><code class="hljs language-nginx"><span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server;
    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2 default_server;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2 default_server;

    <span class="hljs-attribute">location</span> / {
        <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>;
    }
}

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;

    <span class="hljs-attribute">server_name</span> www.codejam.<span class="hljs-literal">info</span>;

    <span class="hljs-attribute">location</span> / {
        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://$host$request_uri;
    }

    <span class="hljs-attribute">location</span> /.well-known/acme-challenge {
        <span class="hljs-attribute">root</span> /var/www/challenges;
    }
}

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;

    <span class="hljs-attribute">server_name</span> codejam.<span class="hljs-literal">info</span>;

    <span class="hljs-attribute">location</span> / {
        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://www.$host$request_uri;
    }

    <span class="hljs-attribute">location</span> /.well-known/acme-challenge {
        <span class="hljs-attribute">root</span> /var/www/challenges;
    }
}

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;
    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;

    <span class="hljs-attribute">server_name</span> www.codejam.<span class="hljs-literal">info</span>;

    <span class="hljs-attribute">access_log</span> /var/log/nginx/www.codejam.<span class="hljs-literal">info</span>.access.log;
    <span class="hljs-attribute">error_log</span> /var/log/nginx/www.codejam.<span class="hljs-literal">info</span>.<span class="hljs-literal">error</span>.log;

    <span class="hljs-attribute">root</span> /var/www/www.codejam.<span class="hljs-literal">info</span>;
    <span class="hljs-attribute">index</span> index.html;

    <span class="hljs-attribute">location</span> /.well-known/acme-challenge {
        <span class="hljs-attribute">root</span> /var/www/challenges;
    }
}
</code></pre>
<p>The first block with <code>default_server</code> makes sure that nginx returns a
404 for every requests it sees for a domain that it doesn‚Äôt know about.</p>
<p>The rest should be self-explanatory.</p>
<div class="note">
<p><strong>Note:</strong> this will be good for production but because we don‚Äôt have the
certificate files yet, nginx will not accept our SSL servers. So comment
those out in the meantime, and just add the following server that will
let us generate our initial certificates:</p>
<pre><code class="hljs language-conf">server {
    listen 80 default_server;
    listen [::]:80 default_server;

    location / {
        return 404;
    }

    location /.well-known/acme-challenge {
        root /var/www/challenges;
    }
}
</code></pre>
</div>
<h3 id="enabling-starting-or-reloading-nginx" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#enabling-starting-or-reloading-nginx">Enabling, starting or reloading nginx</a></h3>
<p>First, let‚Äôs test the configuration:</p>
<pre><code class="hljs language-sh">nginx -t
</code></pre>
<p>If successful, we can enable the nginx service if it‚Äôs not already:</p>
<pre><code class="hljs language-sh">systemctl <span class="hljs-built_in">enable</span> nginx
</code></pre>
<p>Then start it:</p>
<pre><code class="hljs language-sh">systemctl start nginx
</code></pre>
<p>Or reload its configuration if it was already running</p>
<pre><code class="hljs language-sh">systemctl reload nginx
</code></pre>
<div class="note">
<p><strong>Note:</strong> by default when installing a package that comes with a service
like nginx, Debian automatically enables it and starts it, so you
probably only need the reload command above at that point.</p>
<p>Use <code>systemctl status nginx</code> to see if it‚Äôs currently enabled and
running.</p>
</div>
<p>While in this state we don‚Äôt have proper TLS certificates to handle
HTTPS just yet, we have everything we need to automatically generate and
renew TLS certificates with the ACME protocol.</p>
<h2 id="managing-tls-certificates-with-acme-sh" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#managing-tls-certificates-with-acme-sh">Managing TLS certificates with acme.sh</a></h2>
<p><abbr title="Automatic certificate management environment">ACME</abbr>
is the protocol behind Let‚Äôs Encrypt. <a href="https://github.com/acmesh-official/acme.sh">acme.sh</a>
is an ACME client written in pure Unix shell. It‚Äôs simple and
lightweight, unlike <a href="https://certbot.eff.org/">Certbot</a>, which is the
client that Let‚Äôs Encrypt recommends to use.</p>
<p>acme.sh is the most simple client that I found, but their default usage
instructions still do some magic that I would rather avoid, so I‚Äôll
present here my modified installation method, which doesn‚Äôt have any
magic and where you‚Äôre fully in control of every step.</p>
<h3 id="setting-up-a-restricted-user" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#setting-up-a-restricted-user">Setting up a restricted user</a></h3>
<p>We‚Äôll do a custom installation of <a href="https://github.com/acmesh-official/acme.sh">acme.sh</a>
so that it runs <strong>with its own restricted user</strong> based on <a href="https://gist.github.com/lachesis/943769f3fac740d5848352752ac08741">this Gist</a>,
because running it as root like they show out of the box is
irresponsible.</p>
<p>First we create a <code>acme</code> user with home directory set to <code>/var/lib/acme</code>
(it‚Äôll be created automatically because we specified <code>-m</code>) and
<code>/usr/sbin/nologin</code> as login shell to deny login access to this account.</p>
<pre><code class="hljs language-sh">useradd -m -d /var/lib/acme -s /usr/sbin/nologin acme
</code></pre>
<p>We also make sure this home directory is only accessible by the <code>acme</code>
user itself.</p>
<pre><code class="hljs language-sh">chmod 700 /var/lib/acme
</code></pre>
<p>Then we prepare the webroot challenge directory that we configured
earlier in <code>nginx.conf</code>. We make sure that it‚Äôs owned by the <code>acme</code> user
and group so that it can write to this directory. The default permission
for the directory is full access for the user and read and execute
access for everyone else which is fine here.</p>
<pre><code class="hljs language-sh">mkdir /var/www/challenges
chown acme:acme /var/www/challenges
</code></pre>
<p>Next, we prepare the directory where we‚Äôll install the certificates.
This directory needs to be writable by the <code>acme</code> user but nginx (who
runs under the <code>www-data</code> user and group) needs to be able to read from
it, so we set the group to <code>www-data</code>.</p>
<p>This allows us to set the <code>710</code> permission which means full access for
the user, execute access for the group (on a directory that means it can
access files in this directory according to the files permissions but
cannot list the contents of the directory), and no permissions for
everyone else.</p>
<pre><code class="hljs language-sh">mkdir /etc/acme
chown acme:www-data /etc/acme
chmod 710 /etc/acme
</code></pre>
<p>Finally we give <code>sudo</code> access to the <code>acme</code> user, allowing it to only
run the <code>/bin/systemctl reload nginx</code> command without being prompted for
a password. Run <code>visudo</code> to safely edit the <code>/etc/sudoers</code> file and add
the following line:</p>
<pre><code class="hljs language-sh">acme	ALL=(ALL:ALL) NOPASSWD: /bin/systemctl reload nginx
</code></pre>
<p>We can now open a shell as the <code>acme</code> user to set up acme.sh there. Here
we explicitly precise <code>/bin/bash</code> as shell because we set the default
one to <code>/usr/sbin/nologin</code> for this user earlier to deny shell access.
We make sure to run a login shell using <code>-</code>.</p>
<pre><code class="hljs language-sh">su -s /bin/bash - acme
</code></pre>
<p>We‚Äôll end up in the home directory which we set earlier to <code>/var/lib/acme</code>.</p>
<h3 id="installation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#installation">Installation</a></h3>
<p>We can now follow the official <a href="https://github.com/acmesh-official/acme.sh#2-or-install-from-git">install from Git instructions</a>
because piping scripts from the web into <code>sh</code> is a terrible idea.</p>
<pre><code class="hljs language-sh">git <span class="hljs-built_in">clone</span> https://github.com/acmesh-official/acme.sh
<span class="hljs-built_in">cd</span> acme.sh
</code></pre>
<p>That‚Äôs where my method starts to differ. They recommend running
<code>./acme.sh --install -m my@example.com</code> which will do a number of
things:</p>
<ol>
<li>Register to <a href="https://zerossl.com/">ZeroSSL</a> with the given email address.</li>
<li>Copy the contents of the repo to <code>~/.acme.sh</code>, doing a few shebang
modifications.</li>
<li>Create a default <code>account.conf</code> and <code>acme.sh.env</code> files that we won‚Äôt
need here.</li>
<li>Generate a cron entry to renew certificates, which we can generate
later on with a more specific command.</li>
</ol>
<p>I like to keep the source code separate from the configuration and some
of those steps are unnecessary for me.</p>
<p>Instead, I don‚Äôt ‚Äúinstall‚Äù acme.sh and I just run it from its Git repo,
which will make it much easier to update the code in the future. Because
by default it stores all the configuration in <code>~/.acme.sh</code>, this has the
nice side effect of keeping the code and the configuration separate. The
code from the repo is directly usable, and all the extra state will be
put in <code>~/.acme.sh</code>.</p>
<p>We still need to explicitly register to ZeroSSL (or any of the other
<a href="https://github.com/acmesh-official/acme.sh#supported-ca">supported certificate authorities</a>):</p>
<pre><code class="hljs language-sh">./acme.sh --register-account -m y@example.com
</code></pre>
<p>We also need to set up the cron entry:</p>
<pre><code class="hljs language-sh">LE_WORKING_DIR=<span class="hljs-variable">$PWD</span> ./acme.sh --install-cronjob
</code></pre>
<p>You can check what acme.sh did by running <code>crontab -l</code>. You could also
manually configure an entry like:</p>
<pre><code class="hljs language-crontab">42 0 * * * /path/to/.acme.sh/acme.sh --cron --home /path/to/.acme.sh &gt; /dev/null
</code></pre>
<p>This would run the acme.sh cron task every day at 00:42. But their
<code>--install-cronjob</code> script generates a random minute to run the job so
that the certificate authority doesn‚Äôt get a huge burst of requests at
the same second every day, which I think is a good practice to keep.</p>
<p>From there, the commands we‚Äôll run are the same as the recommended ones
in the acme.sh readme.</p>
<h2 id="preparing-the-certificates-directory-and-dh-parameters" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#preparing-the-certificates-directory-and-dh-parameters">Preparing the certificates directory and DH parameters</a></h2>
<p>I like to install my certificates in <code>/etc/acme</code> which we created
earlier, with a directory per domain, but this is totally arbitrary.</p>
<pre><code class="hljs language-sh">mkdir /etc/acme/codejam.info
</code></pre>
<p>We also get the <abbr title="Diffie-Hellman">DH</abbr> parameters as
recommended by <a href="https://ssl-config.mozilla.org/">Mozilla‚Äôs SSL configuration generator</a>.</p>
<pre><code class="hljs language-sh">curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /etc/acme/ssl-dhparams.pem
</code></pre>
<div class="note">
<p><strong>Note:</strong> long story short, generating strong DH parameters is not that
easy and it‚Äôs actually <a href="https://security.stackexchange.com/a/149818">considered more secure</a>
to use ones that are proven to be strong despite being public like those
provided by Mozilla, unless the key size is considered short (1024 bits
or less as of today‚Äôs standards), then using shared DH parameters could
introduce more security risks than it would prevent.</p>
</div>
<h3 id="generating-our-certificate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#generating-our-certificate">Generating our certificate</a></h3>
<pre><code class="hljs language-sh">./acme.sh --issue -d codejam.info -d www.codejam.info -w /var/www/challenges
</code></pre>
<p>This will issue a certificate for <code>codejam.info</code> with <code>www.codejam.info</code>
as alternate name (you can put as many alternate names as you want with
subsequent <code>-d</code> parameters), meaning that the certificate will be valid
for all of those domains. You can also generate a wildcard certificate
but this requires going through automated DNS validation which I won‚Äôt
cover in this blog post.</p>
<h3 id="installing-the-certificate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#installing-the-certificate">Installing the certificate</a></h3>
<p>In the previous step, acme.sh generated the key and certificate files in
its own state directory, but it‚Äôs not recommended to hardcode those
paths. That‚Äôs why we configure certificate installation paths as well as
a reload command:</p>
<pre><code class="hljs language-sh">./acme.sh --install-cert -d codejam.info \
    --key-file /etc/acme/codejam.info/privkey.pem \
    --cert-file /etc/acme/codejam.info/cert.pem \
    --fullchain-file /etc/acme/codejam.info/fullchain.pem \
    --ca-file /etc/acme/codejam.info/chain.pem \
    --reloadcmd <span class="hljs-string">&#x27;sudo systemctl reload nginx&#x27;</span>
</code></pre>
<p>This will not only install the files in the specified locations and run
the reload command, but will also save those to your domain
configuration so that acme.sh knows knows where to install the
certificates and how to reload the server during the cron job.</p>
<p>But we commented out the certificate files in <code>nginx.conf</code> earlier
because they didn‚Äôt exist yet. We can now edit the config (as root) to
reference those files we just installed.</p>
<pre><code class="hljs language-diff"><span class="hljs-deletion">-# ssl_certificate /path/to/signed_cert_plus_intermediates;</span>
<span class="hljs-deletion">-# ssl_certificate_key /path/to/private_key;</span>
<span class="hljs-addition">+ssl_certificate /etc/acme/codejam.info/fullchain.pem;</span>
<span class="hljs-addition">+ssl_certificate_key /etc/acme/codejam.info/privkey.pem;</span>
 ssl_session_timeout 1d;
 ssl_session_cache shared:MozSSL:10m;
 ssl_session_tickets off;
<span class="hljs-deletion">-# ssl_dhparam /path/to/dhparam;</span>
<span class="hljs-addition">+ssl_dhparam /etc/acme/ssl-dhparams.pem;</span>
 ssl_protocols TLSv1.2 TLSv1.3;
 ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
 ssl_prefer_server_ciphers off;
 add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;
 ssl_stapling on;
 ssl_stapling_verify on;
<span class="hljs-deletion">-# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span>
<span class="hljs-addition">+ssl_trusted_certificate /etc/acme/codejam.info/chain.pem;</span>
</code></pre>
<p>Verify the config is valid with <code>nginx -t</code> and run a final <code>systemctl reload nginx</code> to apply the changes.</p>
<h2 id="bonus-http-basic-authentication" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#bonus-http-basic-authentication">Bonus: HTTP basic authentication</a></h2>
<p>You don‚Äôt want your website to be public just yet but still want to test
it from there? Add basic authentication to it!</p>
<pre><code class="hljs language-sh">apt install apache2-utils
htpasswd -c /etc/nginx/htpasswd &lt;user&gt;
</code></pre>
<p>Then in <code>nginx.conf</code>, add the following to the <code>server</code> block you want
to add authentication to:</p>
<pre><code class="hljs language-nginx"><span class="hljs-attribute">location</span> / {
    <span class="hljs-attribute">auth_basic</span> <span class="hljs-string">&quot;Private&quot;</span>;
    <span class="hljs-attribute">auth_basic_user_file</span> /etc/nginx/htpasswd;
}
</code></pre>
<p>Here, ‚Äúprivate‚Äù is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate#directives">basic authentication <code>realm</code> parameter</a>
and could be literally anything. It doesn‚Äôt even seem to be shown in
browser UIs anymore so it doesn‚Äôt really matter.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/minimalist-debian-nginx-let-s-encrypt.html#wrapping-up">Wrapping up</a></h2>
<p>At that point, you should have a working HTTPS server with auto-renewed
certificates. I hope this post was useful to you!</p>
<div class="note">
<p><strong>Note:</strong> if you‚Äôre looking to integrate Let‚Äôs Encrypt or similar on
your server but this post was too technical for you, <a href="https://www.codejam.info/val.html#links">let me know</a>,
I‚Äôm available for <a href="https://www.codejam.info/resources/freelance.html">contracting</a> projects and
I‚Äôll be happy to help you with that. ‚úåÔ∏è</p>
</div>
]]></content>
  </entry>
  <entry>
    <title>Vercel custom log drain (dump HTTP traffic for free on a Vercel app)</title>
    <link href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html" />
    <id>https://www.codejam.info/2021/09/vercel-custom-log-drain.html</id>
    <updated>2021-09-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>In the <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html">previous post</a>, we
compared the different services providing free static website hosting,
and their options to access server-side web analytics or raw HTTP logs.</p>
<p><a href="https://vercel.com/">Vercel</a> was the only one to allow accessing
traffic data for free, but it‚Äôs not the easiest thing to do. In this
article, I‚Äôll show you how.</p>
<div class="note">
<p><strong>Note:</strong> if you‚Äôre in a rush, go straight to the <a href="https://github.com/valeriangalliat/vercel-custom-log-drain">GitHub repo</a>
which contains the full code for a working integration that allows you
to manage arbitrary log drains!</p>
<p>I also give you the link to the <a href="https://vercel.com/integrations/custom-log-drain">live integration that I use for myself</a>,
and you can use it too!</p>
<p>Otherwise, if you‚Äôre interested in the underlying implementation, read
on.</p>
</div>
<p>I‚Äôll assume that you already have an account with Vercel and deployed
your app there. This shouldn‚Äôt be too bad, but if you like to keep
things simple, you might want to read a few tips of mine about <a href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html">keeping Vercel clean and silent</a>.</p>
<p>Neither of Vercel‚Äôs UI, CLI and API directly allow to manage log drains.
While <a href="https://vercel.com/docs/rest-api#integrations/log-drains">the API has endpoints to manage log drains</a>,
those are only available to Vercel integrations, and are denied when
called with a <a href="https://vercel.com/account/tokens">regular user token</a>
like the ones the CLI and web app use.</p>
<p>This means that we‚Äôll need to create our own Vercel integration in order
to have an integration token that will let us call the log drains API.</p>
<h2 id="how-does-a-vercel-integration-work" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#how-does-a-vercel-integration-work">How does a Vercel integration work</a></h2>
<ul>
<li>A Vercel integration is a web app hosted on your own domain, which
needs to respond to a ‚ÄúVercel callback‚Äù page.</li>
<li>Vercel will redirect the user to that page when they try to install
your integration, providing a <code>code</code> and <code>next</code> query parameters.</li>
<li>You can exchange the <code>code</code> parameter for a Vercel API OAuth access token.</li>
<li>You‚Äôre expected to redirect to the URL provided in the <code>next</code>
parameter once the installation is complete.</li>
</ul>
<p>Most integrations will store the OAuth access token and refresh token
that are exchanged during that process to be able to query the API on
behalf of the user later on, but for cost and time reasons, <strong>I want to
keep my integration stateless</strong>. This means that I‚Äôll perform the log
drain operations only during the installation process, and <strong>will
instantly forget the token</strong>.</p>
<p>Because of that, we‚Äôll have to remove the integration and add it again
if we want to configure a new log drain. Log drains are specific to an
integration, meaning that when you remove the integration, the log
drains are removed with it too.</p>
<p>I could have built a stateful application where I allow to fully manage
log drains, but then I would need to charge for it to pay for the
hosting and development costs, and at that point I believe that most
users who are willing to pay will be happy to pay for Logtrail,
Sematext, Datadog, LogDNA and others that already have an official
Vercel integration.</p>
<div class="note">
<p><strong>Note:</strong> if I‚Äôm wrong with that assumption, and you would pay a monthly
fee for a service that allows you to fully manage your Vercel log drains
with arbitrary URLs, <a href="https://www.codejam.info/val.html#links">let me know</a>. If there‚Äôs enough
demand I‚Äôll consider building something!</p>
</div>
<h2 id="creating-our-own-vercel-integration" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#creating-our-own-vercel-integration">Creating our own Vercel integration</a></h2>
<p>For this, head to the <a href="https://vercel.com/dashboard/integrations/console">Vercel integrations console</a>,
which lists you all the integrations that you have created, and allows
you to create new ones.</p>
<p>Click the ‚Äúcreate‚Äù button. In that form, you need to fill a bunch of
details about your integration that should be pretty obvious.</p>
<p>You‚Äôll need to include the redirect URL. If you want to use <a href="https://github.com/valeriangalliat/vercel-custom-log-drain">the repo I mentioned earlier</a>,
it‚Äôs going to be on the <code>/vercel/callback</code> path, on the domain you‚Äôre
going to host it on.</p>
<p>You can ignore the webhook and configuration URLs unless you want to
build a stateful version that allows editing the log drains after
installation (then you‚Äôd need the configuration URL specifically).</p>
<h3 id="making-the-form" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#making-the-form">Making the form</a></h3>
<p>We‚Äôll go for a very basic HTML form that allows selecting between
<code>json</code>, <code>ndjson</code> and <code>syslog</code> as the log drain type, which are the only
formats supported by Vercel as of writing, as well as the URL to the log
drain we want to add.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;json&quot;</span>&gt;</span>json<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ndjson&quot;</span>&gt;</span>ndjson<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;syslog&quot;</span>&gt;</span>syslog<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;URL&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
</code></pre>
<p>See the <a href="https://github.com/valeriangalliat/vercel-custom-log-drain/blob/master/form.html">full HTML</a>
with a tiny layer of CSS.</p>
<h3 id="serving-the-form" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#serving-the-form">Serving the form</a></h3>
<p>I‚Äôll use <a href="https://www.fastify.io/">Fastify</a> to handle the HTTP requests,
but <a href="https://expressjs.com/">Express</a> would have worked just fine for
this too.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)
<span class="hljs-keyword">const</span> fastify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fastify&#x27;</span>)

<span class="hljs-keyword">const</span> form = fs.readFileSync(<span class="hljs-string">&#x27;form.html&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)

<span class="hljs-keyword">const</span> app = fastify({ <span class="hljs-attr">logger</span>: <span class="hljs-literal">true</span> })

app.get(<span class="hljs-string">&#x27;/vercel/callback&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">if</span> (!req.query.code || !req.query.next) {
    <span class="hljs-keyword">return</span> res.type(<span class="hljs-string">&#x27;text/plain&#x27;</span>).send(<span class="hljs-string">&#x27;Hello!&#x27;</span>)
  }

  res.type(<span class="hljs-string">&#x27;text/html&#x27;</span>).send(form)
})


app.listen(process.env.PORT || <span class="hljs-number">8080</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
  <span class="hljs-keyword">if</span> (err) {
    app.log.error(err)
    process.exit(<span class="hljs-number">1</span>)
  }
})
</code></pre>
<p>This gets us running with a simple app that serves the form we just
built on <code>/vercel/callback</code>.</p>
<p>If called without <code>code</code> and <code>next</code> parameters, it means we‚Äôre not being
redirected from Vercel integration installation, and we just show a
simple message to say hello, because the form wouldn‚Äôt be useful when
it‚Äôs not called from Vercel.</p>
<h3 id="handling-the-form" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#handling-the-form">Handling the form</a></h3>
<p>First, we‚Äôll need to trade the <code>code</code> parameter for a Vercel OAuth
access token. We can do that by calling the <code>https://api.vercel.com/v2/oauth/access_token</code>.</p>
<p>This requires us to configure the OAuth client ID and client secret that
were provided to you at the end of the <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#creating-our-own-vercel-integration">integration creation</a>,
as well as the redirect URL that we defined during creation.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)
<span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)
<span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config&#x27;</span>)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getToken</span> (<span class="hljs-params">code</span>) </span>{
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://api.vercel.com/v2/oauth/access_token&#x27;</span>

  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> fetch(url, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>
    },
    <span class="hljs-attr">body</span>: qs.stringify({
      <span class="hljs-attr">client_id</span>: config.clientId,
      <span class="hljs-attr">client_secret</span>: config.clientSecret,
      code,
      <span class="hljs-attr">redirect_uri</span>: config.redirectUri
    })
  })

  <span class="hljs-keyword">if</span> (!res.ok) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`<span class="hljs-subst">${url}</span> responded with <span class="hljs-subst">${res.status}</span>`</span>)
  }

  <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> res.json()

  <span class="hljs-keyword">return</span> json.access_token
}
</code></pre>
<p>With that token, we can call the log drains endpoint to create a new log
drain.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createLogDrain</span> (<span class="hljs-params">token, body</span>) </span>{
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://api.vercel.com/v1/integrations/log-drains&#x27;</span>

  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> fetch(url, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,
      <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${token}</span>`</span>
    },
    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(body)
  })

  <span class="hljs-keyword">if</span> (!res.ok) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`<span class="hljs-subst">${url}</span> responded with <span class="hljs-subst">${res.status}</span>`</span>)
  }
}
</code></pre>
<p>Now, we can put those together when handling the <code>POST</code> form submission,
as well as redirecting to the <code>next</code> URL at the end.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> formBody = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fastify-formbody&#x27;</span>)

app.register(formBody)

app.post(<span class="hljs-string">&#x27;/vercel/callback&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; {
  <span class="hljs-keyword">if</span> (!req.query.code || !req.query.next || !req.body.type || !req.body.url) {
    <span class="hljs-keyword">return</span> res.code(<span class="hljs-number">400</span>)
  }

  <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> getToken(req.query.code)

  <span class="hljs-keyword">await</span> createLogDrain(token, {
    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;custom-log-drain&#x27;</span>,
    <span class="hljs-attr">type</span>: req.body.type,
    <span class="hljs-attr">url</span>: req.body.url
  })

  res.redirect(req.query.next)
})
</code></pre>
<p>You can see <a href="https://github.com/valeriangalliat/vercel-custom-log-drain/blob/master/index.js">the full code on GitHub</a>.</p>
<p>After deploying that code, you should be able to use your custom
integration from the integration marketplace to configure any log drain
you want for your Vercel apps.</p>
<p>You can hack on this code if you want to allow setting up the log drain
only on certain apps and not globally (see other <a href="https://vercel.com/docs/rest-api#integrations/log-drains/create-a-log-drain/request-parameters">request parameters</a>),
or make it stateful with the option to edit and remove existing log
drains without having to reinstall the integration.</p>
<h2 id="making-a-simple-log-drain-with-nginx" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#making-a-simple-log-drain-with-nginx">Making a simple log drain with nginx</a></h2>
<p>Now, we only solved half of the problem. We can configure any URL as a
log drain on our Vercel apps, but we don‚Äôt have a URL to put there yet!
Most of the logging software as a service apps already have
<a href="https://vercel.com/integrations#logging">an integration on the marketplace</a>.</p>
<p>Instead, we want to provide our own URL to handle the logs, in a way
that‚Äôs the cheapest as possible, or ideally free.</p>
<p>For that, we‚Äôre going to leverage the Google Cloud free tier, which
includes one <code>e2-micro</code> instance for free per billing account.</p>
<p>It should be easy to get one running and to install nginx on it.</p>
<div class="note">
<p><strong>Note:</strong> if you‚Äôre interested in how I do the initial configuration of
a Debian Google Cloud VM, I‚Äôll have an article about that very soon.
Stay tuned!</p>
</div>
<p>Then, we‚Äôre going to use a cool ‚Äúhack‚Äù that allows us to configure nginx
to append the <code>POST</code> body of an endpoint directly to the file of our
choice. This is essentially the definition of a simple HTTP log
drain.</p>
<p>First, we‚Äôll define a <code>postdata</code> log format that logs the plain
unescaped request body to the log file:</p>
<pre><code class="hljs language-nginx"><span class="hljs-section">http</span> {
    <span class="hljs-attribute">log_format</span> postdata escape=<span class="hljs-literal">none</span> $request_body;
}
</code></pre>
<p>But we can‚Äôt just us it like this. By default, nginx won‚Äôt bother
reading the request body if it‚Äôs not doing anything with it, which means
it won‚Äôt be included in the log variables.</p>
<p>There‚Äôs two ways to force nginx to read the request body. One is with the
<a href="https://github.com/openresty/echo-nginx-module">nginx <code>echo</code> module</a>,
and the other one (fully native) leverages a hack with the <code>proxy_pass</code>
directive.</p>
<p>In both cases, you‚Äôll be able to configure <code>https://your.domain/vercel/drain</code>
as a Vercel log drain. I find that NDJSON works best with this format.</p>
<h3 id="with-echo-read-request-body" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#with-echo-read-request-body">With <code>echo_read_request_body</code></a></h3>
<pre><code class="hljs language-nginx"><span class="hljs-comment"># Make sure this is loaded, method may vary depending on your setup.</span>
<span class="hljs-attribute">load_module</span> modules/ngx_http_echo_module.so;

<span class="hljs-section">server</span> {
    <span class="hljs-attribute">location</span> /vercel/drain {
        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;

        <span class="hljs-attribute">if</span> ($request_method = POST) {
            <span class="hljs-comment"># Wherever you want to store your logs.</span>
            <span class="hljs-attribute">access_log</span> /path/to/vercel.log postdata;

            <span class="hljs-comment"># Required to force nginx to read the request body,</span>
            <span class="hljs-comment"># otherwise it won&#x27;t log anything.</span>
            echo_read_request_body;
        }
    }
}
</code></pre>
<h3 id="with-proxy-pass-hack" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#with-proxy-pass-hack">With <code>proxy_pass</code> hack</a></h3>
<p>If you don‚Äôt want to load <code>ngx_http_echo_module</code>, you can instead use
the native <code>proxy_pass</code> directive to force nginx to read the request
body.</p>
<p>Since <code>proxy_pass</code> needs to proxy to <em>something</em>, the trick consists
into defining a ‚Äúblack hole‚Äù endpoint to proxy to. Because <code>proxy_pass</code>
will need to read the whole HTTP body in order to forward it, it will
become accessible to our log format.</p>
<pre><code class="hljs language-nginx"><span class="hljs-section">server</span> {
    <span class="hljs-attribute">location</span> /vercel/empty {
      <span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;
    }

    <span class="hljs-attribute">location</span> /vercel/drain {
        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;

        <span class="hljs-attribute">if</span> ($request_method = POST) {
            <span class="hljs-attribute">access_log</span> /path/to/vercel.log postdata;

            <span class="hljs-comment"># Adapt this to whatever your server responds to, or</span>
            <span class="hljs-comment"># feel free to use `$scheme`, `$server_name`, `$host`,</span>
            <span class="hljs-comment"># `$server_port` and so on.</span>
            <span class="hljs-attribute">proxy_pass</span> http://localhost/vercel/empty;
        }
    }
}
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html#wrapping-up">Wrapping up</a></h2>
<p>You should now have everything you need to store your Vercel logs in
plain text files on a Google Cloud free tier VM (or wherever else you
wanted to)!</p>
<p>You‚Äôre now free to <code>grep</code> through them or do whatever magic you want
with the data to get all the stats and insights that you want. And all
of that for free (or nearly).</p>
<div class="note">
<p><strong>Note:</strong> if you need to forward your Vercel logs to a custom endpoint
but this article was too technical for you, feel free to <a href="https://www.codejam.info/val.html#links">contact me</a>,
I‚Äôm available for <a href="https://www.codejam.info/resources/freelance.html">freelance work</a> and I‚Äôll be
happy to help you with that.</p>
</div>
]]></content>
  </entry>
  <entry>
    <title>Free static hosting with server-side analytics</title>
    <link href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html" />
    <id>https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html</id>
    <updated>2021-09-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>This blog has been hosted on <a href="https://pages.github.com/">GitHub Pages</a>
for a while, but I was getting frustrated of not having any idea of the
traffic it was getting, and I was really curious to find out.</p>
<p>The only way to get traffic insights on GitHub pages is through
client-side analytics scripts, which is technically very unreliable, and
I‚Äôd rather not get any data than getting data that I cannot trust, and
which on top of that negatively impacts the performance of my site.</p>
<p>What I want is raw access to HTTP logs, which is the only proper source
of truth for this.</p>
<p>In the first part of this series, I‚Äôll compare different free static
hosting services and their options to get access to server-side
analytics or logs. Then, I‚Äôll show you <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html">in the second part</a>
how to retrieve logs on a Vercel app, which is the only service I found
to provide HTTP logs as part of their free offer!</p>
<h2 id="github-pages" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#github-pages">GitHub Pages</a></h2>
<p><a href="https://pages.github.com/">GitHub Pages</a> is the easiest option to host
a static website for free, especially if you‚Äôre already working with
GitHub, but it doesn‚Äôt have an option to access HTTP logs.</p>
<p>The only method they document is using Google Analytics or a similar
script, but that‚Äôs not an acceptable solution to me. Let‚Äôs move on.</p>
<h2 id="netlify" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#netlify">Netlify</a></h2>
<p><a href="https://www.netlify.com/">Netlify</a> is my next favorite way to deploy a
static website. They also have a <a href="https://www.netlify.com/products/analytics/">Netlify Analytics</a>,
product, an analytics platform based on server logs, which is exactly
what I want!</p>
<p>As they point out in their marketing page, it‚Äôs ‚Äúdata right from the
source of truth‚Äù, it‚Äôs got ‚Äúbetter performance‚Äù, ‚Äúmore accurate
numbers‚Äù, ‚Äúbetter privacy‚Äù and gives you access to extra metrics you can
only get on the server side.</p>
<p>To me this the only proper way to get traffic analytics on the web.</p>
<p>But they price that feature at $9 per month per site, which to be honest
is pretty decent if you have a website that‚Äôs generating some cash, but
my blog is not and my current budget is closer to $0.</p>
<h2 id="cloudflare" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#cloudflare">Cloudflare</a></h2>
<p><a href="https://www.cloudflare.com/">Cloudflare</a> also has a free static hosting
offer. They‚Äôve got a <a href="https://www.cloudflare.com/web-analytics/">Cloudflare Analytics</a>
product, but the free version is only powered by a client-side script,
which as we saw earlier, is useless.</p>
<p>Otherwise, the option to have analytics based on server logs starts with
the ‚Äúpro‚Äù plan that‚Äôs $20 per month. Too much for me.</p>
<p>They also offer <a href="https://www.cloudflare.com/products/cloudflare-logs/">Cloudflare Logs</a>
which seems like it would at least give access to raw HTTP logs, but the
pricing is not mentioned and you need to contact their sales department
to maybe get access to it. Doesn‚Äôt look good.</p>
<h2 id="render" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#render">Render</a></h2>
<p><a href="https://render.com/">Render</a> is another service with free static
hosting, and a it‚Äôs a very well built product. Simple and efficient. Out
of all the websites in this list, it‚Äôs the one with my favorite UI so
far. Gets shit done, no bullshit. üòç</p>
<p>I especially love the fact that they allow to configure any public Git
URL to pull from, without forcing you to connect with GitHub or another
hosted Git provider through OAuth like it‚Äôs the case with <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#vercel">Vercel</a>.</p>
<p>Sadly, while you can <a href="https://render.com/docs/log-streams">configure a syslog drain</a>,
it only forward application logs and doesn‚Äôt include edge load balancer
HTTP logs, which is the only thing I care about.</p>
<h2 id="google-cloud-free-tier-vm" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#google-cloud-free-tier-vm">Google Cloud free tier VM</a></h2>
<p>While it‚Äôs very different from the other managed services I mention in
this list, <a href="https://cloud.google.com/free/docs/gcp-free-tier/#compute">Google Cloud</a>
allows you to run a <code>e2-micro</code> instance constantly for free.</p>
<p>The <code>e2-micro</code> instance has access to 0.25 vCPU and can burst up to 2
vCPUs. It‚Äôs got 1 GB of RAM, and you‚Äôre allowed up to 30 GB of storage
for free. You can even assign it a static IP that will stay free as long
as it‚Äôs in use.</p>
<p>It‚Äôs a pretty underpowered machine but will be way fine for serving
static websites, for example with nginx, as long as it doesn‚Äôt have a
ridiculous amount of traffic.</p>
<p>The only caveat is that you still have to <a href="https://cloud.google.com/vpc/network-pricing">pay for traffic</a>.</p>
<p>Ingress traffic is free (data going in the VM), but you‚Äôll have to pay
for egress traffic (data going out of the VM). In other words, this
means that someone uploading a large file to your VM will be nearly
free, but serving a large file to someone will impact your billing.</p>
<p>Typically this is low enough to be negligible, but Google will be happy
to charge your credit card for $0.03 every month.</p>
<p>And because <em>you‚Äôre the server</em>, you can do whatever the fuck you want,
like logging HTTP traffic to <code>/var/log</code>.</p>
<p>This solution requires a bit of system administration knowledge, but if
like me, you find it to be exciting and a lot of fun, it‚Äôs definitely a
good solution. That being said you‚Äôll also be responsible of managing
the VM, keeping it up-to-date, and fixing any issue that might happen
with it, otherwise you website might get some downtime.</p>
<h2 id="vercel" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#vercel">Vercel</a></h2>
<p>Finally, <a href="https://vercel.com/">Vercel</a> also has free static hosting. Yay!</p>
<p>They even have a <a href="https://vercel.com/analytics">Vercel Analytics</a>
product, but it‚Äôs mostly focused on performance, and the data is
captured on the client side. Makes sense for performance data, but not
what I want.</p>
<p>They also have <a href="https://vercel.com/docs/deployments/logs">logs</a>, which
can even be <a href="https://vercel.com/docs/deployments/logs#persistence">persisted</a>,
through <a href="https://vercel.com/integrations#logging">logging integrations</a>.</p>
<p>This is great, but the whole point I‚Äôm doing this comparison is because
I want a <em>free</em> hosting with logs. If I‚Äôm not willing to pay for
hosting, I‚Äôm not going to pay for Logtrail, Sematext, Datadog or LogDNA. üòÜ</p>
<p>The good news is that the logging integrations are built on top of <a href="https://vercel.com/docs/rest-api#integrations/log-drains">log
drains</a>, and
Vercel allows to <a href="https://vercel.com/docs/integrations">create custom integrations</a>.
This means that we can create our own custom integration, and for
example, configure a log drain that forwards the logs to‚Ä¶ a <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html#google-cloud-free-tier-vm">Google Cloud free tier VM</a>!</p>
<p>This is the best of both words, because Google Cloud won‚Äôt charge for
ingress (and sending data to it is indeed ingress), so we‚Äôll only pay
for the egress of our SSH session where we query the log files, but
that‚Äôs going to be negligible.</p>
<p>In <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html">the next post</a>, I‚Äôll show you how to set
up Vercel with a custom integration to forward logs to a Google Cloud VM
(or the log drain of your choice). See you there!</p>
]]></content>
  </entry>
  <entry>
    <title>Using Vercel without preview deployments</title>
    <link href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html" />
    <id>https://www.codejam.info/2021/09/vercel-without-preview-deployments.html</id>
    <updated>2021-09-21T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://vercel.com/">Vercel</a> is a cool hosting service and is my go-to
for free static hosting. Why? While I prefer the experience of
<a href="https://pages.github.com/">GitHub Pages</a>, <a href="https://www.netlify.com/">Netlify</a>
and <a href="https://render.com/">Render</a>, Vercel <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html">is the only one</a>
to allow raw access to HTTP logs for free. GitHub Pages and Render don‚Äôt
have this feature and Netlify charges a premium fee for it that‚Äôs over
my budget for a small website.</p>
<p>And while I don‚Äôt use client-side analytics scripts (because they
technically cannot be reliable), I like to have a sense of my website
traffic through HTTP logs (the only proper source of truth).</p>
<div class="note">
<p><strong>Note:</strong> if you‚Äôre interested in this topic, I specifically wrote an
article on <a href="https://www.codejam.info/2021/09/vercel-custom-log-drain.html">how to get access to raw HTTP logs on a Vercel website</a>.
Check it out!</p>
</div>
<h2 id="the-problem-with-vercel" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#the-problem-with-vercel">The problem with Vercel</a></h2>
<p>Vercel works. It works well. But it doesn‚Äôt fit my workflow at all.</p>
<p>I like to keep things simple and minimal, and have the least amount of
noise possible. Vercel likes to make things complicated, over-engineered
(relative to what I‚Äôm doing with it), and noisy.</p>
<p>Let‚Äôs take the example of this very blog, if I wanted to host it on
Vercel. The <a href="https://github.com/valeriangalliat/blog">source</a> is on
GitHub, I keep my Markdown files neatly in the <code>master</code> branch, I
render them to HTML using a <a href="https://github.com/valeriangalliat/blog/blob/03a140f7c02e540b4bf97c470261d23e3a156fad/Makefile#L49">dependency-based incremental build system</a>
(also known as makefile) in the <code>gh-pages</code> branch (could be called
anything else but hey, it was once hosted on GitHub Pages after all).</p>
<p>I don‚Äôt <em>need</em> to re-render the whole site every time I deploy, which is
why I commit the HTML files on a separate branch, instead of asking
Vercel or any other hosting platform to compile everything from <code>master</code>
on every deploy. This keeps things <em>fast as fuck</em> and low energy.</p>
<h3 id="preview-deployments" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#preview-deployments">Preview deployments</a></h3>
<p>By default, Vercel expects every branch to be deployable, and they have
that cool feature of automatically deploying every single commit to a
random URL (preview deployments). I don‚Äôt need preview deployments for
my blog, but there‚Äôs no way to turn them off.</p>
<h3 id="very-verbose-vercel" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#very-verbose-vercel">Very verbose Vercel</a></h3>
<p>They also have the annoying habit of posting a comment on every GitHub
PR and commit with the deployment URL by default. I hate noise and this
is pure noise for me. Luckily there‚Äôs a non-intuitive way of turning it
off and I‚Äôll show you how.</p>
<h3 id="managing-garbage" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#managing-garbage">Managing garbage</a></h3>
<p>Finally, because each PR and commit is going to trigger a deployment
with a not-so-temporary URL. This creates a lot of old, unused, garbage
deployments, and Vercel doesn‚Äôt know when you don‚Äôt need them anymore
and consider them garbage (for me, like, instantly, for anything that‚Äôs
not the latest production build).</p>
<p>You can either remove them manually (sad), or you can periodically run a
command that does just that for you (also sad, but less sad), and I‚Äôll
show you how.</p>
<p>Let‚Äôs get into it.</p>
<h2 id="turning-off-preview-deployments-kinda" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#turning-off-preview-deployments-kinda">Turning off preview deployments (kinda)</a></h2>
<p>I guess that the whole point of Vercel is to offer preview deployments,
so they didn‚Äôt really consider the use case where you would want to
remove them.</p>
<p>But if you go in your project settings, under the Git section, you can
configure a ‚Äúignored build step‚Äù command.</p>
<figure class="center">
  <img alt="Ignored build step" src="https://www.codejam.info/img/2021/09/vercel-ignored-build-step.png">
</figure>
<p>It‚Äôs a command whose exit code will determine whether Vercel will
actually deploy the branch. When the command errors out (exits with a
nonzero code), a new build will be triggered, but if the commands
succeeds (exits with 0), this build will be ignored.</p>
<p>You can <a href="https://vercel.com/docs/projects/overview#ignored-build-step">run Git commands there</a>,
but I like to keep it simple and just rely on the <code>VERCEL_ENV</code>
environment variable to only allow builds on the production branch
(<code>gh-pages</code> in my case) as defined in ‚Äúproduction branch‚Äù.</p>
<figure class="center">
  <img alt="Production branch" src="https://www.codejam.info/img/2021/09/vercel-production-branch.png">
</figure>
<p>By using the following command, I can effectively ignore all builds that
are not in the production branch.</p>
<pre><code class="hljs language-sh">[ <span class="hljs-string">&quot;<span class="hljs-variable">$VERCEL_ENV</span>&quot;</span> != production ]
</code></pre>
<p>This uses the
<a href="https://man7.org/linux/man-pages/man1/test.1.html"><code>test(1)</code></a> command
(commonly aliased to <code>[</code>) to exit with an error when we‚Äôre on the
production branch, in order to trigger a build.</p>
<p>The ignored build will still show up in your deployments list as
‚Äúcancelled‚Äù deployments, and there‚Äôs no way around that, but I show you
below <a href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#garbage-collecting-dangling-deployments">how to garbage collect them</a>.</p>
<h2 id="getting-rid-of-bot-comments" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#getting-rid-of-bot-comments">Getting rid of bot comments</a></h2>
<p>By default Vercel will comment on every PR and commit with the link to
the deployment.</p>
<p>To avoid that, create a <code>vercel.json</code> file in every branch where you
want to turn this off, with the following content:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;github&quot;</span>: {
    <span class="hljs-attr">&quot;silent&quot;</span>: <span class="hljs-literal">true</span>
  }
}
</code></pre>
<div class="note">
<p><strong>Note:</strong> if you used the previous trick to only run builds in the
production branch, you only need to add this configuration there.</p>
</div>
<h2 id="garbage-collecting-dangling-deployments" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#garbage-collecting-dangling-deployments">Garbage collecting dangling deployments</a></h2>
<p>Vercel knows to create preview deployments, but doesn‚Äôt know when to
delete them. This means that you need to more or less manually delete
the old preview deployments that are not needed anymore.</p>
<p>It usually doesn‚Äôt cause any harm to have hundreds of older versions of
your website available on random public URLs that most likely only your
team knows about. I just don‚Äôt like them being <em>there</em> in the first
place.</p>
<figure class="center">
  <img alt="Dangling deployments" src="https://www.codejam.info/img/2021/09/vercel-dangling-deployments.png">
  <figcaption>I don't know about you, but that makes me anxious.</figcaption>
</figure>
<p>With the <a href="https://vercel.com/docs/cli">Vercel CLI</a>, which you can
install with <code>npm install -g vercel</code>, you can use the <a href="https://vercel.com/docs/cli#commands/remove"><code>vercel remove</code></a>
command to remove deployments.</p>
<p>Specifically, to remove everything but deployments with an active production or preview URL, run:</p>
<pre><code class="hljs language-sh">vercel remove &lt;project&gt; --safe
</code></pre>
<figure class="center">
  <img alt="Clean deployments" src="https://www.codejam.info/img/2021/09/vercel-clean-deployments.png">
  <figcaption>Now this is better!</figcaption>
</figure>
<h2 id="final-thoughts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/09/vercel-without-preview-deployments.html#final-thoughts">Final thoughts</a></h2>
<p>I‚Äôm not blaming Vercel for all of this, I‚Äôm happy they provide this
service for free and <a href="https://www.codejam.info/2021/09/free-static-hosting-server-side-analytics.html">they‚Äôre the only ones</a>
to include HTTP logs access in the free offer.</p>
<p>Sadly their approach to deploying websites if very far from mine, and
this requires me to work around those default behaviours to have
something that fits me better.</p>
<p>If you‚Äôre in a similar situation, I hope you found this post useful!</p>
]]></content>
  </entry>
  <entry>
    <title>Tracking the value of an Ethereum or Binance Smart Chain token in real time</title>
    <link href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html" />
    <id>https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html</id>
    <updated>2021-08-23T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>If you want to programmatically track the value of a crypto token on
Ethereum or the Binance Smart Chain, you‚Äôre in the right place, because
I recently wanted to do that as well.</p>
<p>There was very little beginner content about this online and it was
pretty hard to figure out without any prior cryptocurrency knowledge,
but it turned out to be technically pretty trivial, so I figured I would
write a quick blog post about this.</p>
<p>For the example I‚Äôll use the <a href="https://www.binance.org/en/smartChain">Binance Smart Chain</a>
with <a href="https://pancakeswap.info/token/0x54626300818e5c5b44db0fcf45ba4943ca89a9e2">CheCoin</a>,
a token that‚Äôs exchanged through a <a href="https://pancakeswap.finance/">PancakeSwap</a>
pool, but my understanding is that this should be applicable with pretty
much the same code to <a href="https://ethereum.org/en/">Ethereum</a> and
<a href="https://uniswap.org/">Uniswap</a>.</p>
<h2 id="first-attempt-trying-to-scrape-existing-sites" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#first-attempt-trying-to-scrape-existing-sites">First attempt: trying to scrape existing sites</a></h2>
<p>Sites like <a href="https://poocoin.app/tokens/0x54626300818e5c5b44db0fcf45ba4943ca89a9e2">PooCoin</a>
and <a href="https://www.dextools.io/app/pancakeswap/pair-explorer/0x194850932e48753cbeedf0af85022152148addc6">DEXTools</a>
show a live graph of the token transactions, which is exactly the kind
of data we‚Äôd need to see the real-time value.</p>
<p>At the time I didn‚Äôt know about DEXTools which seems actually pretty
easy to scrape. On PooCoin though, all the data seems to come from
<code>https://bsc-dataseed1.defibit.io/</code>, with a JSON-wrapped binary format
for requests and responses that‚Äôs totally obscure.</p>
<p>Googling that domain leads me to Binance‚Äôs <a href="https://docs.binance.org/smart-chain/developer/rpc.html">JSON-RPC</a>
documentation, but it‚Äôs not instantly clear from this page or the linked
resources how to concretely encode and decode the binary protocol.</p>
<h2 id="filling-the-gap" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#filling-the-gap">Filling the gap</a></h2>
<p>I grab a beer with my friend <a href="https://www.damiengonot.com/">Damien</a>
who‚Äôs much more knowledgable than me about cryptocurrencies, and he
instantly recognizes the <a href="https://ethereum.org/en/developers/docs/apis/json-rpc/">Ethereum JSON-RPC API</a>,
which is actually well documented and comes with a number of clients for
different languages (<a href="https://web3js.readthedocs.io/">web3.js</a> being a
popular JavaScript one). Sweet.</p>
<p>Since the Binance Smart Chain is forked off Ethereum, they share a lot
of similarities, meaning we can use web3.js to connect to the JSON-RPC
API of a Binance node. My understanding is that most nodes don‚Äôt expose
the API publicly but Binance conveniently provides a list of
<a href="https://docs.binance.org/smart-chain/developer/rpc.html">public nodes</a>
to access it.</p>
<p>With that, there‚Äôs a number of ways we can determine the value of a
token, and we‚Äôll explore two below: dividing the pool balances, and
polling the latest transactions.</p>
<h2 id="first-method-dividing-the-pool-balances" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#first-method-dividing-the-pool-balances">First method: dividing the pool balances</a></h2>
<p>The token I‚Äôm interested in is exchanged with PancakeSwap, a fork of
Uniswap for the Binance Smart Chain. Uniswap and PancakeSwap allow
trading (swapping) between two tokens with smart contracts through a
<a href="https://youtu.be/cizLhxSKrAc">liquidity pool</a>.</p>
<p>The main exchange for CheCoin is <a href="https://pancakeswap.info/pool/0x194850932e48753cbeedf0af85022152148addc6">a pool</a>
that holds both CheCoin and <a href="https://www.binance.org/en/blog/what-is-wbnb/">wrapped BNB</a>,
allowing to easily trade between the two tokens.</p>
<p>Because Uniswap follows the <a href="https://decrypt.co/resources/what-is-uniswap">constant product market maker model</a>,
the value of the tokens in the pool is directly related to the reserves
of each token. This means that by dividing the reserve of wBNB in the pool
by the reserve of CheCoin, we can get the value of CheCoin in wBNB at
that point in time.</p>
<p>We can then poll the pool balance to get the value of CheCoin in real
time. Giving a USD value is then a matter of fetching the current wBNB
value in USD (which I won‚Äôt cover here but should be easier) and
applying that to the CheCoin value.</p>
<p>Now, this is great, but how to do that concretely? Let‚Äôs start by doing
it from Etherscan (for Ethereum) or BscScan (Etherscan fork for the
Binance Smart Chain) and then port that logic to web3.js.</p>
<h3 id="doing-the-operation-manually-on-bscscan" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#doing-the-operation-manually-on-bscscan">Doing the operation manually on BscScan</a></h3>
<p>While the PancakeSwap UI conveniently gives us the address of the
CheCoin / wBNB pool, let‚Äôs figure it as if we only knew the address of
the CheCoin token contract: <code>0x54626300818e5c5b44db0fcf45ba4943ca89a9e2</code>.</p>
<p>By <a href="https://bscscan.com/address/0x54626300818e5c5b44db0fcf45ba4943ca89a9e2">browsing that address on BscScan</a>,
we can see that we‚Äôre in the presence of a BEP-20 token. By going in the
‚Äúcontract‚Äù tab, we get the Solidity code behind that smart contract,
as well as the contract JSON <abbr title="Application binary interface">ABI</abbr>,
which will be useful for later.</p>
<p>Then by opening ‚Äúread contract‚Äù, we can see the read-only functions
exposed by the CheCoin smart contract. The read-only functions don‚Äôt
require a gas fee, so we can query them right from the interface.
BscScan makes it especially convenient by automatically calling the
functions that don‚Äôt take any parameter and showing directly the value.</p>
<p><code>uniswapV2Pair</code> is one of those functions without arguments, that return
an address: <code>0x194850932e48753cbeedf0af85022152148addc6</code>. This is the
address of the main exchange liquidity pool for that token.</p>
<p>Following <a href="https://bscscan.com/address/0x194850932e48753cbeedf0af85022152148addc6">that address</a>
on BscScan leads us to the contract for the liquidity pool. We can see
it‚Äôs a <code>PancakePair</code> contract. In its read contract, we find a
<code>getReserves</code> function that returns 3 values: <code>_reserve0</code>, <code>_reserve1</code>
and <code>_blockTimestampLast</code>.</p>
<p>A bit further, we can read <code>token0</code> which contains the address of the
CheCoin token, and <code>token1</code> which is the address of the wBNB token.</p>
<p>With that we know that <code>_reserve0</code> is the CheCoin balance and
<code>_reserve1</code> the wBNB balance. By dividing the wBNB balance by the
CheCoin balance, we get the current CheCoin price in wBNB. At the time
of writing:</p>
<pre><code class="hljs">898088729263450811395 / 19062285402212133851022386471 = 0.000000047113381754
</code></pre>
<h3 id="a-note-about-token-decimals" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#a-note-about-token-decimals">A note about token decimals</a></h3>
<p>This works here because it happens that both CheCoin and wBNB tokens use
18 decimals internally. There is <a href="https://ethereum.stackexchange.com/questions/99747/what-unit-are-the-uniswap-pancakeswap-router-functions-expecting">no guarantee</a>
that the tokens will use 18 decimals, even though it seems to be pretty
common. For example, the <a href="https://pancakeswap.info/token/0xb27adaffb9fea1801459a1a81b17218288c097cc">PooCoin</a>
token uses 8 decimals only, meaning that the above formula doesn‚Äôt give
us the proper price of PooCoin.</p>
<p>You can find the number of decimals in the <code>decimals</code> function of the
read contract of the token. For example for <a href="https://bscscan.com/address/0x54626300818e5c5b44db0fcf45ba4943ca89a9e2#readContract">CheCoin</a>,
<a href="https://bscscan.com/address/0xb27adaffb9fea1801459a1a81b17218288c097cc#readContract">PooCoin</a>
and <a href="https://bscscan.com/address/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c#readContract">wBNB</a>.</p>
<p>If we take the current balances of the PooCoin / wBNB pool, this gives
us:</p>
<pre><code class="hljs">(4450271521514080442547 / 1e18) / (59678440268618 / 1e8) = 0.007457084168894177

</code></pre>
<p>Which is an accurate reading for the current price of PooCoin in wBNB.</p>
<h3 id="a-note-about-the-pair-address" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#a-note-about-the-pair-address">A note about the pair address</a></h3>
<p>We saw earlier that the CheCoin token included a <code>uniswapV2Pair</code>
function to get the pair address, but it‚Äôs not the case of every token,
for example PooCoin doesn‚Äôt have any.</p>
<p>Instead, Uniswap provides a neat ‚Äúfactory‚Äù contract that we can call
with two tokens to retrieve the pair address. In my case, I‚Äôll look at
the PancakeSwap version, where the factory address <a href="https://docs.pancakeswap.finance/code/smart-contracts/pancakeswap-exchange/factory-v2">is documented</a>
to be <code>0xca143ce32fe78f1f7019d7d551a6402fc5350c73</code>.</p>
<p>Visiting that address on BscScan and going in the read contract, we can
call the <code>getPair</code> function, for example with the addresses of PooCoin (<code>0xb27adaffb9fea1801459a1a81b17218288c097cc</code>) and
wBNB (<code>0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c</code>). It returns
<code>0x0c5da0f07962dd0256c079248633f2b43cad6f62</code>, which is effectively
the address of the <a href="https://pancakeswap.info/pool/0x0c5da0f07962dd0256c079248633f2b43cad6f62">PooCoin / wBNB pool</a>.</p>
<p>Now we know how to calculate the price of the token we want, let‚Äôs
script this with web3.js.</p>
<h3 id="getting-the-contracts-abi" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#getting-the-contracts-abi">Getting the contracts ABI</a></h3>
<p>The first important thing here is that to be able to call methods on a
smart contract, you need to know the contract <abbr title="Application binary interface">ABI</abbr>.</p>
<p>This is typically a JSON file, that BscScan shows at the bottom of the <a href="https://bscscan.com/address/0x54626300818e5c5b44db0fcf45ba4943ca89a9e2">contract tab</a>.</p>
<p>While <a href="https://ethereum.stackexchange.com/questions/26648/how-to-find-solidity-code-for-a-contract-address/26654">there is no obligation</a>
to publish the source code and ABI of a contract on the blockchain, it
seems to be <a href="https://docs.binance.org/smart-chain/developer/deploy/verify.html">common practice</a>
to publish it to Etherscan / BscScan for discoverability and
verifiability, so we can usually grab it from there.</p>
<p>In our case, we‚Äôll need the ABI for the
<a href="https://bscscan.com/address/0x54626300818e5c5b44db0fcf45ba4943ca89a9e2#code">CheCoin</a>,
<a href="https://bscscan.com/address/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c#code">wBNB</a>,
<a href="https://bscscan.com/address/0x194850932e48753cbeedf0af85022152148addc6#code"><code>PancakePair</code></a>
and <a href="https://bscscan.com/address/0xca143ce32fe78f1f7019d7d551a6402fc5350c73#code"><code>PancakeFactory</code></a>
contracts. Copy the ABI JSON and put them respectively in
<code>checoin.json</code>, <code>wbnb.json</code> and <code>pair.json</code> and <code>factory.json</code>.</p>
<p>I you need to do that programmatically, you can check out the <a href="https://docs.bscscan.com/api-endpoints/contracts#get-contract-abi-for-verified-contract-source-codes">BscScan API</a>
or <a href="https://docs.etherscan.io/api-endpoints/contracts#get-contract-abi-for-verified-contract-source-codes">Etherscan API</a>
that feature an endpoint to fetch a given contract ABI.</p>
<h3 id="calling-the-smart-contracts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#calling-the-smart-contracts">Calling the smart contracts</a></h3>
<p>Now, we got everything we need to call the contracts with <a href="https://web3js.readthedocs.io/">web3.js</a>.</p>
<p>If you read everything I wrote until now, the code should be
self-explanatory.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;web3&#x27;</span>)

<span class="hljs-keyword">const</span> checoinAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./checoin&#x27;</span>)
<span class="hljs-keyword">const</span> wbnbAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./wbnb&#x27;</span>)
<span class="hljs-keyword">const</span> pairAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./pair&#x27;</span>)
<span class="hljs-keyword">const</span> factoryAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./factory&#x27;</span>)

<span class="hljs-comment">// See &lt;https://docs.pancakeswap.finance/code/smart-contracts/pancakeswap-exchange/factory-v2&gt;.</span>
<span class="hljs-keyword">const</span> factoryAddress = <span class="hljs-string">&#x27;0xca143ce32fe78f1f7019d7d551a6402fc5350c73&#x27;</span>

<span class="hljs-keyword">const</span> checoinAddress = <span class="hljs-string">&#x27;0x54626300818e5c5b44db0fcf45ba4943ca89a9e2&#x27;</span>
<span class="hljs-keyword">const</span> wbnbAddress = <span class="hljs-string">&#x27;0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c&#x27;</span>

<span class="hljs-comment">// See &lt;https://docs.binance.org/smart-chain/developer/rpc.html&gt;.</span>
<span class="hljs-keyword">const</span> rpcEndpoint = <span class="hljs-string">&#x27;https://bsc-dataseed1.defibit.io&#x27;</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> web3 = <span class="hljs-keyword">new</span> Web3(rpcEndpoint)

  <span class="hljs-keyword">const</span> checoinContract = <span class="hljs-keyword">new</span> web3.eth.Contract(checoinAbi, checoinAddress)
  <span class="hljs-keyword">const</span> wbnbContract = <span class="hljs-keyword">new</span> web3.eth.Contract(wbnbAbi, wbnbAddress)
  <span class="hljs-keyword">const</span> factoryContract = <span class="hljs-keyword">new</span> web3.eth.Contract(factoryAbi, factoryAddress)

  <span class="hljs-comment">// If token provides `uniswapV2Pair`.</span>
  <span class="hljs-comment">// const pairAddress = await checoinContract.methods.uniswapV2Pair().call()</span>

  <span class="hljs-comment">// Generic method.</span>
  <span class="hljs-keyword">const</span> pairAddress = <span class="hljs-keyword">await</span> factoryContract.methods.getPair(checoinAddress, wbnbAddress).call()

  <span class="hljs-keyword">const</span> pairContract = <span class="hljs-keyword">new</span> web3.eth.Contract(pairAbi, pairAddress)

  <span class="hljs-keyword">const</span> checoinDecimals = <span class="hljs-keyword">await</span> checoinContract.methods.decimals().call()
  <span class="hljs-keyword">const</span> wbnbDecimals = <span class="hljs-keyword">await</span> wbnbContract.methods.decimals().call()
  <span class="hljs-keyword">const</span> reserves = <span class="hljs-keyword">await</span> pairContract.methods.getReserves().call()

  <span class="hljs-keyword">const</span> checoin = reserves[<span class="hljs-number">0</span>] / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, checoinDecimals)
  <span class="hljs-keyword">const</span> wbnb = reserves[<span class="hljs-number">1</span>] / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, wbnbDecimals)
  <span class="hljs-keyword">const</span> timestamp = reserves[<span class="hljs-number">2</span>]

  <span class="hljs-built_in">console</span>.log(timestamp, checoin, wbnb, (wbnb / checoin).toFixed(<span class="hljs-number">18</span>), (checoin / wbnb).toFixed(<span class="hljs-number">18</span>))
}

main()
</code></pre>
<p>This displays the latest block timestamp, the current CheCoin balance,
wBNB balance, then the price of CheCoin in wBNB, and the price of wBNB
in CheCoin.</p>
<h2 id="second-method-polling-the-latest-transactions" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#second-method-polling-the-latest-transactions">Second method: polling the latest transactions</a></h2>
<p>The pool balances method works well, and while the value we get matches
exactly the one displayed by PancakeSwap on the pool view, it can differ
a bit from the one we see on PooCoin, because the latter uses the price
of the last transaction as token price instead of dealing with the
balances.</p>
<p>Let‚Äôs do the same thing with our script. Because it‚Äôs <a href="https://ethereum.stackexchange.com/questions/1381/how-do-i-parse-the-transaction-receipt-log-with-web3-js">a bit of a pain in the ass</a>
to parse binary transaction logs with web3.js, we‚Äôll use
<a href="https://docs.ethers.io/">Ethers.js</a> which makes things much easier for
us on that aspect.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { ethers } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ethers&#x27;</span>)

<span class="hljs-keyword">const</span> checoinAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./checoin&#x27;</span>)
<span class="hljs-keyword">const</span> wbnbAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./wbnb&#x27;</span>)
<span class="hljs-keyword">const</span> pairAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./pair&#x27;</span>)
<span class="hljs-keyword">const</span> factoryAbi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./factory&#x27;</span>)

<span class="hljs-comment">// See &lt;https://docs.pancakeswap.finance/code/smart-contracts/pancakeswap-exchange/factory-v2&gt;.</span>
<span class="hljs-keyword">const</span> factoryAddress = <span class="hljs-string">&#x27;0xca143ce32fe78f1f7019d7d551a6402fc5350c73&#x27;</span>

<span class="hljs-keyword">const</span> checoinAddress = <span class="hljs-string">&#x27;0x54626300818e5c5b44db0fcf45ba4943ca89a9e2&#x27;</span>
<span class="hljs-comment">// const checoinAddress = &#x27;0xb27adaffb9fea1801459a1a81b17218288c097cc&#x27; //poocoin</span>
<span class="hljs-keyword">const</span> wbnbAddress = <span class="hljs-string">&#x27;0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c&#x27;</span>

<span class="hljs-comment">// See &lt;https://docs.binance.org/smart-chain/developer/rpc.html&gt;.</span>
<span class="hljs-keyword">const</span> rpcEndpoint = <span class="hljs-string">&#x27;https://bsc-dataseed1.defibit.io&#x27;</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> provider = <span class="hljs-keyword">new</span> ethers.providers.JsonRpcProvider(rpcEndpoint)

  <span class="hljs-keyword">const</span> checoinContract = <span class="hljs-keyword">new</span> ethers.Contract(checoinAddress, checoinAbi, provider)
  <span class="hljs-keyword">const</span> wbnbContract = <span class="hljs-keyword">new</span> ethers.Contract(wbnbAddress, wbnbAbi, provider)
  <span class="hljs-keyword">const</span> factoryContract = <span class="hljs-keyword">new</span> ethers.Contract(factoryAddress, factoryAbi, provider)

  <span class="hljs-comment">// If token provides `uniswapV2Pair`.</span>
  <span class="hljs-comment">// const pairAddress = await checoinContract.uniswapV2Pair()</span>

  <span class="hljs-comment">// Generic method.</span>
  <span class="hljs-keyword">const</span> pairAddress = <span class="hljs-keyword">await</span> factoryContract.getPair(checoinAddress, wbnbAddress)

  <span class="hljs-keyword">const</span> checoinDecimals = <span class="hljs-keyword">await</span> checoinContract.decimals()
  <span class="hljs-keyword">const</span> wbnbDecimals = <span class="hljs-keyword">await</span> wbnbContract.decimals()

  <span class="hljs-keyword">const</span> pairInterface = <span class="hljs-keyword">new</span> ethers.utils.Interface(pairAbi)

  <span class="hljs-keyword">const</span> logs = <span class="hljs-keyword">await</span> provider.getLogs({ <span class="hljs-attr">address</span>: pairAddress })

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> log <span class="hljs-keyword">of</span> logs) {
    <span class="hljs-keyword">const</span> parsed = pairInterface.parseLog(log)

    <span class="hljs-keyword">if</span> (parsed.name !== <span class="hljs-string">&#x27;Swap&#x27;</span>) {
      <span class="hljs-keyword">continue</span>
    }

    <span class="hljs-keyword">let</span> type, che, bnb

    <span class="hljs-keyword">if</span> (parsed.args.amount1Out.isZero()) {
      type = <span class="hljs-string">&#x27;buy&#x27;</span>
      bnb = parsed.args.amount1In / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, wbnbDecimals)
      che = parsed.args.amount0Out / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, checoinDecimals)
    } <span class="hljs-keyword">else</span> {
      type = <span class="hljs-string">&#x27;sell&#x27;</span>
      che = parsed.args.amount0In / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, checoinDecimals)
      bnb = parsed.args.amount1Out / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, wbnbDecimals)
    }

    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${type}</span> che=<span class="hljs-subst">${che}</span> bnb=<span class="hljs-subst">${bnb}</span> tx=<span class="hljs-subst">${log.transactionHash}</span> blk=<span class="hljs-subst">${log.blockNumber}</span>`</span>)
  }
}

main()
</code></pre>
<p>Everything until defining <code>wbnbDecimals</code> is the same as the previous
example, but with Ethers.js instead of web3.js.</p>
<p>Then, Ethers.js conveniently provides us with an <code>Interface</code> class that
lets us decode binary logs from a given ABI. Very nice.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> pairInterface = <span class="hljs-keyword">new</span> ethers.utils.Interface(pairAbi)
</code></pre>
<p>We call the <code>getLogs</code> function on the <code>pairAddress</code>, getting all logs
from the latest block.</p>
<div class="note">
<p><strong>Note:</strong> for testing purpose, feel free to check the last few blocks of
the pair on Etherscan or BscScan, and request logs from an older block
so that you get some data more consistently:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> logs = <span class="hljs-keyword">await</span> provider.getLogs({ <span class="hljs-attr">address</span>: pairAddress, <span class="hljs-attr">fromBlock</span>: <span class="hljs-number">10289051</span> })
</code></pre>
</div>
<p>For each log, the interface we instantiated earlier from the ABI allows
us to parse the log. We get back an object with the transaction name
(here, we care about <code>Swap</code> transactions) as well as the transaction
arguments.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> log <span class="hljs-keyword">of</span> logs) {
  <span class="hljs-keyword">const</span> parsed = pairInterface.parseLog(log)

  <span class="hljs-keyword">if</span> (parsed.name !== <span class="hljs-string">&#x27;Swap&#x27;</span>) {
    <span class="hljs-keyword">continue</span>
  }

  <span class="hljs-built_in">console</span>.log(parsed.args)
}
</code></pre>
<p>With Uniswap / PancakeSwap, there are 4 arguments to a swap:
<code>amount0In</code>, <code>amount1In</code>, <code>amount0Out</code>, <code>amount1Out</code>, where <code>amount0</code>
are the values for <code>token0</code> of the pair, and <code>amount1</code> the values for
<code>token1</code> of the pair.</p>
<p>While it appears that a swap can sometimes take two inputs (and I have
yet to understand why), it seems somewhat reliable to check if
<code>amount1Out</code> is zero to tell if this transaction is a buy or a sell of
<code>token0</code>.</p>
<p>Then, we just need to do the decimals conversion dance like we did
before in order to display accurate values. Here I log the transaction
type (buy or sell), CheCoin amount, wBNB amount, as well as the
transaction hash and block number.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">let</span> type, che, bnb

<span class="hljs-keyword">if</span> (parsed.args.amount1Out.isZero()) {
  type = <span class="hljs-string">&#x27;buy&#x27;</span>
  bnb = parsed.args.amount1In / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, wbnbDecimals)
  che = parsed.args.amount0Out / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, checoinDecimals)
} <span class="hljs-keyword">else</span> {
  type = <span class="hljs-string">&#x27;sell&#x27;</span>
  che = parsed.args.amount0In / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, checoinDecimals)
  bnb = parsed.args.amount1Out / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, wbnbDecimals)
}

<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${type}</span> che=<span class="hljs-subst">${che}</span> bnb=<span class="hljs-subst">${bnb}</span> tx=<span class="hljs-subst">${log.transactionHash}</span> blk=<span class="hljs-subst">${log.blockNumber}</span>`</span>)
</code></pre>
<h3 id="actually-polling" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#actually-polling">Actually polling</a></h3>
<p>The previous script will only log the latest transaction once, then
exit. If you want to poll in real time the latest transactions and log
them to the console, it‚Äôs easily done with an infinite loop.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">let</span> fromBlock = <span class="hljs-string">&#x27;latest&#x27;</span>

<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
  <span class="hljs-keyword">const</span> logs = <span class="hljs-keyword">await</span> provider.getLogs({ <span class="hljs-attr">address</span>: pairAddress, fromBlock })

  <span class="hljs-keyword">if</span> (logs.length) {
    <span class="hljs-comment">// `fromBlock` is inclusive so poll from next block.</span>
    fromBlock = logs[logs.length - <span class="hljs-number">1</span>].blockNumber + <span class="hljs-number">1</span>
  }

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> log <span class="hljs-keyword">of</span> logs) {
    <span class="hljs-comment">// Previous code goes here.</span>
  }

  <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">1000</span>))
}
</code></pre>
<p>Here, we poll every second (adjust to something reasonable for the
current volume of transactions of the token you‚Äôre watching), making
sure to request the next block in the next poll to avoid duplicates
(because the <code>fromBlock</code> parameter is otherwise inclusive).</p>
<h2 id="final-word" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/ethereum-binance-token-real-time-value.html#final-word">Final word</a></h2>
<p>While everything looked pretty complex and obscure at first sight, with
no cryptocurrency background, it turned out to be fairly simple after
understanding a couple concepts like liquidity pools and how to navigate
and invoke smart contracts.</p>
<p>As a cryptocurrency noob, this blog post if what I wish I found when I
first started looking at how to programmatically determine the live
value of a token. I hope it made things a bit easier for you. Cheers!</p>
]]></content>
  </entry>
  <entry>
    <title>Using your lock screen as login screen on Linux</title>
    <link href="https://www.codejam.info/2021/08/lock-screen-as-login-screen-linux.html" />
    <id>https://www.codejam.info/2021/08/lock-screen-as-login-screen-linux.html</id>
    <updated>2021-08-22T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>For a very long time I wasn‚Äôt using a <a href="https://wiki.archlinux.org/title/Display_manager">display manager</a>
(also known as login manager). I just had <a href="https://github.com/valeriangalliat/dotfiles/blob/master/zsh/zshrc.home#L6">this line</a>
in my <code>~/.zshrc</code> to automatically start a X session after logging in on
TTY1, effectively using the TTY login prompt as my login manager:</p>
<pre><code class="hljs language-sh"><span class="hljs-comment"># Start X on login on TTY1</span>
<span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$DISPLAY</span>&quot;</span> ] &amp;&amp; [ <span class="hljs-string">&quot;<span class="hljs-variable">$XDG_VTNR</span>&quot;</span> -eq 1 ]; <span class="hljs-keyword">then</span>
    <span class="hljs-built_in">exec</span> startx
<span class="hljs-keyword">fi</span>
</code></pre>
<p>The only drawback to this was that I had to type my username, which is
redundant as this is a single-user system, and more importantly, that
the X session was considered to be a TTY session by logind, because
there‚Äôs no way to upgrade a TTY session to a graphical session.</p>
<p>This affects a number of semantics, especially the way logind deals with
<a href="https://github.com/systemd/systemd/issues/14053#issuecomment-564138746">detecting idle</a>,
which is an issue if we want to use logind‚Äôs <code>IdleAction</code> for example to
suspend the system after a period of inactivity.</p>
<p>Using a display manager makes sure to register the session as graphical
and fixes that issue, but I didn‚Äôt like to introduce another graphical
interface that‚Äôs not consistent with the rest of my system, and I‚Äôd
rather not get into configuring it extensively and theming it.</p>
<h2 id="logging-in-to-a-lock-screen" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/lock-screen-as-login-screen-linux.html#logging-in-to-a-lock-screen">Logging in to a lock screen?</a></h2>
<p>Since I‚Äôm the only user of my laptop, I don‚Äôt need a fancy interface to
select among a list of users and such, and it felt like my lock screen
would be a perfect fit as a login screen. I use i3lock which I configure
to just show a background and let me type my password to unlock the
screen.</p>
<p>While i3lock itself is not meant to be used like this, you can achieve
this with a combination of LightDM autologin feature, and starting
i3lock first thing in your <code>~/.xprofile</code>:</p>
<pre><code class="hljs language-sh"><span class="hljs-comment"># Lock screen before actually starting, to be used with autologin</span>
i3lock -n
</code></pre>
<div class="note">
<p><strong>Note:</strong> I use the <code>-n</code> (<code>--nofork</code>) option here so that i3lock blocks
the start script until it‚Äôs unlocked.</p>
</div>
<p>And the following in <code>/etc/lightdm/lightdm.conf</code> (where <code>foo</code> is your
username):</p>
<pre><code class="hljs language-conf">[Seat:*]
autologin-user=foo
</code></pre>
<p>This results in LightDM acting as a totally transparent display manager,
allowing the logind session to be considered graphical, and i3lock being
started first thing in the session, blocking until it‚Äôs unlocked to
start the actual window manager.</p>
<p>It‚Äôs so far the lightest way I‚Äôve found to start a graphical session
without it being considered a TTY by logind, while still being prompted
for my password. I hope you find this useful!</p>
]]></content>
  </entry>
  <entry>
    <title>dmenumoji: dmenu with built-in libxft-bgra and emoji support üí™</title>
    <link href="https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html" />
    <id>https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html</id>
    <updated>2021-08-22T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="tldr" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html#tldr">TLDR</a></h2>
<p>To get dmenu to work with emojis, you need to compile it from source
against <a href="https://aur.archlinux.org/packages/libxft-bgra/">libxft-bgra</a> (from <a href="https://gitlab.freedesktop.org/xorg/lib/libxft/-/merge_requests/1">this PR</a>),
after removing the <code>iscol</code> check in <code>drw.c</code> that prevents colored fonts
to be used, and configuring a colored font in <code>config.h</code> or
<code>config.def.h</code> (see patches below).</p>
<p>Go check out <a href="https://github.com/valeriangalliat/dmenumoji">dmenumoji</a>
that does all that work for you!</p>
<h2 id="the-story" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html#the-story">The story</a></h2>
<p>A couple weeks ago, during my daily procrastination routine (I like to
procrastinate in the mornings right after meditating and taking a cold
shower), I figured it would be nice to have some kind of emoji picker on
my Arch Linux rig.</p>
<p>I quickly found <a href="https://askubuntu.com/questions/1045915/how-to-insert-an-emoji-into-a-text-in-ubuntu-18-04-and-later">this thread</a>,
sadly a lot of the solutions there are specific to particular desktop
environments, and I‚Äôm not using any. Although <a href="https://github.com/tom-james-watson/Emote">Emote</a>
looks promising, and has an <a href="https://aur.archlinux.org/packages/emote">AUR package</a>,
it <a href="https://github.com/tom-james-watson/Emote/issues/44">fails to paste in terminals</a>.
Since I spend most of my time in terminals so this is not an option.</p>
<p>That‚Äôs when I find about <a href="https://github.com/fdw/rofimoji"><code>rofimoji</code></a>
which is even already packaged on Arch, and it‚Äôs definitely an awesome
piece of software, but I‚Äôm a dmenu user and I would rather keep things
consistent.</p>
<p>Since I like the idea of a dmenu-based emoji picker, I start looking
specifically for that and find <a href="https://github.com/porras/dmenu-emoji">dmenu-emoji</a>,
which despite the name, is actually meant to be used with Rofi, but also
claims to work with dmenu. But when I try it with plain dmenu, the
emojis only show up as empty squares. Not ideal.</p>
<h2 id="making-dmenu-show-emojis" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html#making-dmenu-show-emojis">Making dmenu show emojis</a></h2>
<p>Trying to figure that issue, I stumble upon <a href="https://youtu.be/0QkByBugq_4">this video</a>
which explains that you need to compile dmenu from source against
<a href="https://aur.archlinux.org/packages/libxft-bgra/">libxft-bgra</a>, a patched version of libXft from <a href="https://gitlab.freedesktop.org/xorg/lib/libxft/-/merge_requests/1">this PR</a>
that adds support for colored (BGRA) glyphs, all of that after patching
dmenu itself to remove a workaround that they added to prevent crashes
with libXft‚Äôs lack of support for BGRA glyphs, that dropped support for
colored fonts in the first place.</p>
<p>Typically this is done on Arch by installing <a href="https://aur.archlinux.org/packages/libxft-bgra/">libxft-bgra</a> from the AUR,
and applying the following patch to the dmenu source, as explained in
the video.</p>
<pre><code class="hljs language-diff"><span class="hljs-comment">diff --git a/drw.c b/drw.c</span>
<span class="hljs-comment">index 4cdbcbe..c1c265c 100644</span>
<span class="hljs-comment">--- a/drw.c</span>
<span class="hljs-comment">+++ b/drw.c</span>
<span class="hljs-meta">@@ -133,19 +133,6 @@</span> xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)
 		die(&quot;no font specified.&quot;);
 	}
 
<span class="hljs-deletion">-	/* Do not allow using color fonts. This is a workaround for a BadLength</span>
<span class="hljs-deletion">-	 * error from Xft with color glyphs. Modelled on the Xterm workaround. See</span>
<span class="hljs-deletion">-	 * https://bugzilla.redhat.com/show_bug.cgi?id=1498269</span>
<span class="hljs-deletion">-	 * https://lists.suckless.org/dev/1701/30932.html</span>
<span class="hljs-deletion">-	 * https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=916349</span>
<span class="hljs-deletion">-	 * and lots more all over the internet.</span>
<span class="hljs-deletion">-	 */</span>
<span class="hljs-deletion">-	FcBool iscol;</span>
<span class="hljs-deletion">-	if(FcPatternGetBool(xfont-&gt;pattern, FC_COLOR, 0, &amp;iscol) == FcResultMatch &amp;&amp; iscol) {</span>
<span class="hljs-deletion">-		XftFontClose(drw-&gt;dpy, xfont);</span>
<span class="hljs-deletion">-		return NULL;</span>
<span class="hljs-deletion">-	}</span>
<span class="hljs-deletion">-</span>
 	font = ecalloc(1, sizeof(Fnt));
 	font-&gt;xfont = xfont;
 	font-&gt;pattern = pattern;
</code></pre>
<p>I tried all of that, but still had the same issue! One important detail
that was missing from that video was that dmenu doesn‚Äôt support
<a href="https://github.com/valeriangalliat/dotfiles/blob/47506803600b0e5b194e35c56a835b54aae72f32/x11/fonts.conf">fontconfig‚Äôs fallback fonts</a>,
and you need to <a href="https://bbs.archlinux.org/viewtopic.php?id=255799">explicitly configure</a>
an emoji font in dmenu‚Äôs source, as you can see in <a href="https://github.com/LukeSmithxyz/dmenu/blob/3a6bc67fbd6df190b002d33f600a6465cad9cfb8/config.h#L8">Luke‚Äôs dmenu</a>.</p>
<pre><code class="hljs language-diff"><span class="hljs-comment">diff --git a/config.def.h b/config.def.h</span>
<span class="hljs-comment">index 1edb647..b55c45c 100644</span>
<span class="hljs-comment">--- a/config.def.h</span>
<span class="hljs-comment">+++ b/config.def.h</span>
<span class="hljs-meta">@@ -4,7 +4,8 @@</span>
 static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
 /* -fn option overrides fonts[0]; default X11 font or font set */
 static const char *fonts[] = {
<span class="hljs-deletion">-	&quot;monospace:size=10&quot;</span>
<span class="hljs-addition">+	&quot;monospace:size=10&quot;,</span>
<span class="hljs-addition">+	&quot;emoji:size=10&quot;</span>
 };
 static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
 static const char *colors[SchemeLast][2] = {
</code></pre>
<p>After doing so, the emojis did show up! üéâ</p>
<h2 id="automating-the-build" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html#automating-the-build">Automating the build</a></h2>
<p>This is great, but it still takes a lot of manual steps, and needs root
access to install libxft-bgra globally. I think this is unnecessary, and
I figured it would be cool to compile dmenu <em>statically</em> against the
patched libXft instead, without touching to the system.</p>
<p>This is something that can be done easily with the following patch,
assuming that the libxft-bgra source is in <code>../libxft</code> relative do the
dmenu source.</p>
<pre><code class="hljs language-diff"><span class="hljs-comment">diff --git a/config.mk b/config.mk</span>
<span class="hljs-comment">index 05d5a3e..05300a6 100644</span>
<span class="hljs-comment">--- a/config.mk</span>
<span class="hljs-comment">+++ b/config.mk</span>
<span class="hljs-meta">@@ -13,8 +13,8 @@</span> XINERAMALIBS  = -lXinerama
 XINERAMAFLAGS = -DXINERAMA
 
 # freetype
<span class="hljs-deletion">-FREETYPELIBS = -lfontconfig -lXft</span>
<span class="hljs-deletion">-FREETYPEINC = /usr/include/freetype2</span>
<span class="hljs-addition">+FREETYPELIBS = -lfontconfig -lfreetype -lXrender -lX11 -L../libxft/src/.libs -l:libXft.a</span>
<span class="hljs-addition">+FREETYPEINC = /usr/include/freetype2 -I$(PWD)/../libxft/include</span>
 # OpenBSD (uncomment)
 #FREETYPEINC = $(X11INC)/freetype2
 
</code></pre>
<p>Then libXft can be compiled with:</p>
<pre><code class="hljs language-sh">./autogen.sh
make
</code></pre>
<p>And dmenu with:</p>
<pre><code class="hljs language-sh">make
</code></pre>
<div class="note">
<p><strong>Note:</strong> libXft needs <code>xorg-util-macros</code> to be installed in order to
generate the man pages. Since I don‚Äôt really need that, I added a
further <a href="https://github.com/valeriangalliat/dmenumoji/blob/master/libxft.patch">patch</a>
that removes the check for this library, and build with <code>make SUBDIRS=src</code>
to ignore the <code>man</code> directory.</p>
</div>
<p>This leaves us with a statically linked version of dmenu against
libxft-bgra with proper support for colored glyphs. ü•≥</p>
<figure class="center">
  <img alt="dmenumoji in action" src="https://raw.githubusercontent.com/valeriangalliat/dmenumoji/master/preview.png">
  <figcaption>dmenumoji in action</figcaption>
</figure>
<p>Now, all we need is to combine all the earlier patches to a
<code>dmenu.patch</code>, and make a neat <a href="https://github.com/valeriangalliat/dmenumoji/blob/master/Makefile">makefile</a>
to do all that work for us, including cloning the dmenu and libXft
repositories, applying the BGRA patch as well as our dmenu patch, and
compiling everything.</p>
<pre><code class="hljs language-makefile"><span class="hljs-section">all: dmenu/dmenu</span>

<span class="hljs-section">dmenu/dmenu: dmenu libxft/src/.libs/libXft.a</span>
	make -C <span class="hljs-variable">$&lt;</span>

<span class="hljs-section">dmenu:</span>
	git clone --branch 5.0 https://git.suckless.org/dmenu
	patch -d <span class="hljs-variable">$@</span> &lt; dmenu.patch

<span class="hljs-section">libxft/src/.libs/libXft.a: libxft</span>
	cd <span class="hljs-variable">$&lt;</span> &amp;&amp; ./autogen.sh &amp;&amp; make SUBDIRS=src

<span class="hljs-section">libxft: libxft-bgra.patch</span>
	git clone https://gitlab.freedesktop.org/xorg/lib/libxft.git
	@<span class="hljs-comment"># Remove check for xorg-util-macros that&#x27;s only used to add `.1` at the</span>
	@<span class="hljs-comment"># end of a man page we&#x27;re not gonna use.</span>
	patch -d <span class="hljs-variable">$@</span> &lt; libxft.patch
	patch -d <span class="hljs-variable">$@</span> -p1 &lt; <span class="hljs-variable">$&lt;</span>

<span class="hljs-section">libxft-bgra.patch:</span>
	curl -o <span class="hljs-variable">$@</span> https://gitlab.freedesktop.org/xorg/lib/libxft/-/merge_requests/1.patch
</code></pre>
<p>With that, a simple <code>make</code> command gives us a fully working dmenu with
emoji support. You can find all of that (and more) in the <a href="https://github.com/valeriangalliat/dmenumoji">dmenumoji</a>
repo I created to bundle everything together!</p>
<h2 id="bonus-dynamically-linked-against-a-custom-location" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/dmenu-libxft-bgra-emoji-support.html#bonus-dynamically-linked-against-a-custom-location">Bonus: dynamically linked against a custom location</a></h2>
<p>Out of curiosity, I wanted to see what it would take, to dynamically
link to our patched version of libXft without installing it in the
standard library path (e.g. <code>/usr/lib</code>).</p>
<p>It turns out that you can pass linker options to the compiler through
the <code>-Wl</code> option, which allows us to use <code>-rpath</code> to append our custom
libXft directory (specifically the <code>src/.libs</code> path which is where
libXft builds the shared libraries) to the runtime library search path
of the executable.</p>
<pre><code class="hljs language-diff"><span class="hljs-comment">diff --git a/config.mk b/config.mk</span>
<span class="hljs-comment">index 05d5a3e..d3b05c5 100644</span>
<span class="hljs-comment">--- a/config.mk</span>
<span class="hljs-comment">+++ b/config.mk</span>
<span class="hljs-meta">@@ -13,8 +13,8 @@</span> XINERAMALIBS  = -lXinerama
 XINERAMAFLAGS = -DXINERAMA
 
 # freetype
<span class="hljs-deletion">-FREETYPELIBS = -lfontconfig -lXft</span>
<span class="hljs-deletion">-FREETYPEINC = /usr/include/freetype2</span>
<span class="hljs-addition">+FREETYPELIBS = -lfontconfig -lXft -Wl,-rpath $(PWD)/../libxft/src/.libs</span>
<span class="hljs-addition">+FREETYPEINC = /usr/include/freetype2 -I$(PWD)/../libxft/include</span>
 # OpenBSD (uncomment)
 #FREETYPEINC = $(X11INC)/freetype2
 
</code></pre>
<p>With that, our dmenu executable will know at runtime to dynamically load
our locally built libXft that has BGRA support, as long as we don‚Äôt move
it from the nonstandard path we hardcoded there.</p>
]]></content>
  </entry>
  <entry>
    <title>Super fast boot on Linux with EFISTUB üöÄ</title>
    <link href="https://www.codejam.info/2021/08/super-fast-boot-linux-efistub.html" />
    <id>https://www.codejam.info/2021/08/super-fast-boot-linux-efistub.html</id>
    <updated>2021-08-10T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>My friend <a href="https://www.damiengonot.com/">Damien</a> was recently installing
Arch Linux on a new rig, and while doing so he mentioned to me that he
installed it without GRUB.</p>
<p>So I ask him what other bootloader he used, and he‚Äôs like, no, I didn‚Äôt
use a bootloader, just <code>efibootmgr</code>.</p>
<p>I didn‚Äôt know this was possible, so I looked into it and quickly found
about EFISTUB.</p>
<h2 id="what-is-efistub" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/super-fast-boot-linux-efistub.html#what-is-efistub">What is EFISTUB</a></h2>
<p><a href="https://wiki.archlinux.org/title/EFISTUB">EFISTUB</a> allows ‚ÄúEFI firmware
to load the kernel as an EFI executable‚Äù. It was introduced in Linux
3.3, released in 2012. I should have known about that before. üòÖ</p>
<p>As the wiki says a bit later:</p>
<blockquote>
<p>UEFI is designed to remove the need for an intermediate bootloader
such as GRUB. If your motherboard has a good UEFI implementation, it
is possible to embed the kernel parameters within a UEFI boot entry
and for the motherboard to boot Arch directly.</p>
</blockquote>
<h2 id="configuring-efistub" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/super-fast-boot-linux-efistub.html#configuring-efistub">Configuring EFISTUB</a></h2>
<p>With <code>efibootmgr</code>, you can add an EFI boot entry that contains all the
parameters you need to properly boot the kernel, including in my case,
LUKS encryption and hibernation.</p>
<p>Here‚Äôs the command I used:</p>
<pre><code class="hljs language-sh">efibootmgr \
    --disk /dev/sda \
    --part 1 \
    --create \
    --label Linux \
    --loader /vmlinuz-linux \
    --unicode <span class="hljs-string">&#x27;cryptdevice=/dev/sda2:luks:allow-discards root=/dev/vg0/root resume=/dev/vg0/swap rw initrd=\initramfs-linux.img&#x27;</span>
</code></pre>
<p>Here, my EFI partition is <code>/dev/sda1</code>, and <code>/dev/sda2</code> is a LUKS
encrypted partition that uses LVM to have a <code>root</code> and a <code>swap</code> volume.
The swap is used to suspend to disk (hibernate). This setup is explained
in more details <a href="https://www.codejam.info/2021/08/2019/06/arch-linux-laptop-uefi-encrypted-disk-hibernation.html#installation">in this post</a>.</p>
<p>If your motherboard has a compliant EFI implementation, that‚Äôs all you
should need to remove the need for an intermediate bootloader!</p>
<p>After rebooting, it worked flawlessly, and what stroke me was how fast
it was to boot! Definitely worth giving it a shot. Also don‚Äôt forget to
<code>pacman -Rns grub</code> if it works for you. üòõ</p>
<p><strong>Fun fact:</strong> this is so simple to do you can fit the previous command
in a tweet!</p>
<blockquote>
<p>TIL you can use Linux EFISTUB to boot without an intermediate
bootloader (here with encryption and hibernation).</p>
<pre><code class="hljs language-sh">efibootmgr -d /dev/sda -p 1 -c -l /vmlinuz-linux -u <span class="hljs-string">&#x27;cryptdevice=/dev/sda2:luks:allow-discards root=/dev/vg0/root resume=/dev/vg0/swap rw initrd=\initramfs-linux.img&#x27;</span>
</code></pre>
<p>‚Äî <a href="https://twitter.com/valeriangalliat">@valeriangalliat</a>, <a href="https://twitter.com/valeriangalliat/status/1419304289751678980">July 25, 2021</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>A journey to scripting Firefox Sync / Lockwise: complete OAuth</title>
    <link href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html" />
    <id>https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html</id>
    <updated>2021-08-08T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<p>This article is part of a series about scripting Firefox Sync / Lockwise.</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: complete OAuth</li>
</ol>
</div>
<p>OK, this grew a bit out of hand. It all started a month ago when I just
wanted to programmatically access my Firefox Lockwise passwords. This
brought me on a long journey where I got to play with <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">legacy clients from 8 years ago</a>,
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">the Firefox Accounts and Firefox Sync APIs</a>,
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">the low level details of the BrowserID protocol</a>
and finally <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">its modern counterpart OAuth</a>.</p>
<p>But as I explained <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#going-further">at the end of the last article</a>,
this approach still had room for improvement as we weren‚Äôt using the
full benefits of OAuth. In particular, we still needed access to the
<em>plaintext user password</em> in order to authenticate to Firefox Accounts,
which results in <em>a ‚Äúgod mode‚Äù session token</em> that gives <em>full,
unrestricted access</em> to the user account, including fetching their
<em>primary key material</em> which is a requirement in order to decrypt the
Firefox Sync collections.</p>
<p>This is unideal and we can do better. The good thing is that even though
it wasn‚Äôt exactly easy to figure out, it‚Äôs possible.</p>
<h2 id="logging-in-with-oauth" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#logging-in-with-oauth">Logging in with OAuth</a></h2>
<p>The first thing we‚Äôll need to change is logging in with OAuth instead of
email/password.</p>
<p>The <a href="https://github.com/mozilla/fxa-crypto-relier/tree/master/docs">fxa-crypto-relier</a>
package is of great help for understanding how it works, but it seems to
be designed solely with browser extensions in mind, and is not directly
usable for us on the CLI. Otherwise, the <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa">integration with Firefox Accounts</a>
page seems to be the main documentation about implementing OAuth.</p>
<p>It notably mentions that the <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa#preparing-for-production">OAuth endpoints</a>
can be <a href="https://accounts.firefox.com/.well-known/openid-configuration">dynamically discovered</a>
through the standard <a href="https://openid.net/connect/">OpenID Connect protocol</a>,
meaning that our OAuth authorization endpoint will concretely be
<code>https://accounts.firefox.com/authorization</code>.</p>
<p>The <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa#user-authentication-with-oauth-20--openid-connect-in-a-nutshell">user authentication in a nutshell</a>
part does a great job at explaining the Firefox Accounts OAuth flow:</p>
<blockquote>
<ol>
<li>Create a state token (randomly generated and unguessable) and
associate it with a local session.</li>
<li>Send <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa#authorization-query-parameters"><code>/authorization</code> request</a>
to Firefox Accounts. Upon completion, Firefox Accounts redirects
back to your app with state and code.</li>
<li>Confirm the returned state token by comparing it with the state
token associated with the local session.</li>
<li>Exchange the code for an access token and possibly a refresh token.</li>
<li>If you asked for <code>scope=profile</code> you can fetch user profile
information, using the access token, from the FxA profile server.</li>
<li>Associate the profile information with the local session and create
an account in the local application database as needed.</li>
</ol>
</blockquote>
<p>Sweet and simple. Since we don‚Äôt have our own OAuth credentials
(<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#sending-emails-how-about-no">mostly because I don‚Äôt like sending emails</a>),
we‚Äôll <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#harvesting-a-client-id-from-the-android-app">keep using the client ID from the Android app</a>.</p>
<h3 id="generating-the-authorization-url" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#generating-the-authorization-url">Generating the authorization URL</a></h3>
<p>Let‚Äôs start by building the authorization URL. The parameters we need
<a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa#authorization-query-parameters">are listed here</a>.</p>
<blockquote>
<ol>
<li><code>client_id</code> (required).</li>
<li><code>scope</code> (required). This is a space separated string. Review the
list of <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa#scopes">scopes</a>.</li>
<li><code>state</code> (required). This must be a randomly generated unguessable string.</li>
<li><code>code_challenge</code> (required for PKCE). This is a hash of a randomly
generated string.</li>
<li><code>code_challenge_method</code> (required for PKCE) As of this writing only
<code>S256</code> is supported.</li>
<li><code>access_type</code> (suggested). This should be either <code>online</code> or <code>offline</code>.</li>
</ol>
</blockquote>
<p>I omitted other parameters that are not relevant to us. Let‚Äôs look in
more details at the ones we‚Äôll use.</p>
<dl>
<dt><code>scope</code></dt>
<dd>
<p>We use the scope <code>https://identity.mozilla.com/apps/oldsync</code> because
<a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/oauth/scopes.md#url-scopes">it is the one we need</a>
to access Firefox Sync data.</p>
<p>While <code>oldsync</code> here makes me feel like there must be something ‚Äúnew‚Äù
somewhere, it seems to be the latest and greatest way to access the Sync
data, so be it.</p>
</dd>
<dt><code>state</code></dt>
<dd>
<p>The <a href="https://auth0.com/docs/protocols/state-parameters">state parameter</a>
is designed to mitigate CSRF attacks. We‚Äôll mimic what
fxa-crypto-relier does and create <a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/relier/OAuthUtils.js#L77">16 bytes worth of random data</a>
and encode it <a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/relier/util.js#L32">as a Base64URL string</a>.
They also trim that final string to 16 characters but it seems that
this is mostly for code reuse purpose rather than out of actual
necessity so we‚Äôll leave that part alone.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> state = crypto.randomBytes(<span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)
</code></pre>
</dd>
<dt><code>code_challenge</code> and <code>code_challenge_method</code></dt>
<dd>
<p>The code challenge is a standard <a href="https://auth0.com/docs/flows/authorization-code-flow-with-proof-key-for-code-exchange-pkce">PKCE</a>
challenge, and the challenge method is <code>S256</code> (the only one
supported). Those parameters are <strong>required for public clients</strong>.
While it‚Äôs not mentioned on the previous page, it‚Äôs made clear on the
<a href="https://github.com/mozilla/fxa/blob/f6bc0268a9be12407456fa42494243f336d81a38/packages/fxa-auth-server/docs/api.md#request-body-18">Firefox Accounts API documentation</a>:</p>
<blockquote>
<p>Required for public OAuth clients, who must authenticate their
authorization code use via PKCE.</p>
</blockquote>
<p>Since the Android app we took the client ID from is a public client,
we‚Äôll pass those parameters.</p>
<p>Note that even though the <code>code_challenge_method</code> is
<a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa#authorization-query-parameters">documented</a>
with a lowercase <code>s</code>, it‚Äôs actually <a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/routes/validators.js#L116">validated as uppercase</a>.
I fixed it in the quote earlier to prevent unnecessary issues.</p>
</dd>
<dt><code>access_type</code></dt>
<dd>
<p>We set it to <code>offline</code> to get back a refresh token. This step is
optional but keep it in mind if you want to be able to refresh the
token without user interaction.</p>
</dd>
</dl>
<p>This gives us the following piece of code:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)

<span class="hljs-keyword">const</span> authorizationUrl = <span class="hljs-string">&#x27;https://accounts.firefox.com/authorization&#x27;</span>
<span class="hljs-keyword">const</span> scope = <span class="hljs-string">&#x27;https://identity.mozilla.com/apps/oldsync&#x27;</span>
<span class="hljs-keyword">const</span> clientId = <span class="hljs-string">&#x27;...&#x27;</span>

<span class="hljs-comment">// To prevent CSRF attacks.</span>
<span class="hljs-keyword">const</span> state = crypto.randomBytes(<span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)

<span class="hljs-comment">// Dead simple PKCE challenge implementation.</span>
<span class="hljs-keyword">const</span> codeVerifier = crypto.randomBytes(<span class="hljs-number">32</span>).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)
<span class="hljs-keyword">const</span> codeChallenge = crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(codeVerifier).digest(<span class="hljs-string">&#x27;base64url&#x27;</span>)

<span class="hljs-keyword">const</span> params = {
  <span class="hljs-attr">client_id</span>: clientId,
  scope,
  state,
  <span class="hljs-attr">code_challenge_method</span>: <span class="hljs-string">&#x27;S256&#x27;</span>,
  <span class="hljs-attr">code_challenge</span>: codeChallenge,
  <span class="hljs-attr">access_type</span>: <span class="hljs-string">&#x27;offline&#x27;</span>
}

<span class="hljs-keyword">const</span> url = <span class="hljs-string">`<span class="hljs-subst">${authorizationUrl}</span>?<span class="hljs-subst">${qs.stringify(params)}</span>`</span>

<span class="hljs-built_in">console</span>.log(url)
</code></pre>
<p>The code verifier is <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-4.1">defined by PKCE</a>
as a string of <a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/relier/OAuthUtils.js#L78">43 Base64URL charaters</a>,
which is effectively 32 bytes of entropy, hence <code>crypto.randomBytes(32)</code>.</p>
<blockquote>
<p>It is <strong>recommended</strong> that the output of a suitable random number
generator be used to create a 32-octet sequence. The octet sequence is
then Base64URL encoded to produce a 43-octet URL safe string to use as
the code verifier.</p>
</blockquote>
<p>The code challenge is also defined as a Base64URL encoded SHA-256 hash
of the code verifier, giving us a working two lines client
implementation of PKCE.</p>
<div class="note">
<p><strong>Note:</strong> I didn‚Äôt use a library like <a href="https://www.npmjs.com/package/pkce-challenge">pkce-challenge</a>
here because of a weird validation quirk in the Firefox Accounts OAuth
token endpoint that we‚Äôll use later.</p>
<p>While the <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-4.1">PKCE spec</a>
defines the alphabet of the code verifier as <code>ALPHA / DIGIT / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</code>,
the OAuth endpoint <a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/oauth/validators.js#L29">limits it to a Base64URL alphabet</a>
(ironically with a link to the RFC), leaving out the <code>.</code> and <code>~</code>
characters, and resulting in validation issues when using the
pkce-challenge library.</p>
<p>That being said this quirk is only for the <a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/routes/oauth/token.js#L353"><code>https://oauth.accounts.firefox.com/v1/token</code></a>
endpoint as exposed by Mozilla through OpenID Connect, but the alternate
endpoint <a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/routes/oauth/token.js#L382"><code>https://api.accounts.firefox.com/v1/oauth/token</code></a>
performs <a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/routes/validators.js#L22">proper validation</a>
and otherwise seems to behave in a consistent way, so it‚Äôs possible to
use it instead.</p>
<p>For now we just implement our Base64URL compatible PKCE challenge, since
it‚Äôs also a good way to see how PKCE works for learning purpose.</p>
</div>
<p>By visiting the generated URL, the user will be prompted to sign in with
their Firefox Account, and will be redirected to the configured OAuth
redirect URL, with an authorization code in the query string.</p>
<figure class="center">
  <img alt="Sign in to Firefox Sync page" src="https://www.codejam.info/img/2021/08/sign-in-firefox-sync.png">
</figure>
<p>Since we didn‚Äôt register our own OAuth app, and we borrowed the Android
client ID instead, we‚Äôre going to be redirected to the URL that‚Äôs
configured for the Android app. This is fine for educational purpose but
we‚Äôd need to register for proper OAuth credentials for this to be usable
in production.</p>
<p>As a good security practice to not leave the code in the URL, this page
will itself redirect to another page without the code in the URL, so we
can‚Äôt just extract it from there.</p>
<p>In order to grab the code and go on with the OAuth flow, we‚Äôll intercept
the redirect in the developer tools network tab. Make sure to tick the
persist/preserve logs option before logging in, otherwise the request
including the code will be wiped during the redirect. To find it more
easily, filter only HTML documents. The one we‚Äôre looking for starts
with <code>https://lockbox.firefox.com/fxa/android-redirect.html?code=</code>.</p>
<figure class="center">
  <img alt="Network tab intercepting OAuth redirect" src="https://www.codejam.info/img/2021/08/network-tab.png">
</figure>
<p>In the headers section on the right we can copy the value of the <code>code</code>
parameter, which we can feed to our script to continue the
authentication. Brilliant.</p>
<div class="note">
<p><strong>Note:</strong> for a legitimate OAuth client where you control the redirect
URL, don‚Äôt forget to validate that the <code>state</code> parameter matches the one
you originally passed in the authorization URL!</p>
</div>
<h3 id="trading-the-oauth-code-for-an-access-token" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#trading-the-oauth-code-for-an-access-token">Trading the OAuth code for an access token</a></h3>
<p>The next step is to trade the code we get back from the OAuth flow for a
proper token. Thanks to the <a href="https://accounts.firefox.com/.well-known/openid-configuration">OpenID Connect configuration</a>,
we know that the token endpoint is <code>https://oauth.accounts.firefox.com/v1/token</code>.
A quick search leads us to its <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/oauth/api.md#post-v1token">API documentation</a>.</p>
<p>This is where we‚Äôll send the code from the redirect URL, as well as the
PKCE code verifier we created earlier. But first we need to prompt the
user for the code. In a basic CLI, this would look something like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> readline = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;readline&#x27;</span>)

<span class="hljs-keyword">const</span> rl = readline.createInterface({ <span class="hljs-attr">input</span>: process.stdin, <span class="hljs-attr">output</span>: process.stdout })

<span class="hljs-keyword">const</span> code = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> rl.question(<span class="hljs-string">&#x27;Code: &#x27;</span>, resolve))
  .finally(<span class="hljs-function">() =&gt;</span> rl.close())
</code></pre>
<p>Then we can prepare the payload and send it to the token endpoint.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)

<span class="hljs-keyword">const</span> tokenEndpoint = <span class="hljs-string">&#x27;https://oauth.accounts.firefox.com/v1/token&#x27;</span>

<span class="hljs-keyword">const</span> oauthToken = <span class="hljs-keyword">await</span> fetch(tokenEndpoint, {
  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
  <span class="hljs-attr">headers</span>: {
    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>
  },
  <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify({
    <span class="hljs-attr">client_id</span>: clientId,
    <span class="hljs-attr">grant_type</span>: <span class="hljs-string">&#x27;authorization_code&#x27;</span>,
    <span class="hljs-attr">code_verifier</span>: codeVerifier,
    code
  })
})
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())

<span class="hljs-built_in">console</span>.log(oauthToken)
</code></pre>
<p>We get back an object that includes the OAuth access token, as well as a
refresh token if we specified <code>access_type: 'offline'</code> earlier.</p>
<p>This is great, but it doesn‚Äôt actually allows us to connect to Firefox
Sync. Why? Because as we saw in the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#unmasking-the-x-keyid-header">previous post</a>,
and specifically in <a href="https://github.com/mozilla-services/tokenserver#using-oauth">the TokenServer documentation</a>,
we need the <code>kid</code> field of some kind of encryption key that we
definitely don‚Äôt have.</p>
<blockquote>
<p>To access the user‚Äôs Sync data using OAuth, the client must obtain an
FxA OAuth <code>access_token</code> with scope <code>https://identity.mozilla.com/apps/oldsync</code>,
and the corresponding encryption key as a JWK. They send the OAuth
token in the <code>Authorization</code> header, and the <code>kid</code> field of the
encryption key in the <code>X-KeyID</code> header.</p>
</blockquote>
<p>This is not helping me a lot, but definitely just the access token we
managed to get is not enough. Previously, when we had the user‚Äôs
password and a session token for their Firefox Account, we could easily
compute the Sync key and hash it to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#actually-computing-the-x-keyid-header">make the <code>X-KeyID</code> header</a>
with the <code>keyRotationTimestamp</code>, but with our OAuth token, we can do
none of that anymore.</p>
<h2 id="getting-scoped-keys-the-theory" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#getting-scoped-keys-the-theory">Getting scoped keys: the theory</a></h2>
<p>By browsing the Firefox Ecosystem Platform, where I was already reading
about <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa">how to integrate with Firefox Accounts</a>,
I find a page about <a href="https://mozilla.github.io/ecosystem-platform/docs/process/becoming-a-sync-client">becoming a Sync client</a>.</p>
<p>Sadly, this page is not very useful at the moment.</p>
<figure class="center">
  <img alt="Becoming a Sync client ridiculous documentation" src="https://www.codejam.info/img/2021/08/becoming-a-sync-client.png">
</figure>
<p>When we first <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#unmasking-the-x-keyid-header">started playing with OAuth</a>,
we encountered <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1455219">a Bugzilla issue</a>
for the TokenServer to accept OAuth tokens. This issue contains <a href="https://docs.google.com/document/d/1IvQJFEBFz0PnL4uVlIvt8fBS_IPwSK-avK0BRIHucxQ">a link
to the OAuth flow spec on Google Docs</a>
titled ‚ÄúScoped encryption keys for Firefox Accounts‚Äù, and the first
thing in there is a note that it now <a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys">lives on the Firefox Ecosystem Platform</a>.</p>
<p>It is nested in the ‚Äútopic deep dives‚Äù category of the ‚Äúfor FxA
engineers‚Äù group, which explains why I didn‚Äôt notice it before, and
makes me feel like I‚Äôm probably not the target audience of this
document. üòÜ</p>
<div class="note">
<p><strong>Note:</strong> this document is approximately 6000 words. That‚Äôs about as
long as one blog post in this series. Is it as useful though?
Definitely.</p>
<p><a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys">Scoped encryption keys for Firefox Accounts</a>
is a masterpiece on end-to-end encryption, explaining in details how
they derive scoped keys for third-party apps to encrypt the user‚Äôs data,
in a way that algorithmically requires the user‚Äôs password, but without
exposing it to the app in question. All of that with support for
changing the primary password, as well as rotating and revoking keys.</p>
<p>While it‚Äôs very technical and requires some base cryptography knowledge,
it‚Äôs a fantastic piece that I would definitely recommend reading carefully
if you‚Äôre interested in this topic. Even if you‚Äôre new to cryptography,
you might end up opening dozens if not hundreds of tabs to understand
what‚Äôs going on, but it‚Äôll sure be worth the journey.</p>
</div>
<p>In this document, we notably read that Mozilla implemented <em>an extension
to OAuth</em> in order to securely share encryption keys with third-party
apps.</p>
<blockquote>
<p>To achieve this, we propose an extension to the standard OAuth
authorization flow by which relying applications can obtain encryption
keys in a secure and controlled manner.</p>
</blockquote>
<p>They describe this in the <a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys#protocol-flow">protocol flow</a>
section, which I‚Äôll sum up here (fasten your seatbelts).</p>
<ol>
<li>Generate a <a href="https://neuromancer.sk/std/nist/P-256">P-256 elliptic curve</a>
keypair (P-256 stands for ‚Äú256-bit prime field Weierstrass curve‚Äù,
and is also known as <code>secp256r1</code> and <code>prime256v1</code>) to be used for
<a href="https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman"><abbr title="Elliptic curve Diffie‚ÄìHellman">ECDH</abbr></a>.</li>
<li>Send the public key as a Base64URL encoded <a href="https://datatracker.ietf.org/doc/html/rfc7517"><abbr title="JSON Web Key">JWK</abbr></a>
in the OAuth parameters under <code>keys_jwk</code>.</li>
</ol>
<p>This will make the token endpoint return not only the access and refresh
tokens, but also a <code>keys_jwe</code> property. It‚Äôs formatted with
<a href="https://datatracker.ietf.org/doc/html/rfc7516#section-3.1"><abbr title="JSON Web Encryption">JWE</abbr> compact serialization</a>,
meaning that we have 5 Base64URL encoded segments separated by <code>.</code>: a
JSON header, an encryption key (empty in our case), the encryption <a href="https://en.wikipedia.org/wiki/Initialization_vector"><abbr title="Initialization vector">IV</abbr></a>,
the <a href="https://en.wikipedia.org/wiki/Ciphertext">ciphertext</a>, and the
<a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode">AES-GCM</a>
authentication tag.</p>
<ol start="3">
<li>Split the individual segments from <code>keys_jwe</code> and decode them.</li>
<li>Use the ephemeral public key that‚Äôs included in the JSON header as
<code>epk</code> to perform ECDH against the private key of our initial P-256
keypair.</li>
</ol>
<div class="note">
<p><strong>Note:</strong> according to Mozilla‚Äôs documentation, it seems that the key
we just established with ECDH should allow to decrypt the ciphertext
segment, which is a JWK of the application scoped key, including the
<code>kid</code> field that we need to transmit to the TokenServer. In practice we
just get unusable garbage, so something was definitely missing.</p>
<p>The following step is not documented by Mozilla. It‚Äôs what <a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/support/jwcrypto/src/ec.rs#L130">the Rust code</a>
behind the browser and mobile apps is doing, as well as <a href="https://github.com/mozilla/send/blob/7130c2e7b05e43cf1a6eb0ea534982f4dff780ea/app/fxa.js#L7">the code</a>
from the (now dead) Firefox Send app.</p>
</div>
<ol start="5">
<li>Perform <a href="https://datatracker.ietf.org/doc/html/rfc7518#section-4.6">Concat KDF</a>
(<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#deriving-the-shared-secret-with-concat-kdf">I‚Äôll come back to this later</a>)
on the previously derived key using a carefully crafted <code>OtherInfo</code>
buffer to obtain a symmetric key.</li>
<li>Use that key to decrypt the ciphertext segment with AES-256-GCM,
using the IV and authentication tag included in the payload, as well
as the raw Base64URL encoded header as <a href="https://datatracker.ietf.org/doc/html/rfc5084#section-1.5"><abbr title="Additional authenticated data">AAD</abbr></a>.</li>
</ol>
<p>The result JWK is our scoped key, and includes the <code>kid</code> field that we
need to send to the TokenServer in the <code>X-KeyID</code> header. The symmetric
key in the <code>k</code> field is the one we‚Äôll be able to use to encrypt and
decrypt the user‚Äôs data for that scope.</p>
<p><a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys#granting-access-to-sync-data">In the case of Firefox Sync</a>,
that <code>k</code> field is a 64 bytes key bundle, that can be decoded and split
in two 32 bytes slices to obtain the Sync encryption key and HMAC key
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#derive-sync-key">as we‚Äôve done before</a>.</p>
<p>Now that‚Äôs a lot to unpack, so let‚Äôs go through all of this again in
details, and this time with some actual code.</p>
<h2 id="getting-scoped-keys-the-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#getting-scoped-keys-the-code">Getting scoped keys: the code</a></h2>
<p>Let‚Äôs go back to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#generating-the-authorization-url">the code to make the authorization URL</a>
and include the <code>keys_jwk</code> field, that we found about earlier.</p>
<h3 id="sending-our-ecdh-public-key-in-keys-jwk" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#sending-our-ecdh-public-key-in-keys-jwk">Sending our ECDH public key in <code>keys_jwk</code></a></h3>
<p>First, we generate a <a href="https://neuromancer.sk/std/nist/P-256">P-256 elliptic curve</a>
keypair. It stands for ‚Äú256-bit prime field Weierstrass curve‚Äù, and it‚Äôs
also known as <code>secp256r1</code> and <code>prime256v1</code>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)

<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;ec&#x27;</span>, {
  <span class="hljs-attr">namedCurve</span>: <span class="hljs-string">&#x27;P-256&#x27;</span>
})
</code></pre>
<p>Then we serialize the public key as a Base64URL encoded JWK.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> publicJwk = kp.publicKey.export({ <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;jwk&#x27;</span> })
<span class="hljs-keyword">const</span> keysJwk = Buffer.from(<span class="hljs-built_in">JSON</span>.stringify(publicJwk)).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)
</code></pre>
<p>Finally, we add it to the parameters of our initial example.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> params = {
  <span class="hljs-attr">client_id</span>: clientId,
  scope,
  state,
  <span class="hljs-attr">code_challenge_method</span>: <span class="hljs-string">&#x27;S256&#x27;</span>,
  <span class="hljs-attr">code_challenge</span>: codeChallenge,
  <span class="hljs-attr">access_type</span>: <span class="hljs-string">&#x27;offline&#x27;</span>,
  <span class="hljs-attr">keys_jwk</span>: keysJwk
}
</code></pre>
<p>Indeed, after going through the OAuth flow and inputting the result
code, we now get back an extra <code>keys_jwe</code> parameter <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#trading-the-oauth-code-for-an-access-token">from the token endpoint</a>!
I‚Äôll continue from this step where we have the result of the token
endpoint in a <code>oauthToken</code> variable.</p>
<h3 id="parsing-keys-jwe" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#parsing-keys-jwe">Parsing <code>keys_jwe</code></a></h3>
<p>Because <code>keys_jwe</code> is formatted according to <a href="https://datatracker.ietf.org/doc/html/rfc7516#section-3.1">JWE compact serialization</a>
it‚Äôs made of 5 Base64URL encoded segments separated by a <code>.</code>, so let‚Äôs
parse it.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> rawSegments = oauthToken.keys_jwe.split(<span class="hljs-string">&#x27;.&#x27;</span>)
<span class="hljs-keyword">const</span> rawHeader = rawSegments[<span class="hljs-number">0</span>]
<span class="hljs-keyword">const</span> segments = rawSegments.map(<span class="hljs-function"><span class="hljs-params">segment</span> =&gt;</span> Buffer.from(segment, <span class="hljs-string">&#x27;base64&#x27;</span>))
<span class="hljs-keyword">const</span> header = <span class="hljs-built_in">JSON</span>.parse(segments[<span class="hljs-number">0</span>])
<span class="hljs-keyword">const</span> iv = segments[<span class="hljs-number">2</span>]
<span class="hljs-keyword">const</span> ciphertext = segments[<span class="hljs-number">3</span>]
<span class="hljs-keyword">const</span> authTag = segments[<span class="hljs-number">4</span>]
</code></pre>
<p>We left alone <code>segments[1]</code> because as we saw, it‚Äôs defined as an
encryption key by the JWE format but is not used in this protocol.</p>
<p>The parsed header looks something like this:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;enc&quot;</span>: <span class="hljs-string">&quot;A256GCM&quot;</span>,
  <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;ECDH-ES&quot;</span>,
  <span class="hljs-attr">&quot;kid&quot;</span>: <span class="hljs-string">&quot;IGJXkJzwHacMq2Qc52NZ_FBmt-uksqyXs8jC-pViIXM&quot;</span>,
  <span class="hljs-attr">&quot;epk&quot;</span>: {
    <span class="hljs-attr">&quot;kty&quot;</span>: <span class="hljs-string">&quot;EC&quot;</span>,
    <span class="hljs-attr">&quot;crv&quot;</span>: <span class="hljs-string">&quot;P-256&quot;</span>,
    <span class="hljs-attr">&quot;x&quot;</span>: <span class="hljs-string">&quot;UmI2Qm4DLbawF4E6UlmMvYAEomULFEBQiiJ7rxaQnY8&quot;</span>,
    <span class="hljs-attr">&quot;y&quot;</span>: <span class="hljs-string">&quot;cSC0O-tPAeJXl2s-2ACCxN6wCpDRnhB_ginYIBmfTgU&quot;</span>
  }
}
</code></pre>
<p>The <code>epk</code> property contains a JWK representation of the public key
matching the private key that Firefox Accounts used for its part of
ECDH. We‚Äôll refer to it as <code>peerKey</code>. In combination with the private
key from the initial P-256 keypair <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#sending-our-ecdh-public-key-in-keys-jwk">we created earlier</a>
in the <code>kp</code> variable, we can establish a shared secret through ECDH.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> peerKey = crypto.createPublicKey({
  <span class="hljs-attr">key</span>: header.epk,
  <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;jwk&#x27;</span>
})

<span class="hljs-keyword">const</span> ikm = crypto.diffieHellman({
  <span class="hljs-attr">privateKey</span>: kp.privateKey,
  <span class="hljs-attr">publicKey</span>: peerKey
})
</code></pre>
<p>We‚Äôll name this shared secret <code>ikm</code>, for input keying material, as we‚Äôre
effectively going to use it as input for a key derivation function.</p>
<h3 id="deriving-the-shared-secret-with-concat-kdf" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#deriving-the-shared-secret-with-concat-kdf">Deriving the shared secret with Concat KDF</a></h3>
<p>Here, we use <a href="https://datatracker.ietf.org/doc/html/rfc7518#section-4.6">Concat KDF</a>,
defined in more details in section 5.8.1 of <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf">NIST SP 800-56A</a>
‚ÄúThe single step key derivation function‚Äù to derive that shared secret
into the actual decryption key for our ciphertext.</p>
<div class="note">
<p><strong>Note:</strong> this process is not part of any public documentation at the
time of writing, and is the result of more hours that I‚Äôm willing to
admit, going through Mozilla‚Äôs codebase on GitHub, between the
<a href="https://github.com/mozilla/"><code>mozilla</code></a>,
<a href="https://github.com/mozilla-lockwise/"><code>mozilla-lockwise</code></a>,
<a href="https://github.com/mozilla-mobile/"><code>mozilla-mobile</code></a> and
<a href="https://github.com/mozilla-services/"><code>mozilla-services</code></a> organizations.</p>
<p>I was trying to understand specifically how the Lockwise mobile app
manages to access the Firefox Sync passwords, and it took me a while to
realize that the mobile apps were calling into native Rust code that was
taking care of the heavy lifting for OAuth and encryption (especially
because the <a href="https://en.wikipedia.org/wiki/Snake_case">snake case</a>
functions <a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/fxa-client/src/internal/oauth.rs#L311">from the Rust code</a>
are converted to <a href="https://en.wikipedia.org/wiki/Camel_case">camel case</a>
in <a href="https://github.com/mozilla-lockwise/lockwise-android/blob/d3c0511f73c34e8759e1bb597f2d3dc9bcc146f0/app/src/main/java/mozilla/lockbox/store/AccountStore.kt#L298">other</a>
<a href="https://github.com/mozilla-lockwise/lockwise-ios/blob/4d68f1283558a20e240527a8235c779becb1aa08/lockbox-ios/Store/AccountStore.swift#L186">languages</a>).</p>
<p>The most interesting part was the <a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/fxa-client/src/internal/oauth.rs#L325"><code>handle_oauth_response</code></a>,
function, which calls into <a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/fxa-client/src/internal/scoped_keys.rs#L58"><code>decrypt_keys_jwe</code></a>,
<a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/support/jwcrypto/src/ec.rs#L60"><code>decrypt_jwe</code></a>,
<a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/support/jwcrypto/src/ec.rs#L94"><code>derive_shared_secret</code></a>,
and finally <a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/support/jwcrypto/src/ec.rs#L130"><code>get_secret_from_ikm</code></a>
where we get the Concat KDF implementation details.</p>
<p>I later found the <a href="https://github.com/mozilla/send/blob/7130c2e7b05e43cf1a6eb0ea534982f4dff780ea/app/fxa.js#L7">implementation in Firefox Send</a>
which was also really useful to figure this out.</p>
</div>
<p><a href="https://crypto.stackexchange.com/a/85672">This answer on Stack Exchange</a>
gives a great overview of how Concat KDF works:</p>
<blockquote>
<p>Concat KDF hashes the concatenation of a 4-byte counter initialized at 1
(big-endian), the shared secret obtained by ECDH, and some other
information passed as input. The counter is incremented and the process
is repeated until enough data was produced.</p>
</blockquote>
<p>Since in our case the output key length is equal to the hash length
(they‚Äôre both 256 bits), we only need a partial implementation of Concat
KDF that performs a single iteration and doesn‚Äôt bother trimming the
output to the desired length.</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// For readability, helper to return a big-endian unsigned 32 bits</span>
<span class="hljs-comment">// integer as a buffer.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uint32BE</span> (<span class="hljs-params">number</span>) </span>{
  <span class="hljs-keyword">const</span> buffer = Buffer.alloc(<span class="hljs-number">4</span>)
  buffer.writeUint32BE(number)
  <span class="hljs-keyword">return</span> buffer
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sha256</span> (<span class="hljs-params">buffer</span>) </span>{
  <span class="hljs-keyword">return</span> crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(buffer).digest()
}

<span class="hljs-comment">// Partial implementation of Concat KDF that only does a single</span>
<span class="hljs-comment">// iteration and no trimming, because the length of the derived key we</span>
<span class="hljs-comment">// need matches the hash length.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatKdf</span> (<span class="hljs-params">key, otherInfo</span>) </span>{
  <span class="hljs-keyword">return</span> sha256(Buffer.concat([uint32BE(<span class="hljs-number">1</span>), key, otherInfo]))
}
</code></pre>
<p>That being said, for fun, here‚Äôs my understanding of a full Concat KDF
function (I‚Äôm not a cryptography expert though so get that properly
reviewed if you‚Äôre going to use it).</p>
<details>
  <summary>See the implementation</summary>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatKdf</span> (<span class="hljs-params">key, keyLengthBits, otherInfo</span>) </span>{
  <span class="hljs-keyword">const</span> hashLengthBits = <span class="hljs-number">256</span>
  <span class="hljs-keyword">const</span> hashLengthBytes = <span class="hljs-built_in">Math</span>.ceil(hashLengthBits / <span class="hljs-number">8</span>)
  <span class="hljs-keyword">const</span> keyLengthBytes = <span class="hljs-built_in">Math</span>.ceil(keyLengthBits / <span class="hljs-number">8</span>)
  <span class="hljs-keyword">const</span> out = Buffer.alloc(keyLengthBytes)
  <span class="hljs-keyword">const</span> iterations = <span class="hljs-built_in">Math</span>.ceil(keyLengthBytes / hashLengthBytes)

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; iterations; i++) {
    <span class="hljs-keyword">const</span> hash = sha256(Buffer.concat([uint32BE(i + <span class="hljs-number">1</span>), key, otherInfo]))
    <span class="hljs-keyword">const</span> offset = hashLengthBytes * i
    hash.copy(out, offset)
  }

  <span class="hljs-keyword">return</span> out
}
</code></pre>
</details>
<p>Anyways, we need to compute the <code>OtherInfo</code> parameter first. Concat KDF
only defines it <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf">as a bit string</a>
(see section 5.8.1.2), but Mozilla crafts a very specific one that we
need to reproduce. From their <a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/support/jwcrypto/src/ec.rs#L142">Rust code</a>
and the <a href="https://github.com/mozilla/send/blob/7130c2e7b05e43cf1a6eb0ea534982f4dff780ea/app/fxa.js#L7">Firefox Send JavaScript code</a>,
I ended up with:</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// Internal Mozilla format for Concat KDF `OtherInfo`, copied from</span>
<span class="hljs-comment">// Firefox Application Services and Firefox Send code.</span>
<span class="hljs-keyword">const</span> otherInfo = Buffer.concat([
  uint32BE(header.enc.length),
  Buffer.from(header.enc),
  uint32BE(<span class="hljs-number">0</span>),
  uint32BE(<span class="hljs-number">0</span>),
  uint32BE(<span class="hljs-number">256</span>)
])
</code></pre>
<details>
  <summary>See the original code for comparison</summary>
<p><a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/support/jwcrypto/src/ec.rs#L142">In Rust</a>:</p>
<pre><code class="hljs language-rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">get_secret_from_ikm</span></span>(
    ikm: InputKeyMaterial,
    apu: &amp;<span class="hljs-built_in">str</span>,
    apv: &amp;<span class="hljs-built_in">str</span>,
    alg: &amp;<span class="hljs-built_in">str</span>,
) -&gt; <span class="hljs-built_in">Result</span>&lt;digest::Digest&gt; {
    <span class="hljs-keyword">let</span> secret = ikm.derive(|z| {
        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> buf: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">u8</span>&gt; = <span class="hljs-built_in">vec!</span>[];

        <span class="hljs-comment">// Concat KDF (1 iteration since `keyLen &lt;= hashLen`).</span>
        <span class="hljs-comment">// See RFC 7518 section 4.6 for reference.</span>
        buf.extend_from_slice(&amp;<span class="hljs-number">1u32</span>.to_be_bytes());
        buf.extend_from_slice(&amp;z);

        <span class="hljs-comment">// `OtherInfo`</span>
        buf.extend_from_slice(&amp;(alg.len() <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>).to_be_bytes());
        buf.extend_from_slice(alg.as_bytes());
        buf.extend_from_slice(&amp;(apu.len() <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>).to_be_bytes());
        buf.extend_from_slice(apu.as_bytes());
        buf.extend_from_slice(&amp;(apv.len() <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>).to_be_bytes());
        buf.extend_from_slice(apv.as_bytes());
        buf.extend_from_slice(&amp;<span class="hljs-number">256u32</span>.to_be_bytes());

        digest::digest(&amp;digest::SHA256, &amp;buf)
    })?;
    <span class="hljs-literal">Ok</span>(secret)
}
</code></pre>
<p><a href="https://github.com/mozilla/send/blob/7130c2e7b05e43cf1a6eb0ea534982f4dff780ea/app/fxa.js#L7">In JavaScript</a>:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> encoder = <span class="hljs-keyword">new</span> TextEncoder()

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOtherInfo</span> (<span class="hljs-params">enc</span>) </span>{
  <span class="hljs-keyword">const</span> name = encoder.encode(enc)
  <span class="hljs-keyword">const</span> length = <span class="hljs-number">256</span>
  <span class="hljs-keyword">const</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(name.length + <span class="hljs-number">16</span>)
  <span class="hljs-keyword">const</span> dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataView</span>(buffer)
  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(buffer)
  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>

  dv.setUint32(i, name.length)
  i += <span class="hljs-number">4</span>
  result.set(name, i)
  i += name.length
  dv.setUint32(i, <span class="hljs-number">0</span>)
  i += <span class="hljs-number">4</span>
  dv.setUint32(i, <span class="hljs-number">0</span>)
  i += <span class="hljs-number">4</span>
  dv.setUint32(i, length)

  <span class="hljs-keyword">return</span> result
}
</code></pre>
</details>
<p>We can now derive that <code>OtherInfo</code> together with the input key material
we established earlier to get the decryption key.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> key = concatKdf(ikm, otherInfo)
</code></pre>
<h3 id="decrypting-the-ciphertext" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#decrypting-the-ciphertext">Decrypting the ciphertext</a></h3>
<p>Finally, we have everything we need to decrypt the ciphertext of the JWE
that <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#parsing-keys-jwe">we got back earlier</a>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> decipher = crypto.createDecipheriv(<span class="hljs-string">&#x27;aes-256-gcm&#x27;</span>, key, iv)

decipher.setAuthTag(authTag)
decipher.setAAD(rawHeader)

<span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">JSON</span>.parse(Buffer.concat([
  decipher.update(ciphertext),
  decipher.final()
]))

<span class="hljs-built_in">console</span>.log(keys)
</code></pre>
<p>This gives us something like this:</p>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;https://identity.mozilla.com/apps/oldsync&quot;</span>: {
    <span class="hljs-attr">&quot;kty&quot;</span>: <span class="hljs-string">&quot;oct&quot;</span>,
    <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;https://identity.mozilla.com/apps/oldsync&quot;</span>,
    <span class="hljs-attr">&quot;k&quot;</span>: <span class="hljs-string">&quot;e_9j35zPyTng1QT1ioegeZxPQOVUS10FdMNV1YIZuJ8zJIvQ-OZMiHiy3tLCMcc_mKTEopDpjzS9kqq-FmS4og&quot;</span>,
    <span class="hljs-attr">&quot;kid&quot;</span>: <span class="hljs-string">&quot;1628100899317-sLLG5AsHn9Fc1gPhW_rfaQ&quot;</span>
  }
}
</code></pre>
<p>If we had requested an <a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys#application-specific-keys">application specific key</a>,
we would have gotten back a 32 bytes scoped key <a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys#deriving-scoped-keys-ks">as defined in ‚Äúderiving scoped keys‚Äù</a>.</p>
<p>However since we requested the special scope
<code>https://identity.mozilla.com/apps/oldsync</code> which is meant to give
access to Firefox Sync in a backwards compatible way, <a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys#granting-access-to-sync-data">it‚Äôs treated a bit differently</a>
and we get 64 bytes of key material, the same that we previously
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#derive-sync-key">derived from the user‚Äôs primary key</a>
using HKDF in the <code>deriveKeys</code> function of our non-OAuth implementation.</p>
<p>The main difference is that here, the Firefox Accounts login page
<a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/deriver/ScopedKeys.js#L107">is the one</a>
to perform HKDF, so that we never get access to the user‚Äôs primary key,
which is a cool security feature.</p>
<h2 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#putting-it-all-together">Putting it all together</a></h2>
<p>Because the JWK we get back after decrypting <code>keys_jwe</code> from that custom
OAuth dance contains the same 64 bytes of key material that we used to
derive from the user‚Äôs primary key, it means that by splitting it in two
32 bytes slices, we get the exact same Sync encryption key and HMAC key
than before.</p>
<p>As importantly, this JWK also contains the <code>kid</code> field which is the
missing piece of the puzzle to be able to <a href="https://github.com/mozilla-services/tokenserver#using-oauth">call the TokenServer</a>
in order to get the Firefox Sync API credentials.</p>
<blockquote>
<p>To access the user‚Äôs Sync data using OAuth, the client must obtain an
FxA OAuth <code>access_token</code> with scope <code>https://identity.mozilla.com/apps/oldsync</code>,
and the corresponding encryption key as a JWK. They send the OAuth
token in the <code>Authorization</code> header, <strong>and the <code>kid</code> field of the
encryption key in the <code>X-KeyID</code> header</strong>.</p>
</blockquote>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> tokenServerUrl = <span class="hljs-string">&#x27;https://token.services.mozilla.com&#x27;</span>

<span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">${tokenServerUrl}</span>/1.0/sync/1.5`</span>, {
  <span class="hljs-attr">headers</span>: {
    <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${oauthToken.access_token}</span>`</span>,
    <span class="hljs-string">&#x27;X-KeyID&#x27;</span>: keys[scope].kid
  }
})
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
</code></pre>
<p>From there, the rest of the code is going to be <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#actually-calling-firefox-sync">the same as our original BrowserID implementation</a>!</p>
<p>The only difference is that we already have the Sync key bundle in our
JWK, so we don‚Äôt need the <code>deriveKeys</code> function anymore. Instead, we
only to need to split the <code>k</code> field to separate the encryption key from
the HMAC key:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> rawBundle = Buffer.from(keys[scope].k)

<span class="hljs-keyword">const</span> syncKeyBundle = {
  <span class="hljs-attr">encryptionKey</span>: rawBundle.slice(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>),
  <span class="hljs-attr">hmacKey</span>: rawBundle.slice(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>)
}
</code></pre>
<p>This is enough to decrypt the response of <code>storage/crypto/keys</code>, which
in turn gives us the keys to decrypt the user‚Äôs passwords, bookmarks
and other collections.</p>
<h2 id="the-code-all-the-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#the-code-all-the-code">The code, all the code!</a></h2>
<p>If you were to take all the small blocks of code from this post and put
them together, you would get something like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)
<span class="hljs-keyword">const</span> readline = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;readline&#x27;</span>)
<span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)

<span class="hljs-keyword">const</span> authorizationUrl = <span class="hljs-string">&#x27;https://accounts.firefox.com/authorization&#x27;</span>
<span class="hljs-keyword">const</span> tokenEndpoint = <span class="hljs-string">&#x27;https://oauth.accounts.firefox.com/v1/token&#x27;</span>
<span class="hljs-keyword">const</span> tokenServerUrl = <span class="hljs-string">&#x27;https://token.services.mozilla.com&#x27;</span>
<span class="hljs-keyword">const</span> scope = <span class="hljs-string">&#x27;https://identity.mozilla.com/apps/oldsync&#x27;</span>
<span class="hljs-keyword">const</span> clientId = <span class="hljs-string">&#x27;e7ce535d93522896&#x27;</span>

<span class="hljs-comment">// For readability, helper to return a big-endian unsigned 32 bits</span>
<span class="hljs-comment">// integer as a buffer.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uint32BE</span> (<span class="hljs-params">number</span>) </span>{
  <span class="hljs-keyword">const</span> buffer = Buffer.alloc(<span class="hljs-number">4</span>)
  buffer.writeUint32BE(number)
  <span class="hljs-keyword">return</span> buffer
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sha256</span> (<span class="hljs-params">buffer</span>) </span>{
  <span class="hljs-keyword">return</span> crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(buffer).digest()
}

<span class="hljs-comment">// Partial implementation of Concat KDF that only does a single</span>
<span class="hljs-comment">// iteration and no trimming, because the length of the derived key we</span>
<span class="hljs-comment">// need matches the hash length.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatKdf</span> (<span class="hljs-params">key, otherInfo</span>) </span>{
  <span class="hljs-keyword">return</span> sha256(Buffer.concat([uint32BE(<span class="hljs-number">1</span>), key, otherInfo]))
}

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// To prevent CSRF attacks.</span>
  <span class="hljs-keyword">const</span> state = crypto.randomBytes(<span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)

  <span class="hljs-comment">// Dead simple PKCE challenge implementation.</span>
  <span class="hljs-keyword">const</span> codeVerifier = crypto.randomBytes(<span class="hljs-number">32</span>).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)
  <span class="hljs-keyword">const</span> codeChallenge = crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(codeVerifier).digest(<span class="hljs-string">&#x27;base64url&#x27;</span>)

  <span class="hljs-comment">// Keypair to obtain a shared secret from Firefox Accounts via ECDH.</span>
  <span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;ec&#x27;</span>, {
    <span class="hljs-attr">namedCurve</span>: <span class="hljs-string">&#x27;P-256&#x27;</span>
  })

  <span class="hljs-keyword">const</span> publicJwk = kp.publicKey.export({ <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;jwk&#x27;</span> })
  <span class="hljs-keyword">const</span> keysJwk = Buffer.from(<span class="hljs-built_in">JSON</span>.stringify(publicJwk)).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)

  <span class="hljs-keyword">const</span> params = {
    <span class="hljs-attr">client_id</span>: clientId,
    scope,
    state,
    <span class="hljs-attr">code_challenge_method</span>: <span class="hljs-string">&#x27;S256&#x27;</span>,
    <span class="hljs-attr">code_challenge</span>: codeChallenge,
    <span class="hljs-attr">access_type</span>: <span class="hljs-string">&#x27;offline&#x27;</span>,
    <span class="hljs-attr">keys_jwk</span>: keysJwk
  }

  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`<span class="hljs-subst">${authorizationUrl}</span>?<span class="hljs-subst">${qs.stringify(params)}</span>`</span>

  <span class="hljs-built_in">console</span>.log(url)

  <span class="hljs-keyword">const</span> rl = readline.createInterface({ <span class="hljs-attr">input</span>: process.stdin, <span class="hljs-attr">output</span>: process.stdout })

  <span class="hljs-keyword">const</span> code = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> rl.question(<span class="hljs-string">&#x27;Code: &#x27;</span>, resolve))
    .finally(<span class="hljs-function">() =&gt;</span> rl.close())

  <span class="hljs-keyword">const</span> oauthToken = <span class="hljs-keyword">await</span> fetch(tokenEndpoint, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>
    },
    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify({
      <span class="hljs-attr">client_id</span>: clientId,
      <span class="hljs-attr">grant_type</span>: <span class="hljs-string">&#x27;authorization_code&#x27;</span>,
      <span class="hljs-attr">code_verifier</span>: codeVerifier,
      code
    })
  })
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())

  <span class="hljs-keyword">const</span> rawSegments = oauthToken.keys_jwe.split(<span class="hljs-string">&#x27;.&#x27;</span>)
  <span class="hljs-keyword">const</span> rawHeader = rawSegments[<span class="hljs-number">0</span>]
  <span class="hljs-keyword">const</span> segments = rawSegments.map(<span class="hljs-function"><span class="hljs-params">segment</span> =&gt;</span> Buffer.from(segment, <span class="hljs-string">&#x27;base64&#x27;</span>))
  <span class="hljs-keyword">const</span> header = <span class="hljs-built_in">JSON</span>.parse(segments[<span class="hljs-number">0</span>])
  <span class="hljs-keyword">const</span> iv = segments[<span class="hljs-number">2</span>]
  <span class="hljs-keyword">const</span> ciphertext = segments[<span class="hljs-number">3</span>]
  <span class="hljs-keyword">const</span> authTag = segments[<span class="hljs-number">4</span>]

  <span class="hljs-keyword">const</span> peerKey = crypto.createPublicKey({
    <span class="hljs-attr">key</span>: header.epk,
    <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;jwk&#x27;</span>
  })

  <span class="hljs-keyword">const</span> ikm = crypto.diffieHellman({
    <span class="hljs-attr">privateKey</span>: kp.privateKey,
    <span class="hljs-attr">publicKey</span>: peerKey
  })

  <span class="hljs-comment">// Internal Mozilla format for Concat KDF `OtherInfo`, copied from</span>
  <span class="hljs-comment">// Firefox Application Services and Firefox Send code.</span>
  <span class="hljs-keyword">const</span> otherInfo = Buffer.concat([
    uint32BE(header.enc.length),
    Buffer.from(header.enc),
    uint32BE(<span class="hljs-number">0</span>),
    uint32BE(<span class="hljs-number">0</span>),
    uint32BE(<span class="hljs-number">256</span>)
  ])

  <span class="hljs-keyword">const</span> key = concatKdf(ikm, otherInfo)
  <span class="hljs-keyword">const</span> decipher = crypto.createDecipheriv(<span class="hljs-string">&#x27;aes-256-gcm&#x27;</span>, key, iv)

  decipher.setAuthTag(authTag)
  decipher.setAAD(rawHeader)

  <span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">JSON</span>.parse(Buffer.concat([
    decipher.update(ciphertext),
    decipher.final()
  ]))

  <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">${tokenServerUrl}</span>/1.0/sync/1.5`</span>, {
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${oauthToken.access_token}</span>`</span>,
      <span class="hljs-string">&#x27;X-KeyID&#x27;</span>: keys[scope].kid
    }
  })
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())

  <span class="hljs-keyword">const</span> rawBundle = Buffer.from(keys[scope].k)

  <span class="hljs-keyword">const</span> syncKeyBundle = {
    <span class="hljs-attr">encryptionKey</span>: rawBundle.slice(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>),
    <span class="hljs-attr">hmacKey</span>: rawBundle.slice(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>)
  }

  <span class="hljs-built_in">console</span>.log(token)
  <span class="hljs-built_in">console</span>.log(syncKeyBundle)
}

main()
</code></pre>
<p>From there, you have everything you need to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#actually-calling-firefox-sync">actually call Firefox Sync</a>
and decrypt its responses. This piece of code is already long enough so
I won‚Äôt include that part again here.</p>
<p>Needless to say this code is not production ready, and can be considered
to be more of an academic resource for learning purpose. If you‚Äôre going
to use it, please refactor it in a more maintainable way and add proper
error handling! Also if you need help integrating Firefox Accounts to
your app, feel free to <a href="https://www.codejam.info/val.html#links">reach out</a>, I‚Äôm open to
contracting work.</p>
<h2 id="a-note-about-granular-scopes" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#a-note-about-granular-scopes">A note about granular scopes</a></h2>
<p>Mozilla‚Äôs <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/oauth/scopes.md#url-scopes">OAuth scopes documentation</a>
mentions a set of scopes that would allow granular access to the Sync
data, for instance <code>https://identity.mozilla.com/apps/oldsync/bookmarks</code>
to get access to the user‚Äôs bookmarks data only but not other
collections, <code>https://identity.mozilla.com/apps/oldsync#read</code> to get
read-only access, or even
<code>https://identity.mozilla.com/apps/oldsync/history#write</code> for write-only
access to just the history collection.</p>
<p>Because the encryption key is shared by every Firefox Sync client, we
can decrypt any of the user‚Äôs Sync collections, even if we had requested
a more restricted scope.</p>
<p>The permissions are instead implemented at the API level, so that for
instance, a Sync client with a ‚Äúbookmarks‚Äù scope in its OAuth token
cannot retrieve data from the ‚Äúhistory‚Äù collection, <a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys#granting-access-to-sync-data">as explained here</a>:</p>
<blockquote>
<p>The existing Sync service does not support using different encryption
keys to access different subsets of its data, so we must give the same
key material for scope <code>sync</code> or for <code>sync:bookmarks</code>. But we can
enforce access restrictions at the service level by ensuring that an
access token with scope <code>sync:bookmarks</code> cannot be used to retrieve
the user‚Äôs encrypted history data.</p>
</blockquote>
<p>Similarly, I assume that read/write restrictions are also ensured at
the service level, by only allowing <code>GET</code> requests for clients with a
<code>#read</code> scope, or <code>POST</code>, <code>PUT</code> and <code>DELETE</code> for <code>#write</code> clients.</p>
<p>In practice though, I couldn‚Äôt find any such restriction in <a href="https://github.com/mozilla-services/syncstorage-rs"><code>syncstorage-rs</code></a>,
the code behind the Firefox Sync API. I also found out that I couldn‚Äôt
request granular scopes during the OAuth process. When I requested a
collection-specific scope, a read-only or a write-only scope, the OAuth
token endpoint didn‚Äôt return a <code>keys_jwe</code> even though I specified
<code>keys_jwk</code> as part of the authorization parameters.</p>
<p>This makes me think that while the granular scopes are documented,
they‚Äôre not yet implemented, and the only way to get access to Firefox
Sync data right now is to request full access.</p>
<p>Please let me know if I missed something, or if this was to change!</p>
<h2 id="a-note-about-client-id-and-redirect-url" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#a-note-about-client-id-and-redirect-url">A note about client ID and redirect URL</a></h2>
<p>In this post, for convenience and learning purpose, we used the public
OAuth client ID <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#harvesting-a-client-id-from-the-android-app">from the Android app</a>,
because we‚Äôd otherwise need to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#sending-emails-how-about-no">email Mozilla</a>
to ‚Äúdocument our expectations and timelines‚Äù to get proper OAuth
credentials.</p>
<p>As we saw, I‚Äôm not interested in documenting my expectations and
timeline. This means that we need to inspect the network traffic during
the OAuth redirect to harvest the authorization code and inject it back
in our script. But if you‚Äôre reading this, you might be have a real-life
application that justifies getting your own OAuth credentials. If it‚Äôs
your case, everything you need to know is <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa">here</a>.</p>
<p>Lastly, even if I could configure my own OAuth redirect URL, the current
flow doesn‚Äôt make it convenient to build a CLI or embedded application.
Maybe accessing Firefox Sync collections from a TV, toaster, or a remote
headless server isn‚Äôt the top use cases one would think of, but I
wouldn‚Äôt be surprised if someone came up with applications for those.</p>
<p>For example, Google have an <a href="https://developers.google.com/identity/protocols/oauth2/limited-input-device">alternative flow for limited input devices</a>
which works by displaying a short URL and code to the user to grant
permissions to an embedded application from a more capable device.</p>
<p>They also support <a href="https://www.codejam.info/2021/02/google-oauth-from-cli-application.html">a copy/paste method</a>
where instead of being redirected, the user gets back a code to paste in
the application, making it convenient for a CLI running on a remote
headless server, where you otherwise would need to setup SSH port
forwarding or similar to support a loopback redirect URL.</p>
<p>While Google discourages this method, it solves a real use case for me
and I think that it‚Äôs a good inspiration for future improvements to the
Firefox Accounts OAuth flow. The limited input device method is also a
nice fallback!</p>
<h2 id="a-note-about-security-and-more" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#a-note-about-security-and-more">A note about security, and more‚Ä¶</a></h2>
<p>I strongly believe that proper security is achieved by ensuring that the
most secure options are the easiest to implement and to use by design.
Obviously this is idealistic and not always possible.</p>
<p>In the case of Lockwise and Firefox Sync, not only the OAuth method was
far from obvious to learn about, but I think that the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#sending-emails-how-about-no">manual process</a>
required to create new OAuth clients adds some unnecessary friction to
building a more secure web.</p>
<p>While the complete OAuth flow we explored in this posts brings great
security improvements by introducing a mechanism to grant third-party
access to the user‚Äôs data without revealing their password and primary
key, it is in practice much harder to implement than the Firefox
Accounts ‚Äúgod mode‚Äù session token that I started with, which also
happens to comes with a fully featured JS client and easy to find
real-world examples online.</p>
<p>Overall, it feels to me that Mozilla doesn‚Äôt expect people to be
interested in building third-party apps off Firefox Sync. For example
<a href="https://github.com/mozilla/fxa/issues/5794#issuecomment-652025759">in this response on GitHub</a>
they seem surprised that someone would try to authenticate to Firefox
Accounts from their own code, or <a href="https://www.mail-archive.com/sync-dev@mozilla.org/msg01711.html">in this email thread reply</a>,
Ryan is curious about why one would want to programmatically access
Firefox Sync data, and the fact the <a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys">scoped encryption keys</a>
documentation is hidden in a ‚Äúfor FxA engineers‚Äù section shows that they
only expect Mozillians to build off those blocks.</p>
<p>It‚Äôs undeniable that the openness of Let‚Äôs Encrypt (alright, also the
fact it‚Äôs free) greatly contributed to its whopping success, and the
<a href="https://letsencrypt.org/docs/client-options/">literally hundreds</a> of
third-party clients and integrations demonstrate that. I think that the
ecosystem Mozilla built around Firefox Accounts and Firefox Sync
features some awesome pieces of technology and infrastructure that are
well worth basing off and extending, and I could see it having a similar
success if it was more inviting to integrate with.</p>
<h2 id="closing-thoughts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#closing-thoughts">Closing thoughts</a></h2>
<p>After nearly 20,000 words, this is the end of this in-depth exploration
of Lockwise, Firefox Sync and their underlying APIs and protocols.</p>
<p>This series is the result of the distillation of <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#documentation">FORTY TWO pieces of content online</a>
as well as learning from the code of <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#code">11 different repositories</a>.</p>
<p>While I thought that I would just quickly put together a CLI app to my
access my Lockwise passwords, my quest for perfection pushed me to
continue and spend <strong>a whole month</strong> to grasp all the details of the
protocol, and not only have functional code to read and write to Firefox
Sync, but more importantly write everything down in a comprehensive way,
that I believe is the most up-to-date, accurate and practical
documentation on the topic as of the time of writing.</p>
<p>In this last post, we saw how to leverage the full OAuth flow to access
Firefox Sync collections without ever gaining access to the user‚Äôs
password and primary key, effectively delegating more of the security
responsibilities to Firefox Accounts.</p>
<p>Generally, we gained a deep understanding of how Firefox Accounts and
Firefox Sync implement end-to-end encryption for its user data, and how
they do so in a way that‚Äôs reviewable, and that we tested by interacting
at a low level with their APIs and encryption schemes. While I‚Äôm not
qualified to tell if this is bulletproof for any possible threat model,
I definitely feel <em>even more confident</em> using Lockwise as my password
manager after reviewing its underlying implementation.</p>
<p>I‚Äôm grateful for Mozilla to share their source code and publicly document
the protocols they use and designed, even if it was not always perfectly
accurate or up-to-date. Their work allowed me to deepen my understanding
of cryptography in order to build a compatible client, and I believe
that the schemes behind Firefox Accounts and Sync encryption are
exemplary in respect to encrypting user data end-to-end, without
sacrificing too much (if any) convenience or flexibility.</p>
<h2 id="bonus-references" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#bonus-references">Bonus: references</a></h2>
<p>Let‚Äôs use the following script to extract all the references from this
series.</p>
<pre><code class="hljs language-sh">grep -Eoh <span class="hljs-string">&#x27;[(&lt;]http[^)]+[)&gt;]&#x27;</span> 2021/08/scripting-firefox-sync-lockwise-* \
  | sed <span class="hljs-string">&#x27;s/^.//;s/.$//&#x27;</span> | sed <span class="hljs-string">&#x27;s/#.*$//&#x27;</span> \
  | sort | uniq -c
</code></pre>
<p>With some quick filtering and formatting, here‚Äôs the list!</p>
<h3 id="documentation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#documentation">Documentation</a></h3>
<table>
<thead>
<tr>
<th style="text-align:right">References</th>
<th>Domain</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td><code>auth0.com</code></td>
<td><a href="https://auth0.com/docs/applications/confidential-and-public-applications">Confidential and public applications</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>auth0.com</code></td>
<td><a href="https://auth0.com/docs/flows/authorization-code-flow-with-proof-key-for-code-exchange-pkce">Authorization code flow with proof key for code exchange (PKCE)</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>auth0.com</code></td>
<td><a href="https://auth0.com/docs/protocols/state-parameters">Prevent attacks and redirect users with OAuth 2.0 state parameters</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>base64.guru</code></td>
<td><a href="https://base64.guru/standards/base64url">Base64URL</a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><code>bugzilla.mozilla.org</code></td>
<td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1455219">Accept FxA OAuth tokens for authorization in TokenServer</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>crypto.stackexchange.com</code></td>
<td><a href="https://crypto.stackexchange.com/a/85672">How does the Concat KDF work?</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>datatracker.ietf.org</code></td>
<td><a href="https://datatracker.ietf.org/doc/html/rfc5084">Using AES-CCM and AES-GCM authenticated encryption in the cryptographic message syntax (CMS)</a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><code>datatracker.ietf.org</code></td>
<td><a href="https://datatracker.ietf.org/doc/html/rfc7516">JSON Web Encryption (JWE)</a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><code>datatracker.ietf.org</code></td>
<td><a href="https://datatracker.ietf.org/doc/html/rfc7517">JSON Web Key (JWK)</a></td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td><code>datatracker.ietf.org</code></td>
<td><a href="https://datatracker.ietf.org/doc/html/rfc7518">JSON Web Algorithms (JWA)</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>datatracker.ietf.org</code></td>
<td><a href="https://datatracker.ietf.org/doc/html/rfc7636">Proof key for code exchange by OAuth public clients</a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><code>docs.google.com</code></td>
<td><a href="https://docs.google.com/document/d/1IvQJFEBFz0PnL4uVlIvt8fBS_IPwSK-avK0BRIHucxQ">Scoped encryption keys for Firefox Accounts</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>en.wikipedia.org</code></td>
<td><a href="https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman">Elliptic curve Diffie‚ÄìHellman</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa-auth-server/blob/master/fxa-oauth-server/docs/api.md">Firefox Accounts OAuth server API</a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa-auth-server/wiki/onepw-protocol">onepw protocol</a></td>
</tr>
<tr>
<td style="text-align:right">9</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md">Firefox Accounts authentication server API</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/oauth/api.md">Firefox Accounts OAuth server API</a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/oauth/scopes.md">OAuth scopes</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa-crypto-relier/tree/master/docs">Firefox Accounts scoped key relier documentation</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa/issues/5794">Unable to sign in with fxa-js-client</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/fxa/pull/5993">Unified fxa-auth-client</a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/hawk/blob/main/API.md">Hawk introduction</a></td>
</tr>
<tr>
<td style="text-align:right">11</td>
<td><code>github.com</code></td>
<td><a href="https://github.com/mozilla/id-specs/blob/prod/browserid/index.md">BrowserID specification</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>hacks.mozilla.org</code></td>
<td><a href="https://hacks.mozilla.org/2011/07/introducing-browserid-easier-and-safer-authentication-on-the-web/">Introducing BrowserID ‚Äì easier and safer authentication on the web</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>medium.com</code></td>
<td><a href="https://medium.com/mozilla-tech/how-firefox-sync-keeps-your-secrets-if-tls-fails-14420d45885c">How Firefox Sync keeps your secrets if TLS fails</a></td>
</tr>
<tr>
<td style="text-align:right">8</td>
<td><code>mozilla.github.io</code></td>
<td><a href="https://mozilla.github.io/ecosystem-platform/docs/fxa-engineering/fxa-scoped-keys">Scoped encryption keys for Firefox Accounts</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>mozilla.github.io</code></td>
<td><a href="https://mozilla.github.io/ecosystem-platform/docs/process/becoming-a-sync-client">Becoming a Sync client</a></td>
</tr>
<tr>
<td style="text-align:right">9</td>
<td><code>mozilla.github.io</code></td>
<td><a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa">Integration with FxA</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>mozilla.github.io</code></td>
<td><a href="https://mozilla.github.io/id-specs/docs/formats/keys/">BrowserID specs - public key format</a></td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td><code>mozilla-services.readthedocs.io</code></td>
<td><a href="https://mozilla-services.readthedocs.io/en/latest/storage/apis-1.5.html">SyncStorage API v1.5</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>mozilla-services.readthedocs.io</code></td>
<td><a href="https://mozilla-services.readthedocs.io/en/latest/sync/index.html">Sync client documentation</a></td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td><code>mozilla-services.readthedocs.io</code></td>
<td><a href="https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html">Global storage version 5</a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><code>neuromancer.sk</code></td>
<td><a href="https://neuromancer.sk/std/nist/P-256">Standard curve database - P-256</a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><code>nodejs.org</code></td>
<td><a href="https://nodejs.org/api/crypto.html">Node.js documentation - <code>crypto</code></a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><code>nvlpubs.nist.gov</code></td>
<td><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf">Recommendation for pair-wise key establishment schemes using discrete logarithm cryptography</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>openid.net</code></td>
<td><a href="https://openid.net/connect/">OpenID Connect</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>stackoverflow.com</code></td>
<td><a href="https://stackoverflow.com/questions/35313330/firefox-sync-api-does-it-exist">Firefox Sync API - does it exist?</a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><code>vladikoff.github.io</code></td>
<td><a href="https://vladikoff.github.io/app-services-site/docs/accounts/welcome.html">About Firefox Accounts</a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>mail-archive.com</code></td>
<td><a href="https://www.mail-archive.com/sync-dev@mozilla.org/msg01710.html">Getting <code>X-KeyID</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><code>mail-archive.com</code></td>
<td><a href="https://www.mail-archive.com/sync-dev@mozilla.org/msg01711.html">Re: Getting <code>X-KeyID</code></a></td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td><code>npmjs.com</code></td>
<td><a href="https://www.npmjs.com/package/browserid-crypto">browserid-crypto</a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><code>npmjs.com</code></td>
<td><a href="https://www.npmjs.com/package/fxa-js-client">fxa-js-client</a></td>
</tr>
</tbody>
</table>
<h3 id="code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#code">Code</a></h3>
<table>
<thead>
<tr>
<th style="text-align:right">References</th>
<th>Path</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/fxa-client/src/internal/oauth.rs"><code>mozilla/application-services/components/fxa-client/src/internal/oauth.rs</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/fxa-client/src/internal/scoped_keys.rs"><code>mozilla/application-services/components/fxa-client/src/internal/scoped_keys.rs</code></a></td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td><a href="https://github.com/mozilla/application-services/blob/e16821a601f7e4cedea5af8ab24486467f3fd9bf/components/support/jwcrypto/src/ec.rs"><code>mozilla/application-services/components/support/jwcrypto/src/ec.rs</code></a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/ds.js"><code>mozilla/browserid-crypto/lib/algs/ds.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/rs.js"><code>mozilla/browserid-crypto/lib/algs/rs.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/fxa/blob/6027041fe4d7accb37e0704271545a0bff80adfd/packages/fxa-auth-server/lib/routes/sign.js"><code>mozilla/fxa/packages/fxa-auth-server/lib/routes/sign.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><a href="https://github.com/mozilla/fxa/blob/96161f37753101c1a64d9588d5cdc5434243e91f/packages/fxa-js-client/client/FxAccountClient.js"><code>mozilla/fxa/packages/fxa-js-client/client/FxAccountClient.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/fxa/blob/d1283314c15d81a85f08dcba5bce329db7c6fd51/packages/fxa-auth-server/lib/routes/oauth/key_data.js"><code>mozilla/fxa/packages/fxa-auth-server/lib/routes/oauth/key_data.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/oauth/validators.js"><code>mozilla/fxa/packages/fxa-auth-server/lib/oauth/validators.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/routes/oauth/token.js"><code>mozilla/fxa/packages/fxa-auth-server/lib/routes/oauth/token.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><a href="https://github.com/mozilla/fxa/blob/e5df5808be80f7e846e8ea973ed72bee454b027f/packages/fxa-auth-server/lib/routes/validators.js"><code>mozilla/fxa/packages/fxa-auth-server/lib/routes/validators.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/deriver/ScopedKeys.js"><code>mozilla/fxa-crypto-relier/src/deriver/ScopedKeys.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/relier/OAuthUtils.js"><code>mozilla/fxa-crypto-relier/src/relier/OAuthUtils.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/relier/util.js"><code>mozilla/fxa-crypto-relier/src/relier/util.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td><a href="https://github.com/mozilla/fxa/tree/main/packages/fxa-auth-client"><code>mozilla/fxa/packages/fxa-auth-client</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/fxa/tree/main/packages/fxa-auth-server"><code>mozilla/fxa/packages/fxa-auth-server</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/fxa/tree/main/packages/fxa-content-server"><code>mozilla/fxa/packages/fxa-content-server</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla-lockwise/lockwise-android/search?q=clientId&amp;type=code"><code>mozilla-lockwise/lockwise-android</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/PyFxA"><code>mozilla/PyFxA</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla/PyFxA/blob/6c3f803b3c27c665f417b0c5bd3ca79add8e2027/fxa/core.py"><code>mozilla/PyFxA/fxa/core.py</code></a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><a href="https://github.com/mozilla/send/blob/7130c2e7b05e43cf1a6eb0ea534982f4dff780ea/app/fxa.js"><code>mozilla/send/app/fxa.js</code></a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><a href="https://github.com/mozilla-services/syncclient"><code>mozilla-services/syncclient</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla-services/syncclient/blob/efe0d49a8bd00d341b6e926f6783325b3fe7b676/syncclient/client.py"><code>mozilla-services/syncclient/syncclient/client.py</code></a></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td><a href="https://github.com/mozilla-services/syncstorage-rs"><code>mozilla-services/syncstorage-rs</code></a></td>
</tr>
<tr>
<td style="text-align:right">19</td>
<td><a href="https://github.com/mozilla-services/tokenserver"><code>mozilla-services/tokenserver</code></a></td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td><a href="https://github.com/mozilla-services/tokenserver/blob/39239dd7a8d6b8270e22c9b6fef3f6be147e0df4/tokenserver/views.py"><code>mozilla-services/tokenserver/tokenserver/views.py</code></a></td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td><a href="https://github.com/zaach/node-fx-sync"><code>zaach/node-fx-sync</code></a></td>
</tr>
</tbody>
</table>
<div class="note">
<p>Check out the other posts in this series!</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: complete OAuth</li>
</ol>
</div>
]]></content>
  </entry>
  <entry>
    <title>A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</title>
    <link href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html" />
    <id>https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html</id>
    <updated>2021-08-08T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<p>This article is part of a series about scripting Firefox Sync / Lockwise.</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
<p>Welcome to <s>the last post</s> of this series about scripting Firefox
Sync! So far we‚Äôve managed to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">run the Sync clients we found in the wild</a>
(dating from 8 years ago), and taking inspiration from them, plus all
the available documentation online, we <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">built our own client</a>,
which required us to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">deconstruct the BrowserID protocol</a>.</p>
<p>And while I was pretty satisfied with this, there was still one little
thing bugging me.</p>
<p>See, while I was reading everything possible online about the Firefox
Accounts, Firefox Sync and BrowserID protocols in order to make this
work, including the code of the production clients and servers involved,
I stumbled upon <a href="https://github.com/mozilla/fxa/blob/6027041fe4d7accb37e0704271545a0bff80adfd/packages/fxa-auth-server/lib/routes/sign.js#L54">this comment</a>
in the Firefox Accounts server <code>/certificate/sign</code> endpoint, that we use
to sign a BrowserID public key and get back a certificate:</p>
<blockquote>
<pre><code class="hljs language-js"><span class="hljs-comment">// This is a legacy endpoint that&#x27;s typically only used by clients</span>
<span class="hljs-comment">// connected to Sync, so assume `service=sync` for metrics logging</span>
<span class="hljs-comment">// purposes unless we&#x27;re told otherwise.</span>
</code></pre>
<blockquote>
<pre><code class="hljs language-js"><span class="hljs-comment">// This is a legacy endpoint that&#x27;s typically only used by clients</span>
<span class="hljs-comment">// connected to Sync.</span>
</code></pre>
<blockquote>
<pre><code class="hljs language-js"><span class="hljs-comment">// This is a legacy endpoint.</span>
</code></pre>
</blockquote>
</blockquote>
</blockquote>
<p>I don‚Äôt like the idea of using a legacy endpoint when writing new code.
There must be something better.</p>
<h2 id="exploring-oauth" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#exploring-oauth">Exploring OAuth</a></h2>
<p>While the TokenServer <a href="https://github.com/mozilla-services/tokenserver#using-oauth">documents OAuth</a>
as an alternative to BrowserID to get credentials, it‚Äôs unclear how to
use it. All that page says is ‚Äúthe client must obtain an OAuth access
token and the corresponding encryption key as a JWK‚Äù, but doesn‚Äôt mention
where to get the OAuth token and the corresponding key.</p>
<p>The BrowserID instructions weren‚Äôt necessarily clearer, but at least it
had the competitive advantage of having multiple working implementations
in the wild that made it easier to understand how it works. OAuth was
a different kind of beast.</p>
<h3 id="sending-emails-how-about-no" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#sending-emails-how-about-no">Sending emails? How about no</a></h3>
<p>The <a href="https://mozilla.github.io/ecosystem-platform/">Firefox Ecosystem Platform</a>
documents <a href="https://mozilla.github.io/ecosystem-platform/docs/process/integration-with-fxa">how to integrate with Firefox Accounts</a>
using OAuth, but the first thing we can read there is:</p>
<blockquote>
<p>Before starting integration, please send a request to
fxa-staff[at]mozilla.com to request a short meeting so we can all
document our expectations and timelines.</p>
</blockquote>
<p>Follow a bit later by:</p>
<blockquote>
<p>Register for staging OAuth credentials by filing a <a href="https://bugzilla.mozilla.org/">deployment bug</a>.</p>
</blockquote>
<p>The last thing I want to do is <em>send an email</em> to Mozilla to <em>document
my expectations</em>, and <em>file a bug</em> to get credentials. <strong>I just want to
programmatically access my Firefox Sync data!</strong></p>
<p>By looking up <code>fxa browserid oauth</code> on Google, one of the countless
searches I made to try and understand what‚Äôs going on, I found <a href="https://vladikoff.github.io/app-services-site/docs/accounts/welcome.html">this document</a>,
which states a couple more things.</p>
<blockquote>
<p>All new relying services should integrate with Firefox Accounts via
the <a href="https://github.com/mozilla/fxa-oauth-server/blob/master/docs/api.md">OAuth 2.0 API</a>.
There is also a legacy API based on the BrowserID protocol, which is
available only in some Firefox user agents and is not recommended for
new applications.</p>
</blockquote>
<p>This confirms what I had only read in a code comment on the Firefox
Accounts server so far. <strong>The BrowserID protocol is indeed deprecated</strong>,
and it‚Äôs not just <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">the browserid-crypto package that‚Äôs unmaintained</a>
as I initially thought.</p>
<blockquote>
<p>The OAuth 2.0 API is the preferred method of integrating with Firefox
Accounts. To delegate authentication to Firefox Accounts in this
manner, you will first need to register for OAuth relier credentials,
then add support for a HTTP redirection-based login flow to your service.</p>
<p>Firefox Accounts integration is currently recommended only for
Mozilla-hosted services. We are exploring the possibility of allowing
non-Mozilla services to delegated authentication to Firefox Accounts,
and would welcome discussion of potential use cases on the mailing
list.</p>
</blockquote>
<p>This matches the documentation I found earlier about the fact that we
need to contact Mozilla in order to register for OAuth credentials. At
that point it seems like a dead end, and I‚Äôm considering to build my
client on top of the legacy BrowserID API, since it still works after
all, and I spent so much time to understand it in depth anyways.</p>
<h3 id="circling-back" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#circling-back">Circling back</a></h3>
<p>Going back to the <a href="https://github.com/mozilla/fxa-oauth-server/blob/master/docs/api.md">OAuth 2.0 API</a>
link from the former quote, this points to a page in an archived repo on
Github, <a href="https://github.com/mozilla/fxa-oauth-server/blob/master/docs/api.md"><code>mozilla/fxa-oauth-server/docs/api.md</code></a>,
itself saying that the page moved to <a href="https://github.com/mozilla/fxa-auth-server/blob/master/fxa-oauth-server/docs/api.md"><code>mozilla/fxa-auth-server/fxa-oauth-server/docs/api.md</code></a>,
which is also an archived repo, and with no link this time.</p>
<p>I noticed before that Mozilla archived many of its repos because they
moved to a monorepo in <a href="https://github.com/mozilla/fxa"><code>mozilla/fxa</code></a>,
which contains the latest version of <a href="https://github.com/mozilla/fxa/tree/main/packages/fxa-auth-server">fxa-auth-server</a>
and its <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md">API</a>,
an API that I had already encountered multiple times since <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">the beginning</a>
of this series. Maybe there‚Äôs some hope?</p>
<p>We do have a <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md#oauth">whole OAuth section</a>
in there, but I pretty much instantly hit a wall when I see that all
those endpoints require an OAuth client ID, which is part of the OAuth
credentials I‚Äôm supposed to email Mozilla in order to get.</p>
<p>It feels like I‚Äôm going in circles. üßê</p>
<h2 id="harvesting-a-client-id-from-the-android-app" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#harvesting-a-client-id-from-the-android-app">Harvesting a <code>client_id</code> from the Android app</a></h2>
<p>While those endpoints require a client ID, it‚Äôs not necessary to provide
a client secret for public clients (see <a href="https://auth0.com/docs/applications/confidential-and-public-applications">OAuth grant types</a>).
And because the client ID of public clients is‚Ä¶ public, we should be
able to easily borrow one from any of the public clients out there (for
instance, mobile apps), whether it‚Äôs from the source code, by
decompiling the app, or by inspecting its traffic. And indeed, there is
one directly in the <a href="https://github.com/mozilla-lockwise/lockwise-android/search?q=clientId&amp;type=code"><code>lockwise-android</code></a>
repo!</p>
<p>With that client ID in hand, we can start playing with <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md#oauth">the endpoints we found earlier</a>.
At first, I‚Äôm thinking that I have to do some kind of OAuth login dance,
with the usual redirect URL and code challenge, but it turns out
<a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md#post-oauthtoken">it‚Äôs not a requirement if we already have a session token</a>,
which we do by logging in directly with the user‚Äôs credentials.</p>
<p>That part was not documented anywhere else, probably because it‚Äôs not
meant to be used by third-party developers like me, but more by <a href="https://github.com/mozilla/fxa/tree/main/packages/fxa-content-server">the code</a>
behind <a href="https://accounts.firefox.com/">accounts.firefox.com</a>.</p>
<p>The <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#sign-in-to-firefox-accounts">fxa-js-client I‚Äôm using</a>
even <a href="https://github.com/mozilla/fxa/blob/96161f37753101c1a64d9588d5cdc5434243e91f/packages/fxa-js-client/client/FxAccountClient.js#L2671">has a method for it</a>,
where I can specify a <code>scope</code> of <code>https://identity.mozilla.com/apps/oldsync</code>
<a href="https://github.com/mozilla-services/tokenserver#using-oauth">as documented</a>,
and I do get back a valid OAuth token. Sweet.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> scope = <span class="hljs-string">&#x27;https://identity.mozilla.com/apps/oldsync&#x27;</span>
<span class="hljs-keyword">const</span> oauthToken = <span class="hljs-keyword">await</span> client.createOAuthToken(creds.sessionToken, clientId, { scope })
</code></pre>
<h2 id="unmasking-the-x-keyid-header" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#unmasking-the-x-keyid-header">Unmasking the <code>X-KeyID</code> header</a></h2>
<p>Now that‚Äôs not enough to authenticate to the TokenServer, I also <a href="https://github.com/mozilla-services/tokenserver#using-oauth">need to pass</a>
‚Äúthe <code>kid</code> field of the encryption key in the <code>X-KeyID</code> header‚Äù.</p>
<p>This is not really obvious to me because I don‚Äôt have a <code>kid</code> field in
any of the encryption keys I have been manipulating so far. I found out
later where that <code>kid</code> should otherwise come from, and let me tell you
it was a whole journey of its own. I‚Äôll develop that <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">in the 5th post of this series</a>.
Wait, didn‚Äôt I say earlier that this one was the last post?</p>
<p>When googling <code>firefox sync &quot;x-keyid&quot;</code>, there was essentially 3 results.</p>
<ol>
<li><a href="https://github.com/mozilla-services/tokenserver">The very page I came from</a>.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1455219">A Bugzilla issue</a>
by <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#ryan">our friend Ryan</a>
for the TokenServer to accept OAuth tokens.</li>
<li><a href="https://www.mail-archive.com/search?l=sync-dev@mozilla.org&amp;q=subject:%22%22&amp;o=newest&amp;f=1">The <code>sync-dev@mozilla.org</code> mailing list on mail-archive.com</a>,
not a specific thread but it turned out that the latest messages on the list before <a href="https://www.mail-archive.com/sync-dev@mozilla.org/msg01714.html">it gets migrated to Google Groups</a> earlier this year were <a href="https://www.mail-archive.com/sync-dev@mozilla.org/msg01710.html">about the <code>X-KeyID</code> header</a>.</li>
</ol>
<p>The second link doesn‚Äôt say anything about <code>X-KeyID</code>, and while it links
a few other resources, they don‚Äôt mention this header either (but they
turned out to be critical when I later tried to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">implement the full OAuth flow</a>).</p>
<p>Finally, in the mailing list thread, the <abbr title="Original poster">OP</abbr>
seems to be trying to do exactly the same thing as me, and they
apparently got a step further because they have a whole algorithm to
compute the <code>X-KeyID</code> header, involving a number of parameters I don‚Äôt
have and some key derivation logic. I‚Äôm not sure where that algorithm
comes from, but what‚Äôs clear from the mail is that it‚Äôs not working.</p>
<p><a href="https://www.mail-archive.com/sync-dev@mozilla.org/msg01711.html">Ryan delivers one more time</a>
by replying with an explanation and a link to the production code
generating the said key.</p>
<blockquote>
<p>For legacy backwards compatibility reasons, the key-derivation for
Sync is different than the derivation for general FxA scoped keys. The
simplest way to explain the differences is probably to link to the
<a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/deriver/ScopedKeys.js#L107">code we have here</a>,
which does the derivation.</p>
</blockquote>
<p>This is both a good and a bad news for me.</p>
<p>The good news is that with the algorithm from the original message of
the thread, plus the code in Ryan‚Äôs link, I should be able to generate a
working <code>X-KeyID</code> which might be all I need to make my OAuth version work!</p>
<p>The bad news is that this key deriving code I‚Äôm going to rely on is
called <code>_deriveLegacySyncKey</code>, and you know form the beginning of this
very post that I don‚Äôt like using code that‚Äôs called ‚Äúlegacy‚Äù, because
it most necessarily means that there‚Äôs a better alternative.</p>
<p>But let‚Äôs put that aside for now. This will be an adventure for another
day. For now we‚Äôre so close to getting this code work that I can‚Äôt just
move on to something else right now.</p>
<h2 id="tracking-keyrotationtimestamp" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#tracking-keyrotationtimestamp">Tracking <code>keyRotationTimestamp</code></a></h2>
<p>I start with the Python code form the original email:</p>
<pre><code class="hljs language-python">kid = <span class="hljs-built_in">str</span>(keyRotationTimestamp) + <span class="hljs-string">&#x27;-&#x27;</span> + base64.urlsafe_b64encode(tmp[:<span class="hljs-number">16</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).rstrip(<span class="hljs-string">&#x27;=&#x27;</span>)
</code></pre>
<p>The first thing we see is that we need <code>keyRotationTimestamp</code>, and I
happen to not have encountered anything named <code>keyRotationTimestamp</code>
yet.</p>
<p>I look it up on the <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md">API documentation of Firefox Accounts</a>
which I‚Äôm already on, hoping that it‚Äôs returned by some endpoint there
but no luck.</p>
<figure class="center">
  <a href="https://www.flickr.com/photos/71204861@N07/7297048442">
    <img alt="Fuck" src="https://www.codejam.info/img/2021/08/fuck.jpg">
  </a>
</figure>
<p>What follows is a number of searches:</p>
<ul>
<li><code>keyRotationTimestamp</code></li>
<li><code>keyRotationTimestamp mozilla</code></li>
<li><code>keyRotationTimestamp site:github.com</code></li>
</ul>
<p>Followed by me searching that string directly <a href="https://github.com/search?q=keyRotationTimestamp&amp;type=code">on all of GitHub</a>
and browsing the first couple pages of results (out of 49) without luck.</p>
<p>Then I tried to <a href="https://github.com/mozilla/fxa/search?q=keyRotationTimestamp&amp;type=code">scope my search to the <code>mozilla/fxa</code> repo</a>
which had been a good source of information in the past, and bingo! The
first result is from <a href="https://github.com/mozilla/fxa/blob/d1283314c15d81a85f08dcba5bce329db7c6fd51/packages/fxa-auth-server/lib/routes/oauth/key_data.js">the <code>/account/scoped-key-data</code> endpoint of fxa-auth-server</a>
(you know, the Firefox Accounts server), which do return the
<code>keyRotationTimestamp</code>! It‚Äôs just that the documentation I checked
earlier doesn‚Äôt include the details of the payload <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md#post-accountscoped-key-data">for this endpoint</a>.</p>
<p>This one too, <a href="https://github.com/mozilla/fxa/blob/96161f37753101c1a64d9588d5cdc5434243e91f/packages/fxa-js-client/client/FxAccountClient.js#L2718">has a neat matching function in fxa-js-client</a>
and I can move to the next step.</p>
<h2 id="actually-computing-the-x-keyid-header" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#actually-computing-the-x-keyid-header">Actually computing the <code>X-KeyID</code> header</a></h2>
<p>Let‚Äôs get back one more time to the Python code from the email we‚Äôre
trying to adapt.</p>
<pre><code class="hljs language-python">kid = <span class="hljs-built_in">str</span>(keyRotationTimestamp) + <span class="hljs-string">&#x27;-&#x27;</span> + base64.urlsafe_b64encode(tmp[:<span class="hljs-number">16</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).rstrip(<span class="hljs-string">&#x27;=&#x27;</span>)
</code></pre>
<p>Now we figured the first part, the rest is the Base64URL representation
of the first 16 bytes of <code>tmp</code>, which is the result of some key
derivation. According to the email thread, the key derivation part
isn‚Äôt working, so we‚Äôre not going to try to port it, but Base64URL
encoding the first 16 bytes of a key reminds me of something.</p>
<p>We can also see this pattern in <a href="https://github.com/mozilla/fxa-crypto-relier/blob/168f4a6c47de9021a0d9ae23a3e6757013a38dbd/src/deriver/ScopedKeys.js#L107">the code Ryan pointed to</a>
in order to address the key derivation issue:</p>
<pre><code class="hljs language-js">scopedKey.kid = options.keyRotationTimestamp + <span class="hljs-string">&#x27;-&#x27;</span> + base64url(kHash.slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>))
</code></pre>
<p>While it‚Äôs not immediately clear to me what <code>kHash</code> is, the
<code>base64url(kHash.slice(0, 16))</code> is again awfully familiar. It is exactly
what we used to do <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#compute-client-state">to compute the <code>X-Client-State</code> header</a>
for the BrowserID version!</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> clientState = sha256(syncKey).slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>)
</code></pre>
<p>This is especially promising since <a href="https://github.com/mozilla-services/tokenserver/blob/39239dd7a8d6b8270e22c9b6fef3f6be147e0df4/tokenserver/views.py#L247">the Python code behind the TokenServer</a>
also calls it <code>client_state</code>:</p>
<pre><code class="hljs language-python">kid = request.headers.get(<span class="hljs-string">&#x27;X-KeyID&#x27;</span>)
keys_changed_at, client_state = parse_key_id(kid)
</code></pre>
<p>So I try to combine the <code>keyRotationTimestamp</code> I just retrieved with the
hexadecimal representation of my previous <code>X-Client-State</code>, and guess
what. It works!</p>
<h2 id="i-want-to-see-the-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#i-want-to-see-the-code">I want to see the code!</a></h2>
<p>The great news is that this not only makes our code use the latest and
greatest way to connect to Firefox Sync, without relying on anything
legacy or deprecated, but it also makes our implementation much simpler!</p>
<p>Here‚Äôs the updated version of the code we previously built in this
series, up to getting the Sync token from the TokenServer. <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#actually-calling-firefox-sync">Calling the Sync API</a>
from there is not affected, so I won‚Äôt include it again here.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)
<span class="hljs-keyword">const</span> AuthClient = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fxa-js-client&#x27;</span>)

<span class="hljs-keyword">const</span> authServerUrl = <span class="hljs-string">&#x27;https://api.accounts.firefox.com/v1&#x27;</span>
<span class="hljs-keyword">const</span> tokenServerUrl = <span class="hljs-string">&#x27;https://token.services.mozilla.com&#x27;</span>
<span class="hljs-keyword">const</span> scope = <span class="hljs-string">&#x27;https://identity.mozilla.com/apps/oldsync&#x27;</span>
<span class="hljs-keyword">const</span> clientId = <span class="hljs-string">&#x27;...&#x27;</span>
<span class="hljs-keyword">const</span> email = <span class="hljs-string">&#x27;...&#x27;</span>
<span class="hljs-keyword">const</span> pass = <span class="hljs-string">&#x27;...&#x27;</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> AuthClient(authServerUrl)

  <span class="hljs-keyword">const</span> creds = <span class="hljs-keyword">await</span> client.signIn(email, pass, {
    <span class="hljs-attr">keys</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">reason</span>: <span class="hljs-string">&#x27;login&#x27;</span>
  })

  <span class="hljs-keyword">const</span> accountKeys = <span class="hljs-keyword">await</span> client.accountKeys(creds.keyFetchToken, creds.unwrapBKey)
  <span class="hljs-keyword">const</span> oauthToken = <span class="hljs-keyword">await</span> client.createOAuthToken(creds.sessionToken, clientId, { scope })
  <span class="hljs-keyword">const</span> scopedKeyData = <span class="hljs-keyword">await</span> client.getOAuthScopedKeyData(creds.sessionToken, clientId, scope)

  <span class="hljs-keyword">const</span> syncKey = Buffer.from(accountKeys.kB, <span class="hljs-string">&#x27;hex&#x27;</span>)
  <span class="hljs-keyword">const</span> clientState = crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(syncKey).digest().slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)
  <span class="hljs-keyword">const</span> keyId = <span class="hljs-string">`<span class="hljs-subst">${scopedKeyData[scope].keyRotationTimestamp}</span>-<span class="hljs-subst">${clientState}</span>`</span>

  <span class="hljs-comment">// See &lt;https://github.com/mozilla-services/tokenserver#using-oauth&gt;.</span>
  <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">${tokenServerUrl}</span>/1.0/sync/1.5`</span>, {
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${oauthToken.access_token}</span>`</span>,
      <span class="hljs-string">&#x27;X-KeyID&#x27;</span>: keyId
    }
  })
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
}

main()
</code></pre>
<p>Here‚Äôs the equivalent code from the previous article for comparison:</p>
<details>
  <summary>Legacy BrowserID code</summary>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)
<span class="hljs-keyword">const</span> AuthClient = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fxa-js-client&#x27;</span>)
<span class="hljs-keyword">const</span> njwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;njwt&#x27;</span>)

<span class="hljs-keyword">const</span> authServerUrl = <span class="hljs-string">&#x27;https://api.accounts.firefox.com/v1&#x27;</span>
<span class="hljs-keyword">const</span> tokenServerUrl = <span class="hljs-string">&#x27;https://token.services.mozilla.com&#x27;</span>
<span class="hljs-keyword">const</span> email = <span class="hljs-string">&#x27;...&#x27;</span>
<span class="hljs-keyword">const</span> pass = <span class="hljs-string">&#x27;...&#x27;</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64to10</span> (<span class="hljs-params">data</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">BigInt</span>(<span class="hljs-string">&#x27;0x&#x27;</span> + Buffer.from(data, <span class="hljs-string">&#x27;base64&#x27;</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>)).toString(<span class="hljs-number">10</span>)
}

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> AuthClient(authServerUrl)

  <span class="hljs-keyword">const</span> creds = <span class="hljs-keyword">await</span> client.signIn(email, pass, {
    <span class="hljs-attr">keys</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">reason</span>: <span class="hljs-string">&#x27;login&#x27;</span>
  })

  <span class="hljs-keyword">const</span> accountKeys = <span class="hljs-keyword">await</span> client.accountKeys(creds.keyFetchToken, creds.unwrapBKey)

  <span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;rsa&#x27;</span>, {
    <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">2048</span>
  })

  <span class="hljs-keyword">const</span> jwk = kp.publicKey.export({ <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;jwk&#x27;</span> })

  <span class="hljs-keyword">const</span> publicKey = {
    <span class="hljs-attr">algorithm</span>: jwk.algorithm.slice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>),
    <span class="hljs-attr">n</span>: base64to10(jwk.n),
    <span class="hljs-attr">e</span>: base64to10(jwk.e)
  }

  <span class="hljs-comment">// Time interval in milliseconds until the certificate will expire, up to a</span>
  <span class="hljs-comment">// maximum of 24 hours as documented in &lt;https://github.com/mozilla/fxa/blob/f6bc0268a9be12407456fa42494243f336d81a38/packages/fxa-auth-server/docs/api.md#request-body-32&gt;.</span>
  <span class="hljs-keyword">const</span> duration = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>

  <span class="hljs-keyword">const</span> { cert } = <span class="hljs-keyword">await</span> client.certificateSign(creds.sessionToken, publicKey, duration)

  <span class="hljs-comment">// Generate an &quot;identity assertion&quot; which is a JWT as documented in</span>
  <span class="hljs-comment">// &lt;https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#identity-assertion&gt;.</span>
  <span class="hljs-keyword">const</span> signedObject = njwt.create({ <span class="hljs-attr">aud</span>: tokenServerUrl, <span class="hljs-attr">iss</span>: authServerUrl }, kp.privateKey, <span class="hljs-string">&#x27;RS256&#x27;</span>)
    .setClaim(<span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-built_in">Date</span>.now() + duration)
    .compact()

  <span class="hljs-comment">// Certs are separated by a `~` as documented in &lt;https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#backed-identity-assertion&gt;.</span>
  <span class="hljs-keyword">const</span> backedAssertion = [cert, signedObject].join(<span class="hljs-string">&#x27;~&#x27;</span>)

  <span class="hljs-comment">// See &lt;https://github.com/mozilla-services/tokenserver#using-browserid&gt;.</span>
  <span class="hljs-keyword">const</span> syncKey = Buffer.from(accountKeys.kB, <span class="hljs-string">&#x27;hex&#x27;</span>)
  <span class="hljs-keyword">const</span> clientState = crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(syncKey).digest().slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>)

  <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">${tokenServerUrl}</span>/1.0/sync/1.5`</span>, {
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`BrowserID <span class="hljs-subst">${backedAssertion}</span>`</span>,
      <span class="hljs-string">&#x27;X-Client-State&#x27;</span>: clientState
    }
  })
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
}

main()
</code></pre>
</details>
<p>But while this is a solid improvement from what we had previously built
since the beginning of this series, there‚Äôs still a bit more to unwrap.</p>
<h2 id="going-further" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#going-further">Going further</a></h2>
<p>You can probably tell by now that I love digging into rabbit holes and
I‚Äôm eternally unsatisfied.</p>
<p>While I thought that I had found the last piece of the puzzle with the
OAuth method described in this post, in order to integrate with Firefox Sync as
cleanly as possible, it occurred to me that <em>something was off</em> as I was
trying to explain it.</p>
<p>One of the main benefits of OAuth is to be able to grant <em>granular
permissions</em> to a third-party service, without giving them <em>knowledge of
your password</em>.</p>
<p>Yet with the solution from this post, not only do we still need to have
knowledge of the user‚Äôs password in order to login with the
email/password scheme and derive the Sync encryption keys, but this
method also grants us a Firefox Accounts session token which allows us
to do <em>virtually anything</em> to that user account through the API. <strong>This
defeats both advantages of OAuth mentioned above; permissions are not
granular and we have access to the plaintext password.</strong></p>
<div class="float-wrapper">
  <figure class="left">
    <img alt="God mode quote context" src="https://www.codejam.info/img/2021/08/god-mode.png">
  </figure>
  <div class="float-inner">
<p>This authentication scheme is even referred by Ryan as ‚Äúgod mode‚Äù in <a href="https://docs.google.com/document/d/1IvQJFEBFz0PnL4uVlIvt8fBS_IPwSK-avK0BRIHucxQ/edit?disco=AAAABgay7bs">a comment</a>
on <a href="https://docs.google.com/document/d/1IvQJFEBFz0PnL4uVlIvt8fBS_IPwSK-avK0BRIHucxQ">the OAuth flow spec on Google Docs</a>
(that I encountered <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html#unmasking-the-x-keyid-header">earlier</a> through <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1455219">a Bugzilla issue</a>).</p>
<blockquote>
<p>Imagine a third-party browser that does its own Sync implementation,
being able to authenticate to our Sync service using standard
OAuth-style flow rather than the ‚Äúgod mode‚Äù integration that [they]
currently do, where they basically prompt for full access to your
account.</p>
</blockquote>
<p>This is a concern that‚Äôs also addressed in the introduction of the
document:</p>
<blockquote>
<p>Key material can only be accessed through a bespoke authorization
protocol that is [‚Ä¶] <strong>far too powerful</strong>. The protocol gives the
application complete control of the user‚Äôs Firefox Account, and hands
it a copy of their master key material. There is currently no
provision for scoping access down to a subset of data or capabilities.</p>
</blockquote>
  </div>
</div>
<p>In the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">final article</a>
(for real this time, I promise) we‚Äôll see how to use the full OAuth flow
to authenticate to Firefox Accounts and access Firefox Sync, so that we
never have knowledge of the user‚Äôs password, and request only the
permissions that we need instead of full access.</p>
<div class="note">
<p>Check out the other posts in this series!</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
]]></content>
  </entry>
  <entry>
    <title>A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</title>
    <link href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html" />
    <id>https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html</id>
    <updated>2021-08-08T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<p>This article is part of a series about scripting Firefox Sync / Lockwise.</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
<p>In the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">previous post</a>
we <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#give-me-the-whole-code">made a script</a>
that is able to fetch and decrypt collections from Firefox Sync,
including Lockwise passwords. But one thing was still bugging me. When
running the code, the console was showing a deprecation warning.</p>
<pre><code class="hljs">[DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
</code></pre>
<p>By running <code>node --trace-warnings</code>, I could see that it was coming from
the <a href="https://www.npmjs.com/package/browserid-crypto">browserid-crypto</a>
package. It was trivial to fix by <a href="https://nodejs.org/en/docs/guides/buffer-constructor-deprecation/">migrating</a>
from the deprecated <code>new Buffer()</code> constructor to <code>Buffer.from()</code>, so I
<a href="https://github.com/mozilla/browserid-crypto/pull/123">made another PR</a>
for this.</p>
<p>Like <a href="https://github.com/mozilla/browserid-crypto/pull/122">the first PR</a>,
it‚Äôs reviewed and approved by <a href="https://github.com/rfk" id="ryan">Ryan</a>
(who‚Äôs name I saw countless times when researching about Firefox
Accounts and Sync protocols). He also <a href="https://github.com/mozilla/browserid-crypto/pull/123#pullrequestreview-703731665">notes</a>
that this library is unmaintained:</p>
<blockquote>
<p>FWIW, it would be best to consider this library unmaintained at this
point, but I‚Äôm happy to take small fixes like this all the same.</p>
</blockquote>
<p>While there‚Äôs nothing wrong with using an unmaintained library if it
gets the job done, I took this as a challenge to implement the protocol
using only native (or more generic, well-maintained) modules, and this
is going to be the topic of this blog post!</p>
<h2 id="isolating-the-browserid-crypto-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#isolating-the-browserid-crypto-code">Isolating the browserid-crypto code</a></h2>
<p>Let‚Äôs start from the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#give-me-the-whole-code">script we previously built</a>
and extract the part that use the browserid-crypto package.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> jwcrypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto&#x27;</span>)

<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(jwcrypto.generateKeypair)({ <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;DS&#x27;</span>, <span class="hljs-attr">keysize</span>: <span class="hljs-number">256</span> })

<span class="hljs-comment">// Also works with RSA.</span>
<span class="hljs-comment">// const kp = await promisify(jwcrypto.generateKeypair)({ algorithm: &#x27;RS&#x27;, keysize: 256 })</span>

<span class="hljs-comment">// Time interval in milliseconds until the certificate will expire, up to a</span>
<span class="hljs-comment">// maximum of 24 hours as documented in &lt;https://github.com/mozilla/fxa/blob/f6bc0268a9be12407456fa42494243f336d81a38/packages/fxa-auth-server/docs/api.md#request-body-32&gt;.</span>
<span class="hljs-keyword">const</span> duration = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>

<span class="hljs-keyword">const</span> { cert } = <span class="hljs-keyword">await</span> client.certificateSign(creds.sessionToken, kp.publicKey.toSimpleObject(), duration)

<span class="hljs-comment">// Generate an &quot;identity assertion&quot; which is a JWT as documented in</span>
<span class="hljs-comment">// &lt;https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#identity-assertion&gt;.</span>
<span class="hljs-keyword">const</span> signedObject = <span class="hljs-keyword">await</span> promisify(jwcrypto.assertion.sign)(
  {},
  {
    <span class="hljs-attr">audience</span>: tokenServerUrl,
    <span class="hljs-attr">issuer</span>: authServerUrl,
    <span class="hljs-attr">expiresAt</span>: <span class="hljs-built_in">Date</span>.now() + duration
  },
  kp.secretKey
)

<span class="hljs-comment">// Certs are separated by a `~` as documented in &lt;https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#backed-identity-assertion&gt;.</span>
<span class="hljs-keyword">const</span> backedAssertion = [cert, signedObject].join(<span class="hljs-string">&#x27;~&#x27;</span>)
</code></pre>
<p>There are 3 steps here:</p>
<ol>
<li>First, we generate a DSA or RSA keypair, which would be trivial to
do with the Node.js <code>crypto</code> module.</li>
<li>Then we encode the public key in a way that is compatible with
<a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md#post-certificatesign">Firefox Accounts‚Äô <code>/certificate/sign</code> endpoint</a>.</li>
<li>Finally, we sign a JWT using our private key, and bundle it with the
certificate to make a ‚Äúbacked identity assertion‚Äù.</li>
</ol>
<h2 id="generating-the-keypair" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#generating-the-keypair">Generating the keypair</a></h2>
<p>This is the easy part. The main difference is that while
<code>jwcrypto.generateKeyPair</code> takes an internal <code>keysize</code> parameter, which
they <a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/rs.js#L10">map to RSA</a>,
and <a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/ds.js#L36">DSA key sizes</a>,
we need to explicitly give the RSA key size (usually synonymous of the
modulus length).</p>
<p>In our case, a BrowserID RSA key of ‚Äú256‚Äù <a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/rs.js#L20">corresponds to a 2048-bit RSA key</a> and similarly, a BrowserID DSA key of ‚Äú256‚Äù <a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/ds.js#L56">corresponds to a 2048-bit DSA key</a>.
They also both specify SHA-256 as the JWT hash algorithm, which will be
useful for later.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)

<span class="hljs-comment">// With RSA</span>
<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;rsa&#x27;</span>, {
  <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">2048</span>
})

<span class="hljs-comment">// With DSA</span>
<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;dsa&#x27;</span>, {
  <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">2048</span>,
  <span class="hljs-attr">divisorLength</span>: <span class="hljs-number">256</span>
})
</code></pre>
<div class="note">
<p><strong>Note:</strong> for DSA, the BrowserID key has a divisor length of 256 bits
(the <code>q</code> parameter), and this is especially important as
browserid-crypto and the TokenServer don‚Äôt accept any other divisor
length for a key size of 2048.</p>
</div>
<h2 id="encoding-the-key" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#encoding-the-key">Encoding the key</a></h2>
<p>Where it gets a bit more tricky, especially for DSA, is when we want to
encode the key as JSON for the Firefox Accounts API to sign:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { cert } = <span class="hljs-keyword">await</span> client.certificateSign(creds.sessionToken, kp.publicKey.toSimpleObject(), duration)
</code></pre>
<p>The keys from browserid-crypto conveniently include a <code>toSimpleObject</code>
function that formats the key in the BrowserID JSON format. I couldn‚Äôt
find documentation for it, but from looking at the actual JSON objects,
it is very similar to (but not compatible with) the <a href="https://datatracker.ietf.org/doc/html/rfc7517"><abbr title="JSON Web Key">JWK</abbr></a>
format.</p>
<h3 id="browserid-vs-jwk-and-base-conversion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#browserid-vs-jwk-and-base-conversion">BrowserID vs. JWK and base conversion</a></h3>
<p>BrowserID was <a href="https://hacks.mozilla.org/2011/07/introducing-browserid-easier-and-safer-authentication-on-the-web/">introduced in 2011</a>,
well before <a href="https://datatracker.ietf.org/doc/html/rfc7517">the JWK specification was proposed</a>
in 2015. They both encode the low-level key parameters in a JSON object,
and there is just a couple of differences, especially:</p>
<ol>
<li>JWK doesn‚Äôt support DSA keys.</li>
<li>To specify the key type, JWK has a <code>kty</code> property (set to <code>RSA</code> for
RSA keys),while BrowserID uses an <code>algorithm</code> property that can be
<code>RS</code> or <code>DS</code>.</li>
<li>JWK encodes the key parameters as
<a href="https://base64.guru/standards/base64url">Base64URL</a>,
while BrowserID <a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/rs.js#L68">uses decimal (base 10) for RSA</a>
and <a href="https://github.com/mozilla/browserid-crypto/blob/69b23d9d70dfbf9bccdf5330545aebb12657c496/lib/algs/ds.js#L141">hexadecimal (base 16) for DSA</a>.</li>
</ol>
<h3 id="rsa" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#rsa">RSA</a></h3>
<p>The <a href="https://datatracker.ietf.org/doc/html/rfc7518#section-6.3.1">RSA parameters</a>
are <code>n</code> (modulus) and <code>e</code> (exponent), as well as <a href="https://datatracker.ietf.org/doc/html/rfc7518#section-6.3.2">a fuckton of other parameters</a>
for private keys (which we don‚Äôt need here). You can see them on an
existing key with <code>openssl rsa -in rsa-private-key.pem -text -noout</code>.</p>
<p>We can take the earlier code to generate a RSA keypair, and export the
public key as a JWK like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)

<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;rsa&#x27;</span>, {
  <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">2048</span>
})

<span class="hljs-built_in">console</span>.log(kp.publicKey.export({ <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;jwk&#x27;</span> }))
</code></pre>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;kty&quot;</span>: <span class="hljs-string">&quot;RSA&quot;</span>,
  <span class="hljs-attr">&quot;n&quot;</span>: <span class="hljs-string">&quot;3M852Cy7DIH1wYJVgRxQfDYPa26fC4KR4uYmHeGV7rTtiQ2-IdypkOQd6Clp01-J4L9e28w-3hR06ZWKRMIbfyajcer1bd_9luBKkRiFlYxa-CBNTlOJBmtej7MbouQJdqcxRIHufk7R4HBWYzR8H1WUDzJfIZJLxz2eymTNXu7CPFyDoNZXQ9SRu7tzPzhUsDrkdpNSs2x8tRrllJRiO-BOC2Ce3W5vCE9eB91VFuIOHOuL5y-Fr6K-vCfvpLBzoF2uk399ZGxZ8rLXHk01QDoin3BVXQzGBKNXoVNrNe-tKflp5QJ5wMifvL4tPfCCrps8rrfbE1NDPE2x1QmCfQ&quot;</span>,
  <span class="hljs-attr">&quot;e&quot;</span>: <span class="hljs-string">&quot;AQAB&quot;</span>
}
</code></pre>
<p>On the other hand, a BrowserID RSA public key looks like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> jwcrypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto&#x27;</span>)

<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto/lib/algs/rs&#x27;</span>)

jwcrypto.generateKeypair({ <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS&#x27;</span>, <span class="hljs-attr">keysize</span>: <span class="hljs-number">256</span> }, <span class="hljs-function">(<span class="hljs-params">err, { publicKey }</span>) =&gt;</span> {
  <span class="hljs-built_in">console</span>.log(publicKey.toSimpleObject())
})
</code></pre>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;algorithm&quot;</span>: <span class="hljs-string">&quot;RS&quot;</span>,
  <span class="hljs-attr">&quot;n&quot;</span>: <span class="hljs-string">&quot;24561144013955114361783231655761853176741812326893374232205401875943449227620158204608340216900927757193227109312970662811636219675773452185909191206484694392560433664701055247500397746104758184735693308844235833317883872067955852418577691056051019648528118784214798195301896767050575864274186910237901534713406182369363255235410257674380032656581487055343920363852506722639241918085307849979198768941882638020102729524988683333585179817471524571511030397962907590237048329319430881173155778553010801560573247170682531231684185163187096747308113243183139470492492221024173487301503496674419087411376160055924262029047&quot;</span>,
  <span class="hljs-attr">&quot;e&quot;</span>: <span class="hljs-string">&quot;65537&quot;</span>
}
</code></pre>
<p>It is easy to convert a native JWK to the BrowserID format, as we can
leverage <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"><code>BigInt</code></a>
to output a large base 10 string. But the constructor doesn‚Äôt accept
Base64 directly, so we need to do an intermediate conversion through
hexadecimal.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64to10</span> (<span class="hljs-params">data</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">BigInt</span>(<span class="hljs-string">&#x27;0x&#x27;</span> + Buffer.from(data, <span class="hljs-string">&#x27;base64&#x27;</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>)).toString(<span class="hljs-number">10</span>)
}

<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;rsa&#x27;</span>, {
  <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">2048</span>
})

<span class="hljs-keyword">const</span> jwk = kp.publicKey.export({ <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;jwk&#x27;</span> })

<span class="hljs-keyword">const</span> publicKey = {
  <span class="hljs-attr">algorithm</span>: jwk.algorithm.slice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>),
  <span class="hljs-attr">n</span>: base64to10(jwk.n),
  <span class="hljs-attr">e</span>: base64to10(jwk.e)
}
</code></pre>
<h3 id="dsa" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#dsa">DSA</a></h3>
<p>The <a href="https://mozilla.github.io/id-specs/docs/formats/keys/#parameters-for-dsa-keys">DSA parameters</a>
are <code>p</code> (larger prime modulus), <code>q</code> (smaller prime modulus), <code>g</code>
(generator), <code>y</code> (public group element), as well as <code>x</code> (private
exponent) for private keys.</p>
<p>Since JWK doesn‚Äôt support DSA, we cannot do <code>kp.publicKey.export({ format: 'jwk' })</code>
with a DSA key generated by the <code>crypto</code> module, as that would fail with
<code>[ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE]: Unsupported JWK Key Type</code>.</p>
<p>With browserid-crypto, we can replace <code>RS</code> by <code>DS</code> in the previous
example to generate the following key, and get a better idea of what
we‚Äôre trying to reproduce:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> jwcrypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto&#x27;</span>)

<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto/lib/algs/rs&#x27;</span>)

jwcrypto.generateKeypair({ <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;DS&#x27;</span>, <span class="hljs-attr">keysize</span>: <span class="hljs-number">256</span> }, <span class="hljs-function">(<span class="hljs-params">err, { publicKey }</span>) =&gt;</span> {
  <span class="hljs-built_in">console</span>.log(publicKey.toSimpleObject())
})
</code></pre>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;algorithm&quot;</span>: <span class="hljs-string">&quot;DS&quot;</span>,
  <span class="hljs-attr">&quot;y&quot;</span>: <span class="hljs-string">&quot;735b5ddcb95622cb39370efbd0ab4020e7ed5b73f06aecf7ba89ea57f7627ecec5973e1fcb8628125d58d94fed65d65affbfb2722f302085de127fb6fba97e18502da5e1d23d05979ff5a64b587a75b1f0953b4afce05cab74af5b886b059f67889756360d2d41c2312493695d891fad1b2b9cf6169e335f65d573da27b524aa968b9de93d0f0ddf157345917598b630b8937b2c76bedf8fb5ae686d0eddddee2c6cb9829b6d5a19bb07332e7ab3e6116c523198ef699af154b0ea038e92e15ca43ef757f7e854463596346634f759c30730d04cae296d6e663322cb030749c818c922cf2ed51a117bcc17aa603b560159ace99b4aea549c402d1390a1cf1648&quot;</span>,
  <span class="hljs-attr">&quot;p&quot;</span>: <span class="hljs-string">&quot;d6c4e5045697756c7a312d02c2289c25d40f9954261f7b5876214b6df109c738b76226b199bb7e33f8fc7ac1dcc316e1e7c78973951bfc6ff2e00cc987cd76fcfb0b8c0096b0b460fffac960ca4136c28f4bfb580de47cf7e7934c3985e3b3d943b77f06ef2af3ac3494fc3c6fc49810a63853862a02bb1c824a01b7fc688e4028527a58ad58c9d512922660db5d505bc263af293bc93bcd6d885a157579d7f52952236dd9d06a4fc3bc2247d21f1a70f5848eb0176513537c983f5a36737f01f82b44546e8e7f0fabc457e3de1d9c5dba96965b10a2a0580b0ad0f88179e10066107fb74314a07e6745863bc797b7002ebec0b000a98eb697414709ac17b401&quot;</span>,
  <span class="hljs-attr">&quot;q&quot;</span>: <span class="hljs-string">&quot;b1e370f6472c8754ccd75e99666ec8ef1fd748b748bbbc08503d82ce8055ab3b&quot;</span>,
  <span class="hljs-attr">&quot;g&quot;</span>: <span class="hljs-string">&quot;9a8269ab2e3b733a5242179d8f8ddb17ff93297d9eab00376db211a22b19c854dfa80166df2132cbc51fb224b0904abb22da2c7b7850f782124cb575b116f41ea7c4fc75b1d77525204cd7c23a15999004c23cdeb72359ee74e886a1dde7855ae05fe847447d0a68059002c3819a75dc7dcbb30e39efac36e07e2c404b7ca98b263b25fa314ba93c0625718bd489cea6d04ba4b0b7f156eeb4c56c44b50e4fb5bce9d7ae0d55b379225feb0214a04bed72f33e0664d290e7c840df3e2abb5e48189fa4e90646f1867db289c6560476799f7be8420a6dc01d078de437f280fff2d7ddf1248d56e1a54b933a41629d6c252983c58795105802d30d7bcd819cf6ef&quot;</span>
}
</code></pre>
<p>Exporting the key as a JWK was really handy earlier to access the
low-level key parameters, but we cannot do that with DSA. We can only
export the key as DER (binary) or PEM (Base64 encoded DER).</p>
<p>This means that we‚Äôll need to use the OpenSSL CLI to dump the key
parameters as we saw earlier. Let‚Äôs start by generating the PEM private
key.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)

<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(crypto.generateKeyPair)(<span class="hljs-string">&#x27;dsa&#x27;</span>, {
  <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">2048</span>,
  <span class="hljs-attr">divisorLength</span>: <span class="hljs-number">256</span>
})

<span class="hljs-keyword">const</span> privateKey = kp.privateKey.export({ <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;pem&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pkcs8&#x27;</span> })
</code></pre>
<p>Then, we can invoke the <code>openssl</code> command, piping it the private key.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)

<span class="hljs-keyword">const</span> sub = cp.spawn(<span class="hljs-string">&#x27;openssl&#x27;</span>, [<span class="hljs-string">&#x27;dsa&#x27;</span>, <span class="hljs-string">&#x27;-in&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-text&#x27;</span>, <span class="hljs-string">&#x27;-noout&#x27;</span>])

sub.stdin.write(privateKey)
</code></pre>
<p>The child process will now emit <code>data</code> events on the <code>stdout</code> stream and
we can use that to parse the OpenSSL output. For context, here‚Äôs what a
typical output looks like:</p>
<details>
  <summary>Output of <code>openssl dsa -in dsa-private-key.pem -text -noout</code></summary>
<pre><code class="hljs">Private-Key: (2048 bit)
priv:
    4b:66:fe:d5:68:c2:7e:3d:4a:fc:c0:45:10:01:91:
    fe:d7:83:be:39:0b:79:f3:0f:a1:c3:63:0e:8a:8f:
    63:db
pub:
    7e:50:55:ea:62:b8:70:0f:89:ca:f9:ad:41:21:05:
    8d:2c:71:e3:14:a5:1c:70:7d:a6:68:97:10:2f:93:
    f3:82:ee:98:25:7c:6a:42:71:9a:e0:b0:bf:c2:76:
    18:df:fe:68:63:ba:a8:a0:4d:10:9f:5a:da:c6:e3:
    c9:94:23:4a:d5:8e:00:ac:6b:f8:40:06:10:d1:6a:
    09:17:7e:73:8e:10:5b:5a:a0:dc:7a:c7:7d:cb:96:
    3b:8d:d8:d5:27:05:e0:0f:d8:e3:04:24:c3:ef:49:
    0d:56:54:54:3a:cd:c8:bf:36:03:2e:e7:8f:21:a2:
    8e:14:f9:17:57:85:7f:83:73:01:bc:90:aa:01:d1:
    4b:cb:84:c0:99:ee:2a:d2:3d:d7:30:97:51:89:fd:
    ef:b8:7a:ea:5e:5f:17:37:53:ce:43:b5:05:64:b9:
    09:c8:3f:07:eb:c4:9b:77:a5:6b:d2:d3:d0:ed:3e:
    47:1d:54:7d:f1:a1:ef:66:25:a6:fc:61:1b:cb:ae:
    60:f9:3b:7d:58:f3:e4:19:3b:09:4d:3f:87:c6:97:
    95:9b:78:02:55:fc:d8:74:86:06:50:8b:78:23:63:
    c6:b2:46:96:48:88:93:c6:32:d4:88:33:c7:44:f1:
    b9:73:b7:1a:72:0c:1e:55:40:7c:f3:cf:7a:fe:06:
    b7
P:
    00:bc:a3:68:a5:2b:1d:b5:c6:8a:4e:70:0d:78:4b:
    17:83:37:8f:d4:3a:9c:27:e7:08:b5:6d:9a:91:b4:
    8e:22:81:7e:ee:10:8c:08:45:c3:a1:f5:95:b3:9c:
    71:83:49:c2:dc:58:67:d3:c4:5c:1a:db:2e:c6:a4:
    18:4a:8a:15:b8:3b:b8:94:29:b4:43:79:e3:32:11:
    98:26:6e:65:01:11:f0:b9:cf:a2:e5:dc:4b:f8:4c:
    31:27:ff:75:cf:b8:b4:13:b0:f5:e8:da:ab:76:7b:
    ba:7d:ca:9b:fd:c1:29:89:77:6e:ee:95:33:3c:64:
    94:5e:4d:5b:0b:f4:b8:4f:91:54:8c:40:35:75:11:
    06:1e:7f:ed:ae:17:9e:ce:9b:8d:e1:79:75:7c:fd:
    d2:60:3f:89:10:6e:95:04:67:5b:08:31:71:ea:13:
    76:78:28:cd:cb:03:2b:66:19:3e:39:12:98:86:d3:
    90:d6:43:72:6e:32:bf:27:c6:76:f4:ab:04:e6:54:
    f3:41:ca:52:60:7e:74:1c:26:b3:e9:4c:0e:94:88:
    bd:7d:3e:af:a0:0d:50:58:89:a5:7a:d2:9d:4c:27:
    0f:2c:c2:6e:98:2e:a8:6d:22:97:19:2a:7c:ae:0c:
    b8:d3:1e:46:f9:e5:62:b4:91:2c:43:a2:02:1d:30:
    6f:4f
Q:
    00:b0:60:bd:58:73:4e:5a:37:e5:4e:a3:15:2a:a7:
    d9:dd:e2:b6:c2:f9:3d:37:4b:9d:43:33:9b:25:9c:
    bc:97:67
G:
    02:80:e7:af:91:ef:92:ef:51:67:2e:84:a8:e4:f1:
    c5:e0:c1:98:c2:c9:59:e0:89:3f:71:3f:99:fd:ee:
    cf:fa:db:6e:6f:bc:8b:5b:d0:06:35:0d:c2:19:96:
    c1:be:18:43:ed:76:52:70:4d:d3:8f:71:e2:b4:d0:
    a6:1e:ed:0d:67:71:24:dd:f1:86:06:99:f4:39:a8:
    45:d1:ac:5b:55:af:f3:89:0d:44:87:e9:36:ac:02:
    a6:fc:5d:27:56:96:92:d5:5e:35:a8:62:5f:63:9c:
    bf:da:ff:8e:c0:a0:28:7a:9c:41:2a:2c:bb:c6:80:
    7c:7b:86:58:4e:af:95:2c:06:51:5f:15:81:cc:8f:
    c1:9b:72:fa:82:71:65:81:ee:9e:99:f7:04:f9:1e:
    90:e4:ea:88:0e:44:b1:78:0e:67:8b:b6:61:7b:94:
    27:f1:7f:a6:7f:7b:59:21:73:71:92:a6:5f:98:67:
    a3:b7:e4:b2:dd:e7:55:f3:22:ac:de:44:1a:54:71:
    e3:33:ce:22:ac:38:93:e1:6b:9b:96:43:ce:4c:8c:
    87:a3:86:97:a1:1c:b6:7c:cc:d8:ab:7d:82:a2:0f:
    f5:7a:75:a5:f1:bc:e7:04:94:ae:83:98:98:70:5d:
    89:b0:54:8b:84:bf:ec:b1:eb:bb:fc:55:98:d0:ca:
    b4
</code></pre>
</details>
<p>With the following code, we can parse it into an object:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> readline = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;readline&#x27;</span>)

<span class="hljs-keyword">const</span> rl = readline.createInterface({ <span class="hljs-attr">input</span>: sub.stdout })

<span class="hljs-keyword">const</span> params = {}
<span class="hljs-keyword">let</span> currentParam

rl.on(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> {
  <span class="hljs-comment">// Continuation of an existing parameter, append to it.</span>
  <span class="hljs-keyword">if</span> (line.startsWith(<span class="hljs-string">&#x27; &#x27;</span>) &amp;&amp; currentParam) {
    params[currentParam] += line.trim()
    <span class="hljs-keyword">return</span>
  }

  <span class="hljs-comment">// Definition of a new parameter.</span>
  <span class="hljs-keyword">const</span> split = line.split(<span class="hljs-string">&#x27;:&#x27;</span>)

  <span class="hljs-keyword">if</span> (split.length &lt; <span class="hljs-number">2</span>) {
    <span class="hljs-keyword">return</span>
  }

  currentParam = split[<span class="hljs-number">0</span>]
  params[currentParam] = split[<span class="hljs-number">1</span>].trim()
})

<span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
  sub.on(<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-function"><span class="hljs-params">code</span> =&gt;</span> {
    <span class="hljs-keyword">if</span> (code &gt; <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">return</span> reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`OpenSSL failed with code <span class="hljs-subst">${code}</span>`</span>))
    }

    resolve()
  })
})

<span class="hljs-built_in">console</span>.log(params)
</code></pre>
<p>Conveniently, OpenSSL returns the parameters in hexadecimal form
already, so we just need to remove the <code>:</code> that it separates each byte
with, and rename the properties to make a BrowserID JSON key.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> publicKey = {
  <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;DS&#x27;</span>,
  <span class="hljs-attr">y</span>: params.pub.replaceAll(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),
  <span class="hljs-attr">p</span>: params.P.replaceAll(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),
  <span class="hljs-attr">q</span>: params.Q.replaceAll(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),
  <span class="hljs-attr">g</span>: params.G.replaceAll(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)
}
</code></pre>
<h2 id="signing-the-jwt" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#signing-the-jwt">Signing the JWT</a></h2>
<p>The last part to refactor is the JWT:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> signedObject = <span class="hljs-keyword">await</span> promisify(jwcrypto.assertion.sign)(
  {},
  {
    <span class="hljs-attr">audience</span>: tokenServerUrl,
    <span class="hljs-attr">issuer</span>: authServerUrl,
    <span class="hljs-attr">expiresAt</span>: <span class="hljs-built_in">Date</span>.now() + duration
  },
  kp.secretKey
)
</code></pre>
<p>It seems that this is a standard JWT, so we can use the <a href="https://www.npmjs.com/package/njwt"><code>njwt</code></a>
package for this (a simpler and more flexible alternative to
<a href="https://www.npmjs.com/package/jsonwebtoken"><code>jsonwebtoken</code></a>).</p>
<div class="note">
<p><strong>Note:</strong> the main quirk is that Mozilla uses a milliseconds timestamp
for the <code>exp</code> field, while JWT defines it as a standard timestamp (in
seconds).</p>
<p>This means that with both libraries, we need to work around that in
order to force the <code>exp</code> field to be in milliseconds. For <code>njwt</code>, this
means doing <code>jwt.setClaim('exp', expiresAt)</code> instead of using
<code>jwt.setExpiration(expiresAt)</code>, and for <code>jsonwebtoken</code> it means
including the <code>exp</code> claim as part of the payload instead of using the
<code>expiresIn</code> parameter that is otherwise expressed as a duration in
seconds.</p>
</div>
<p>As for the private key, while <code>njwt</code> documents it should be a (PEM)
string or a (DER) buffer, since it just forwards it to Node.js <code>crypto</code>
module, we can directly give it the <a href="https://nodejs.org/api/crypto.html#crypto_class_keyobject"><code>KeyObject</code></a>
that‚Äôs in <code>kp.privateKey</code>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> njwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;njwt&#x27;</span>)

<span class="hljs-keyword">const</span> signedObject = njwt.create({ <span class="hljs-attr">aud</span>: tokenServerUrl, <span class="hljs-attr">iss</span>: authServerUrl }, kp.privateKey, <span class="hljs-string">&#x27;RS256&#x27;</span>)
  .setClaim(<span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-built_in">Date</span>.now() + duration)
  .compact()
</code></pre>
<p>Here we specified the <code>RS256</code> algorithm for a RSA key. This works
perfectly, and with this code, we can effectively generate a BrowserID
assertion that will be accepted by the TokenServer!</p>
<h3 id="hacking-around-dsa" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#hacking-around-dsa">Hacking around DSA</a></h3>
<p>But neither <a href="https://github.com/jwtk/njwt#supported-algorithms"><code>njwt</code></a>
nor <a href="https://github.com/auth0/node-jsonwebtoken#algorithms-supported"><code>jsonwebtoken</code></a>
support DSA signatures. In fact, it seems that most JWT libraries don‚Äôt
support DSA whatsoever.</p>
<p>That being said, we can leverage the fact that <code>njwt</code> forwards the
private key to the <a href="https://nodejs.org/api/crypto.html#crypto_sign_sign_privatekey_outputencoding"><code>crypto.sign</code></a>
method to make it work with our DSA key. All we need to do is to trick
it into thinking that it‚Äôs signing with the <code>RS256</code> algorithm so that it
follows the SHA-256 signature code path (which actually works perfectly
with a DSA key), and force the <code>alg</code> header to be <code>DS256</code> just at the
time it is encoded in the JWT (otherwise the library will complain that
the algorithm is unsupported).</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> njwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;njwt&#x27;</span>)

<span class="hljs-keyword">const</span> jwt = njwt.create({ <span class="hljs-attr">aud</span>: tokenServerUrl, <span class="hljs-attr">iss</span>: authServerUrl }, kp.privateKey, <span class="hljs-string">&#x27;RS256&#x27;</span>)
  .setClaim(<span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-built_in">Date</span>.now() + duration)

jwt.header.compact = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compact</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> alg = <span class="hljs-built_in">this</span>.alg
  <span class="hljs-built_in">this</span>.alg = <span class="hljs-string">&#x27;DS256&#x27;</span>
  <span class="hljs-keyword">const</span> header = njwt.JwtHeader.prototype.compact.call(<span class="hljs-built_in">this</span>)
  <span class="hljs-built_in">this</span>.alg = alg
  <span class="hljs-keyword">return</span> header
}

<span class="hljs-keyword">const</span> signedObject = jwt.compact()
</code></pre>
<p>This should work but it does not. I keep getting HTTP 401s with
<code>invalid-credentials</code> error from the TokenServer. Why? It took some
trial and error to figure as this was far from obvious.</p>
<p>It turns out that Node.js <a href="https://nodejs.org/api/crypto.html#crypto_sign_sign_privatekey_outputencoding">defaults the DSA signature encoding to DER</a>,
and BrowserID only supports the IEEE P1363 format.</p>
<p>Thankfully, Node.js allows us to wrap the private key in an object to
specify extra options like a <code>dsaEncoding: 'ieee-p1363'</code>. In the
previous code this would look like:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> jwt = njwt.create(
  { <span class="hljs-attr">aud</span>: tokenServerUrl, <span class="hljs-attr">iss</span>: authServerUrl },
  { <span class="hljs-attr">key</span>: kp.privateKey, <span class="hljs-attr">dsaEncoding</span>: <span class="hljs-string">&#x27;ieee-p1363&#x27;</span> },
  <span class="hljs-string">&#x27;RS256&#x27;</span>
)
</code></pre>
<p>Congratulations! We now also have a working DSA JWT!</p>
<h3 id="fully-native-implementation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#fully-native-implementation">Fully native implementation</a></h3>
<p>Now, let‚Äôs even remove the <code>njwt</code> dependency, and bake our own JWT
in-house. Because why not. It‚Äôs actually pretty trivial, and to be
honest, a simpler and cleaner solution for DSA than the hack we just
made.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)

<span class="hljs-keyword">const</span> header = { <span class="hljs-attr">alg</span>: <span class="hljs-string">&#x27;DS256&#x27;</span> }
<span class="hljs-keyword">const</span> payload = { <span class="hljs-attr">exp</span>: <span class="hljs-built_in">Date</span>.now() + duration, <span class="hljs-attr">aud</span>: tokenServerUrl, <span class="hljs-attr">iss</span>: authServerUrl }

<span class="hljs-keyword">const</span> body = [
  Buffer.from(<span class="hljs-built_in">JSON</span>.stringify(header)).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>),
  Buffer.from(<span class="hljs-built_in">JSON</span>.stringify(payload)).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)
].join(<span class="hljs-string">&#x27;.&#x27;</span>)

<span class="hljs-keyword">const</span> signature = crypto.sign(<span class="hljs-string">&#x27;SHA256&#x27;</span>, body, {
  <span class="hljs-attr">key</span>: kp.privateKey,
  <span class="hljs-attr">dsaEncoding</span>: <span class="hljs-string">&#x27;ieee-p1363&#x27;</span>
}).toString(<span class="hljs-string">&#x27;base64url&#x27;</span>)

<span class="hljs-keyword">const</span> signedObject = [body, signature].join(<span class="hljs-string">&#x27;.&#x27;</span>)
</code></pre>
<p>Believe it or not, this is all it takes to make a valid JWT. Not so bad,
isn‚Äôt it?</p>
<h2 id="making-the-backed-identity-assertion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#making-the-backed-identity-assertion">Making the backed identity assertion</a></h2>
<p>Since we have a valid <code>cert</code> and <code>signedObject</code> at that point, that part
stays the same. All we need to do is to <a href="https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#backed-identity-assertion">bundle them together</a>
with the <code>~</code> character (tilde).</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> backedAssertion = [cert, signedObject].join(<span class="hljs-string">&#x27;~&#x27;</span>)
</code></pre>
<p>This is the value we can pass in the <code>Authorization</code> header such as:</p>
<pre><code class="hljs">Authorization: BrowserID &lt;backedAssertion&gt;
</code></pre>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html#wrapping-up">Wrapping up</a></h2>
<p>And that‚Äôs it! We now have a fully working BrowserID implementation,
with both RSA and DSA support, that only depend on the native <code>crypto</code>
module!</p>
<p>There were some incompatibilities with DSA that we needed to work
around, especially the fact that it is not supported by JWK, forcing us
to fallback to the OpenSSL CLI to extract the key parameters, and also
that common JWT libraries don‚Äôt support it either, leading us to write
our own (dead simple) JWT implementation.</p>
<p>This makes the code a bit simpler if we only use RSA, where it‚Äôs barely
longer than the initial browserid-crypto version, while the DSA version
is a bit hairier with the code to invoke OpenSSL and parse its output,
as well as the custom JWT signature.</p>
<p>Because of that, unlike <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#give-me-the-whole-code">in the previous post</a>,
I won‚Äôt include the full code here. You should easily be able to put
together the pieces that you need from this article.</p>
<p>But this is probably not an exercise you should be interested in
anyways, because as I later found out, it‚Äôs not just browserid-crypto
that‚Äôs unmaintained, but the BrowserID protocol altogether that‚Äôs
deprecated! In the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">next stop of this journey</a>,
we‚Äôll look at the OAuth version, which turned out to be much easier to
support than it first looked like.</p>
<div class="note">
<p>Check out the other posts in this series!</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
]]></content>
  </entry>
  <entry>
    <title>A journey to scripting Firefox Sync / Lockwise: figuring the protocol</title>
    <link href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html" />
    <id>https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html</id>
    <updated>2021-08-08T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<p>This article is part of a series about scripting Firefox Sync / Lockwise.</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: figuring the protocol</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
<p>In the previous post, we found existing Firefox Sync clients, one in
Python and one in Node.js. Both hadn‚Äôt been updated in more than 6
years but with some quick fixes we got them working.</p>
<p>For learning purpose, let‚Äôs extract the code from <a href="https://github.com/zaach/node-fx-sync">node-fx-sync</a>
that‚Äôs necessary to access Firefox Sync collections, and simplify it as
much as possible.</p>
<p>The first step is to authenticating with <a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md">Firefox Accounts</a>.
Then, we need to do a little crypto dance with the <a href="https://github.com/mozilla-services/tokenserver">Firefox Sync TokenServer</a>
that will in turn give us credentials to access an actual <a href="https://github.com/mozilla-services/syncstorage-rs">Firefox Sync API node</a>.
The <a href="https://mozilla-services.readthedocs.io/en/latest/storage/apis-1.5.html">Sync API</a>
will then let us query collections, that we can decrypt with some more
crypto wizardry.</p>
<p>I‚Äôll break that down in pieces below, then give a fully working example
that you can just copy and run yourself.</p>
<h2 id="sign-in-to-firefox-accounts" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#sign-in-to-firefox-accounts">Sign in to Firefox Accounts</a></h2>
<p>First we instantiate a <a href="https://www.npmjs.com/package/fxa-js-client">fxa-js-client</a> to interact
with the Firefox Accounts API.</p>
<div class="note">
<p><strong>Note:</strong> this client is not maintained, it‚Äôs been replaced with
<a href="https://github.com/mozilla/fxa/tree/main/packages/fxa-auth-client">fxa-auth-client</a>
in <a href="https://github.com/mozilla/fxa/pull/5993">this PR</a> a year ago, but
that newer package is not published on npm, and since it‚Äôs part of a
monorepo, we can‚Äôt install it from GitHub with npm either.</p>
<p><a href="https://gitpkg.vercel.app/">GitPkg</a> can help with that, but I‚Äôd rather
not introduce an element of indirection in fetching the package that
I‚Äôll give my Firefox Accounts password to.</p>
</div>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> AuthClient = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fxa-js-client&#x27;</span>)

<span class="hljs-keyword">const</span> authServerUrl = <span class="hljs-string">&#x27;https://api.accounts.firefox.com/v1&#x27;</span>
<span class="hljs-keyword">const</span> email = <span class="hljs-string">&#x27;...&#x27;</span>
<span class="hljs-keyword">const</span> pass = <span class="hljs-string">&#x27;...&#x27;</span>

<span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> AuthClient(authServerUrl)

<span class="hljs-keyword">const</span> creds = <span class="hljs-keyword">await</span> client.signIn(email, pass, {
  <span class="hljs-attr">keys</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">reason</span>: <span class="hljs-string">&#x27;login&#x27;</span>
})
</code></pre>
<p>As we saw earlier, setting <code>reason: 'login'</code> is necessary for the
login to work without needing an unblock code sent to the user email.</p>
<p>Because we specified <code>keys: true</code>, we get <code>keyFetchToken</code> and
<code>unwrapBKey</code> in the response, which allows us to fetch the account keys.
This will be useful later.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> accountKeys = <span class="hljs-keyword">await</span> client.accountKeys(creds.keyFetchToken, creds.unwrapBKey)
</code></pre>
<h2 id="the-firefox-sync-tokenserver-authentication-dance" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#the-firefox-sync-tokenserver-authentication-dance">The Firefox Sync TokenServer authentication dance</a></h2>
<p>Next, we need to <a href="https://github.com/mozilla-services/tokenserver">call the TokenServer</a>
to get the credentials for the Firefox Sync API.</p>
<p>There is two ways of authenticating to the TokenServer: <a href="https://github.com/mozilla-services/tokenserver#using-browserid">BrowserID</a>
and <a href="https://github.com/mozilla-services/tokenserver#using-oauth">OAuth</a>.</p>
<div class="note">
<p>At that point I just copied what <a href="https://github.com/mozilla-services/syncclient">Mozilla‚Äôs Python client</a>
and <a href="https://github.com/zaach/node-fx-sync">node-fx-sync</a> were doing,
which is using BrowserID. It‚Äôs also the method that‚Äôs referred in most,
if not all, the documentation I could find online to this day.</p>
<p>I later found out that OAuth is <a href="https://vladikoff.github.io/app-services-site/docs/accounts/welcome.html">the new, recommended way</a>
and the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">last</a>
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">posts</a> of this
series explains how to implement it. If you don‚Äôt care about BrowserID,
you can directly <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#actually-calling-firefox-sync">jump to the next section</a>
that explains how to fetch and decrypt records from a Sync node.</p>
</div>
<p>The <a href="https://github.com/mozilla/id-specs/blob/prod/browserid/index.md">BrowserID protocol</a>
requires us to generate an asymmetric keypair, either DSA or RSA.
Mozilla made the <a href="https://www.npmjs.com/package/browserid-crypto">browserid-crypto</a>
package (previously known as <code>jwcrypto</code>) to help with implementing it.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> jwcrypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto&#x27;</span>)

<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto/lib/algs/ds&#x27;</span>)
<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto/lib/algs/rs&#x27;</span>)

<span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(jwcrypto.generateKeypair)({ <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;DS&#x27;</span>, <span class="hljs-attr">keysize</span>: <span class="hljs-number">256</span> })

<span class="hljs-comment">// Also works with RSA.</span>
<span class="hljs-comment">// const kp = await promisify(jwcrypto.generateKeypair)({ algorithm: &#x27;RS&#x27;, keysize: 256 })</span>
</code></pre>
<p>After generating the keypair, we need to ask the Firefox Accounts
server to generate a signed certificate of our public key. As documented
<a href="https://github.com/mozilla/fxa/blob/f6bc0268a9be12407456fa42494243f336d81a38/packages/fxa-auth-server/docs/api.md#request-body-32">on the API</a>,
the certificate validity duration is set in milliseconds and can be up
to 24 hours.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> duration = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>
<span class="hljs-keyword">const</span> { cert } = <span class="hljs-keyword">await</span> client.certificateSign(creds.sessionToken, kp.publicKey.toSimpleObject(), duration)
</code></pre>
<p>Next, we generate an <a href="https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#identity-assertion">‚Äúidentity assertion‚Äù</a>
(essentially a <a href="https://en.wikipedia.org/wiki/JSON_Web_Token"><abbr title="JSON Web Token">JWT</abbr></a>
with an empty payload) using our private key.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> tokenServerUrl = <span class="hljs-string">&#x27;https://token.services.mozilla.com&#x27;</span>

<span class="hljs-keyword">const</span> signedObject = <span class="hljs-keyword">await</span> promisify(jwcrypto.assertion.sign)(
  {},
  {
    <span class="hljs-attr">audience</span>: tokenServerUrl,
    <span class="hljs-attr">issuer</span>: authServerUrl,
    <span class="hljs-attr">expiresAt</span>: <span class="hljs-built_in">Date</span>.now() + duration
  },
  kp.secretKey
)
</code></pre>
<p>By combining the previous certificate with this JWT, separated by the
<code>~</code> character (tilde), we create a <a href="https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#backed-identity-assertion">‚Äúbacked identity assertion‚Äù</a>,
that we‚Äôll be able to use in the <code>Authorization</code> header.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> backedAssertion = [cert, signedObject].join(<span class="hljs-string">&#x27;~&#x27;</span>)
</code></pre>
<div id="compute-client-state"></div>
<p>We also compute the <code>X-Client-State</code> header which is the first 32 bytes
of a SHA-256 digest of the Sync key <a href="https://github.com/mozilla-services/tokenserver#using-browserid">as documented here</a>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)

<span class="hljs-keyword">const</span> syncKey = Buffer.from(accountKeys.kB, <span class="hljs-string">&#x27;hex&#x27;</span>)
<span class="hljs-keyword">const</span> clientState = crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(syncKey).digest().slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>)
</code></pre>
<p>We now have everything ready to call the <a href="https://github.com/mozilla-services/tokenserver#using-browserid">TokenServer</a>.
I‚Äôll use <a href="https://www.npmjs.com/package/node-fetch"><code>node-fetch</code></a> for
that.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)

<span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">${tokenServerUrl}</span>/1.0/sync/1.5`</span>, {
  <span class="hljs-attr">headers</span>: {
    <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`BrowserID <span class="hljs-subst">${backedAssertion}</span>`</span>,
    <span class="hljs-string">&#x27;X-Client-State&#x27;</span>: clientState
  }
})
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
</code></pre>
<p>This gives us ‚Äúthe URL of the user‚Äôs Sync storage node, and some
short-lived credentials that can be used to access it‚Äù as documented
<a href="https://github.com/mozilla-services/tokenserver#api">here</a>.</p>
<h2 id="actually-calling-firefox-sync" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#actually-calling-firefox-sync">Actually calling Firefox Sync</a></h2>
<p>We now have the credentials to call the <a href="https://mozilla-services.readthedocs.io/en/latest/storage/apis-1.5.html">Firefox Sync API</a>.
It uses <a href="https://github.com/mozilla/hawk/blob/main/API.md#usage-example">Hawk authentication</a>,
so we‚Äôll write a <code>fetch</code> wrapper to handle it for us.</p>
<p>For convenience, we‚Äôll make it take the <a href="https://github.com/mozilla-services/tokenserver#response">token we got from the Sync TokenServer</a>
earlier, since it contains everything we need to perform Hawk
authentication, and we‚Äôll leverage the <a href="https://www.npmjs.com/package/hawk"><code>hawk</code></a>
package to do the heavy lifting.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> Hawk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hawk&#x27;</span>)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hawkFetch</span> (<span class="hljs-params">token, path, params = {}</span>) </span>{
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`<span class="hljs-subst">${token.api_endpoint}</span>/<span class="hljs-subst">${path}</span>`</span>

  <span class="hljs-keyword">const</span> hawkOptions = {
    <span class="hljs-attr">credentials</span>: {
      <span class="hljs-attr">id</span>: token.id,
      <span class="hljs-attr">key</span>: token.key,
      <span class="hljs-attr">algorithm</span>: token.hashalg
    }
  }

  <span class="hljs-keyword">if</span> (params.body) {
    hawkOptions.payload = params.body
  }

  <span class="hljs-keyword">const</span> authHeader = Hawk.client.header(url, params.method || <span class="hljs-string">&#x27;get&#x27;</span>, hawkOptions)

  <span class="hljs-keyword">return</span> fetch(url, <span class="hljs-built_in">Object</span>.assign({}, params, {
    <span class="hljs-attr">headers</span>: <span class="hljs-built_in">Object</span>.assign({
      <span class="hljs-attr">Authorization</span>: authHeader.header
    }, params.headers)
  }))
}
</code></pre>
<p>We can then use that helper to fetch the passwords:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> passwords = <span class="hljs-keyword">await</span> hawkFetch(token, <span class="hljs-string">&#x27;storage/passwords?full=true&#x27;</span>)
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
</code></pre>
<p>But those passwords are encrypted! If we want to access the actual
payload (including the domain, username and password for each entry), we
need a couple more steps.</p>
<p>Sync stores ‚Äúcollections‚Äù, e.g. bookmarks, history, tabs, passwords and
more. The collections are made of objects, referred to as BSO (basic
storage object) and previously known as a WBO (Weave basic object).</p>
<p>Each object is encrypted using a symmetric key that is stored in the
keys collection, a special collection encrypted with a key derived from
the user Sync key, itself derived locally from the user password,
effectively making Firefox Sync <a href="https://medium.com/mozilla-tech/how-firefox-sync-keeps-your-secrets-if-tls-fails-14420d45885c">end-to-end</a>
<a href="https://github.com/mozilla/fxa-auth-server/wiki/onepw-protocol">encrypted</a>. ü§Ø</p>
<p>The keys are fetched like the passwords:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> cryptoKeys = <span class="hljs-keyword">await</span> hawkFetch(token, <span class="hljs-string">&#x27;storage/crypto/keys&#x27;</span>)
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
</code></pre>
<div id="derive-sync-key"></div>
<p>To decrypt them, we need to derive the user Sync key using <a href="https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html#sync-key-bundle">HKDF</a>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deriveKeys</span> (<span class="hljs-params">syncKey</span>) </span>{
  <span class="hljs-keyword">const</span> salt = <span class="hljs-string">&#x27;&#x27;</span>
  <span class="hljs-keyword">const</span> info = <span class="hljs-string">&#x27;identity.mozilla.com/picl/v1/oldsync&#x27;</span>
  <span class="hljs-keyword">const</span> bundle = Buffer.from(<span class="hljs-keyword">await</span> promisify(crypto.hkdf)(<span class="hljs-string">&#x27;sha256&#x27;</span>, syncKey, salt, info, <span class="hljs-number">64</span>))

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">encryptionKey</span>: bundle.slice(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>),
    <span class="hljs-attr">hmacKey</span>: bundle.slice(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>)
  }
}

<span class="hljs-keyword">const</span> syncKey = Buffer.from(accountKeys.kB, <span class="hljs-string">&#x27;hex&#x27;</span>)
<span class="hljs-keyword">const</span> syncKeyBundle = <span class="hljs-keyword">await</span> deriveKeys(syncKey)
</code></pre>
<p>This gives us a bundle containing an encryption key and a HMAC key. The
records are <a href="https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html#record-encryption">encrypted using AES-256-CBC and signed with HMAC using the respective keys</a>.</p>
<p>We‚Äôll write a <code>decryptBSO</code> helper, that takes a key bundle and a BSO to
decrypt, performing HMAC verification at the same time.</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptBSO</span> (<span class="hljs-params">keyBundle, bso</span>) </span>{
  <span class="hljs-keyword">const</span> payload = <span class="hljs-built_in">JSON</span>.parse(bso.payload)

  <span class="hljs-keyword">const</span> hmac = crypto.createHmac(<span class="hljs-string">&#x27;sha256&#x27;</span>, keyBundle.hmacKey)
    .update(payload.ciphertext)
    .digest(<span class="hljs-string">&#x27;hex&#x27;</span>)

  <span class="hljs-keyword">if</span> (hmac !== payload.hmac) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;HMAC mismatch&#x27;</span>)
  }

  <span class="hljs-keyword">const</span> iv = Buffer.from(payload.IV, <span class="hljs-string">&#x27;base64&#x27;</span>)
  <span class="hljs-keyword">const</span> decipher = crypto.createDecipheriv(<span class="hljs-string">&#x27;aes-256-cbc&#x27;</span>, keyBundle.encryptionKey, iv)
  <span class="hljs-keyword">const</span> plaintext = decipher.update(payload.ciphertext, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>) + decipher.final(<span class="hljs-string">&#x27;utf8&#x27;</span>)
  <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">JSON</span>.parse(plaintext)

  <span class="hljs-keyword">if</span> (result.id !== bso.id) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Record ID mismatch&#x27;</span>)
  }

  <span class="hljs-keyword">return</span> result
}
</code></pre>
<p>Now we can adapt our keys fetching code so that it also decrypts them.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> cryptoKeys = <span class="hljs-keyword">await</span> hawkFetch(token, <span class="hljs-string">&#x27;storage/crypto/keys&#x27;</span>)
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
  .then(<span class="hljs-function"><span class="hljs-params">bso</span> =&gt;</span> decryptBSO(syncKeyBundle, bso))
</code></pre>
<p>Finally, we want to decrypt the passwords that we fetched earlier. The
keys we just retrieved are made of a <em>default key bundle</em>, as well as
optional <em>collection-specific keys</em>, as defined in <a href="https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html#format">the protocol</a>.</p>
<p>In practice, I only encountered default keys, but I still support
collection keys for future compatibility.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> encodedKeyBundle = cryptoKeys.collections.passwords || cryptoKeys.default

<span class="hljs-keyword">const</span> collectionKeyBundle = {
  <span class="hljs-attr">encryptionKey</span>: Buffer.from(encodedKeyBundle[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;base64&#x27;</span>),
  <span class="hljs-attr">hmacKey</span>: Buffer.from(encodedKeyBundle[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>)
}
</code></pre>
<p>Notice how the <code>collectionKeyBundle</code> variable is compatible with the
<code>keyBundle</code> we pass to <code>decryptBSO</code>? This is how we‚Äôll be able to
decrypt the passwords!</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> passwords = <span class="hljs-keyword">await</span> hawkFetch(token, <span class="hljs-string">&#x27;storage/passwords?full=true&#x27;</span>)
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
  .then(<span class="hljs-function"><span class="hljs-params">items</span> =&gt;</span> items.map(<span class="hljs-function"><span class="hljs-params">bso</span> =&gt;</span> decryptBSO(collectionKeyBundle, bso)))
</code></pre>
<p>And voil√†! This is all we need to fetch and decrypt records from Firefox
Sync! <a href="https://github.com/zaach/node-fx-sync">It</a>
<a href="https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md">only</a>
<a href="https://github.com/mozilla-services/tokenserver">took</a>
<a href="https://github.com/mozilla-services/syncstorage-rs">reading</a>
<a href="https://mozilla-services.readthedocs.io/en/latest/storage/apis-1.5.html">documentation</a>
<a href="https://www.npmjs.com/package/fxa-js-client">from</a>
<a href="https://github.com/mozilla/fxa/tree/main/packages/fxa-auth-client">14</a>
<a href="https://github.com/mozilla-services/syncclient">different</a>
<a href="https://vladikoff.github.io/app-services-site/docs/accounts/welcome.html">places</a>
<a href="https://github.com/mozilla/id-specs/blob/prod/browserid/index.md">to</a>
<a href="https://www.npmjs.com/package/browserid-crypto">understand</a>
<a href="https://github.com/mozilla/hawk/blob/main/API.md">how</a>
<a href="https://github.com/mozilla/fxa-auth-server/wiki/onepw-protocol">it</a>
<a href="https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html">works</a>.</p>
<p>Writing data is only a matter of implementing <code>encryptBSO</code>, essentially
doing the reverse of what <code>decryptBSO</code> is doing, and sending the
<a href="https://mozilla-services.readthedocs.io/en/latest/storage/apis-1.5.html#individual-collection-interaction">corresponding <code>PUT</code> or <code>POST</code> requests</a>.
I‚Äôll leave that as an exercise to the reader. üòâ</p>
<p>But we‚Äôre not done yet. First I‚Äôll share with you the code that we built
in this post, then we‚Äôll take a look at <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">how BrowserID works</a>
(you‚Äôll understand <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#going-further">why</a>).</p>
<h2 id="give-me-the-whole-code" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#give-me-the-whole-code">Give me the whole code!</a></h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)
<span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)
<span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>)
<span class="hljs-keyword">const</span> AuthClient = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fxa-js-client&#x27;</span>)
<span class="hljs-keyword">const</span> jwcrypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto&#x27;</span>)
<span class="hljs-keyword">const</span> Hawk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hawk&#x27;</span>)

<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto/lib/algs/ds&#x27;</span>)
<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;browserid-crypto/lib/algs/rs&#x27;</span>)

<span class="hljs-keyword">const</span> authServerUrl = <span class="hljs-string">&#x27;https://api.accounts.firefox.com/v1&#x27;</span>
<span class="hljs-keyword">const</span> tokenServerUrl = <span class="hljs-string">&#x27;https://token.services.mozilla.com&#x27;</span>
<span class="hljs-keyword">const</span> email = <span class="hljs-string">&#x27;...&#x27;</span>
<span class="hljs-keyword">const</span> pass = <span class="hljs-string">&#x27;...&#x27;</span>

<span class="hljs-comment">// Derive the Sync key bundle as documented in &lt;https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html#sync-key-bundle&gt;</span>
<span class="hljs-comment">// in order to fetch the collection key bundles.</span>
<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deriveKeys</span> (<span class="hljs-params">syncKey</span>) </span>{
  <span class="hljs-keyword">const</span> salt = <span class="hljs-string">&#x27;&#x27;</span>
  <span class="hljs-keyword">const</span> info = <span class="hljs-string">&#x27;identity.mozilla.com/picl/v1/oldsync&#x27;</span>
  <span class="hljs-keyword">const</span> bundle = Buffer.from(<span class="hljs-keyword">await</span> promisify(crypto.hkdf)(<span class="hljs-string">&#x27;sha256&#x27;</span>, syncKey, salt, info, <span class="hljs-number">64</span>))

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">encryptionKey</span>: bundle.slice(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>),
    <span class="hljs-attr">hmacKey</span>: bundle.slice(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>)
  }
}

<span class="hljs-comment">// Decrypt a BSO (basic storage object) previously known as a WBO (Weave basic</span>
<span class="hljs-comment">// object) according to &lt;https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html#record-encryption&gt;.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptBSO</span> (<span class="hljs-params">keyBundle, bso</span>) </span>{
  <span class="hljs-keyword">const</span> payload = <span class="hljs-built_in">JSON</span>.parse(bso.payload)

  <span class="hljs-keyword">const</span> hmac = crypto.createHmac(<span class="hljs-string">&#x27;sha256&#x27;</span>, keyBundle.hmacKey)
    .update(payload.ciphertext)
    .digest(<span class="hljs-string">&#x27;hex&#x27;</span>)

  <span class="hljs-keyword">if</span> (hmac !== payload.hmac) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;HMAC mismatch&#x27;</span>)
  }

  <span class="hljs-keyword">const</span> iv = Buffer.from(payload.IV, <span class="hljs-string">&#x27;base64&#x27;</span>)
  <span class="hljs-keyword">const</span> decipher = crypto.createDecipheriv(<span class="hljs-string">&#x27;aes-256-cbc&#x27;</span>, keyBundle.encryptionKey, iv)
  <span class="hljs-keyword">const</span> plaintext = decipher.update(payload.ciphertext, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>) + decipher.final(<span class="hljs-string">&#x27;utf8&#x27;</span>)
  <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">JSON</span>.parse(plaintext)

  <span class="hljs-keyword">if</span> (result.id !== bso.id) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Record ID mismatch&#x27;</span>)
  }

  <span class="hljs-keyword">return</span> result
}

<span class="hljs-comment">// Fetch a URL using Hawk authentication according to</span>
<span class="hljs-comment">// &lt;https://github.com/mozilla/hawk/blob/main/API.md#usage-example&gt;.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// The token is expected to come from a Sync TokenServer response</span>
<span class="hljs-comment">// as documented in &lt;https://github.com/mozilla-services/tokenserver#response&gt;.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hawkFetch</span> (<span class="hljs-params">token, path, params = {}</span>) </span>{
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`<span class="hljs-subst">${token.api_endpoint}</span>/<span class="hljs-subst">${path}</span>`</span>

  <span class="hljs-keyword">const</span> hawkOptions = {
    <span class="hljs-attr">credentials</span>: {
      <span class="hljs-attr">id</span>: token.id,
      <span class="hljs-attr">key</span>: token.key,
      <span class="hljs-attr">algorithm</span>: token.hashalg
    }
  }

  <span class="hljs-keyword">if</span> (params.body) {
    hawkOptions.payload = params.body
  }

  <span class="hljs-keyword">const</span> authHeader = Hawk.client.header(url, params.method || <span class="hljs-string">&#x27;get&#x27;</span>, hawkOptions)

  <span class="hljs-keyword">return</span> fetch(url, <span class="hljs-built_in">Object</span>.assign({}, params, {
    <span class="hljs-attr">headers</span>: <span class="hljs-built_in">Object</span>.assign({
      <span class="hljs-attr">Authorization</span>: authHeader.header
    }, params.headers)
  }))
}

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> AuthClient(authServerUrl)

  <span class="hljs-keyword">const</span> creds = <span class="hljs-keyword">await</span> client.signIn(email, pass, {
    <span class="hljs-attr">keys</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">reason</span>: <span class="hljs-string">&#x27;login&#x27;</span>
  })

  <span class="hljs-keyword">const</span> accountKeys = <span class="hljs-keyword">await</span> client.accountKeys(creds.keyFetchToken, creds.unwrapBKey)

  <span class="hljs-keyword">const</span> kp = <span class="hljs-keyword">await</span> promisify(jwcrypto.generateKeypair)({ <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;DS&#x27;</span>, <span class="hljs-attr">keysize</span>: <span class="hljs-number">256</span> })

  <span class="hljs-comment">// Also works with RSA.</span>
  <span class="hljs-comment">// const kp = await promisify(jwcrypto.generateKeypair)({ algorithm: &#x27;RS&#x27;, keysize: 256 })</span>

  <span class="hljs-comment">// Time interval in milliseconds until the certificate will expire, up to a</span>
  <span class="hljs-comment">// maximum of 24 hours as documented in &lt;https://github.com/mozilla/fxa/blob/f6bc0268a9be12407456fa42494243f336d81a38/packages/fxa-auth-server/docs/api.md#request-body-32&gt;.</span>
  <span class="hljs-keyword">const</span> duration = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>

  <span class="hljs-keyword">const</span> { cert } = <span class="hljs-keyword">await</span> client.certificateSign(creds.sessionToken, kp.publicKey.toSimpleObject(), duration)

  <span class="hljs-comment">// Generate an &quot;identity assertion&quot; which is a JWT as documented in</span>
  <span class="hljs-comment">// &lt;https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#identity-assertion&gt;.</span>
  <span class="hljs-keyword">const</span> signedObject = <span class="hljs-keyword">await</span> promisify(jwcrypto.assertion.sign)(
    {},
    {
      <span class="hljs-attr">audience</span>: tokenServerUrl,
      <span class="hljs-attr">issuer</span>: authServerUrl,
      <span class="hljs-attr">expiresAt</span>: <span class="hljs-built_in">Date</span>.now() + duration
    },
    kp.secretKey
  )

  <span class="hljs-comment">// Certs are separated by a `~` as documented in &lt;https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#backed-identity-assertion&gt;.</span>
  <span class="hljs-keyword">const</span> backedAssertion = [cert, signedObject].join(<span class="hljs-string">&#x27;~&#x27;</span>)

  <span class="hljs-comment">// See &lt;https://github.com/mozilla-services/tokenserver#using-browserid&gt;.</span>
  <span class="hljs-keyword">const</span> syncKey = Buffer.from(accountKeys.kB, <span class="hljs-string">&#x27;hex&#x27;</span>)
  <span class="hljs-keyword">const</span> clientState = crypto.createHash(<span class="hljs-string">&#x27;sha256&#x27;</span>).update(syncKey).digest().slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>)

  <span class="hljs-keyword">const</span> token = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">${tokenServerUrl}</span>/1.0/sync/1.5`</span>, {
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-attr">Authorization</span>: <span class="hljs-string">`BrowserID <span class="hljs-subst">${backedAssertion}</span>`</span>,
      <span class="hljs-string">&#x27;X-Client-State&#x27;</span>: clientState
    }
  })
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())

  <span class="hljs-keyword">const</span> syncKey = Buffer.from(accountKeys.kB, <span class="hljs-string">&#x27;hex&#x27;</span>)
  <span class="hljs-keyword">const</span> syncKeyBundle = <span class="hljs-keyword">await</span> deriveKeys(syncKey)

  <span class="hljs-comment">// See &lt;https://mozilla-services.readthedocs.io/en/latest/storage/apis-1.5.html&gt;</span>
  <span class="hljs-comment">// for endpoints and authentication.</span>
  <span class="hljs-keyword">const</span> cryptoKeys = <span class="hljs-keyword">await</span> hawkFetch(token, <span class="hljs-string">&#x27;storage/crypto/keys&#x27;</span>)
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
    .then(<span class="hljs-function"><span class="hljs-params">bso</span> =&gt;</span> decryptBSO(syncKeyBundle, bso))

  <span class="hljs-keyword">const</span> encodedKeyBundle = cryptoKeys.collections.passwords || cryptoKeys.default

  <span class="hljs-keyword">const</span> collectionKeyBundle = {
    <span class="hljs-attr">encryptionKey</span>: Buffer.from(encodedKeyBundle[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;base64&#x27;</span>),
    <span class="hljs-attr">hmacKey</span>: Buffer.from(encodedKeyBundle[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>)
  }

  <span class="hljs-keyword">const</span> passwords = <span class="hljs-keyword">await</span> hawkFetch(token, <span class="hljs-string">&#x27;storage/passwords?full=true&#x27;</span>)
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
    .then(<span class="hljs-function"><span class="hljs-params">items</span> =&gt;</span> items.map(<span class="hljs-function"><span class="hljs-params">bso</span> =&gt;</span> decryptBSO(collectionKeyBundle, bso)))

  <span class="hljs-built_in">console</span>.log(passwords)
}

main()
</code></pre>
<h2 id="going-further" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#going-further">Going further</a></h2>
<p>This works like a charm, but one thing still bugs me. When running the
code, I see a deprecation warning in the console.</p>
<pre><code class="hljs">[DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
</code></pre>
<p>This is coming from browserid-crypto, so I made <a href="https://github.com/mozilla/browserid-crypto/pull/123">a PR to fix it</a>,
and while it got accepted, the maintainer <a href="https://github.com/mozilla/browserid-crypto/pull/123#pullrequestreview-703731665">pointed out to me</a>
that this library should be considered unmaintained:</p>
<blockquote>
<p>FWIW, it would be best to consider this library unmaintained at this
point, but I‚Äôm happy to take small fixes like this all the same.</p>
</blockquote>
<p>While there‚Äôs nothing wrong with using an unmaintained library as long
as it works, I was curious to see what it would take to remove the
browserid-crypto package from my dependencies. In the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">next post</a>,
we‚Äôll deconstruct BrowserID in order to implement the protocol with just
native and generic modules. Keep on reading!</p>
<div class="note">
<p>Check out the other posts in this series!</p>
<ol>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">A journey to scripting Firefox Sync / Lockwise: existing clients</a></li>
<li>A journey to scripting Firefox Sync / Lockwise: figuring the protocol</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
]]></content>
  </entry>
  <entry>
    <title>A journey to scripting Firefox Sync / Lockwise: existing clients</title>
    <link href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html" />
    <id>https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html</id>
    <updated>2021-08-08T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<div class="note">
<p>This article is part of a series about scripting Firefox Sync / Lockwise.</p>
<ol>
<li>A journey to scripting Firefox Sync / Lockwise: existing clients</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
<p>Recently, I switched to <a href="https://lockwise.firefox.com/">Firefox Lockwise</a>
as my password manager, for a <a href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html">number of reasons which I detailed here</a>.</p>
<p>There is currently no CLI for Lockwise, and while it‚Äôs not a critical
thing for me, I like to have the option to use my password manager from
the CLI, and to interact with it programmatically. So I figured it would
be a good exercise to build it myself.</p>
<p>I spent way more time digging in the Firefox Accounts and Firefox Sync
protocols than I‚Äôm willing to admit, and now I finally managed to
programmatically connect to my Firefox Account and interact with Firefox
Sync, I‚Äôm going to share that journey in a series of blog posts. Fasten
your seatbelts!</p>
<h2 id="fair-warning" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html#fair-warning">Fair warning</a></h2>
<p>You might not be interested in the whole story, especially in the two
following posts, where I explain how I started by implementing the
legacy BrowserID authentication mechanism (because it‚Äôs what‚Äôs
documented and used nearly everywhere), before <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">figuring that there is also support for OAuth</a>
which seems to be the most modern, recommended way to interact with the
API, and turned out to be much simpler to implement (<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">until it wasn‚Äôt</a>).</p>
<p>While the two implementations share a lot of code, if you just want to
know what‚Äôs the best way to interact with Firefox Sync in 2021, go
straight to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">hybrid OAuth</a>,
which still requires prompting the user‚Äôs email/password to open a
Firefox Accounts session first (concretely means that users have to
trust you more), or to <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">complete OAuth</a>
which, while it requires contacting Mozilla to obtain your own OAuth
credentials, frees you from the responsibility of handling the user‚Äôs
password and primary encryption key.</p>
<p>In both cases, the part to call the Firefox Sync API once the
authentication is performed remains the same and is explained
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html#actually-calling-firefox-sync">in the second post</a>.</p>
<p>That being said, if you want the whole story, let‚Äôs get started!</p>
<h2 id="our-good-old-friend-stack-overflow" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html#our-good-old-friend-stack-overflow">Our good old friend Stack Overflow</a></h2>
<p>I started looking for an API, and possibly existing API clients, and I
quickly figured Lockwise was built on top of Firefox Sync‚Äôs <code>passwords</code>
collection.</p>
<p>Looking up ‚ÄúFirefox Sync API‚Äù led me to <a href="https://stackoverflow.com/questions/35313330/firefox-sync-api-does-it-exist">this post from 2016 on Stack Overflow</a>,
where the top answer, which is also the only answer, points to the <a href="https://mozilla-services.readthedocs.io/en/latest/sync/index.html">Sync client documentation</a>
and mentions an existing <a href="https://github.com/mozilla-services/syncclient">Python client</a>.</p>
<p>While there‚Äôs a lot of documentation on the first link, it seems to
only explain the protocol specification, but it‚Äôs unclear where to start
as there‚Äôs no mention of an URL to query the API and how to authenticate
to it.</p>
<p>Looking at the client should give us a more concrete understanding.</p>
<h2 id="official-python-client" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html#official-python-client">Official Python client</a></h2>
<p>The first thing I notice is that the repository hasn‚Äôt been updated
since 2016 and is now archived, which means it‚Äôs probably not
up-to-date, definitely not actively maintained, and it‚Äôs even
<a href="https://github.com/mozilla-services/syncclient/blob/efe0d49a8bd00d341b6e926f6783325b3fe7b676/syncclient/client.py#L11">documented as a proof of concept</a>.</p>
<p>I try to use it but <code>pip install -r requirements.txt</code> fails with some
weird error. Since I also noticed there was a <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html#unofficial-node-js-client">Node.js client</a>,
I left it at that.</p>
<p>I later came back to it while writing this post, and it turns out after
fixing some <code>requirements.txt</code> versions issues, it does run
successfully! But it doesn‚Äôt implement the collection decryption part so
it would only have solved part of my problem.</p>
<h2 id="unofficial-node-js-client" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html#unofficial-node-js-client">Unofficial Node.js client</a></h2>
<p>There is also a <a href="https://github.com/zaach/node-fx-sync">Node.js client</a>,
last updated in 2014.</p>
<p>Out of the box, I cannot install it with <code>npm install fx-sync</code>, it fails
with the <code>jwcrypto</code> dependency post-install script. <a href="https://www.npmjs.com/package/jwcrypto">On npm</a>
this package is marked as deprecated, with a recommendation of using <a href="https://www.npmjs.com/package/browserid-crypto">browserid-crypto</a>
instead (which seems to be API-compatible), so after a quick <code>sed -i 's/jwcrypto/browserid-crypto/g'</code>,
I try again.</p>
<p>Sadly I get the same error, and realize that the post-install script was
broken because of a small issue that had to do with minifying the JS
output. I made a <a href="https://github.com/mozilla/browserid-crypto/pull/122">quick fix</a>
for it, which finally allowed the <code>fx-sync</code> package to install.</p>
<p>But the excitement dropped quickly as I get the following error during
the login step:</p>
<pre><code class="hljs language-js">{
  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">400</span>,
  <span class="hljs-string">&quot;errno&quot;</span>: <span class="hljs-number">125</span>,
  <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Request blocked&quot;</span>,
  <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The request was blocked for security reasons&quot;</span>,
  <span class="hljs-string">&quot;info&quot;</span>: <span class="hljs-string">&quot;https://github.com/mozilla/fxa/blob/main/packages/fxa-auth-server/docs/api.md#response-format&quot;</span>,
  <span class="hljs-string">&quot;verificationMethod&quot;</span>: <span class="hljs-string">&quot;email-captcha&quot;</span>,
  <span class="hljs-string">&quot;verificationReason&quot;</span>: <span class="hljs-string">&quot;login&quot;</span>
}
</code></pre>
<p>The login request is blocked for security reasons, and it‚Äôs unclear what
to do to fix it. While investigating, I find <a href="https://github.com/mozilla/fxa/issues/5794">this GitHub issue</a>
with the same error. While there is no solution in that issue, the OP
mentions an ‚Äúunblock code‚Äù which sounds interesting to me, so I figured
I‚Äôll try it myself.</p>
<p><a href="https://github.com/zaach/node-fx-sync">node-fx-sync</a> uses
<a href="https://www.npmjs.com/package/fxa-js-client">fxa-js-client</a> to interact
with Firefox Accounts, and looking at the package API, it contains a
method to send an unblock code, and a way to forward it to the <code>signIn</code>
method, so I integrate this flow to allow continuing the process using
the code sent to the account email.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> AuthClient = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fxa-js-client&#x27;</span>)

<span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> AuthClient(<span class="hljs-string">&#x27;https://api.accounts.firefox.com/v1&#x27;</span>)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span> (<span class="hljs-params">email, pass</span>) </span>{
  <span class="hljs-keyword">const</span> params = {
    <span class="hljs-attr">keys</span>: <span class="hljs-literal">true</span>
  }

  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> client.signIn(email, pass, params)
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-keyword">if</span> (err.code === <span class="hljs-number">400</span> &amp;&amp; err.errno === <span class="hljs-number">125</span>) {
      <span class="hljs-keyword">await</span> client.sendUnblockCode(email)
      params.unblockCode = <span class="hljs-keyword">await</span> promptUserForCode()
      <span class="hljs-keyword">return</span> client.signIn(email, pass, params)
    }

    <span class="hljs-keyword">throw</span> err
  }
}
</code></pre>
<p>At that point, I hadn‚Äôt run the <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html#official-python-client">Python client</a>
yet, but when I did so later, I realized that it <em>just worked</em>, without the
need for an unblock code. How was that possible? I looked at the source
and figured the only difference was that <a href="https://github.com/mozilla/PyFxA">PyFxA</a>,
the Python client for Firefox Accounts, <a href="https://github.com/mozilla/PyFxA/blob/6c3f803b3c27c665f417b0c5bd3ca79add8e2027/fxa/core.py#L78">sent <code>reason=login</code></a>
as part of the login parameters by default, which made the
authentication successful without external verification. Sweet!</p>
<pre><code class="hljs language-js">client.signIn(email, pass, {
  <span class="hljs-attr">keys</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">reason</span>: <span class="hljs-string">&#x27;login&#x27;</span>
})
</code></pre>
<p>After this patch, I got <code>fx-sync</code> to work without the need for an
unblock code, and it was successfully able to access my Firefox Sync
collections and decrypt them.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> FxSync = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fx-sync&#x27;</span>)

<span class="hljs-keyword">const</span> sync = <span class="hljs-keyword">new</span> FxSync({
  <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;...&#x27;</span>,
  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;...&#x27;</span>
})

<span class="hljs-keyword">const</span> passwords = <span class="hljs-keyword">await</span> sync.fetch(<span class="hljs-string">&#x27;passwords&#x27;</span>)

<span class="hljs-built_in">console</span>.log(passwords)
</code></pre>
<p>This is a great start, but there‚Äôs something with using a package that
hasn‚Äôt been updated since 2014 that just doesn‚Äôt feel right to me.</p>
<p>Also, this client only allows <em>read</em> access, but I would also like to be
able to add new objects, or update and delete existing ones. While I
could just implement this feature in the existing code, this feels like
a great opportunity to understand better how the protocol works by
making our own client. Let‚Äôs dig into it!</p>
<div class="note">
<p>Check out the other posts in this series!</p>
<ol>
<li>A journey to scripting Firefox Sync / Lockwise: existing clients</li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">A journey to scripting Firefox Sync / Lockwise: figuring the protocol</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">A journey to scripting Firefox Sync / Lockwise: understanding BrowserID</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">A journey to scripting Firefox Sync / Lockwise: hybrid OAuth</a></li>
<li><a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">A journey to scripting Firefox Sync / Lockwise: complete OAuth</a></li>
</ol>
</div>
]]></content>
  </entry>
  <entry>
    <title>Why I switched to Firefox Lockwise as my password manager</title>
    <link href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html" />
    <id>https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html</id>
    <updated>2021-08-08T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>First thing first, the purpose of this article is not to convince you to
do the same. I just like to document the reasoning behind some of my
choices, because I think it can be interesting. If you‚Äôre curious about
this, read on!</p>
<p>Also, this post is not going to be about <em>why you should use a password
manager</em> in the first place. But you should probably use a password
manager, and in case you don‚Äôt, I‚Äôll write a quick section about that.
Feel free to <a href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#why-firefox-lockwise">skip it</a>!</p>
<h2 id="why-you-should-use-a-password-manager" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#why-you-should-use-a-password-manager">Why you should use a password manager</a></h2>
<ul>
<li>Passwords are the most widespread way of authentication to websites
and other services on the Internet.</li>
<li>The average user tends to log in <a href="https://blog.dashlane.com/world-password-day/">on over a hundred services</a>,
and it‚Äôs only going to grow over time.</li>
</ul>
<p>This brings a number of challenges that are addressed by some common
ways of dealing with passwords, some worst than others, which I‚Äôll go
through below.</p>
<h3 id="using-a-single-password" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#using-a-single-password">Using a single password</a></h3>
<p>If you use the same password everywhere, would a single of the services
you signed up with have a security issue, that allows an attacker to
gain access to your password, and all of your other accounts sharing
that password can be considered compromised. Not great.</p>
<p>Using a different password everywhere mitigates that, but it‚Äôs not
scalable for most of us to remember hundreds of different passwords.</p>
<h3 id="deriving-a-password" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#deriving-a-password">Deriving a password</a></h3>
<p>A common solution that people found to help with this was to <em>derive</em> a
primary password for each service. Typically, since most people can‚Äôt
perform <a href="https://en.wikipedia.org/wiki/HKDF">HKDF</a> or
<a href="https://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a> mentally, we tend to just
prepend or append the base password to the website name or something
similar.</p>
<p>This is only an illusion of security and it‚Äôs fairly easy for an
attacker with access to one of your ‚Äúunique‚Äù passwords to guess in a
limited number of tries the corresponding passwords to other websites.</p>
<h3 id="using-oauth" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#using-oauth">Using OAuth</a></h3>
<p><a href="https://en.wikipedia.org/wiki/OAuth">OAuth</a>, e.g. ‚Äúsign in with Google
/ Apple / Twitter / Facebook / GitHub‚Äù is another common way to
authenticate to services, and is a solid alternative to passwords in a
lot of cases, but it is limited to the support of the websites you‚Äôre
trying to access.</p>
<p>For example, while your local grocery store might allow you to sign in
with Google, or the latest trending project with a .io domain probably
allows you to sign in with GitHub, it would be very weird if Apple /
Twitter / Facebook allowed you to sign in with Google, or any possible
combinations among them, meaning that you‚Äôll need a different password
at least for all of those. And anyways, a lot of services just don‚Äôt
support OAuth whatsoever meaning you‚Äôll need unique passwords for them
too.</p>
<p>In practice, OAuth is useful, but doesn‚Äôt solve the problem.</p>
<h3 id="using-a-password-manager" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#using-a-password-manager">Using a password manager</a></h3>
<p>A password manager takes away from you the responsibility of remembering
passwords. This means that it‚Äôs now easy to have a strong, unique
password for every account you have. The only password you need to
remember is now the one of your password manager (unless it uses a
different kind of authentication).</p>
<p>While you can import your existing (potentially weak, because you had to
remember them) passwords, moving to a password manager is also a good
opportunity to replace them with strong, randomly generated passwords.</p>
<p>The downside is that the primary password you choose for your password
manager becomes a single point of failure. If it is compromised, all
your passwords are compromised.</p>
<p>There‚Äôs a <a href="https://security.stackexchange.com/questions/152269/a-password-manager-a-single-point-of-failure-then-why-is-it-so-often-recommende">great thread on Stack Exchange</a>
about the tradeoffs of password managers.</p>
<p>Still, to mitigate that, I would recommend using a passphrase instead of
a password, as pointed out by <a href="https://xkcd.com/936/">this legendary xkcd</a>.</p>
<figure class="center">
  <a href="https://xkcd.com/936/">
    <img alt="Passphrases vs. passwords" src="https://imgs.xkcd.com/comics/password_strength.png">
  </a>
</figure>
<h2 id="why-firefox-lockwise" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#why-firefox-lockwise">Why Firefox Lockwise</a></h2>
<p>Now we‚Äôre on the same page about using a password manager (or not),
let‚Äôs see why I, personally, chose to move to Lockwise.</p>
<p>But before digging in what‚Äôs good or not about it, let me give a bit of
context about the way I use a password manager.</p>
<ul>
<li>I‚Äôm primarily a desktop (and laptop) user. I barely use my phone for
anything else than texting.</li>
<li>For the rare times I use my phone for something else, I want to be
able to easily access my passwords, and login to <em>existing</em> accounts
in the browser (I use Firefox for Android) and native apps.</li>
<li>I use Firefox passwords autosave/autofill feature (offline) as a
companion to my current CLI password manager. I want to keep at least
the same level of convenience, and ideally a better integration.</li>
<li>I need my password manager to be open source. If I can‚Äôt review the
code that‚Äôs going to deal with my passwords, I can‚Äôt trust it.</li>
<li>I currently don‚Äôt pay for any subscription other than my ISP and
mobile carrier, and I‚Äôd like to keep things this way.</li>
</ul>
<div class="note">
<p><strong>Fun fact!</strong> Before that, I was using my own password manager which was
just a tiny layer of (desktop-only) convenience over Git, PBKDF2 and
AES-256. While it could have worked on mobile, I was lazy to build an
app for it and decided it was time to change.</p>
</div>
<h2 id="pros" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#pros">Pros</a></h2>
<p>Let‚Äôs start with the pros of Firefox Lockwise. Sadly, there‚Äôs not a lot,
but their impact is so big for me that they make all the difference.</p>
<h3 id="it-s-native-to-firefox" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#it-s-native-to-firefox">It‚Äôs native to Firefox</a></h3>
<p>Lockwise is not a browser extension, it‚Äôs directly baked in Firefox
itself. This means that it is not limited to a browser extension sandbox
like third-party password managers. It‚Äôs basically just a cool name for
Firefox‚Äôs native passwords autofill engine, and the <code>passwords</code>
collection of Firefox Sync.</p>
<p>This has the advantage of allowing for a super smooth user experience
(at least for the happy path it was designed for). It pretty much always
does the right thing at the right time when it‚Äôs about filling login
forms, or asking to save new login information.</p>
<p>For comparison, when I was using Bitwarden (which to be honest, I find
superior in all other aspects), the experience wasn‚Äôt as seamless. Quite
often I wouldn‚Äôt be prompted to save new passwords, and I had to go in
the extension UI to add them manually, or it would fail to fill a login
form for which it had matching credentials, making me open the extension
to explicitly ask it to fill out the boxes. I think most of those issues
weren‚Äôt necessarily ‚Äúpoor quality‚Äù from Bitwarden, but more due to the
fact it‚Äôs limited to a browser extension sandbox, and cannot get the
same level of integration than the browser engine itself.</p>
<p>Because the happy path Lockwise was designed for overlaps so much with
my own usage (which might not be the case of everybody), this makes it a
great fit for me, compared to Bitwarden, which doesn‚Äôt perform as well
on my main use case, but does a better job at pretty much everything
else.</p>
<p>In other words, Lockwise is great 95% the time I use it, but sucks at
the remaining 5%, while Bitwarden is just consistently good (but not
great).</p>
<h3 id="it-s-part-of-firefox-sync" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#it-s-part-of-firefox-sync">It‚Äôs part of Firefox Sync</a></h3>
<p>As I mentioned in the previous part, Lockwise is built on top of Firefox
Sync, which happens to be the tool I use to synchronise my tabs and
bookmarks between all my devices.</p>
<p>At that point it seems like an obvious solution to also use it for
my passwords. After all, if the tool I‚Äôm already using fits my needs,
why try to add another one?</p>
<h2 id="cons" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#cons">Cons</a></h2>
<p>Now as of today, Lockwise is missing a number of features one would
expect from a password manager, some of them being being so basic that
it can look pretty ridiculous.</p>
<h3 id="no-extension-for-other-browsers" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#no-extension-for-other-browsers">No extension for other browsers</a></h3>
<p>Lockwise is part of Firefox, but there‚Äôs no integration with other
browsers. If Firefox isn‚Äôt your primary browser, you‚Äôre probably not
reading this anyways, but if you need to have convenient access to your
passwords in another browser, Lockwise is definitely not for you.</p>
<p>You can obviously still open Lockwise in Firefox and copy passwords to
your clipboard to use them anywhere, but in no way this can compete with
a proper integration.</p>
<h3 id="can-t-generate-new-passwords-on-mobile" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#can-t-generate-new-passwords-on-mobile">Can‚Äôt generate new passwords on mobile</a></h3>
<p>From the mobile version of Firefox, we can‚Äôt generate new passwords.
Neither can we from the Lockwise standalone mobile app.</p>
<p>If we submit a login form with a new password that we manually typed,
both Firefox and the Lockwise app will happily ask us if we want to
update an existing entry or save a new entry, but we just don‚Äôt have the
option to ‚Äúsuggest a strong password‚Äù like the desktop version does.</p>
<p>This is probably a dealbreaker for a lot of people, unless you only use
your phone a negligible part of the time like I do, and mostly as a
read-only client as far as for passwords are concerned.</p>
<h3 id="the-mobile-app-crashes-regularly" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#the-mobile-app-crashes-regularly">The mobile app crashes regularly</a></h3>
<p>While Firefox for Android works flawlessly for me, the Lockwise app
crashes pretty often (something as simple as trying to edit an entry
from the app). Since Firefox also have a UI to manage (synced)
passwords, I use that instead. It‚Äôs not something I need to do really
often on mobile anyways, if ever really.</p>
<p>The only reason I have the Lockwise app installed is to be able to
autofill a password in other native apps, and it does a good job at
this.</p>
<h3 id="no-totp-support" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#no-totp-support">No TOTP support</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Time-based_One-Time_Password">TOTP</a>
(time-based one-time password) is a common mechanism to provide
<a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">multi-factor authentication</a>
through authenticator apps. If you‚Äôre new to the concept, it‚Äôs
essentially a second password that is randomly generated by the issuing
service during setup, that you store in the authenticator app of your
choice, usually through a QR code.</p>
<p>When you later login on that service, on top of your actual password,
they‚Äôll request a confirmation code. Your authenticator app can use the
key that was configured during setup, together with the current time,
rounded down to the closest 30 seconds (or as configured otherwise) to
<a href="https://en.wikipedia.org/wiki/HMAC">generate</a> a short code that the
service will be able to verify only for that period of time.</p>
<p>It‚Äôs a common feature for password managers to support acting as a TOTP
authenticator, and <a href="https://jamesrcridland.medium.com/should-you-store-your-2fa-totp-tokens-in-your-password-manager-9798199b728">this post</a>
explains better than me why it‚Äôs a good thing. Sadly Lockwise doesn‚Äôt
support it.</p>
<p>While I would love TOTP support, it‚Äôs not a critical-enough feature for
me to trade off the quality of experience I otherwise have with Lockwise
to move to Bitwarden.</p>
<p>It‚Äôs especially not a big deal for me because I already have my own
‚Äúauthenticator app‚Äù based on <a href="https://www.npmjs.com/package/totp-generator">totp-generator</a>,
and I can hack my way around storing the TOTP secrets in Lockwise (maybe
I‚Äôll write a post on that at some point). While it‚Äôs far from a
world-class integration like the one Bitwarden offers, it‚Äôs good enough
for me for the time being.</p>
<h3 id="no-cli" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#no-cli">No CLI</a></h3>
<p>A CLI would have been a nice to have, but I rarely need to input
passwords on the command line these days anyways, since most tools now
use OAuth. Worst case, I can build one myself.</p>
<h3 id="no-explicitly-public-api-let-me-explain" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#no-explicitly-public-api-let-me-explain">No explicitly public API (let me explain)</a></h3>
<p>I‚Äôm not going to say that there‚Äôs no public API, because <a href="https://mozilla-services.readthedocs.io/en/latest/sync/">there is</a>.
But this document <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html#bonus-references">is not enough by itself</a>
to do anything useful with your Lockwise passwords.</p>
<p>It <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">took</a>
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-figuring-the-protocol.html">me</a>
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-understanding-browserid.html">days</a>
to figure out how to implement what was the legacy way
of reading passwords from Firefox Sync, and it took me
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-hybrid-oauth.html">even</a>
<a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-complete-oauth.html">longer</a>
to figure out the little documented but up-to-date way of doing so. I
wrote about it <a href="https://www.codejam.info/2021/08/scripting-firefox-sync-lockwise-existing-clients.html">in this series</a>,
and I really wish it didn‚Äôt need to be that long.</p>
<p>It seems to me that the main reason this API and documentation is public
is because Mozilla works in the open. They share all their code,
documentation, and even some (most?) of their communications. But they
don‚Äôt necessarily <em>intend</em> them to be consumed by third-party developers
and end-users like me.</p>
<div class="note">
<p><strong>Positive note:</strong> the fact that it was particularly hard to build
something with the ‚Äúpublic but not really‚Äù Firefox Sync API made me dig
very deep in the code and protocols behind it, and I now have a better
understanding of the tool than I would have had if it featured a
comprehensive API client in the first place. Because I ‚Äúreviewed‚Äù so
much of the code behind Lockwise, I‚Äôm now even more confident about
trusting it with my passwords.</p>
</div>
<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/08/why-i-switched-to-firefox-lockwise-as-my-password-manager.html#conclusion">Conclusion</a></h2>
<p>I find it pretty funny that the main reason I‚Äôm switching password
managers is to be able to use it from my phone, yet I chose Lockwise
which have a pretty limited mobile experience.</p>
<p>It just turns out that my use case on mobile overlaps exactly with the
part that the Lockwise app is good at (being a read-only password
manager).</p>
<p>Overall, the fact that Lockwise is baked in the browser gives it the
ability to provide a better experience than an extension would, and
while they do a solid job on desktop, they don‚Äôt leverage that ability
to its full potential on mobile.</p>
<p>If you‚Äôre a heavy mobile user, Lockwise is probably a no-go just because
of the lack of password generation feature (Bitwarden is probably a
better option for you at that point), but otherwise, it does an
excellent job at giving you access to existing passwords on your phone,
whether it‚Äôs in the browser or native apps.</p>
<p>In the end, it doesn‚Äôt really matter what password manager you‚Äôre going
to use, as long as you actually use one!</p>
]]></content>
  </entry>
  <entry>
    <title>Intercept a macOS app traffic using mitmproxy</title>
    <link href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html" />
    <id>https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html</id>
    <updated>2021-07-20T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I‚Äôll take as an example for this use case <a href="https://github.com/valeriangalliat/spotify-buddylist">a project of mine</a>
that exposes a hidden endpoint of the Spotify app, allowing to see the
friend activity feed (what your friends are currently playing).</p>
<p>In most cases I‚Äôll try to reverse a web app directly in the browser by
monitoring the HTTP calls in the network tab of the developer tools, but
the Spotify web player doesn‚Äôt support the friend activity feature, it‚Äôs
only available in the desktop app, so this wasn‚Äôt an option here.</p>
<p>In this post, I‚Äôll go through the steps necessary to intercept the
Spotify macOS app traffic using <a href="https://mitmproxy.org/">mitmproxy</a>, but
this could work with other apps as well.</p>
<h2 id="what-s-an-intercepting-proxy" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#what-s-an-intercepting-proxy">What‚Äôs an intercepting proxy?</a></h2>
<p>An intercepting proxy like <a href="https://mitmproxy.org/">mitmproxy</a> uses <a href="https://en.wikipedia.org/wiki/HTTP_tunnel">HTTP tunnelling</a>
to forward (and optionally capture) all the traffic that is sent to it.</p>
<p>Typically, you can configure a specific app, browser, or the whole
system to use a HTTP proxy to forward requests, so that, instead of
connecting directly to the desired hosts, it sends the traffic to the
configured proxy.</p>
<p>This can be useful for a number of reasons, and in our case, it allows
us to configure a proxy that we control, so that we can inspect the HTTP
traffic going through it.</p>
<h2 id="installing-and-running-mitmproxy" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#installing-and-running-mitmproxy">Installing and running mitmproxy</a></h2>
<p>Assuming you use <a href="https://brew.sh/">Homebrew</a>:</p>
<pre><code class="hljs language-sh">brew install mitmproxy
mitmproxy
</code></pre>
<p>This starts a terminal interface that will show all the requests going
through the proxy. Press <kbd>?</kbd> to see the keybindings.</p>
<p>By default the proxy runs on <code>localhost:8080</code>.</p>
<h2 id="first-try-macos-network-proxy-settings" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#first-try-macos-network-proxy-settings">First try: macOS network proxy settings</a></h2>
<p>The first thing I usually try for this is to configure the proxy
settings <a href="https://support.apple.com/en-ca/guide/mac-help/mchlp2591/mac">directly at the system level</a>,
because most apps don‚Äôt allow configuring a proxy in their settings. On
macOS, this will be in ‚ÄúSystem Preferences‚Äù, ‚ÄúNetwork‚Äù, ‚ÄúAdvanced‚Ä¶‚Äù,
‚ÄúProxies‚Äù, ‚ÄúWeb Proxy (HTTP)‚Äù.</p>
<p>But when opening the Spotify app, I only see a single authentication
request going through (interestingly), but definitely not the whole
traffic. It appears that the Spotify app currently ignores the system
proxy settings.</p>
<p>For other apps, especially ones that don‚Äôt allow configuring a proxy
inside the app, this might work.</p>
<h2 id="second-try-spotify-supports-app-level-proxy-settings" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#second-try-spotify-supports-app-level-proxy-settings">Second try: Spotify supports app-level proxy settings!</a></h2>
<p>To my surprise, Spotify allows you to configure a proxy directly inside
the app. Go in ‚ÄúSpotify‚Äù, ‚ÄúPreferences‚Äù, ‚ÄúShow advanced settings‚Äù,
‚ÄúProxy settings‚Äù to configure <code>localhost:8080</code> as a proxy.</p>
<figure class="center">
  <img alt="Spotfiy proxy" src="https://www.codejam.info/img/2021/07/spotify-proxy.png">
</figure>
<p>But after restarting the app we get an error in the mitmproxy console:</p>
<pre><code class="hljs">Warn: [::1]:65468: Client TLS handshake failed. The client may not trust the proxy&#x27;s certificate for login5.spotify.com (OpenSSL Error([(&#x27;SSL routines&#x27;, &#x27;ssl3_read_bytes&#x27;, &#x27;sslv3 alert certificate unknown&#x27;)]))
</code></pre>
<p>This is because to inspect HTTPS traffic, mitmproxy needs to use its own
SSL certificate, otherwise all we would see would be the encrypted
traffic between the app and Spotify servers.</p>
<h2 id="configuring-the-mitmproxy-ca-certificate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#configuring-the-mitmproxy-ca-certificate">Configuring the mitmproxy CA certificate</a></h2>
<p>mitmproxy comes with a <abbr title="Certificate authority">CA</abbr>
certificate that trusts the certificate used by mitmproxy to
terminate the SSL connection. By <a href="https://docs.mitmproxy.org/stable/concepts-certificates/">adding this CA certificate</a>
to the <a href="https://support.apple.com/en-ca/guide/keychain-access/kyca2431/mac">system list of trusted certificate</a>,
the app should allow the traffic to go through (unless it does <a href="https://security.stackexchange.com/questions/29988/what-is-certificate-pinning">certificate pinning</a>).</p>
<p>To do this, open the <code>~/.mitmproxy</code> directory which contains the
certificate files, open Keychain Access, and drop
<code>mitmproxy-ca-cert.pem</code> into it.</p>
<p>By default, macOS will not trust that new certificate, so you need to
double-click on it, and in the ‚ÄúTrust‚Äù section, set ‚ÄúAlways Trust‚Äù.</p>
<p>After restarting the Spotify app, you should now see the traffic going
through in mitmproxy.</p>
<figure class="center">
  <img alt="mitmproxy screenshot" src="https://www.codejam.info/img/2021/07/mitmproxy.png">
</figure>
<div class="note">
<p><strong>Note:</strong> I usually delete the certificate after I‚Äôm done inspecting
requests, just to be safe.</p>
</div>
<h2 id="identifying-the-friend-activity-endpoint" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/intercept-macos-app-traffic-mitmproxy.html#identifying-the-friend-activity-endpoint">Identifying the friend activity endpoint</a></h2>
<p>Then it‚Äôs a matter of browsing all the requests in the mitmproxy UI.</p>
<p>Here, it‚Äôll be particularly handy to use the filter function by pressing
<kbd>f</kbd>. This allows us to specify a <a href="https://docs.mitmproxy.org/stable/concepts-filters/">filter pattern</a>.</p>
<p>For example, if I know the URL I‚Äôm looking for contains the string
<code>buddylist</code>, I can type that in the filter prompt, which equals to the
command <code>set view_filter 'buddylist'</code>, so that mitmproxy only shows the
matching calls.</p>
<p>If I didn‚Äôt know this string was part of the URL, but instead wanted to
match on the body, which I know contains the string <code>shaktirockgym</code> (one
of my Spotify friends), I can use <code>~b shaktirockgym</code> as a filter.</p>
<p>Then, most of the work will be about <code>curl</code>ing the endpoints to get
successful responses, identifying what headers are necessary, what
parameters to pass, how to deal with authentication and other security
means the app have in place.</p>
<p>This should be enough to get you started on reversing a macOS app
network requests, to build your own client, scripts or whatnot. Happy
hacking!</p>
]]></content>
  </entry>
  <entry>
    <title>Adding search capability to a static blog using the GitHub API</title>
    <link href="https://www.codejam.info/2021/07/search-static-blog-github-api.html" />
    <id>https://www.codejam.info/2021/07/search-static-blog-github-api.html</id>
    <updated>2021-07-20T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I just added a <a href="https://www.codejam.info/index.html#search">search</a> feature to the home page,
check it out!</p>
<p>Actually, it should even work here too.</p>
<blockquote>
  <form class="search" onsubmit="return onSearchSubmit(this)">
    <p>Looking for something? Search the blog!</p>
    <p>
      <input type="text" name="query" placeholder="üîé">
      <button type="submit">Submit</button>
    </p>
    <div class="links posts"></div>
    <div class="message"></div>
  </form>
</blockquote>
<p>This blog is fully static, written in Markdown, the source is <a href="https://github.com/valeriangalliat/blog">hosted on GitHub</a>,
and the live site is hosted on some static site server. Depending on my
current mood, it can be <a href="https://pages.github.com/">GitHub Pages</a>,
nginx, <a href="https://www.netlify.com/">Netlify</a>,
<a href="https://vercel.com/">Vercel</a>, <a href="https://render.com/">Render</a>, or maybe
CloudFlare or S3 in the future, who knows.</p>
<p>Regardless of the hosting service, because of the static nature of the
blog, I can‚Äôt just run <code>grep</code> or similar on the server side to find
matching pages and return results.</p>
<p>Since the blog source is hosted on GitHub as a public repository, the
GitHub API was the obvious, most simple solution.</p>
<p>You can see the full source code <a href="https://github.com/valeriangalliat/blog/blob/01ded0c8defe399526032030bf17b912be6b6319/js/main.js#L163">here</a>,
but in this blog post, I‚Äôll break it down for you.</p>
<h2 id="the-html-part" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/search-static-blog-github-api.html#the-html-part">The HTML part</a></h2>
<p>I don‚Äôt use any framework on this blog, it‚Äôs vanilla everything.</p>
<p>For the search form, I just added this snippet.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return onSearchSubmit(this)&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Looking for something? Search the blog!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;üîé&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links posts&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
</code></pre>
<p>By doing <code>onsubmit=&quot;return onSearchSubmit(this)&quot;</code>, I define the action
inline from the markup. Passing <code>this</code> allows me to forward the current
<code>&lt;form&gt;</code> element that‚Äôs being submitted for context, and the <code>return</code>
allows to propagate a <code>return false</code> from the function to cancel the
default behaviour of submitting a query.</p>
<p>This is actually the oldest way of scripting events, and the browser
support of this pattern is going to be way better than that of the
<code>async</code> functions in my JS. üòÇ</p>
<p>This kind of code is <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#inline_event_handlers_%E2%80%94_dont_use_these">often perceived as a bad practice</a>,
outdated, ‚Äúsmelly code‚Äù, ‚Äúnot clean‚Äù and so on by purists (including myself),
because it usually results in poor maintainability, and it would be
better to do something like:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;form.search&#x27;</span>).forEach(<span class="hljs-function"><span class="hljs-params">form</span> =&gt;</span> {
  form.addEventListener(<span class="hljs-string">&#x27;submit&#x27;</span>, onSearchSubmit)
})
</code></pre>
<p>On the other hand, this form is only going to be used on two pages on
the blog (the home page and this very post), so I can afford the
copy/paste maintenance tradeoff, and by tying the handler to the HTML, I
don‚Äôt need my JS to look for <code>form.search</code> elements on every page load
where most of the time there will be none. While <em>this is as much of a
performance issue as the inline event handler is a maintenance
nightmare</em>, I‚Äôll favour this solution, just because.</p>
<p>Also, most modern front-end frameworks define event handlers
<a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#handling_form_submission">in ways that are very close</a>
to the HTML <code>onsubmit</code> attribute, and I do like this way of doing
things, so I‚Äôll just apply that to vanilla HTML, even if that means
using an ‚Äúoutdated‚Äù pattern.</p>
<p>That being said, for anything bigger than this use case, it‚Äôll probably
make more sense to use proper JS event handlers, or an actual framework.
Consider yourself warned!</p>
<h2 id="the-js-part" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/search-static-blog-github-api.html#the-js-part">The JS part</a></h2>
<p>Before going to the main JS code, I‚Äôll introduce the helpers that it
uses (don‚Äôt worry, there‚Äôs only two!).</p>
<p>The first one is called <code>el</code> and just adds some sugar around
<code>document.createElement</code>, setting attributes and adding child nodes to
it. I find it extremely convenient when scripting sites using vanilla JS.</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">el</span> (<span class="hljs-params">name, attrs = {}, children = []</span>) </span>{
  <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">document</span>.createElement(name)

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.entries(attrs)) {
    element[key] = value
  }

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> child <span class="hljs-keyword">of</span> children) {
    element.appendChild(child)
  }

  <span class="hljs-keyword">return</span> element
}
</code></pre>
<p>Then I have a more specific helper that empties both the results and
message <code>div</code>s. This is useful because when show results, I also want to
clear an eventual previous error message, and when showing an error, I
want to clear an eventual previous results set.</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">emptyFormData</span> (<span class="hljs-params">form</span>) </span>{
  form.querySelector(<span class="hljs-string">&#x27;.posts&#x27;</span>).textContent = <span class="hljs-string">&#x27;&#x27;</span>
  form.querySelector(<span class="hljs-string">&#x27;.message&#x27;</span>).textContent = <span class="hljs-string">&#x27;&#x27;</span>
}
</code></pre>
<p>This is followed by another quick helper to set the message.</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formMessage</span> (<span class="hljs-params">form, textContent</span>) </span>{
  emptyFormData(form)
  form.querySelector(<span class="hljs-string">&#x27;.message&#x27;</span>).appendChild(el(<span class="hljs-string">&#x27;p&#x27;</span>, { textContent }))
}
</code></pre>
<p>Now, to the interesting parts.</p>
<h3 id="the-submit-part" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/search-static-blog-github-api.html#the-submit-part">The submit part</a></h3>
<p>The <code>onSearchSubmit</code> function needs to be defined globally to be
callable from the HTML.</p>
<p>ESLint doesn‚Äôt like this, and thinks the function is unused (it can‚Äôt
guess it‚Äôs being called from the HTML), so I need to add the comment
above to ignore this warning.</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// eslint-disable-next-line no-unused-vars</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onSearchSubmit</span> (<span class="hljs-params">form</span>) </span>{
  searchBlog(form)
    .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
      <span class="hljs-built_in">console</span>.error(err)
      formMessage(form, <span class="hljs-string">&#x27;An error occurred! Check the console. ü§≠&#x27;</span>)
    })

  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
}
</code></pre>
<p>It then calls the <code>searchBlog</code> asynchronous function, handles any error
by logging it and showing a message using the <code>formMessage</code> helper.</p>
<p>Finally it returns <code>false</code> to prevent the default behaviour of the form
submission, which is to submit the form data as query parameters on the
current URL.</p>
<p>The following is the breakdown of the <code>searchBlog</code> function, defined as:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchBlog</span> (<span class="hljs-params">form</span>) </span>{
  <span class="hljs-comment">// Code goes here.</span>
}
</code></pre>
<h3 id="the-search-part" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/search-static-blog-github-api.html#the-search-part">The search part</a></h3>
<p>We start with a quick sanity check.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> query = form.query.value.trim().toLowerCase()

<span class="hljs-keyword">if</span> (!query.length) {
  <span class="hljs-keyword">return</span>
}
</code></pre>
<p>The GitHub repo for my blog is public, and the GitHub API can be called
anonymously, without any kind of token, OAuth or other authentication
mechanism.</p>
<p>This makes the search trivial to implement:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> q = <span class="hljs-string">`<span class="hljs-subst">${query}</span> in:file language:markdown repo:valeriangalliat/blog`</span>

<span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`https://api.github.com/search/code?q=<span class="hljs-subst">${<span class="hljs-built_in">encodeURIComponent</span>(q)}</span>`</span>)
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())
</code></pre>
<p>In practice, I also need to fetch the <code>posts.html</code> page which contains
the links to all the posts on the blog. This will allow me to find the
title of the pages that are matched without loading every single page.
In the end the code looks like this:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> [result, posts] = <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all([
  fetch(<span class="hljs-string">`https://api.github.com/search/code?q=<span class="hljs-subst">${<span class="hljs-built_in">encodeURIComponent</span>(q)}</span>`</span>)
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json()),
  fetch(<span class="hljs-string">&#x27;/posts.html&#x27;</span>)
    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.text())
])
</code></pre>
<h3 id="the-render-part" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/search-static-blog-github-api.html#the-render-part">The render part</a></h3>
<p>First, I remove <code>index.md</code> and <code>posts.md</code> from the results, since those
pages include a lot of links to existing articles, they would be matched
very often, and are not usually relevant.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> items = result.items.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> ![<span class="hljs-string">&#x27;index.md&#x27;</span>, <span class="hljs-string">&#x27;posts.md&#x27;</span>].includes(item.path))
</code></pre>
<p>Then, I add a quick check in case there was no match, again using the
<code>formMessage</code> helper.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">if</span> (!items.length) {
  <span class="hljs-keyword">return</span> formMessage(form, <span class="hljs-string">&#x27;No matches found on the blog. ü•∫&#x27;</span>)
}
</code></pre>
<p>Then I create a (native) <code>DOMParser</code> to parse the posts page, which
allows me to <code>querySelector</code> the matched posts by <code>href</code>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> parser = <span class="hljs-keyword">new</span> DOMParser()
<span class="hljs-keyword">const</span> postsDocument = parser.parseFromString(posts, <span class="hljs-string">&#x27;text/html&#x27;</span>)

<span class="hljs-keyword">const</span> lis = items.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> url = item.path.replace(<span class="hljs-regexp">/\.md$/</span>, <span class="hljs-string">&#x27;.html&#x27;</span>)
  <span class="hljs-keyword">return</span> postsDocument.querySelector(<span class="hljs-string">`a[href=&quot;<span class="hljs-subst">${url}</span>&quot;]`</span>).parentNode
})
</code></pre>
<p>In practice though, this page links posts relatively (e.g.
<code>2021/07/post-title.md</code>), while the search form could be included
anywhere, and require an absolute link like <code>/2021/07/post-title.md</code>. To
support this, we need to slightly modify the code:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> lis = items.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> relativeUrl = item.path.replace(<span class="hljs-regexp">/\.md$/</span>, <span class="hljs-string">&#x27;.html&#x27;</span>)
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`/<span class="hljs-subst">${relativeUrl}</span>`</span>
  <span class="hljs-keyword">const</span> a = postsDocument.querySelector(<span class="hljs-string">`a[href=&quot;<span class="hljs-subst">${relativeUrl}</span>&quot;]`</span>)

  a.href = url

  <span class="hljs-keyword">return</span> a.parentNode
})
</code></pre>
<p>I also want to sort the results by most recent post. The date is
included in a <code>&lt;small&gt;</code> element whose content is compatible with
<code>Date.parse</code> so this is convenient:</p>
<pre><code class="hljs language-js">lis.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> <span class="hljs-built_in">Date</span>.parse(b.querySelector(<span class="hljs-string">&#x27;small&#x27;</span>).textContent) - <span class="hljs-built_in">Date</span>.parse(a.querySelecotr(<span class="hljs-string">&#x27;small&#x27;</span>).textContent))
</code></pre>
<p>Finally I can show the results.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> ul = el(<span class="hljs-string">&#x27;ul&#x27;</span>, {}, lis)

emptyFormData(form)
form.querySelector(<span class="hljs-string">&#x27;.posts&#x27;</span>).appendChild(ul)
</code></pre>
<h3 id="the-reality-is-a-bit-more-complex-just-a-bit" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/search-static-blog-github-api.html#the-reality-is-a-bit-more-complex-just-a-bit">The reality is a bit more complex (just a bit)</a></h3>
<p>This whole search feature is implemented in around 50 lines of code, HTML and
JS combined, including helpers. And this is awesome.</p>
<p>In reality, I want to search not only blog posts, but also pages. Pages
don‚Äôt have a date for me to sort with, and are not listed in
<code>posts.html</code> so I can‚Äôt find their title instantly. Also <a href="https://www.codejam.info/2019/03/macos-high-sierra-msi-h110m-pro-d-skylake-nvidia-pascal.html">some of my titles</a>
include a <code>&lt;small&gt;</code> element, so it‚Äôs something to take into account.</p>
<p>In <a href="https://github.com/valeriangalliat/blog/blob/01ded0c8defe399526032030bf17b912be6b6319/js/main.js#L163">the real code</a>, I have to do a couple more things for
this to work.</p>
<ol>
<li>Check if a matching <code>&lt;a&gt;</code> is found in the <code>postsDocument</code>,
otherwise fetch the page itself and extract the <code>&lt;h1&gt;</code> as title.</li>
<li>Take into account that pages don‚Äôt have a date when sorting, for
example by using <code>Date.parse(b.querySelector('small').textContent) || 0</code>,
so that we don‚Äôt try to subtract <code>NaN</code> which would mess up the
sorting.</li>
</ol>
<p>For the latter, I decided to add a <code>customSortValue</code> property to the
<code>li</code> element instead, so that I can easily pass data from the loop to
the sorting function. Not exactly clean, but so convenient.</p>
<p>This allows me to run <code>Date.parse</code> only once per result instead of
running it at every iteration of the <code>sort</code> function, and removes the
need to use the <code>&lt;small&gt;</code> element content for sorting, as it‚Äôs not
always valid.</p>
<p>I also replaced <code>li.querySelector('small')</code> by <code>li.lastElementChild</code> to
support posts that include a <code>&lt;small&gt;</code> element in the title.</p>
<p>Here‚Äôs the full code:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> lis = <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(items.map(<span class="hljs-keyword">async</span> item =&gt; {
  <span class="hljs-keyword">const</span> relativeUrl = item.path.replace(<span class="hljs-regexp">/\.md$/</span>, <span class="hljs-string">&#x27;.html&#x27;</span>)
  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`/<span class="hljs-subst">${relativeUrl}</span>`</span>
  <span class="hljs-keyword">const</span> a = postsDocument.querySelector(<span class="hljs-string">`a[href=&quot;<span class="hljs-subst">${relativeUrl}</span>&quot;]`</span>)

  <span class="hljs-keyword">if</span> (a) {
    <span class="hljs-keyword">const</span> li = a.parentNode
    a.href = url
    <span class="hljs-keyword">const</span> small = li.lastElementChild
    li.customSortValue = small ? <span class="hljs-built_in">Date</span>.parse(small.textContent) : <span class="hljs-number">0</span>
    <span class="hljs-keyword">return</span> li
  }

  <span class="hljs-comment">// Fallback to fetching `&lt;h1&gt;` from actual page.</span>
  <span class="hljs-keyword">const</span> html = <span class="hljs-keyword">await</span> fetch(url).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.text())
  <span class="hljs-keyword">const</span> pageDocument = parser.parseFromString(html, <span class="hljs-string">&#x27;text/html&#x27;</span>)

  <span class="hljs-keyword">return</span> el(<span class="hljs-string">&#x27;li&#x27;</span>, { <span class="hljs-attr">customSortValue</span>: <span class="hljs-number">0</span> }, [
    el(<span class="hljs-string">&#x27;a&#x27;</span>, {
      <span class="hljs-attr">href</span>: url,
      <span class="hljs-attr">textContent</span>: pageDocument.querySelector(<span class="hljs-string">&#x27;h1&#x27;</span>).textContent
    }),
    el(<span class="hljs-string">&#x27;small&#x27;</span>, {
      <span class="hljs-attr">textContent</span>: <span class="hljs-string">&#x27;‚Äî&#x27;</span>
    })
  ])
}))

lis.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b.customSortValue - a.customSortValue)
</code></pre>
<p>This block starts to be a bit long and could probably be refactored into
different functions, but since it‚Äôs not code that I foresee evolving a
lot, I‚Äôm fine with it like this.</p>
<h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/07/search-static-blog-github-api.html#wrapping-up">Wrapping up</a></h2>
<p>I hope you find this feature useful on the blog, or this code useful for
you to implement a similar feature on your own site.</p>
<p>This tweet popped in my timeline yesterday, and couldn‚Äôt relate more. I
think it illustrates perfectly the search implementation on this blog.</p>
<blockquote>
<figure>
  <a href="https://twitter.com/flaviocopes/status/1417007331930423298/photo/1">
    <img alt="Code complexity" src="https://www.codejam.info/img/2021/07/code-complexity.jpg" width="500">
  </a>
</figure>
<p>‚Äî <a href="https://twitter.com/flaviocopes">@flaviocopes</a>, <a href="https://twitter.com/flaviocopes/status/1417007331930423298">July 19, 2021</a></p>
</blockquote>
<p>After more than 10 years building websites, I‚Äôve had my fare share of
frameworks, design patterns, bleeding edge libraries, compiling and
transpiling everything possible and new cool, revolutionary ways of
doing one thing or another.</p>
<p>While those kept me excited for many years, I ended up getting bored of
it, and incidentally started writing <a href="https://www.codejam.info/resources/simple.html">boring code</a>.</p>
<p>They‚Äôre all tools after all, and I won‚Äôt use them unless I have a good
reason to.</p>
<p>Have a great day, and keep things simple! üôè</p>
]]></content>
  </entry>
  <entry>
    <title>You‚Äôre (probably) doing anchor links wrong</title>
    <link href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html" />
    <id>https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html</id>
    <updated>2021-06-15T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I‚Äôm the original author of <a href="https://github.com/valeriangalliat/markdown-it-anchor">markdown-it-anchor</a>,
a <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> plugin to
automatically add an <code>id</code> attribute to headings, and optionally add
anchor links (permalinks).</p>
<p>There‚Äôs been <a href="https://amberwilson.co.uk/blog/are-your-anchor-links-accessible/">some</a>
<a href="https://nicolas-hoizey.com/articles/2021/02/25/accessible-anchor-links-with-markdown-it-and-eleventy/">activity</a>
<a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82">lately</a> <a href="https://twitter.com/nhoizey/status/1365064686094471173">about</a>
<a href="https://twitter.com/nhoizey/status/1366479047065239562">proper</a>
<a href="https://twitter.com/KittyGiraudel/status/1376789257176690688">accessibility</a>
of heading permalinks, and this was <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82">brought to my attention</a>
to improve markdown-it-anchor‚Äôs way of rendering permalinks out of the box.</p>
<p>If you want to get directly to the heart of the subject, you can jump
to <a href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#another-take-on-accessible-permalinks">another take on accessible permalinks</a>.
Otherwise, I‚Äôll start by giving a bit of backstory on the way
markdown-it-anchor handles permalinks.</p>
<h2 id="history-of-markdown-it-anchor-s-permalinks" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#history-of-markdown-it-anchor-s-permalinks">History of markdown-it-anchor‚Äôs permalinks</a></h2>
<p>When I originally built this plugin back in 2015, I gave a boolean
option to enable permalink generation, which would then default to a
GitHub-style permalink. The markup was the following.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-anchor&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#title&quot;</span>&gt;</span>¬∂<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
  Title
<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
</code></pre>
<p>You could configure the permalink class (defaulting to <code>header-anchor</code>),
permalink symbol (defaulting for some reason to <code>¬∂</code> which is actually a
paragraph symbol) or provide your own renderer function where you could
directly manipulate the markdown-it token stream.</p>
<p>I decided closely after the first release to
<a href="https://github.com/valeriangalliat/markdown-it-anchor/commit/bd2c324da38b0cfbb32f7ba0871b14877e273f41">add <code>aria-hidden=&quot;true&quot;</code> to the permalink</a>
to fully mimic GitHub‚Äôs behaviour, under the premise that the permalinks
weren‚Äôt relevant to screen reader users, and that GitHub was probably a
good example to follow about doing the Right Thing‚Ñ¢.</p>
<p>This was fine for the next couple of years, until‚Ä¶</p>
<h2 id="first-accessibility-request" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#first-accessibility-request">First accessibility request</a></h2>
<p>In 2019, we get our <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/58">first accessibility issue</a>,
pointing out that using <code>aria-hidden</code> was incorrect here because those
links would be useful to screen reader users too, and especially,
accessibility linting tools were flagging them because having
<code>aria-hidden</code> focusable elements is considered a bad practice.</p>
<p>This issue was opened by Zach, the author of
<a href="https://www.11ty.dev/">Eleventy</a>, a static site generator, and he
<a href="https://github.com/11ty/11ty-website/commit/28ba29e9d61d5d1ce74e9f56c47eb6d42ad9273a">patched the output</a>
of markdown-it-anchor in Eleventy to remove the <code>aria-hidden</code> attribute
<a href="https://github.com/11ty/11ty-website/pull/448">until it was fixed upstream</a>.</p>
<p>Fabio, a core contributor of markdown-it-anchor, tackled that issue and
<a href="https://github.com/valeriangalliat/markdown-it-anchor/commit/e276fe53e259bcd2bf6045b6093f82d3cd606f8c">removed <code>aria-hidden</code> from permalinks</a>
after <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/58#issuecomment-542385189">doing some research</a>
to confirm this was the right thing to do.</p>
<h2 id="first-issue-with-the-fix" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#first-issue-with-the-fix">First issue with the fix</a></h2>
<p>Do you know that feeling when you fix a bug, only to discover it
introduced at least another bug?</p>
<p>This is basically what happened by removing the <code>aria-hidden</code> attribute.</p>
<p>Just a few months after the fix, and this time on the Eleventy repo,
<a href="https://github.com/11ty/11ty-website/issues/222">an issue is opened by Oliver</a>
to point out that the permalinks are still not accessible, because
they‚Äôre not keyboard focusable and don‚Äôt have an accessible name (issue
which gets a PR more than a year later <a href="https://github.com/11ty/11ty-website/pull/970">suggesting to add <code>aria-labelledby</code></a>).</p>
<p>He then <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/62">suggests</a>
that markdown-it-anchor include an option to add custom attributes to
the permalink, without having to write a custom renderer, and then
went on and <a href="https://github.com/valeriangalliat/markdown-it-anchor/pull/63">implemented the <code>permalinkAttrs</code> option</a>.
This allowed, for example, to configure a generic <code>aria-label</code> on the
permalink (e.g. ‚Äúheading permalink‚Äù), but we‚Äôll see later that this is
not an ideal solution either.</p>
<h2 id="the-hard-truth" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#the-hard-truth">The hard truth</a></h2>
<p>Exactly a year later, Binyamin brings back the <code>aria-hidden</code> topic,
explaining that <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/58#issuecomment-716849952">the default behaviour is still not accessible</a>,
because screen readers read out the permalink symbol instead of a
meaningful label.</p>
<p>He notes that GitHub (still) sets <code>aria-hidden=&quot;true&quot;</code> on the
permalinks, likely to suggest that we could do the same ‚Äî which would
bring us back to the original behaviour. üòú</p>
<p><em>Even though I didn‚Äôt answer then, it is while reading this notification
that I realized that the accessibility of permalinks was a complex
topic, and that it was going to be hard, if not impossible, to satisfy
everybody.</em></p>
<p>The question of accessible permalinks stayed in my mind, until‚Ä¶</p>
<h2 id="the-very-simple-solution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#the-very-simple-solution">The <em>very</em> simple solution</a></h2>
<p>About at the same time, my friend <a href="https://twitter.com/KittyGiraudel/">Kitty</a>,
is <a href="https://kittygiraudel.com/2020/11/30/from-jekyll-to-11ty/">switching from Jekyll to Eleventy</a>,
and finds my plugin while looking for a way to add <code>id</code>s to headings. üòé</p>
<p>Since one of Kitty‚Äôs area of expertise is accessibility, I was secretly
hoping that they enabled markdown-it-anchor permalinks, so that I could
learn from their implementation to make markdown-it-anchor‚Äôs default
permalinks more accessible.</p>
<p>But it turns out that Kitty <em>doesn‚Äôt use permalinks</em>, only header <code>id</code>s.</p>
<p>After trying to make permalinks accessible without luck, I started to
think that the best solution might be to <em>not</em> use them at all. With
just <code>id</code>s, you can already link to your own titles and build a table of
contents. More technical users can still inspect the page to find
the <code>id</code>s and use them as anchors.</p>
<p>Sometimes, the smartest way to implement a nonstandard feature, might be
to‚Ä¶ not?</p>
<h2 id="another-take-on-accessible-permalinks" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#another-take-on-accessible-permalinks">Another take on accessible permalinks</a></h2>
<p>Just two weeks later, <a href="https://twitter.com/ambrwlsn90">Amber</a> publishes
a post about <a href="https://amberwilson.co.uk/blog/are-your-anchor-links-accessible/">designing truly accessible anchor links</a>.</p>
<p>This is an awesome article that I highly recommend reading. Amber
explains the 5 iterations she went through to make accessible anchor
links on her own blog, including the details of her research.</p>
<p>But it‚Äôs 3 months later that I hear about it, when <a href="https://twitter.com/nhoizey">Nicolas</a>
opens an issue on the markdown-it-anchor repo, after also writing
<a href="https://nicolas-hoizey.com/articles/2021/02/25/accessible-anchor-links-with-markdown-it-and-eleventy/">a blog post on the subject</a>.</p>
<p>That was a lot of new information for me to unpack, but I was really
happy to see some updates on this topic which had long been an
unanswered question in my mind.</p>
<p>Sadly that solution was a bit more complex than what I hoped, in a way
that would <em>require</em> configuration from markdown-it-anchor‚Äôs
perspective, making it unsuitable as a default. While it‚Äôs one of the
best solutions from an accessibility point of view, the implementation
affects other aspects of the permalink and headings, including browsers
‚Äúreader mode‚Äù, RSS readers, <abbr title="Search engine result pages">SERP</abbr>,
and adds extra challenges about <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82#issuecomment-787204964">internationalization</a>.</p>
<p>Nicolas <a href="https://twitter.com/nhoizey/status/1366476887992729601">tweeted about this</a>
to gather more insights on the subject, which brought quite some
activity on the tweet as well as the GitHub issue, with high quality
suggestions from Kitty, Amber, as well as <a href="https://twitter.com/tunetheweb">Barry</a>
and <a href="https://twitter.com/7h1322yk0813n72">Thierry</a> who both dug in depth
on the alternative solution of turning headers themselves into links
(the style used by <a href="https://developer.mozilla.org/en-US/docs/Web">MDN</a> and <a href="https://almanac.httparchive.org/en/2020/table-of-contents">Web Almanac</a>). They also found creative
ways of making the markup of header links behave like the original
implementation, so be sure to check out the <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82#issuecomment-788268457">GitHub issue</a>
to find out about all of this!</p>
<h2 id="conclusion-0-no-one-solution-can-satisfy-all-users" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#conclusion-0-no-one-solution-can-satisfy-all-users">Conclusion #0: no one solution can satisfy all users</a></h2>
<p>This discussion made me realize that until there is a standard and
native way of implementing anchor links, no solution is going to satisfy
all users.</p>
<p>As we saw with the various accessibility issues opened on
markdown-it-anchor and Eleventy as we tweaked the markup in the past,
what one user will consider a fix will be a bug for another one. A
solution might meet one user needs, but at the cost of other aspects
that a different person will find important.</p>
<blockquote>
<p>There is no silver bullet, and you probably won‚Äôt even have a
consensus from screen reader users, especially when their experience
and habits vary based on their browser and assistive technology of
choice. What‚Äôs important is to come to a solution that makes it
possible for people to link to a specific title of an article, without
it being a chore.</p>
<p>‚Äî <a href="https://github.com/KittyGiraudel">Kitty Giraudel</a>, <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82#issuecomment-788234788">March 1, 2021</a></p>
</blockquote>
<p>Because of this, I switched my goal from finding a single bulletproof
solution, to <strong>giving more visibility to all the available solutions</strong>
that were identified and carefully analyzed, explaining their pros and
cons, <strong>so that markdown-it-anchor users can make an educated choice on
what suits their website and audience best</strong>.</p>
<h2 id="conclusion-1-no-default-is-better-than-a-bad-default" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#conclusion-1-no-default-is-better-than-a-bad-default">Conclusion #1: no default is better than a bad default</a></h2>
<p>The absolute default (and main purpose) of markdown-it-anchor is to
automatically add an <code>id</code> attribute on headings. Adding permalinks is an
<em>option</em>, and doesn‚Äôt <em>need</em> a default.</p>
<p>Since I realized that no single default would make everybody happy, and
it‚Äôs not essential to have one for this option anyway, I decided to
modify the API to require explicit configuration of the permalink
<em>behaviour</em> if it is going to be enabled.</p>
<p>This makes sure that the user reads about the existing options and their
tradeoffs, so they explicitly chose the one that makes the most sense to
them.</p>
<p>While utopically it would have been nice to make every
markdown-it-anchor user‚Äôs permalinks accessible with a <code>npm update</code>, we
don‚Äôt have a single solution that suits every use case and wouldn‚Äôt
break existing markup and styling, so this is not a realistic option.</p>
<h2 id="final-implementation" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#final-implementation">Final implementation</a></h2>
<p>I made a <a href="https://github.com/valeriangalliat/markdown-it-anchor/pull/89">pull request</a>
that deprecates the <code>permalink: true</code> way of using a default (poorly
accessible) renderer, and instead made the <code>permalink</code> option accept a
function to render the permalink (previously called <code>renderPermalink</code>).</p>
<p>Additionally, I provided a number of built-in renderers, documenting
their upsides and caveats. All of this can be found on the
<a href="https://github.com/valeriangalliat/markdown-it-anchor">project‚Äôs repo</a>,
and it‚Äôs part of the 8.0.0 release. Here‚Äôs an overview of what was
added.</p>
<h3 id="header-link" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#header-link">Header link</a></h3>
<pre><code class="hljs language-js">md.use(anchor, {
  <span class="hljs-attr">permalink</span>: anchor.permalink.headerLink()
})
</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-anchor&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#title&quot;</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
</code></pre>
<p>This was one of my favorite solutions that came out of the discussion,
because it‚Äôs the simplest one. You can see it used on the <a href="https://developer.mozilla.org/en-US/docs/Web">MDN</a> as well
as <a href="https://httparchive.org/reports/state-of-the-web">HTTP Archive</a> and their <a href="https://almanac.httparchive.org/en/2020/table-of-contents">Web Almanac</a>, and is the one I chose to use
on this blog as well.</p>
<p>The main problem with this kind of permalink is that you cannot include
links inside headers, since they‚Äôre already a link.</p>
<p>It‚Äôs also not as widespread as other patterns, which might confuse some
users, and it makes it harder to select parts of the header text (I only
learnt during that discussion that you can use <kbd>Option</kbd> (macOS)
or <kbd>Alt</kbd> to partially select any link text, so this is probably
not common knowledge) but you can use some
<a href="https://codepen.io/thierry/pen/qBqYmgw">tricks</a> to make that markup
look and feel like other more recognized implementations.</p>
<p>Keep in mind that this pattern currently
<a href="https://www.leereamsnyder.com/blog/making-headings-with-links-show-up-in-safari-reader">breaks reader mode in Safari</a>,
an issue you can also notice on the referenced websites above. This was
already <a href="https://bugs.webkit.org/show_bug.cgi?id=225609#c2">reported to Apple</a>
but their bug tracker is not public.</p>
<h3 id="link-after-header" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#link-after-header">Link after header</a></h3>
<pre><code class="hljs language-js">md.use(anchor, {
  <span class="hljs-attr">permalink</span>: anchor.permalink.linkAfterHeader({
    <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;visually-hidden&#x27;</span>,
    <span class="hljs-attr">assistiveText</span>: <span class="hljs-function"><span class="hljs-params">title</span> =&gt;</span> <span class="hljs-string">`Permalink to ‚Äú<span class="hljs-subst">${title}</span>‚Äù`</span>,
    <span class="hljs-attr">visuallyHiddenClass</span>: <span class="hljs-string">&#x27;visually-hidden&#x27;</span>
  })
})
</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-anchor&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#title&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;visually-hidden&quot;</span>&gt;</span>Permalink to ‚ÄúTitle‚Äù<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
</code></pre>
<p>This is the solution proposed by Amber and Nicolas, and backed by Kitty.
It‚Äôs the one that arguably provides the clearest experience in screen
readers.</p>
<p>Note that making sure that the assistive text contains the title is
important here:</p>
<blockquote>
<p>Regarding anchor link text, you can‚Äôt use just ‚ÄúLink to this section‚Äù
because screen reader users often ask for the list of links in the
page (they also ask for the list of headings), and they would get
multiple times the same ‚ÄúLink to this section‚Äù.</p>
<p>‚Äî <a href="https://github.com/nhoizey">Nicolas Hoizey</a>, <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82#issuecomment-788222895">March 1, 2021</a></p>
</blockquote>
<p>The downsides are that it requires a bit more effort to style and
localize, causes the visually hidden text to show in SERP and RSS
readers, and adds extra padding below headers in reader mode. Not bad,
considering.</p>
<h3 id="aria-hidden" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#aria-hidden">ARIA hidden</a></h3>
<pre><code class="hljs language-js">md.use(anchor, {
  <span class="hljs-attr">permalink</span>: anchor.permalink.ariaHidden({
    <span class="hljs-attr">placement</span>: <span class="hljs-string">&#x27;before&#x27;</span>
  })
})
</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-anchor&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#title&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
  Title
<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
</code></pre>
<p>Finally, this is the GitHub inspired way of implementing permalinks, and
legacy default of markdown-it-anchor. It needs little to no extra
styling and behaves in the way most users will expect out of the box,
but it‚Äôs explicitly made <em>inaccessible</em>.</p>
<p>This might or might not be an issue for you, but it‚Äôs definitely worth
thinking about, and considering the options above instead.</p>
<h2 id="try-it-with-a-screen-reader-yourself" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#try-it-with-a-screen-reader-yourself">Try it with a screen reader yourself!</a></h2>
<p>Are you wondering if the experience on your website is accessible to
screen reader users? Reading about accessibility is great, but nothing
can teach you as much as actually using a screen reader.</p>
<p>This was much easier than I expected, at least on macOS. The system
ships with VoiceOver, which you can turn on by pressing
<kbd>Command</kbd> + <kbd>F5</kbd>. I recommend using it in
Safari as I‚Äôve found the behaviour to be more quirky in other browsers.</p>
<p>We saw earlier that ‚Äúscreen reader users often ask for the list of
links in the page‚Äù, as well as the list of headings.</p>
<blockquote>
<p>According to <a href="https://webaim.org/projects/screenreadersurvey5/#finding">a WebAim survey from 2014</a>,
two-thirds of screen reader users scan headings as the first step of
trying to find information on a long web page, so this should stay
clean and intact above all.</p>
<p>‚Äî <a href="https://github.com/KittyGiraudel">Kitty Giraudel</a>, <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82#issuecomment-788234788">March 1, 2021</a></p>
</blockquote>
<p>In VoiceOver, you can open the ‚Äúrotor‚Äù by pressing
<a href="https://support.apple.com/en-ca/guide/voiceover/unac048/mac"><kbd>Caps Lock</kbd></a> + <kbd>U</kbd>,
which allows you to list all the links and headings of the page. You
can browse through the lists by using the arrow keys. Make sure that
those are usable on your website!</p>
<h2 id="final-word" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/you-re-probably-doing-anchor-links-wrong.html#final-word">Final word</a></h2>
<p>As a newbie to the topic of accessibility, it was wonderful getting to
learn from many knowledgeable peers who documented that aspect of anchor
links, and contributed to the discussion in <a href="https://github.com/valeriangalliat/markdown-it-anchor/issues/82">markdown-it-anchor‚Äôs
related issue</a> and on Twitter.</p>
<p>Shoutout to <a href="https://twitter.com/ambrwlsn90">Amber</a>,
<a href="https://twitter.com/nhoizey">Nicolas</a>,
<a href="https://twitter.com/KittyGiraudel/">Kitty</a>,
<a href="https://twitter.com/tunetheweb">Barry</a> and
<a href="https://twitter.com/7h1322yk0813n72">Thierry</a> for taking the time to
research this issue and sharing their findings!</p>
<p>Finally, if I said anything wrong or inaccurate in this post, please
<a href="https://www.codejam.info/val.html#links">let me know</a>, I‚Äôll be more than happy to fix mistakes
and integrate improvements!</p>
]]></content>
  </entry>
  <entry>
    <title>My custom Premiere Pro export presets</title>
    <link href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html" />
    <id>https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html</id>
    <updated>2021-06-14T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>I‚Äôm publishing videos mainly to YouTube and Instagram. While Premiere
comes with exports presets for YouTube out of the box, they don‚Äôt have
any for Instagram. Also it turns out that even for YouTube, my main
publishing format is not part of the default YouTube presets. Let‚Äôs dig
into it!</p>
<h2 id="youtube-1440p-2k-quad-hd" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#youtube-1440p-2k-quad-hd">YouTube 1440p 2K Quad HD</a></h2>
<p>Based on the ‚ÄúYouTube 2160p 4K Ultra HD‚Äù preset, this presets fills the
gap between 1080p and 4K by allowing you to export a 1440p 2K video for
YouTube.</p>
<p>I like to export in 2K because it allows me to
<a href="https://www.codejam.info/2021/03/getting-the-highest-video-quality-on-youtube.html">get a higher video quality on YouTube</a>
by forcing the VP9 codec instead of AVC, even when viewed in 1080p.</p>
<p>Also, with my source footage being 4K, 1440p still allows me a decent
cropping margin without loosing quality, and otherwise gets me that
extra crispness you get when downscaling 4K footage.</p>
<p>To make that preset:</p>
<table>
<thead>
<tr>
<th>Section</th>
<th>Setting</th>
<th>Value</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>Export Settings</td>
<td>Preset</td>
<td>YouTube 2160p 4K Ultra HD</td>
<td>Base preset</td>
</tr>
<tr>
<td>Basic Video Settings</td>
<td>Width</td>
<td>2560</td>
<td></td>
</tr>
<tr>
<td>Basic Video Settings</td>
<td>Height</td>
<td>1440</td>
<td></td>
</tr>
<tr>
<td>Encoding Settings</td>
<td>Level</td>
<td>5.1</td>
<td>Instead of 5.2</td>
</tr>
<tr>
<td>Bitrate Settings</td>
<td>Target Bitrate</td>
<td>20</td>
<td>Instead of 40</td>
</tr>
<tr>
<td>Bitrate Settings</td>
<td>Maximum Bitrate</td>
<td>20</td>
<td>Instead of 40</td>
</tr>
</tbody>
</table>
<h3 id="why-set-the-level-to-5-1" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#why-set-the-level-to-5-1">Why set the level to 5.1?</a></h3>
<p>The main reason is that when I first created this preset, Premiere
actually defaulted the 4K preset to 5.1 as well, so I kept it the same.</p>
<p>When a Premiere upgrade changed the 4K preset to 5.2, I then asked
myself whether I should mirror the Premiere update or keep 5.1 for my
2K preset.</p>
<p>This forced me to learn a bit about H.264 levels first. Basically,
a level define the maximum values for a number of encoding properties
like bitrate, buffer size, macroblocks, luma settings and more. You can
read more about that on <a href="https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding_tiers_and_levels">Wikipedia</a>,
<a href="http://help.encoding.com/knowledge-base/article/do-you-have-any-information-on-h-264-levels/">Encoding.com</a>
and <a href="http://blog.mediacoderhq.com/h264-profiles-and-levels/">MediaCoder</a>.</p>
<p>For 2K and even 4K (unless it‚Äôs 60 FPS or more), a level of 5.1 is way
enough. While YouTube doesn‚Äôt give profile recommendations on their
<a href="https://support.google.com/youtube/answer/1722171">recommended upload settings</a>,
they do so on their <a href="https://support.google.com/youtube/answer/2853702">live encoder settings</a>:</p>
<ul>
<li>H.264, 4.1 for up to 1080p 30 FPS,</li>
<li>H.264, 4.2 for 1080p 60 FPS,</li>
<li>H.264, 5.0 for 1440p 30 FPS,</li>
<li>H.264, 5.1 for 1440p 60 FPS,</li>
<li>H.264, 5.1 for 2160p 30 FPS,</li>
<li>H.264, 5.2 for 2160p 60 FPS.</li>
</ul>
<p>I usually export 24 FPS video, so I could even safely go down to 5.0,
but I don‚Äôt want my preset to be limited to 30 FPS or lower.</p>
<p>The reason Premiere bumped the 4K preset from 5.1 to 5.2 is likely to
support 4K 60 FPS exports out of the box, because there‚Äôs only one
preset regardless of the frame rate.</p>
<p>For the same reason, I‚Äôll leave 5.1 for my 2K preset; it‚Äôs just high
enough to support 2K 60 FPS.</p>
<h3 id="why-a-bitrate-of-20-specifically" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#why-a-bitrate-of-20-specifically">Why a bitrate of 20 specifically?</a></h3>
<p>Premiere defaults to a bitrate of 16 Mbps for 1080p and 40 Mbps for 4K.
I‚Äôm looking for something in between.</p>
<p>Technically, 1440p is 1.33 times 1080p and 2160p is 1.5 times 1440p (and
2 times 1080p).</p>
<p>Based on that, I could define a bitrate of 1.33 √ó 16 = 21.28 Mbps, or 1
√∑ 1.5 √ó 40 = 26.66 Mbps.</p>
<p>Since I expect those videos to be watched mostly in 1080p, I round
down the bitrate to 20 and call it a day. This allows me to force the
1440p VP9 encoder on YouTube while keeping a file size that‚Äôs nearly as
small as a 1080p export would be.</p>
<p>To put this in context, we can also look at <a href="https://support.google.com/youtube/answer/1722171">YouTube‚Äôs recommended upload settings</a>:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Video bitrate (24, 25, 30 FPS)</th>
<th>Video bitrate (48, 50, 60 FPS)</th>
</tr>
</thead>
<tbody>
<tr>
<td>2160p (4K)</td>
<td>35‚Äì45 Mbps</td>
<td>53‚Äì68 Mbps</td>
</tr>
<tr>
<td>1440p (2K)</td>
<td>16 Mbps</td>
<td>24 Mbps</td>
</tr>
<tr>
<td>1080p</td>
<td>8 Mbps</td>
<td>12 Mbps</td>
</tr>
</tbody>
</table>
<p>We can see that Premiere‚Äôs default 4K bitrate of 40 Mbps is just in the
middle of the recommended range by YouTube for standard frame rates, but
is probably too low if you were to export a high frame rate video.</p>
<p>Contrarily, Premiere‚Äôs default 1080p bitrate of 16 Mbps is double what
YouTube themselves recommend for standard frame rates, and even higher
than the high frame rate recommendation.</p>
<p>Finally, my 2K preset bitrate of 20 Mbps is right in the middle of what
YouTube recommends between standard and high frame rates, making this a
somewhat versatile preset.</p>
<h3 id="a-note-about-1-vs-2-pass-vbr" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#a-note-about-1-vs-2-pass-vbr">A note about 1 vs. 2 pass <abbr title="Variable bitrate">VBR</abbr></a></h3>
<p>In ‚ÄúBitrate Settings‚Äù, we also have an encoding option letting us choose
from CBR, 1 pass VBR and 2 pass VBR. CBR stands for constant bitrate,
and VBR for variable bitrate.</p>
<p>Premiere defaults its YouTube presets to 1 pass VBR.</p>
<p>When rendering the video, the VBR encoder supports a 2 pass process
where it first analyses the whole video so that
<a href="https://www.quora.com/How-big-is-the-difference-between-VBR-1-pass-and-VBR-2-pass-in-terms-of-quality-when-encoding-a-video">it can be more efficient</a>
at actually encoding it in the second pass, resulting in a smaller file
size for a similar quality, or a higher quality for a similar file size
(in case of Premiere where we fix a target and maximum bitrate). The
downside is that rendering takes nearly twice as long.</p>
<p>Spending double the time for roughly a 30% increase in quality is a
tradeoff you‚Äôll have to do for yourself, but as far as I‚Äôm concerned,
Premiere takes already long enough to encode that I‚Äôm not willing to
make it even worse.</p>
<h2 id="instagram" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#instagram">Instagram</a></h2>
<p>On to the Instagram presets!</p>
<p>I based all of my Instagram presets off Premiere‚Äôs YouTube 1080p preset,
meaning we‚Äôre rendering with H.264 level 4.2, and a bitrate (both target
and maximum) of 16 Mbps. To reuse the previous preset table:</p>
<table>
<thead>
<tr>
<th>Section</th>
<th>Setting</th>
<th>Value</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>Export Settings</td>
<td>Preset</td>
<td>YouTube 1080p Full HD</td>
<td>Base preset</td>
</tr>
<tr>
<td>Encoding Settings</td>
<td>Level</td>
<td>4.2</td>
<td>Default for preset</td>
</tr>
<tr>
<td>Bitrate Settings</td>
<td>Target Bitrate</td>
<td>16</td>
<td>Default for preset</td>
</tr>
<tr>
<td>Bitrate Settings</td>
<td>Maximum Bitrate</td>
<td>16</td>
<td>Default for preset</td>
</tr>
</tbody>
</table>
<p>Aside from that, my 4 Instagram presets only differ in the resolution.</p>
<h3 id="resolution-and-aspect-ratio" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#resolution-and-aspect-ratio">Resolution and aspect ratio</a></h3>
<p>While there‚Äôs many websites giving settings when searching ‚ÄúInstagram
video resolution‚Äù or ‚ÄúInstagram video specification‚Äù, the only resource
I‚Äôve found from Instagram themselves is on
<a href="https://help.instagram.com/1631821640426723">their help center</a>.</p>
<p>They recommend an aspect ratio between 1.91:1 and 4:5, with a width of
1080 pixels, meaning that the height will vary between 566 and 1350
pixels.</p>
<p>I derived 4 presets out of that:</p>
<table>
<thead>
<tr>
<th>Preset</th>
<th>Resolution</th>
</tr>
</thead>
<tbody>
<tr>
<td>Square</td>
<td>1080x1080</td>
</tr>
<tr>
<td>Portrait</td>
<td>1080x1350</td>
</tr>
<tr>
<td>Landscape</td>
<td>1080x608</td>
</tr>
<tr>
<td>Story</td>
<td>1080x1920</td>
</tr>
</tbody>
</table>
<p>Here, the landscape one could be even wider if I wanted to, but most of
my content is shot in 16:9 so I‚Äôll keep it that way.</p>
<h3 id="a-note-about-bitrate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#a-note-about-bitrate">A note about bitrate</a></h3>
<p>For the bitrate, I didn‚Äôt find any official Instagram recommendation,
but various websites recommend 3.5 Kbps, and this matches what the app
does when recoding the video before upload (you can see that by saving
the post or story to camera roll and inspecting the file).</p>
<p>This makes the 16 Mbps of my presets sound a bit overkill, but I‚Äôd
rather provide a top quality video to the app and let it recode it.</p>
<p>There is no evidence that Instagram would skip the recoding process if
we provide a compressed-enough video, so if recoding is going to happen
either way, I‚Äôd rather provide a top quality input to get the best
result.</p>
<div class="note">
<p><strong>Sidenote:</strong> inspecting the Instagram recoded video also shows that
they resize the video to a width of 720 pixels, preserving the aspect
ratio and frame rate. So even though they allow a maximum width of 1080
pixels, they seem to conform videos to a width of 720 pixels on their
side.</p>
</div>
<h3 id="a-note-about-distribution" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#a-note-about-distribution">A note about distribution</a></h3>
<p>As far as distribution is concerned, at least from desktop, they serve
videos with a width of 640 pixels, a bitrate of 1 Mbps, and conform the
frame rate to 30 FPS (which matches their
<a href="https://help.instagram.com/1038071743007909">requirement for IGTV of minimum 30 FPS</a>, even
though they don‚Äôt give any information about timeline videos otherwise).</p>
<h3 id="a-note-about-frame-rate" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#a-note-about-frame-rate">A note about frame rate</a></h3>
<p>Even though Instagram appears to conform videos to 30 FPS upon serving,
I still keep my timeline FPS settings in my export file, and let the
conversion up to Instagram.</p>
<p>Most of the time for me, it means I stick to 24 FPS.</p>
<p>As noted above, the version Instagram processes on the device prior to
uploading preserves the original frame rate, so this might be a sign
that they conserve the video with the original frame rate on their
servers, potentially allowing 24 FPS distribution at some point in the
future.</p>
<h3 id="a-note-about-video-length" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#a-note-about-video-length">A note about video length</a></h3>
<p>Videos in Instagram posts are limited to one minute, but to be very
precise, on a 24 FPS timeline, it turned out to be 59 seconds and 21
frames. A single more frame and Instagram will prompt you to publish the
video on IGTV instead.</p>
<p>Also stories are limited to 15 seconds, and on a 24 FPS timeline, they
allow up to a length of 15 seconds and 10 frames, otherwise they will
start splitting the story.</p>
<h3 id="final-word" tabindex="-1"><a class="header-anchor" href="https://www.codejam.info/2021/06/my-custom-premiere-pro-export-presets.html#final-word">Final word</a></h3>
<p>At that point, you have all the information you need to recreate those
presets on your side, and you know precisely why each setting was
chosen.</p>
<p>Don‚Äôt forget in Premiere once you customize your export settings, you
can save the preset to easily use it in other projects!</p>
]]></content>
  </entry>
</feed>
