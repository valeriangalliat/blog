#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const mdit = require('markdown-it')
const escape = require('escape-html')
const slugify = require('@sindresorhus/slugify')

const baseUrl = 'https://www.codejam.info/'
const meta = {}

const file = process.argv[2]
const head = fs.readFileSync(path.resolve(__dirname, '../head.html'), 'utf8')
const foot = fs.readFileSync(path.resolve(__dirname, '../foot.html'), 'utf8')
const markdown = fs.readFileSync(file, 'utf8')
const env = {}
const bodyClass = file.match(/^\d{4}\//) ? 'post' : 'page'

const md = mdit({
  html: true,
  typographer: true
})

md.use(require('markdown-it-front-matter'), metaString => {
  for (const line of metaString.split('\n')) {
    const [key, value] = line.split(': ')
    meta[key] = value
  }
})

md.use(require('markdown-it-anchor'), {
  level: 2, // Do not permalink `<h1>`.
  slugify: slug => slugify(slug, { decamelize: false }),
  permalink: require('markdown-it-anchor').permalink.headerLink()
})

md.use(require('markdown-it-deflist'))
md.use(require('markdown-it-footnote'))
md.use(require('markdown-it-highlightjs'), { auto: false })
md.use(require('markdown-it-title'), { excerpt: 3 })
md.use(require('markdown-it-attr-typographer'), { html: true })

// Rewrite local Markdown links to HTML.
md.core.ruler.push('markdownLinkRewrite', state => {
  for (const blockToken of state.tokens) {
    if (blockToken.type !== 'inline') {
      continue
    }

    for (const token of blockToken.children) {
      if (token.type !== 'link_open') {
        continue
      }

      const href = token.attrGet('href')

      if (href.includes('://')) {
        continue
      }

      token.attrSet('href', href.replace(/\.md(#|$)/, '.html$1'))
    }
  }
})

md.core.ruler.push('paragraphsAfterTitle', state => {
  let h1
  let index

  for (const [i, token] of state.tokens.entries()) {
    if (!token.map) { continue }
    if (token.tag === 'h1') { h1 = token; continue }
    if (!h1) { continue }
    if (token.map[0] > h1.map[1]) { break }
    if (token.tag === 'p') { index = i; break }
  }

  if (!index) {
    state.tokens.splice(state.tokens.indexOf(h1) + 3, 0, new state.Token('hr', 'hr', 0))
    state.env.paragraphsAfterTitle = 0
    return
  }

  const pOpen = state.tokens[index]
  const inline = state.tokens[index + 1]
  const paragraphs = [[]]

  for (const child of inline.children) {
    if (child.tag === 'br') {
      paragraphs.unshift([])
      continue
    }

    paragraphs[0].push(child)
  }

  paragraphs.reverse()

  const classes = ['tagline', 'date']

  if (bodyClass === 'post' && paragraphs.length === 1) {
    classes.shift()
  }

  pOpen.attrSet('class', classes.shift())
  inline.children = paragraphs[0]

  const newTokens = []

  for (const children of paragraphs.slice(1)) {
    newTokens.push(
      Object.assign(new state.Token('paragraph_open', 'p', 1), { attrs: [['class', classes.shift()]] }),
      Object.assign(new state.Token('inline', '', 0), { children }),
      new state.Token('paragraph_close', 'p', -1)
    )
  }

  // Add a marker that is always there and will be removed during the split below.
  newTokens.push(new state.Token('hr', 'hr', 0))

  state.tokens.splice(index + 3, 0, ...newTokens)

  // Keep track for finding excerpt.
  state.env.paragraphsAfterTitle = paragraphs.length
})

const html = md.render(markdown, env)
const markerIndex = html.indexOf('<hr>')
const header = html.slice(0, markerIndex).trim().replace(/<h1>([^<]*) <small>/, '<h1 class="has-subtitle"><span>$1</span> <small>')
const body = html.slice(markerIndex + '<hr>'.length).trim()

let metaTags = `  <meta property="og:title" content="${escape(env.title)}">\n`

if (meta.excerpt) {
  metaTags += `  <meta property="og:description" content="${escape(md.typographer(meta.excerpt))}">\n`
} else if (env.excerpt) {
  const tagline = env.excerpt.slice(0, env.paragraphsAfterTitle).filter(text => !text.match(/, 20\d\d$/))[0]
  const excerpt = env.excerpt.slice(env.paragraphsAfterTitle)[0]
  const description = (tagline ? `${tagline}.`.replace(/\.\.?$/, '. ') : '') + excerpt
  metaTags += `  <meta property="og:description" content="${escape(description)}">\n`
}

const image = meta.image || meta.hero

if (image) {
  const absoluteImage = new URL(image, `${baseUrl}${file}`).href

  metaTags += `  <meta property="og:image" content="${escape(absoluteImage)}">\n`
} else {
  metaTags += `  <meta property="og:image" content="${escape(`${baseUrl}img/profile.jpg`)}">\n`
}

metaTags += `  <meta name="twitter:card" content="${image ? 'summary_large_image' : 'summary'}">
  <meta name="twitter:site" content="@valeriangalliat">
  <meta name="twitter:creator" content="@valeriangalliat">
`

let hero = '<header>'
let heroCredit = '</header>'

if (meta.hero) {
  const focus = meta.focus ? `; background-position: ${meta.focus}` : ''
  hero = `<header class="hero" style="background-image: url(${meta.hero})${focus}">`
}

if (meta.heroCredit) {
  heroCredit = `  <a class="hero-credit" href="${escape(meta.heroCreditUrl)}">Picture credit: ${meta.heroCredit}</a>\n  </header>`
}

let lang = ''

if (meta.lang) {
  lang = ` lang="${meta.lang}"`
}

process.stdout.write(
  head
    .replace('<title>', `<title>${escape(env.title)}`)
    .replace('</head>', `${metaTags}</head>`)
    .replace('<body>', `<body class="${bodyClass}">`)
    .replace('<header>', hero)
    .replace('</header>', heroCredit)
    .replace('<div class="content">', `<div class="content">\n${header}`)
    .replace(/<div class="content">/g, `<div class="content"${lang}>`)
)

process.stdout.write(body)
process.stdout.write('\n')

process.stdout.write(
  foot
    .replace('https://github.com/valeriangalliat/blog', `https://github.com/valeriangalliat/blog/tree/master/${file}`)
)
