#!/usr/bin/env node

const fs = require('fs')
const readline = require('readline')
const escape = require('escape-html')

function absolufy (base, html) {
  return html.replace(/(href|src)="([^"]*)"/g, (match, attr, path) => {
    if (path.startsWith('https://') || path.startsWith('http://')) {
      return match
    }

    return `${attr}="${escape(new URL(path, base))}"`
  })
}

async function * parsePostImpl (line) {
  const path = line.split('"')[1]

  let url = path
  let isExternal = true

  if (!path.startsWith('https://')) {
    url = `https://www.codejam.info/${path}`
    isExternal = false
  }

  const title = line.split('</a>')[0].replace(/<[^>]*>/g, '').trim()
  const prettyDate = line.split('<small>')[1].split('</small>')[0]
  const date = new Date(prettyDate).toISOString()

  yield '  <entry>\n'
  yield `    <title>${title}</title>\n`
  yield `    <link href="${url}" />\n`
  yield `    <id>${url}</id>\n`
  yield `    <updated>${date}</updated>\n`

  if (isExternal) {
    yield '  </entry>\n'
    return
  }

  const html = await fs.promises.readFile(`dist/${path}`, 'utf8')

  const content = html
    .split(/<\/header>\s*<div class="content">\s*/)[1]
    .split(/\s*<\/div>\s*<footer>/)[0]

  yield '    <content type="html"><![CDATA['
  yield absolufy(url, content)
  yield '\n]]></content>\n'
  yield '  </entry>\n'
}

async function parsePost (input) {
  const lines = []

  for await (const line of parsePostImpl(input)) {
    lines.push(line)
  }

  return lines.join('')
}

async function main () {
  const date = new Date().toISOString()
  const feed = await fs.promises.readFile('feed.xml', 'utf8')
  const rl = readline.createInterface({ input: fs.createReadStream('dist/posts.html') })
  const latestPostsPromises = []

  for await (const line of rl) {
    if (line.startsWith('<li><a href=')) {
      latestPostsPromises.push(parsePost(line))
    }

    if (latestPostsPromises.length >= 20) {
      break
    }
  }

  const latestPosts = await Promise.all(latestPostsPromises)
  const entries = latestPosts.join('')

  process.stdout.write(
    feed
      .replace('<updated />', `<updated>${date}</updated>`)
      // Use callback to avoid `$&` and such to be interpreted.
      .replace('</feed>', match => `${entries}${match}`)
  )
}

main()
