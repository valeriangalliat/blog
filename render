#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const mdit = require('markdown-it')
const slugify = require('@sindresorhus/slugify')

const md = mdit({
  html: true,
  typographer: true
})

const meta = {}

md.use(require('markdown-it-front-matter'), metaString => {
  for (const line of metaString.split('\n')) {
    const [key, value] = line.split(': ')
    meta[key] = value
  }
})

md.use(require('markdown-it-anchor'), {
  level: 2, // Do not permalink `<h1>`.
  slugify: slug => slugify(slug, { decamelize: false }),
  permalink: require('markdown-it-anchor').permalink.headerLink()
})

md.use(require('markdown-it-deflist'))
md.use(require('markdown-it-footnote'))
md.use(require('markdown-it-highlightjs'), { auto: false })
md.use(require('markdown-it-title'))

const file = process.argv[2]
const head = fs.readFileSync(path.resolve(__dirname, 'head.html'), 'utf8')
const foot = fs.readFileSync(path.resolve(__dirname, 'foot.html'), 'utf8')
const markdown = fs.readFileSync(file, 'utf8')
const env = {}
const bodyClass = file.match(/^\d{4}\//) ? 'post' : 'page'
const lines = md.render(markdown, env).replace(/\.md(["#])/g, '.html$1').trim().split('\n')
const slice = bodyClass === 'post' ? 2 : 1
const header = lines.slice(0, slice).join('\n').replace(/<h1>([^<]*)<small>/, '<h1 class="has-subtitle"><span>$1</span><small>')
const body = lines.slice(slice).join('\n')

let hero = '<header>'

if (meta.hero) {
  const focus = meta.focus ? ` background-position: ${meta.focus};` : ''
  hero = `<header class="hero" style="background-image: url(${meta.hero});${focus}">`
}

process.stdout.write(
  head
    .replace('<title>', `<title>${env.title}`)
    .replace(/<body>/, `<body class="${bodyClass}">`)
    .replace(/<header>/, hero)
    .replace(/<div class="content">/, `<div class="content">\n${header}`)
)

process.stdout.write(body)
process.stdout.write('\n')

process.stdout.write(
  foot
    .replace('https://github.com/valeriangalliat/blog', `https://github.com/valeriangalliat/blog/tree/master/${file}`)
)
